
Bidirectional_Energymeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a194  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  0800a2a8  0800a2a8  0001a2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab28  0800ab28  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab28  0800ab28  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab28  0800ab28  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab28  0800ab28  0001ab28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ab30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001e8  0800ad18  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800ad18  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c623  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd6  00000000  00000000  0002c834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002e810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d48  00000000  00000000  0002fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d208  00000000  00000000  00048b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba70  00000000  00000000  00055d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004604  00000000  00000000  000e17d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a28c 	.word	0x0800a28c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a28c 	.word	0x0800a28c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	460c      	mov	r4, r1
 8001114:	4605      	mov	r5, r0
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	2200      	movs	r2, #0
 800111c:	2300      	movs	r3, #0
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 030c 	orr.w	r3, r3, #12
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	f043 030c 	orr.w	r3, r3, #12
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	214e      	movs	r1, #78	; 0x4e
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <lcd_send_cmd+0x5c>)
 80011ce:	f002 f9c3 	bl	8003558 <HAL_I2C_Master_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000358 	.word	0x20000358

080011e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 030d 	orr.w	r3, r3, #13
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0309 	orr.w	r3, r3, #9
 8001208:	b2db      	uxtb	r3, r3
 800120a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	f043 030d 	orr.w	r3, r3, #13
 8001212:	b2db      	uxtb	r3, r3
 8001214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f043 0309 	orr.w	r3, r3, #9
 800121c:	b2db      	uxtb	r3, r3
 800121e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	214e      	movs	r1, #78	; 0x4e
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <lcd_send_data+0x5c>)
 800122e:	f002 f993 	bl	8003558 <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000358 	.word	0x20000358

08001240 <lcd_clear>:

void lcd_clear (void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff9a 	bl	8001180 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	e005      	b.n	800125e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001252:	2020      	movs	r0, #32
 8001254:	f7ff ffc4 	bl	80011e0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3301      	adds	r3, #1
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b63      	cmp	r3, #99	; 0x63
 8001262:	ddf6      	ble.n	8001252 <lcd_clear+0x12>
	}
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <lcd_init>:

void lcd_init (void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f001 fa4e 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001278:	2030      	movs	r0, #48	; 0x30
 800127a:	f7ff ff81 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800127e:	2005      	movs	r0, #5
 8001280:	f001 fa48 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001284:	2030      	movs	r0, #48	; 0x30
 8001286:	f7ff ff7b 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800128a:	2001      	movs	r0, #1
 800128c:	f001 fa42 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001290:	2030      	movs	r0, #48	; 0x30
 8001292:	f7ff ff75 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 8001296:	200a      	movs	r0, #10
 8001298:	f001 fa3c 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800129c:	2020      	movs	r0, #32
 800129e:	f7ff ff6f 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f001 fa36 	bl	8002714 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012a8:	2028      	movs	r0, #40	; 0x28
 80012aa:	f7ff ff69 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f001 fa30 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80012b4:	2008      	movs	r0, #8
 80012b6:	f7ff ff63 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f001 fa2a 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff ff5d 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f001 fa24 	bl	8002714 <HAL_Delay>
	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 fa21 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012d2:	2006      	movs	r0, #6
 80012d4:	f7ff ff54 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f001 fa1b 	bl	8002714 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012de:	200c      	movs	r0, #12
 80012e0:	f7ff ff4e 	bl	8001180 <lcd_send_cmd>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012f0:	e006      	b.n	8001300 <lcd_send_string+0x18>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff70 	bl	80011e0 <lcd_send_data>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f4      	bne.n	80012f2 <lcd_send_string+0xa>
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <DWT_Init+0x24>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <DWT_Init+0x24>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001322:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <DWT_Init+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <DWT_Init+0x28>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	e000edf0 	.word	0xe000edf0
 800133c:	e0001000 	.word	0xe0001000

08001340 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <micros+0x20>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <micros+0x24>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <micros+0x28>)
 800134e:	fba1 1303 	umull	r1, r3, r1, r3
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	e0001000 	.word	0xe0001000
 8001364:	20000004 	.word	0x20000004
 8001368:	431bde83 	.word	0x431bde83

0800136c <acs712_calibrate>:
int zero_acs = 0;
int zero_zmpt = 0;
float Arus_rms = 0;
int32_t Inow;
int32_t Vnow;
int acs712_calibrate(){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
	uint16_t acc = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 10; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	e029      	b.n	80013d0 <acs712_calibrate+0x64>
		HAL_ADC_Start(&hadc2);
 800137c:	481c      	ldr	r0, [pc, #112]	; (80013f0 <acs712_calibrate+0x84>)
 800137e:	f001 fac5 	bl	800290c <HAL_ADC_Start>
		while (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) != SET){;}
 8001382:	bf00      	nop
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <acs712_calibrate+0x84>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b02      	cmp	r3, #2
 8001390:	d1f8      	bne.n	8001384 <acs712_calibrate+0x18>
		HAL_ADC_Stop(&hadc2);
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <acs712_calibrate+0x84>)
 8001394:	f001 fb68 	bl	8002a68 <HAL_ADC_Stop>
		acc += HAL_ADC_GetValue(&hadc2);
 8001398:	4815      	ldr	r0, [pc, #84]	; (80013f0 <acs712_calibrate+0x84>)
 800139a:	f001 fb91 	bl	8002ac0 <HAL_ADC_GetValue>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	4413      	add	r3, r2
 80013a6:	81fb      	strh	r3, [r7, #14]

		ukuranstring = sprintf((char*)buff_s, "%d ADC \r\n", acc);
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4911      	ldr	r1, [pc, #68]	; (80013f4 <acs712_calibrate+0x88>)
 80013ae:	4812      	ldr	r0, [pc, #72]	; (80013f8 <acs712_calibrate+0x8c>)
 80013b0:	f004 f908 	bl	80055c4 <siprintf>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <acs712_calibrate+0x90>)
 80013ba:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <acs712_calibrate+0x90>)
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <acs712_calibrate+0x8c>)
 80013c4:	480e      	ldr	r0, [pc, #56]	; (8001400 <acs712_calibrate+0x94>)
 80013c6:	f003 f8ea 	bl	800459e <HAL_UART_Transmit>
	for (int i = 0; i < 10; i++) {
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3301      	adds	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b09      	cmp	r3, #9
 80013d4:	ddd2      	ble.n	800137c <acs712_calibrate+0x10>
	}
	int zero = acc / 10;
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <acs712_calibrate+0x98>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	08db      	lsrs	r3, r3, #3
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	607b      	str	r3, [r7, #4]
	return zero;
 80013e4:	687b      	ldr	r3, [r7, #4]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000328 	.word	0x20000328
 80013f4:	0800a2a8 	.word	0x0800a2a8
 80013f8:	20000260 	.word	0x20000260
 80013fc:	2000042c 	.word	0x2000042c
 8001400:	200003dc 	.word	0x200003dc
 8001404:	cccccccd 	.word	0xcccccccd

08001408 <Zmpt_calibrate>:
int Zmpt_calibrate(){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
	uint16_t vcc = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 10; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	e029      	b.n	800146c <Zmpt_calibrate+0x64>
		HAL_ADC_Start(&hadc1);
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <Zmpt_calibrate+0x84>)
 800141a:	f001 fa77 	bl	800290c <HAL_ADC_Start>
		while (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != SET){;}
 800141e:	bf00      	nop
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <Zmpt_calibrate+0x84>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b02      	cmp	r3, #2
 800142c:	d1f8      	bne.n	8001420 <Zmpt_calibrate+0x18>
		HAL_ADC_Stop(&hadc1);
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <Zmpt_calibrate+0x84>)
 8001430:	f001 fb1a 	bl	8002a68 <HAL_ADC_Stop>
		vcc += HAL_ADC_GetValue(&hadc1);
 8001434:	4815      	ldr	r0, [pc, #84]	; (800148c <Zmpt_calibrate+0x84>)
 8001436:	f001 fb43 	bl	8002ac0 <HAL_ADC_GetValue>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	4413      	add	r3, r2
 8001442:	81fb      	strh	r3, [r7, #14]

		ukuranstring = sprintf((char*)buff_s, "%d ADC \r\n", vcc);
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	461a      	mov	r2, r3
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <Zmpt_calibrate+0x88>)
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <Zmpt_calibrate+0x8c>)
 800144c:	f004 f8ba 	bl	80055c4 <siprintf>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <Zmpt_calibrate+0x90>)
 8001456:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <Zmpt_calibrate+0x90>)
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <Zmpt_calibrate+0x8c>)
 8001460:	480e      	ldr	r0, [pc, #56]	; (800149c <Zmpt_calibrate+0x94>)
 8001462:	f003 f89c 	bl	800459e <HAL_UART_Transmit>
	for (int i = 0; i < 10; i++) {
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3301      	adds	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b09      	cmp	r3, #9
 8001470:	ddd2      	ble.n	8001418 <Zmpt_calibrate+0x10>
	}
	int zero = vcc / 10;
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <Zmpt_calibrate+0x98>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	b29b      	uxth	r3, r3
 800147e:	607b      	str	r3, [r7, #4]
	return zero;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200003ac 	.word	0x200003ac
 8001490:	0800a2a8 	.word	0x0800a2a8
 8001494:	20000260 	.word	0x20000260
 8001498:	2000042c 	.word	0x2000042c
 800149c:	200003dc 	.word	0x200003dc
 80014a0:	cccccccd 	.word	0xcccccccd

080014a4 <factor_freq>:
int factor_freq(){
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
	uint32_t fa = absl * 25;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <factor_freq+0x40>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	009a      	lsls	r2, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	607b      	str	r3, [r7, #4]
	uint32_t absl2 = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < fa; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	e005      	b.n	80014d0 <factor_freq+0x2c>
		absl2 ++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < fa; i++) {
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f5      	bhi.n	80014c4 <factor_freq+0x20>
	}
	return absl2;
 80014d8:	68fb      	ldr	r3, [r7, #12]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000000 	.word	0x20000000

080014e8 <acs712_get>:
//get sensor acs712
float acs712_get(uint16_t frequency){
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
	uint32_t periode = 1000000 / frequency;
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4a5c      	ldr	r2, [pc, #368]	; (8001668 <acs712_get+0x180>)
 80014f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014fa:	60fb      	str	r3, [r7, #12]
	uint32_t t_start = micros();
 80014fc:	f7ff ff20 	bl	8001340 <micros>
 8001500:	60b8      	str	r0, [r7, #8]
	int32_t Isum = 0, measurements_count = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
	while (micros() - t_start < periode) {
 800150a:	e023      	b.n	8001554 <acs712_get+0x6c>
		HAL_ADC_Start(&hadc2);
 800150c:	4857      	ldr	r0, [pc, #348]	; (800166c <acs712_get+0x184>)
 800150e:	f001 f9fd 	bl	800290c <HAL_ADC_Start>
		while (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) != SET){;}
 8001512:	bf00      	nop
 8001514:	4b55      	ldr	r3, [pc, #340]	; (800166c <acs712_get+0x184>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b02      	cmp	r3, #2
 8001520:	d1f8      	bne.n	8001514 <acs712_get+0x2c>
		Inow = HAL_ADC_GetValue(&hadc2) - zero_acs;
 8001522:	4852      	ldr	r0, [pc, #328]	; (800166c <acs712_get+0x184>)
 8001524:	f001 facc 	bl	8002ac0 <HAL_ADC_GetValue>
 8001528:	4603      	mov	r3, r0
 800152a:	4a51      	ldr	r2, [pc, #324]	; (8001670 <acs712_get+0x188>)
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4b50      	ldr	r3, [pc, #320]	; (8001674 <acs712_get+0x18c>)
 8001534:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc2);
 8001536:	484d      	ldr	r0, [pc, #308]	; (800166c <acs712_get+0x184>)
 8001538:	f001 fa96 	bl	8002a68 <HAL_ADC_Stop>
		Isum += Inow*Inow;
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <acs712_get+0x18c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <acs712_get+0x18c>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4413      	add	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
		measurements_count++;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3301      	adds	r3, #1
 8001552:	613b      	str	r3, [r7, #16]
	while (micros() - t_start < periode) {
 8001554:	f7ff fef4 	bl	8001340 <micros>
 8001558:	4602      	mov	r2, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8d3      	bhi.n	800150c <acs712_get+0x24>
	}
	sensitivity = 0.180; /*ACS712_05B:*/ //0.185
 8001564:	4b44      	ldr	r3, [pc, #272]	; (8001678 <acs712_get+0x190>)
 8001566:	4a45      	ldr	r2, [pc, #276]	; (800167c <acs712_get+0x194>)
 8001568:	601a      	str	r2, [r3, #0]
	//sensitivity = 0.100; /*ACS712_20A:*/
	//sensitivity = 0.066; // ACS712_30A:
	if (Isum < 0){
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b00      	cmp	r3, #0
 800156e:	da35      	bge.n	80015dc <acs712_get+0xf4>
	   Arus_rms = (sqrt(Isum / measurements_count)/ 4095 * 3.30/ sensitivity)*-1;
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fb92 f3f3 	sdiv	r3, r2, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff43 	bl	8000404 <__aeabi_i2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f007 fdef 	bl	8009168 <sqrt>
 800158a:	a333      	add	r3, pc, #204	; (adr r3, 8001658 <acs712_get+0x170>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f8cc 	bl	800072c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	a330      	add	r3, pc, #192	; (adr r3, 8001660 <acs712_get+0x178>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7fe ff99 	bl	80004d8 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	4b32      	ldr	r3, [pc, #200]	; (8001678 <acs712_get+0x190>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff38 	bl	8000428 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7ff f8b4 	bl	800072c <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fa7c 	bl	8000ac8 <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015d6:	4a2a      	ldr	r2, [pc, #168]	; (8001680 <acs712_get+0x198>)
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e035      	b.n	8001648 <acs712_get+0x160>
	} else if (Isum >= 0){
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db32      	blt.n	8001648 <acs712_get+0x160>
	   Arus_rms = sqrt(Isum / measurements_count)/ 4095 * 3.30/ sensitivity;
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff0a 	bl	8000404 <__aeabi_i2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f007 fdb6 	bl	8009168 <sqrt>
 80015fc:	a316      	add	r3, pc, #88	; (adr r3, 8001658 <acs712_get+0x170>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f893 	bl	800072c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	a314      	add	r3, pc, #80	; (adr r3, 8001660 <acs712_get+0x178>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe ff60 	bl	80004d8 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4614      	mov	r4, r2
 800161e:	461d      	mov	r5, r3
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <acs712_get+0x190>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe feff 	bl	8000428 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7ff f87b 	bl	800072c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa43 	bl	8000ac8 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <acs712_get+0x198>)
 8001646:	6013      	str	r3, [r2, #0]
	}
	return Arus_rms;
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <acs712_get+0x198>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bdb0      	pop	{r4, r5, r7, pc}
 8001654:	f3af 8000 	nop.w
 8001658:	00000000 	.word	0x00000000
 800165c:	40affe00 	.word	0x40affe00
 8001660:	66666666 	.word	0x66666666
 8001664:	400a6666 	.word	0x400a6666
 8001668:	000f4240 	.word	0x000f4240
 800166c:	20000328 	.word	0x20000328
 8001670:	20000244 	.word	0x20000244
 8001674:	2000025c 	.word	0x2000025c
 8001678:	20000434 	.word	0x20000434
 800167c:	3e3851ec 	.word	0x3e3851ec
 8001680:	2000024c 	.word	0x2000024c

08001684 <Lcd_name>:
void Lcd_name(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	lcd_clear();
 8001688:	f7ff fdda 	bl	8001240 <lcd_clear>
	lcd_send_cmd(0x80|0x02);
 800168c:	2082      	movs	r0, #130	; 0x82
 800168e:	f7ff fd77 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("KWH METER SOLLAR");
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <Lcd_name+0x48>)
 8001694:	f7ff fe28 	bl	80012e8 <lcd_send_string>
	lcd_send_cmd(0x80|0x43);
 8001698:	20c3      	movs	r0, #195	; 0xc3
 800169a:	f7ff fd71 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("BI-DIRECTIONAL");
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <Lcd_name+0x4c>)
 80016a0:	f7ff fe22 	bl	80012e8 <lcd_send_string>
	lcd_send_cmd(0x80|0x16);
 80016a4:	2096      	movs	r0, #150	; 0x96
 80016a6:	f7ff fd6b 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("NAMA: M.FARKHAN");
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <Lcd_name+0x50>)
 80016ac:	f7ff fe1c 	bl	80012e8 <lcd_send_string>
	lcd_send_cmd(0x80|0x57);
 80016b0:	20d7      	movs	r0, #215	; 0xd7
 80016b2:	f7ff fd65 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("NRP: 1303181015");
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <Lcd_name+0x54>)
 80016b8:	f7ff fe16 	bl	80012e8 <lcd_send_string>
	HAL_Delay(3000);
 80016bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016c0:	f001 f828 	bl	8002714 <HAL_Delay>
	lcd_clear();
 80016c4:	f7ff fdbc 	bl	8001240 <lcd_clear>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0800a2b4 	.word	0x0800a2b4
 80016d0:	0800a2c8 	.word	0x0800a2c8
 80016d4:	0800a2d8 	.word	0x0800a2d8
 80016d8:	0800a2e8 	.word	0x0800a2e8

080016dc <set>:
void set(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	  lcd_send_cmd(0x80|0x09); lcd_send_string("|");
 80016e0:	2089      	movs	r0, #137	; 0x89
 80016e2:	f7ff fd4d 	bl	8001180 <lcd_send_cmd>
 80016e6:	4817      	ldr	r0, [pc, #92]	; (8001744 <set+0x68>)
 80016e8:	f7ff fdfe 	bl	80012e8 <lcd_send_string>
	  lcd_send_cmd(0x80|0x49); lcd_send_string("|");
 80016ec:	20c9      	movs	r0, #201	; 0xc9
 80016ee:	f7ff fd47 	bl	8001180 <lcd_send_cmd>
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <set+0x68>)
 80016f4:	f7ff fdf8 	bl	80012e8 <lcd_send_string>
	  lcd_send_cmd(0x80|0x1D); lcd_send_string("|");
 80016f8:	209d      	movs	r0, #157	; 0x9d
 80016fa:	f7ff fd41 	bl	8001180 <lcd_send_cmd>
 80016fe:	4811      	ldr	r0, [pc, #68]	; (8001744 <set+0x68>)
 8001700:	f7ff fdf2 	bl	80012e8 <lcd_send_string>
	  lcd_send_cmd(0x80|0x5D); lcd_send_string("|");
 8001704:	20dd      	movs	r0, #221	; 0xdd
 8001706:	f7ff fd3b 	bl	8001180 <lcd_send_cmd>
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <set+0x68>)
 800170c:	f7ff fdec 	bl	80012e8 <lcd_send_string>
	  lcd_send_cmd(0x80|0x0A); lcd_send_string("|");
 8001710:	208a      	movs	r0, #138	; 0x8a
 8001712:	f7ff fd35 	bl	8001180 <lcd_send_cmd>
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <set+0x68>)
 8001718:	f7ff fde6 	bl	80012e8 <lcd_send_string>
	  lcd_send_cmd(0x80|0x4A); lcd_send_string("|");
 800171c:	20ca      	movs	r0, #202	; 0xca
 800171e:	f7ff fd2f 	bl	8001180 <lcd_send_cmd>
 8001722:	4808      	ldr	r0, [pc, #32]	; (8001744 <set+0x68>)
 8001724:	f7ff fde0 	bl	80012e8 <lcd_send_string>
	  lcd_send_cmd(0x80|0x1E); lcd_send_string("|");
 8001728:	209e      	movs	r0, #158	; 0x9e
 800172a:	f7ff fd29 	bl	8001180 <lcd_send_cmd>
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <set+0x68>)
 8001730:	f7ff fdda 	bl	80012e8 <lcd_send_string>
	  lcd_send_cmd(0x80|0x5E); lcd_send_string("|");
 8001734:	20de      	movs	r0, #222	; 0xde
 8001736:	f7ff fd23 	bl	8001180 <lcd_send_cmd>
 800173a:	4802      	ldr	r0, [pc, #8]	; (8001744 <set+0x68>)
 800173c:	f7ff fdd4 	bl	80012e8 <lcd_send_string>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	0800a2f8 	.word	0x0800a2f8

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800174c:	b0a2      	sub	sp, #136	; 0x88
 800174e:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001750:	f000 ff7e 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001754:	f000 fbe2 	bl	8001f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001758:	f000 fd10 	bl	800217c <MX_GPIO_Init>
  MX_ADC1_Init();
 800175c:	f000 fc3a 	bl	8001fd4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001760:	f000 fce2 	bl	8002128 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001764:	f000 fc74 	bl	8002050 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001768:	f000 fcb0 	bl	80020cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800176c:	f7ff fd7f 	bl	800126e <lcd_init>
  DWT_Init();
 8001770:	f7ff fdd0 	bl	8001314 <DWT_Init>
  ukuranstring = sprintf((char*)buff_s, "Mulai Perhitungan Solar\r\n");
 8001774:	492b      	ldr	r1, [pc, #172]	; (8001824 <main+0xdc>)
 8001776:	482c      	ldr	r0, [pc, #176]	; (8001828 <main+0xe0>)
 8001778:	f003 ff24 	bl	80055c4 <siprintf>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <main+0xe4>)
 8001782:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 10);
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <main+0xe4>)
 8001786:	881a      	ldrh	r2, [r3, #0]
 8001788:	230a      	movs	r3, #10
 800178a:	4927      	ldr	r1, [pc, #156]	; (8001828 <main+0xe0>)
 800178c:	4828      	ldr	r0, [pc, #160]	; (8001830 <main+0xe8>)
 800178e:	f002 ff06 	bl	800459e <HAL_UART_Transmit>
  zero_acs = acs712_calibrate();
 8001792:	f7ff fdeb 	bl	800136c <acs712_calibrate>
 8001796:	4603      	mov	r3, r0
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <main+0xec>)
 800179a:	6013      	str	r3, [r2, #0]
  zero_zmpt = Zmpt_calibrate();
 800179c:	f7ff fe34 	bl	8001408 <Zmpt_calibrate>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a25      	ldr	r2, [pc, #148]	; (8001838 <main+0xf0>)
 80017a4:	6013      	str	r3, [r2, #0]
  factor_inner = factor_freq();
 80017a6:	f7ff fe7d 	bl	80014a4 <factor_freq>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <main+0xf4>)
 80017b0:	601a      	str	r2, [r3, #0]
  ukuranstring = sprintf((char*)buff_s, "Zero ACS = %d | Zero ZMPT : %d\r\n", zero_acs, zero_zmpt);
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <main+0xec>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <main+0xf0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4921      	ldr	r1, [pc, #132]	; (8001840 <main+0xf8>)
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <main+0xe0>)
 80017be:	f003 ff01 	bl	80055c4 <siprintf>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <main+0xe4>)
 80017c8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 10);
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <main+0xe4>)
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	230a      	movs	r3, #10
 80017d0:	4915      	ldr	r1, [pc, #84]	; (8001828 <main+0xe0>)
 80017d2:	4817      	ldr	r0, [pc, #92]	; (8001830 <main+0xe8>)
 80017d4:	f002 fee3 	bl	800459e <HAL_UART_Transmit>
  Lcd_name();
 80017d8:	f7ff ff54 	bl	8001684 <Lcd_name>
  time_power = HAL_GetTick();
 80017dc:	f000 ff90 	bl	8002700 <HAL_GetTick>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a18      	ldr	r2, [pc, #96]	; (8001844 <main+0xfc>)
 80017e4:	6013      	str	r3, [r2, #0]
  time_energy = HAL_GetTick();
 80017e6:	f000 ff8b 	bl	8002700 <HAL_GetTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <main+0x100>)
 80017ee:	6013      	str	r3, [r2, #0]
  time_send = HAL_GetTick();
 80017f0:	f000 ff86 	bl	8002700 <HAL_GetTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <main+0x104>)
 80017f8:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float Arus_acs = acs712_get(factor_inner);
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <main+0xf4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fe71 	bl	80014e8 <acs712_get>
 8001806:	63f8      	str	r0, [r7, #60]	; 0x3c
	  uint32_t Vperiode = 1000000 / factor_inner; //f_factor
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <main+0xf4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a10      	ldr	r2, [pc, #64]	; (8001850 <main+0x108>)
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
	  uint32_t Vt_start = micros();
 8001814:	f7ff fd94 	bl	8001340 <micros>
 8001818:	6378      	str	r0, [r7, #52]	; 0x34
	  int32_t Vsum = 0, Vmeasurements_count = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	647b      	str	r3, [r7, #68]	; 0x44
 800181e:	2300      	movs	r3, #0
 8001820:	643b      	str	r3, [r7, #64]	; 0x40
	  while (micros() - Vt_start < Vperiode) {
 8001822:	e03b      	b.n	800189c <main+0x154>
 8001824:	0800a2fc 	.word	0x0800a2fc
 8001828:	20000260 	.word	0x20000260
 800182c:	2000042c 	.word	0x2000042c
 8001830:	200003dc 	.word	0x200003dc
 8001834:	20000244 	.word	0x20000244
 8001838:	20000248 	.word	0x20000248
 800183c:	2000021c 	.word	0x2000021c
 8001840:	0800a318 	.word	0x0800a318
 8001844:	20000208 	.word	0x20000208
 8001848:	2000020c 	.word	0x2000020c
 800184c:	20000204 	.word	0x20000204
 8001850:	000f4240 	.word	0x000f4240
		HAL_ADC_Start(&hadc1);
 8001854:	48aa      	ldr	r0, [pc, #680]	; (8001b00 <main+0x3b8>)
 8001856:	f001 f859 	bl	800290c <HAL_ADC_Start>
		while (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != SET){;}
 800185a:	bf00      	nop
 800185c:	4ba8      	ldr	r3, [pc, #672]	; (8001b00 <main+0x3b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d1f8      	bne.n	800185c <main+0x114>
		Vnow = HAL_ADC_GetValue(&hadc1) - zero_zmpt;
 800186a:	48a5      	ldr	r0, [pc, #660]	; (8001b00 <main+0x3b8>)
 800186c:	f001 f928 	bl	8002ac0 <HAL_ADC_GetValue>
 8001870:	4603      	mov	r3, r0
 8001872:	4aa4      	ldr	r2, [pc, #656]	; (8001b04 <main+0x3bc>)
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4ba3      	ldr	r3, [pc, #652]	; (8001b08 <main+0x3c0>)
 800187c:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800187e:	48a0      	ldr	r0, [pc, #640]	; (8001b00 <main+0x3b8>)
 8001880:	f001 f8f2 	bl	8002a68 <HAL_ADC_Stop>
		Vsum += Vnow*Vnow;
 8001884:	4ba0      	ldr	r3, [pc, #640]	; (8001b08 <main+0x3c0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a9f      	ldr	r2, [pc, #636]	; (8001b08 <main+0x3c0>)
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001892:	4413      	add	r3, r2
 8001894:	647b      	str	r3, [r7, #68]	; 0x44
		Vmeasurements_count++;
 8001896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001898:	3301      	adds	r3, #1
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
	  while (micros() - Vt_start < Vperiode) {
 800189c:	f7ff fd50 	bl	8001340 <micros>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8d3      	bhi.n	8001854 <main+0x10c>
	  }
	  sensitivity = 0.00239;
 80018ac:	4b97      	ldr	r3, [pc, #604]	; (8001b0c <main+0x3c4>)
 80018ae:	4a98      	ldr	r2, [pc, #608]	; (8001b10 <main+0x3c8>)
 80018b0:	601a      	str	r2, [r3, #0]
	  float V_tick = Vsum / Vmeasurements_count;
 80018b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fa0e 	bl	8000cdc <__aeabi_i2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
	  float Vmean = sqrt(Vsum / Vmeasurements_count);
 80018c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fd99 	bl	8000404 <__aeabi_i2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f007 fc45 	bl	8009168 <sqrt>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f8ef 	bl	8000ac8 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	  Volt_rms = Vmean/ 4095 * 3.30/ sensitivity;
 80018ee:	4989      	ldr	r1, [pc, #548]	; (8001b14 <main+0x3cc>)
 80018f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018f2:	f7ff fafb 	bl	8000eec <__aeabi_fdiv>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd95 	bl	8000428 <__aeabi_f2d>
 80018fe:	a37e      	add	r3, pc, #504	; (adr r3, 8001af8 <main+0x3b0>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe fde8 	bl	80004d8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
 8001910:	4b7e      	ldr	r3, [pc, #504]	; (8001b0c <main+0x3c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fd87 	bl	8000428 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe ff03 	bl	800072c <__aeabi_ddiv>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f8cb 	bl	8000ac8 <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	4a78      	ldr	r2, [pc, #480]	; (8001b18 <main+0x3d0>)
 8001936:	6013      	str	r3, [r2, #0]
	  frequensi = (V_tick /10000) + ((V_tick /10000)/6); //EoC setting DMA micros stm32f103c8t6
 8001938:	4978      	ldr	r1, [pc, #480]	; (8001b1c <main+0x3d4>)
 800193a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800193c:	f7ff fad6 	bl	8000eec <__aeabi_fdiv>
 8001940:	4603      	mov	r3, r0
 8001942:	461c      	mov	r4, r3
 8001944:	4975      	ldr	r1, [pc, #468]	; (8001b1c <main+0x3d4>)
 8001946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001948:	f7ff fad0 	bl	8000eec <__aeabi_fdiv>
 800194c:	4603      	mov	r3, r0
 800194e:	4974      	ldr	r1, [pc, #464]	; (8001b20 <main+0x3d8>)
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff facb 	bl	8000eec <__aeabi_fdiv>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff f90a 	bl	8000b74 <__addsf3>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <main+0x3dc>)
 8001966:	601a      	str	r2, [r3, #0]
	  //power
	  if (HAL_GetTick() >= time_power + 1){
 8001968:	f000 feca 	bl	8002700 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	4b6e      	ldr	r3, [pc, #440]	; (8001b28 <main+0x3e0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	429a      	cmp	r2, r3
 8001976:	d31b      	bcc.n	80019b0 <main+0x268>
		  float Pow = Arus_acs * Volt_rms;
 8001978:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <main+0x3d0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001980:	f7ff fa00 	bl	8000d84 <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
		  Power += Pow;
 8001988:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <main+0x3e4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f8f0 	bl	8000b74 <__addsf3>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b64      	ldr	r3, [pc, #400]	; (8001b2c <main+0x3e4>)
 800199a:	601a      	str	r2, [r3, #0]
		  Power_count ++;
 800199c:	4b64      	ldr	r3, [pc, #400]	; (8001b30 <main+0x3e8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <main+0x3e8>)
 80019a4:	6013      	str	r3, [r2, #0]
		  time_power = HAL_GetTick();
 80019a6:	f000 feab 	bl	8002700 <HAL_GetTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a5e      	ldr	r2, [pc, #376]	; (8001b28 <main+0x3e0>)
 80019ae:	6013      	str	r3, [r2, #0]
	  }
	  if (Power_count == 100){
 80019b0:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <main+0x3e8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d176      	bne.n	8001aa6 <main+0x35e>
		  realPowerAC = Power/100;
 80019b8:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <main+0x3e4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	495d      	ldr	r1, [pc, #372]	; (8001b34 <main+0x3ec>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fa94 	bl	8000eec <__aeabi_fdiv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <main+0x3f0>)
 80019ca:	601a      	str	r2, [r3, #0]
		  apparentPower = Arus_acs * Volt_rms;
 80019cc:	4b52      	ldr	r3, [pc, #328]	; (8001b18 <main+0x3d0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f9d6 	bl	8000d84 <__aeabi_fmul>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <main+0x3f4>)
 80019de:	601a      	str	r2, [r3, #0]
		  powerFactorAC = cos(realPowerAC/apparentPower);
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <main+0x3f0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <main+0x3f4>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fa7e 	bl	8000eec <__aeabi_fdiv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd18 	bl	8000428 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f007 fb70 	bl	80090e4 <cos>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f85c 	bl	8000ac8 <__aeabi_d2f>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <main+0x3f8>)
 8001a14:	6013      	str	r3, [r2, #0]
		  if(realPowerAC < 0){
 8001a16:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <main+0x3f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fb4e 	bl	80010c0 <__aeabi_fcmplt>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01c      	beq.n	8001a64 <main+0x31c>
		      powerFactorAC = -1* cos(realPowerAC / apparentPower);
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <main+0x3f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a43      	ldr	r2, [pc, #268]	; (8001b3c <main+0x3f4>)
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa59 	bl	8000eec <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fcf3 	bl	8000428 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f007 fb4b 	bl	80090e4 <cos>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f837 	bl	8000ac8 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a60:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <main+0x3f8>)
 8001a62:	6013      	str	r3, [r2, #0]
		  }
		  if(powerFactorAC > 1 || powerFactorAC <-1){
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <main+0x3f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fb45 	bl	80010fc <__aeabi_fcmpgt>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <main+0x342>
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <main+0x3f8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4931      	ldr	r1, [pc, #196]	; (8001b44 <main+0x3fc>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fb1e 	bl	80010c0 <__aeabi_fcmplt>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <main+0x34a>
			  powerFactorAC = 0;
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <main+0x3f8>)
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
		  }
		  Power_count = 0; Power = 0; cure = 1;
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <main+0x3e8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <main+0x3e4>)
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <main+0x400>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
	  }
	  if ((cure == 1) && (HAL_GetTick() >= time_energy + 1000)){
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <main+0x400>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 808d 	bne.w	8001bca <main+0x482>
 8001ab0:	f000 fe26 	bl	8002700 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <main+0x404>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	f0c0 8083 	bcc.w	8001bca <main+0x482>
		  finalEnergyAC = ((realPowerAC / 3600) * (5000/1000));
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <main+0x3f0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4921      	ldr	r1, [pc, #132]	; (8001b50 <main+0x408>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fa0e 	bl	8000eec <__aeabi_fdiv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4920      	ldr	r1, [pc, #128]	; (8001b54 <main+0x40c>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f955 	bl	8000d84 <__aeabi_fmul>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <main+0x410>)
 8001ae0:	601a      	str	r2, [r3, #0]
		  netEnergyAC += finalEnergyAC;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <main+0x414>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <main+0x410>)
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f841 	bl	8000b74 <__addsf3>
 8001af2:	e035      	b.n	8001b60 <main+0x418>
 8001af4:	f3af 8000 	nop.w
 8001af8:	66666666 	.word	0x66666666
 8001afc:	400a6666 	.word	0x400a6666
 8001b00:	200003ac 	.word	0x200003ac
 8001b04:	20000248 	.word	0x20000248
 8001b08:	20000428 	.word	0x20000428
 8001b0c:	20000434 	.word	0x20000434
 8001b10:	3b1ca18c 	.word	0x3b1ca18c
 8001b14:	457ff000 	.word	0x457ff000
 8001b18:	20000214 	.word	0x20000214
 8001b1c:	461c4000 	.word	0x461c4000
 8001b20:	40c00000 	.word	0x40c00000
 8001b24:	20000218 	.word	0x20000218
 8001b28:	20000208 	.word	0x20000208
 8001b2c:	20000220 	.word	0x20000220
 8001b30:	20000230 	.word	0x20000230
 8001b34:	42c80000 	.word	0x42c80000
 8001b38:	20000224 	.word	0x20000224
 8001b3c:	20000228 	.word	0x20000228
 8001b40:	2000022c 	.word	0x2000022c
 8001b44:	bf800000 	.word	0xbf800000
 8001b48:	20000210 	.word	0x20000210
 8001b4c:	2000020c 	.word	0x2000020c
 8001b50:	45610000 	.word	0x45610000
 8001b54:	40a00000 	.word	0x40a00000
 8001b58:	20000234 	.word	0x20000234
 8001b5c:	20000238 	.word	0x20000238
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4bad      	ldr	r3, [pc, #692]	; (8001e1c <main+0x6d4>)
 8001b66:	601a      	str	r2, [r3, #0]
		  if( realPowerAC >= 0){
 8001b68:	4bad      	ldr	r3, [pc, #692]	; (8001e20 <main+0x6d8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fab9 	bl	80010e8 <__aeabi_fcmpge>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <main+0x44c>
		      importEnergyAC = importEnergyAC + finalEnergyAC;
 8001b7c:	4ba9      	ldr	r3, [pc, #676]	; (8001e24 <main+0x6dc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4aa9      	ldr	r2, [pc, #676]	; (8001e28 <main+0x6e0>)
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fff4 	bl	8000b74 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4ba4      	ldr	r3, [pc, #656]	; (8001e24 <main+0x6dc>)
 8001b92:	601a      	str	r2, [r3, #0]
		  }
		  if(realPowerAC < 0){
 8001b94:	4ba2      	ldr	r3, [pc, #648]	; (8001e20 <main+0x6d8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fa8f 	bl	80010c0 <__aeabi_fcmplt>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <main+0x478>
		      exportEnergyAC = exportEnergyAC - finalEnergyAC;
 8001ba8:	4ba0      	ldr	r3, [pc, #640]	; (8001e2c <main+0x6e4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a9e      	ldr	r2, [pc, #632]	; (8001e28 <main+0x6e0>)
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ffdc 	bl	8000b70 <__aeabi_fsub>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b9b      	ldr	r3, [pc, #620]	; (8001e2c <main+0x6e4>)
 8001bbe:	601a      	str	r2, [r3, #0]
		  }
		  time_energy = HAL_GetTick();
 8001bc0:	f000 fd9e 	bl	8002700 <HAL_GetTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a9a      	ldr	r2, [pc, #616]	; (8001e30 <main+0x6e8>)
 8001bc8:	6013      	str	r3, [r2, #0]
	  }
	  if ((cure == 0) && (Power_count <=100)){
 8001bca:	4b9a      	ldr	r3, [pc, #616]	; (8001e34 <main+0x6ec>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d159      	bne.n	8001c86 <main+0x53e>
 8001bd2:	4b99      	ldr	r3, [pc, #612]	; (8001e38 <main+0x6f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d855      	bhi.n	8001c86 <main+0x53e>
		  ukuranstring = sprintf((char*)buff_s, "Calibration : %lu | Volt : %f\r\n", Power_count, Volt_rms);
 8001bda:	4b97      	ldr	r3, [pc, #604]	; (8001e38 <main+0x6f0>)
 8001bdc:	681c      	ldr	r4, [r3, #0]
 8001bde:	4b97      	ldr	r3, [pc, #604]	; (8001e3c <main+0x6f4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fc20 	bl	8000428 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	4993      	ldr	r1, [pc, #588]	; (8001e40 <main+0x6f8>)
 8001bf4:	4893      	ldr	r0, [pc, #588]	; (8001e44 <main+0x6fc>)
 8001bf6:	f003 fce5 	bl	80055c4 <siprintf>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <main+0x700>)
 8001c00:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 10);
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <main+0x700>)
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	230a      	movs	r3, #10
 8001c08:	498e      	ldr	r1, [pc, #568]	; (8001e44 <main+0x6fc>)
 8001c0a:	4890      	ldr	r0, [pc, #576]	; (8001e4c <main+0x704>)
 8001c0c:	f002 fcc7 	bl	800459e <HAL_UART_Transmit>
		  lcd_send_cmd(0x80|0x05); lcd_send_string("Calibration");
 8001c10:	2085      	movs	r0, #133	; 0x85
 8001c12:	f7ff fab5 	bl	8001180 <lcd_send_cmd>
 8001c16:	488e      	ldr	r0, [pc, #568]	; (8001e50 <main+0x708>)
 8001c18:	f7ff fb66 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x16); sprintf(buffer, "time: %lu", Power_count); lcd_send_string(buffer);
 8001c1c:	2096      	movs	r0, #150	; 0x96
 8001c1e:	f7ff faaf 	bl	8001180 <lcd_send_cmd>
 8001c22:	4b85      	ldr	r3, [pc, #532]	; (8001e38 <main+0x6f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	498a      	ldr	r1, [pc, #552]	; (8001e54 <main+0x70c>)
 8001c2a:	488b      	ldr	r0, [pc, #556]	; (8001e58 <main+0x710>)
 8001c2c:	f003 fcca 	bl	80055c4 <siprintf>
 8001c30:	4889      	ldr	r0, [pc, #548]	; (8001e58 <main+0x710>)
 8001c32:	f7ff fb59 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x42); sprintf(buffer, "Vrms: %.2fV", Volt_rms); lcd_send_string(buffer);
 8001c36:	20c2      	movs	r0, #194	; 0xc2
 8001c38:	f7ff faa2 	bl	8001180 <lcd_send_cmd>
 8001c3c:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <main+0x6f4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fbf1 	bl	8000428 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4984      	ldr	r1, [pc, #528]	; (8001e5c <main+0x714>)
 8001c4c:	4882      	ldr	r0, [pc, #520]	; (8001e58 <main+0x710>)
 8001c4e:	f003 fcb9 	bl	80055c4 <siprintf>
 8001c52:	4881      	ldr	r0, [pc, #516]	; (8001e58 <main+0x710>)
 8001c54:	f7ff fb48 	bl	80012e8 <lcd_send_string>
		  if (Power_count >= 99){
 8001c58:	4b77      	ldr	r3, [pc, #476]	; (8001e38 <main+0x6f0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b62      	cmp	r3, #98	; 0x62
 8001c5e:	d912      	bls.n	8001c86 <main+0x53e>
			  lcd_clear(); set();
 8001c60:	f7ff faee 	bl	8001240 <lcd_clear>
 8001c64:	f7ff fd3a 	bl	80016dc <set>
			  ukuranstring = sprintf((char*)buff_s, "Kalibrasi Berhasil\r\n");
 8001c68:	497d      	ldr	r1, [pc, #500]	; (8001e60 <main+0x718>)
 8001c6a:	4876      	ldr	r0, [pc, #472]	; (8001e44 <main+0x6fc>)
 8001c6c:	f003 fcaa 	bl	80055c4 <siprintf>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <main+0x700>)
 8001c76:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 10);
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <main+0x700>)
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	4971      	ldr	r1, [pc, #452]	; (8001e44 <main+0x6fc>)
 8001c80:	4872      	ldr	r0, [pc, #456]	; (8001e4c <main+0x704>)
 8001c82:	f002 fc8c 	bl	800459e <HAL_UART_Transmit>
		  }
	  }
	  if ((cure == 1) && (HAL_GetTick() >= time_send + 500)){
 8001c86:	4b6b      	ldr	r3, [pc, #428]	; (8001e34 <main+0x6ec>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f47f adb5 	bne.w	80017fa <main+0xb2>
 8001c90:	f000 fd36 	bl	8002700 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <main+0x71c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	f4ff adab 	bcc.w	80017fa <main+0xb2>
		  lcd_send_cmd(0x80|0x00); sprintf(buffer, "V:%.1f V", Volt_rms); lcd_send_string(buffer);
 8001ca4:	2080      	movs	r0, #128	; 0x80
 8001ca6:	f7ff fa6b 	bl	8001180 <lcd_send_cmd>
 8001caa:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <main+0x6f4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbba 	bl	8000428 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	496b      	ldr	r1, [pc, #428]	; (8001e68 <main+0x720>)
 8001cba:	4867      	ldr	r0, [pc, #412]	; (8001e58 <main+0x710>)
 8001cbc:	f003 fc82 	bl	80055c4 <siprintf>
 8001cc0:	4865      	ldr	r0, [pc, #404]	; (8001e58 <main+0x710>)
 8001cc2:	f7ff fb11 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x40); sprintf(buffer, "I:%.3f A", Arus_acs); lcd_send_string(buffer);
 8001cc6:	20c0      	movs	r0, #192	; 0xc0
 8001cc8:	f7ff fa5a 	bl	8001180 <lcd_send_cmd>
 8001ccc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cce:	f7fe fbab 	bl	8000428 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4965      	ldr	r1, [pc, #404]	; (8001e6c <main+0x724>)
 8001cd8:	485f      	ldr	r0, [pc, #380]	; (8001e58 <main+0x710>)
 8001cda:	f003 fc73 	bl	80055c4 <siprintf>
 8001cde:	485e      	ldr	r0, [pc, #376]	; (8001e58 <main+0x710>)
 8001ce0:	f7ff fb02 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x0B); sprintf(buffer, "P:%.2f W", realPowerAC); lcd_send_string(buffer);
 8001ce4:	208b      	movs	r0, #139	; 0x8b
 8001ce6:	f7ff fa4b 	bl	8001180 <lcd_send_cmd>
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <main+0x6d8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fb9a 	bl	8000428 <__aeabi_f2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	495d      	ldr	r1, [pc, #372]	; (8001e70 <main+0x728>)
 8001cfa:	4857      	ldr	r0, [pc, #348]	; (8001e58 <main+0x710>)
 8001cfc:	f003 fc62 	bl	80055c4 <siprintf>
 8001d00:	4855      	ldr	r0, [pc, #340]	; (8001e58 <main+0x710>)
 8001d02:	f7ff faf1 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x4B); sprintf(buffer, "S:%.2fVA", apparentPower); lcd_send_string(buffer);
 8001d06:	20cb      	movs	r0, #203	; 0xcb
 8001d08:	f7ff fa3a 	bl	8001180 <lcd_send_cmd>
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <main+0x72c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fb89 	bl	8000428 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4957      	ldr	r1, [pc, #348]	; (8001e78 <main+0x730>)
 8001d1c:	484e      	ldr	r0, [pc, #312]	; (8001e58 <main+0x710>)
 8001d1e:	f003 fc51 	bl	80055c4 <siprintf>
 8001d22:	484d      	ldr	r0, [pc, #308]	; (8001e58 <main+0x710>)
 8001d24:	f7ff fae0 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x14); sprintf(buffer, "F:%.1f Hz", frequensi); lcd_send_string(buffer);
 8001d28:	2094      	movs	r0, #148	; 0x94
 8001d2a:	f7ff fa29 	bl	8001180 <lcd_send_cmd>
 8001d2e:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <main+0x734>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fb78 	bl	8000428 <__aeabi_f2d>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4950      	ldr	r1, [pc, #320]	; (8001e80 <main+0x738>)
 8001d3e:	4846      	ldr	r0, [pc, #280]	; (8001e58 <main+0x710>)
 8001d40:	f003 fc40 	bl	80055c4 <siprintf>
 8001d44:	4844      	ldr	r0, [pc, #272]	; (8001e58 <main+0x710>)
 8001d46:	f7ff facf 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x54); sprintf(buffer, "net:%.1fWh", netEnergyAC); lcd_send_string(buffer);
 8001d4a:	20d4      	movs	r0, #212	; 0xd4
 8001d4c:	f7ff fa18 	bl	8001180 <lcd_send_cmd>
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <main+0x6d4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb67 	bl	8000428 <__aeabi_f2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4949      	ldr	r1, [pc, #292]	; (8001e84 <main+0x73c>)
 8001d60:	483d      	ldr	r0, [pc, #244]	; (8001e58 <main+0x710>)
 8001d62:	f003 fc2f 	bl	80055c4 <siprintf>
 8001d66:	483c      	ldr	r0, [pc, #240]	; (8001e58 <main+0x710>)
 8001d68:	f7ff fabe 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x1F); sprintf(buffer, "Ex:%.2fWh", exportEnergyAC); lcd_send_string(buffer);
 8001d6c:	209f      	movs	r0, #159	; 0x9f
 8001d6e:	f7ff fa07 	bl	8001180 <lcd_send_cmd>
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <main+0x6e4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fb56 	bl	8000428 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4941      	ldr	r1, [pc, #260]	; (8001e88 <main+0x740>)
 8001d82:	4835      	ldr	r0, [pc, #212]	; (8001e58 <main+0x710>)
 8001d84:	f003 fc1e 	bl	80055c4 <siprintf>
 8001d88:	4833      	ldr	r0, [pc, #204]	; (8001e58 <main+0x710>)
 8001d8a:	f7ff faad 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x5F); sprintf(buffer, "Im:%.2fWh", importEnergyAC); lcd_send_string(buffer);
 8001d8e:	20df      	movs	r0, #223	; 0xdf
 8001d90:	f7ff f9f6 	bl	8001180 <lcd_send_cmd>
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <main+0x6dc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fb45 	bl	8000428 <__aeabi_f2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	493a      	ldr	r1, [pc, #232]	; (8001e8c <main+0x744>)
 8001da4:	482c      	ldr	r0, [pc, #176]	; (8001e58 <main+0x710>)
 8001da6:	f003 fc0d 	bl	80055c4 <siprintf>
 8001daa:	482b      	ldr	r0, [pc, #172]	; (8001e58 <main+0x710>)
 8001dac:	f7ff fa9c 	bl	80012e8 <lcd_send_string>
		  ukuranstring =
				  sprintf((char*)buff_s, "Arus: %.3f | Volt: %.2f | Daya: %.2f | VA: %.2f "
 8001db0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001db2:	f7fe fb39 	bl	8000428 <__aeabi_f2d>
 8001db6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <main+0x6f4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fb32 	bl	8000428 <__aeabi_f2d>
 8001dc4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <main+0x6d8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb2b 	bl	8000428 <__aeabi_f2d>
 8001dd2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <main+0x72c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fb24 	bl	8000428 <__aeabi_f2d>
 8001de0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <main+0x748>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb1d 	bl	8000428 <__aeabi_f2d>
 8001dee:	e9c7 0100 	strd	r0, r1, [r7]
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <main+0x6d4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb16 	bl	8000428 <__aeabi_f2d>
 8001dfc:	4682      	mov	sl, r0
 8001dfe:	468b      	mov	fp, r1
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <main+0x6dc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb0f 	bl	8000428 <__aeabi_f2d>
 8001e0a:	4680      	mov	r8, r0
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <main+0x6e4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb08 	bl	8000428 <__aeabi_f2d>
 8001e18:	e03c      	b.n	8001e94 <main+0x74c>
 8001e1a:	bf00      	nop
 8001e1c:	20000238 	.word	0x20000238
 8001e20:	20000224 	.word	0x20000224
 8001e24:	2000023c 	.word	0x2000023c
 8001e28:	20000234 	.word	0x20000234
 8001e2c:	20000240 	.word	0x20000240
 8001e30:	2000020c 	.word	0x2000020c
 8001e34:	20000210 	.word	0x20000210
 8001e38:	20000230 	.word	0x20000230
 8001e3c:	20000214 	.word	0x20000214
 8001e40:	0800a33c 	.word	0x0800a33c
 8001e44:	20000260 	.word	0x20000260
 8001e48:	2000042c 	.word	0x2000042c
 8001e4c:	200003dc 	.word	0x200003dc
 8001e50:	0800a35c 	.word	0x0800a35c
 8001e54:	0800a368 	.word	0x0800a368
 8001e58:	20000420 	.word	0x20000420
 8001e5c:	0800a374 	.word	0x0800a374
 8001e60:	0800a380 	.word	0x0800a380
 8001e64:	20000204 	.word	0x20000204
 8001e68:	0800a398 	.word	0x0800a398
 8001e6c:	0800a3a4 	.word	0x0800a3a4
 8001e70:	0800a3b0 	.word	0x0800a3b0
 8001e74:	20000228 	.word	0x20000228
 8001e78:	0800a3bc 	.word	0x0800a3bc
 8001e7c:	20000218 	.word	0x20000218
 8001e80:	0800a3c8 	.word	0x0800a3c8
 8001e84:	0800a3d4 	.word	0x0800a3d4
 8001e88:	0800a3e0 	.word	0x0800a3e0
 8001e8c:	0800a3ec 	.word	0x0800a3ec
 8001e90:	2000022c 	.word	0x2000022c
 8001e94:	4604      	mov	r4, r0
 8001e96:	460d      	mov	r5, r1
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <main+0x7bc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fac3 	bl	8000428 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001eaa:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8001eae:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001eb2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001eb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001eba:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001ebe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ec2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001ec6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001eca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001ece:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ed2:	e9cd 3400 	strd	r3, r4, [sp]
 8001ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eda:	490b      	ldr	r1, [pc, #44]	; (8001f08 <main+0x7c0>)
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <main+0x7c4>)
 8001ede:	f003 fb71 	bl	80055c4 <siprintf>
 8001ee2:	4603      	mov	r3, r0
		  ukuranstring =
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <main+0x7c8>)
 8001ee8:	801a      	strh	r2, [r3, #0]
						  	  	  	  	  "| PF: %.3f | netE: %.2f | import: %.2f "
						  	  	  	  	  "| export: %.2f | f: %.2f\r\n",
										  Arus_acs, Volt_rms, realPowerAC, apparentPower,
										  powerFactorAC, netEnergyAC, importEnergyAC,
										  exportEnergyAC, frequensi);
		  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <main+0x7c8>)
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	2364      	movs	r3, #100	; 0x64
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <main+0x7c4>)
 8001ef2:	4808      	ldr	r0, [pc, #32]	; (8001f14 <main+0x7cc>)
 8001ef4:	f002 fb53 	bl	800459e <HAL_UART_Transmit>
		  time_send = HAL_GetTick();
 8001ef8:	f000 fc02 	bl	8002700 <HAL_GetTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <main+0x7d0>)
 8001f00:	6013      	str	r3, [r2, #0]
  {
 8001f02:	e47a      	b.n	80017fa <main+0xb2>
 8001f04:	20000218 	.word	0x20000218
 8001f08:	0800a3f8 	.word	0x0800a3f8
 8001f0c:	20000260 	.word	0x20000260
 8001f10:	2000042c 	.word	0x2000042c
 8001f14:	200003dc 	.word	0x200003dc
 8001f18:	20000204 	.word	0x20000204

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	2228      	movs	r2, #40	; 0x28
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 fccc 	bl	80048c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 fdf6 	bl	8003b64 <HAL_RCC_OscConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f7e:	f000 f92b 	bl	80021d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
 8001f84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 f860 	bl	8004064 <HAL_RCC_ClockConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001faa:	f000 f915 	bl	80021d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 f9ec 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001fc6:	f000 f907 	bl	80021d8 <Error_Handler>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3750      	adds	r7, #80	; 0x50
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_ADC1_Init+0x74>)
 8001fe6:	4a19      	ldr	r2, [pc, #100]	; (800204c <MX_ADC1_Init+0x78>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_ADC1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_ADC1_Init+0x74>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_ADC1_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_ADC1_Init+0x74>)
 8001ffe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002002:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_ADC1_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_ADC1_Init+0x74>)
 800200c:	2201      	movs	r2, #1
 800200e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <MX_ADC1_Init+0x74>)
 8002012:	f000 fba3 	bl	800275c <HAL_ADC_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800201c:	f000 f8dc 	bl	80021d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002024:	2301      	movs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_ADC1_Init+0x74>)
 8002032:	f000 fd51 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800203c:	f000 f8cc 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200003ac 	.word	0x200003ac
 800204c:	40012400 	.word	0x40012400

08002050 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_ADC2_Init+0x74>)
 8002062:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <MX_ADC2_Init+0x78>)
 8002064:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_ADC2_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MX_ADC2_Init+0x74>)
 800206e:	2201      	movs	r2, #1
 8002070:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_ADC2_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_ADC2_Init+0x74>)
 800207a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800207e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_ADC2_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_ADC2_Init+0x74>)
 8002088:	2201      	movs	r2, #1
 800208a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_ADC2_Init+0x74>)
 800208e:	f000 fb65 	bl	800275c <HAL_ADC_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002098:	f000 f89e 	bl	80021d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800209c:	2301      	movs	r3, #1
 800209e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_ADC2_Init+0x74>)
 80020ae:	f000 fd13 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80020b8:	f000 f88e 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000328 	.word	0x20000328
 80020c8:	40012800 	.word	0x40012800

080020cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <MX_I2C1_Init+0x50>)
 80020d2:	4a13      	ldr	r2, [pc, #76]	; (8002120 <MX_I2C1_Init+0x54>)
 80020d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_I2C1_Init+0x50>)
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <MX_I2C1_Init+0x58>)
 80020da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <MX_I2C1_Init+0x50>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_I2C1_Init+0x50>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_I2C1_Init+0x50>)
 80020ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <MX_I2C1_Init+0x50>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_I2C1_Init+0x50>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <MX_I2C1_Init+0x50>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_I2C1_Init+0x50>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <MX_I2C1_Init+0x50>)
 800210a:	f001 f8e1 	bl	80032d0 <HAL_I2C_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002114:	f000 f860 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000358 	.word	0x20000358
 8002120:	40005400 	.word	0x40005400
 8002124:	000186a0 	.word	0x000186a0

08002128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <MX_USART1_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002160:	f002 f9d0 	bl	8004504 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 f835 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200003dc 	.word	0x200003dc
 8002178:	40013800 	.word	0x40013800

0800217c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <MX_GPIO_Init+0x58>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <MX_GPIO_Init+0x58>)
 8002188:	f043 0320 	orr.w	r3, r3, #32
 800218c:	6193      	str	r3, [r2, #24]
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_GPIO_Init+0x58>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_GPIO_Init+0x58>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <MX_GPIO_Init+0x58>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6193      	str	r3, [r2, #24]
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_GPIO_Init+0x58>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MX_GPIO_Init+0x58>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <MX_GPIO_Init+0x58>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6193      	str	r3, [r2, #24]
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <MX_GPIO_Init+0x58>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x8>
	...

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_MspInit+0x5c>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_MspInit+0x5c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6193      	str	r3, [r2, #24]
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_MspInit+0x5c>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_MspInit+0x5c>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_MspInit+0x5c>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_MspInit+0x5c>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_MspInit+0x60>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_MspInit+0x60>)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000

08002248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_ADC_MspInit+0xbc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d122      	bne.n	80022ae <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229c:	2303      	movs	r3, #3
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	4619      	mov	r1, r3
 80022a6:	4819      	ldr	r0, [pc, #100]	; (800230c <HAL_ADC_MspInit+0xc4>)
 80022a8:	f000 fe8e 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80022ac:	e026      	b.n	80022fc <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_ADC_MspInit+0xc8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d121      	bne.n	80022fc <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 80022be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_ADC_MspInit+0xc0>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ec:	2303      	movs	r3, #3
 80022ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0318 	add.w	r3, r7, #24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_ADC_MspInit+0xc4>)
 80022f8:	f000 fe66 	bl	8002fc8 <HAL_GPIO_Init>
}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	; 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40012400 	.word	0x40012400
 8002308:	40021000 	.word	0x40021000
 800230c:	40010800 	.word	0x40010800
 8002310:	40012800 	.word	0x40012800

08002314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <HAL_I2C_MspInit+0x70>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d123      	bne.n	800237c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_I2C_MspInit+0x74>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_I2C_MspInit+0x74>)
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_I2C_MspInit+0x74>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800234c:	23c0      	movs	r3, #192	; 0xc0
 800234e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002350:	2312      	movs	r3, #18
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	480b      	ldr	r0, [pc, #44]	; (800238c <HAL_I2C_MspInit+0x78>)
 8002360:	f000 fe32 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_I2C_MspInit+0x74>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <HAL_I2C_MspInit+0x74>)
 800236a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800236e:	61d3      	str	r3, [r2, #28]
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_I2C_MspInit+0x74>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40005400 	.word	0x40005400
 8002388:	40021000 	.word	0x40021000
 800238c:	40010c00 	.word	0x40010c00

08002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_UART_MspInit+0x8c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d131      	bne.n	8002414 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	4619      	mov	r1, r3
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <HAL_UART_MspInit+0x94>)
 80023f6:	f000 fde7 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	4619      	mov	r1, r3
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_UART_MspInit+0x94>)
 8002410:	f000 fdda 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40013800 	.word	0x40013800
 8002420:	40021000 	.word	0x40021000
 8002424:	40010800 	.word	0x40010800

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246e:	f000 f935 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}

08002476 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
	return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <_kill>:

int _kill(int pid, int sig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800248e:	f002 f9f1 	bl	8004874 <__errno>
 8002492:	4603      	mov	r3, r0
 8002494:	2216      	movs	r2, #22
 8002496:	601a      	str	r2, [r3, #0]
	return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_exit>:

void _exit (int status)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffe7 	bl	8002484 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024b6:	e7fe      	b.n	80024b6 <_exit+0x12>

080024b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e00a      	b.n	80024e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ca:	f3af 8000 	nop.w
 80024ce:	4601      	mov	r1, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	60ba      	str	r2, [r7, #8]
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf0      	blt.n	80024ca <_read+0x12>
	}

return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e009      	b.n	8002518 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60ba      	str	r2, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf1      	blt.n	8002504 <_write+0x12>
	}
	return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_close>:

int _close(int file)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	return -1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002550:	605a      	str	r2, [r3, #4]
	return 0;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <_isatty>:

int _isatty(int file)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	return 1;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
	return 0;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
	...

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f002 f95a 	bl	8004874 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20005000 	.word	0x20005000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	20000250 	.word	0x20000250
 80025f4:	20000450 	.word	0x20000450

080025f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002606:	490d      	ldr	r1, [pc, #52]	; (800263c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800262a:	f7ff ffe5 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f002 f927 	bl	8004880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002632:	f7ff f889 	bl	8001748 <main>
  bx lr
 8002636:	4770      	bx	lr
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002640:	0800ab30 	.word	0x0800ab30
  ldr r2, =_sbss
 8002644:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002648:	2000044c 	.word	0x2000044c

0800264c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC1_2_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_Init+0x28>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_Init+0x28>)
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002660:	2003      	movs	r0, #3
 8002662:	f000 fc7d 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002666:	2000      	movs	r0, #0
 8002668:	f000 f808 	bl	800267c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800266c:	f7ff fdba 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000

0800267c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_InitTick+0x54>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_InitTick+0x58>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fc87 	bl	8002fae <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00e      	b.n	80026c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d80a      	bhi.n	80026c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f000 fc5d 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026bc:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <HAL_InitTick+0x5c>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000004 	.word	0x20000004
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	20000008 	.word	0x20000008

080026dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_IncTick+0x1c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_IncTick+0x20>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a03      	ldr	r2, [pc, #12]	; (80026fc <HAL_IncTick+0x20>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	20000438 	.word	0x20000438

08002700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_GetTick+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000438 	.word	0x20000438

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff fff0 	bl	8002700 <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffe0 	bl	8002700 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000000c 	.word	0x2000000c

0800275c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0be      	b.n	80028fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fd54 	bl	8002248 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 faeb 	bl	8002d7c <ADC_ConversionStop_Disable>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 8099 	bne.w	80028ea <HAL_ADC_Init+0x18e>
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 8095 	bne.w	80028ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c8:	f023 0302 	bic.w	r3, r3, #2
 80027cc:	f043 0202 	orr.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7b1b      	ldrb	r3, [r3, #12]
 80027e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d003      	beq.n	80027fe <HAL_ADC_Init+0xa2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_ADC_Init+0xa8>
 80027fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002802:	e000      	b.n	8002806 <HAL_ADC_Init+0xaa>
 8002804:	2300      	movs	r3, #0
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7d1b      	ldrb	r3, [r3, #20]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d119      	bne.n	8002848 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7b1b      	ldrb	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	3b01      	subs	r3, #1
 8002822:	035a      	lsls	r2, r3, #13
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e00b      	b.n	8002848 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_ADC_Init+0x1a8>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	430b      	orrs	r3, r1
 800286e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002878:	d003      	beq.n	8002882 <HAL_ADC_Init+0x126>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d104      	bne.n	800288c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	3b01      	subs	r3, #1
 8002888:	051b      	lsls	r3, r3, #20
 800288a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	430a      	orrs	r2, r1
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <HAL_ADC_Init+0x1ac>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d10b      	bne.n	80028c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028c6:	e018      	b.n	80028fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f023 0312 	bic.w	r3, r3, #18
 80028d0:	f043 0210 	orr.w	r2, r3, #16
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028e8:	e007      	b.n	80028fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	ffe1f7fd 	.word	0xffe1f7fd
 8002908:	ff1f0efe 	.word	0xff1f0efe

0800290c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADC_Start+0x1a>
 8002922:	2302      	movs	r3, #2
 8002924:	e098      	b.n	8002a58 <HAL_ADC_Start+0x14c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9ca 	bl	8002cc8 <ADC_Enable>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8087 	bne.w	8002a4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a41      	ldr	r2, [pc, #260]	; (8002a60 <HAL_ADC_Start+0x154>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d105      	bne.n	800296a <HAL_ADC_Start+0x5e>
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_ADC_Start+0x158>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d115      	bne.n	8002996 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d026      	beq.n	80029d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800298c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002994:	e01d      	b.n	80029d2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <HAL_ADC_Start+0x158>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_ADC_Start+0xaa>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <HAL_ADC_Start+0x154>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10d      	bne.n	80029d2 <HAL_ADC_Start+0xc6>
 80029b6:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_ADC_Start+0x158>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f023 0206 	bic.w	r2, r3, #6
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ea:	e002      	b.n	80029f2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f06f 0202 	mvn.w	r2, #2
 8002a02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a12:	d113      	bne.n	8002a3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a18:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <HAL_ADC_Start+0x154>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d105      	bne.n	8002a2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_ADC_Start+0x158>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	e00c      	b.n	8002a56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	e003      	b.n	8002a56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40012800 	.word	0x40012800
 8002a64:	40012400 	.word	0x40012400

08002a68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_Stop+0x1a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e01a      	b.n	8002ab8 <HAL_ADC_Stop+0x50>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f976 	bl	8002d7c <ADC_ConversionStop_Disable>
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x20>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0dc      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x1da>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d81c      	bhi.n	8002b42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b05      	subs	r3, #5
 8002b1a:	221f      	movs	r2, #31
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	4019      	ands	r1, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	3b05      	subs	r3, #5
 8002b34:	fa00 f203 	lsl.w	r2, r0, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b40:	e03c      	b.n	8002bbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d81c      	bhi.n	8002b84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b23      	subs	r3, #35	; 0x23
 8002b5c:	221f      	movs	r2, #31
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	4019      	ands	r1, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3b23      	subs	r3, #35	; 0x23
 8002b76:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
 8002b82:	e01b      	b.n	8002bbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	3b41      	subs	r3, #65	; 0x41
 8002b96:	221f      	movs	r2, #31
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	4019      	ands	r1, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b41      	subs	r3, #65	; 0x41
 8002bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	d91c      	bls.n	8002bfe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68d9      	ldr	r1, [r3, #12]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3b1e      	subs	r3, #30
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4019      	ands	r1, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6898      	ldr	r0, [r3, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	3b1e      	subs	r3, #30
 8002bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	e019      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6919      	ldr	r1, [r3, #16]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	2207      	movs	r2, #7
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	4019      	ands	r1, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6898      	ldr	r0, [r3, #8]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d003      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c3e:	2b11      	cmp	r3, #17
 8002c40:	d132      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_ADC_ConfigChannel+0x1e4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d125      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d126      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d11a      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	0c9a      	lsrs	r2, r3, #18
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c88:	e002      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f9      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x1b2>
 8002c96:	e007      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40012400 	.word	0x40012400
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	431bde83 	.word	0x431bde83

08002cc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d040      	beq.n	8002d68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <ADC_Enable+0xac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <ADC_Enable+0xb0>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d04:	e002      	b.n	8002d0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f9      	bne.n	8002d06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d12:	f7ff fcf5 	bl	8002700 <HAL_GetTick>
 8002d16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d18:	e01f      	b.n	8002d5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d1a:	f7ff fcf1 	bl	8002700 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d918      	bls.n	8002d5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d011      	beq.n	8002d5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e007      	b.n	8002d6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d1d8      	bne.n	8002d1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000004 	.word	0x20000004
 8002d78:	431bde83 	.word	0x431bde83

08002d7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d12e      	bne.n	8002df4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002da6:	f7ff fcab 	bl	8002700 <HAL_GetTick>
 8002daa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dac:	e01b      	b.n	8002de6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dae:	f7ff fca7 	bl	8002700 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d914      	bls.n	8002de6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10d      	bne.n	8002de6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	f043 0210 	orr.w	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e007      	b.n	8002df6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d0dc      	beq.n	8002dae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <__NVIC_GetPriorityGrouping+0x18>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 0307 	and.w	r3, r3, #7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
         );
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff90 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff49 	bl	8002e00 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff5e 	bl	8002e48 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff90 	bl	8002eb8 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5f 	bl	8002e64 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffb0 	bl	8002f1c <SysTick_Config>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fda:	e169      	b.n	80032b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8158 	bne.w	80032aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a9a      	ldr	r2, [pc, #616]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d05e      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003004:	4a98      	ldr	r2, [pc, #608]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d875      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800300a:	4a98      	ldr	r2, [pc, #608]	; (800326c <HAL_GPIO_Init+0x2a4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d058      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003010:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_GPIO_Init+0x2a4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d86f      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003016:	4a96      	ldr	r2, [pc, #600]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d052      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 800301c:	4a94      	ldr	r2, [pc, #592]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d869      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003022:	4a94      	ldr	r2, [pc, #592]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04c      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003028:	4a92      	ldr	r2, [pc, #584]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d863      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800302e:	4a92      	ldr	r2, [pc, #584]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d046      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003034:	4a90      	ldr	r2, [pc, #576]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d85d      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800303a:	2b12      	cmp	r3, #18
 800303c:	d82a      	bhi.n	8003094 <HAL_GPIO_Init+0xcc>
 800303e:	2b12      	cmp	r3, #18
 8003040:	d859      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <HAL_GPIO_Init+0x80>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	080030c3 	.word	0x080030c3
 800304c:	0800309d 	.word	0x0800309d
 8003050:	080030af 	.word	0x080030af
 8003054:	080030f1 	.word	0x080030f1
 8003058:	080030f7 	.word	0x080030f7
 800305c:	080030f7 	.word	0x080030f7
 8003060:	080030f7 	.word	0x080030f7
 8003064:	080030f7 	.word	0x080030f7
 8003068:	080030f7 	.word	0x080030f7
 800306c:	080030f7 	.word	0x080030f7
 8003070:	080030f7 	.word	0x080030f7
 8003074:	080030f7 	.word	0x080030f7
 8003078:	080030f7 	.word	0x080030f7
 800307c:	080030f7 	.word	0x080030f7
 8003080:	080030f7 	.word	0x080030f7
 8003084:	080030f7 	.word	0x080030f7
 8003088:	080030f7 	.word	0x080030f7
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030b9 	.word	0x080030b9
 8003094:	4a79      	ldr	r2, [pc, #484]	; (800327c <HAL_GPIO_Init+0x2b4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800309a:	e02c      	b.n	80030f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e029      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	623b      	str	r3, [r7, #32]
          break;
 80030ac:	e024      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	3308      	adds	r3, #8
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e01f      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	330c      	adds	r3, #12
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e01a      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ca:	2304      	movs	r3, #4
 80030cc:	623b      	str	r3, [r7, #32]
          break;
 80030ce:	e013      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d8:	2308      	movs	r3, #8
 80030da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	611a      	str	r2, [r3, #16]
          break;
 80030e2:	e009      	b.n	80030f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e4:	2308      	movs	r3, #8
 80030e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	615a      	str	r2, [r3, #20]
          break;
 80030ee:	e003      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          break;
 80030f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	d801      	bhi.n	8003102 <HAL_GPIO_Init+0x13a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	e001      	b.n	8003106 <HAL_GPIO_Init+0x13e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	d802      	bhi.n	8003114 <HAL_GPIO_Init+0x14c>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	e002      	b.n	800311a <HAL_GPIO_Init+0x152>
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	3b08      	subs	r3, #8
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	210f      	movs	r1, #15
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80b1 	beq.w	80032aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a4c      	ldr	r2, [pc, #304]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	; (8003288 <HAL_GPIO_Init+0x2c0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_GPIO_Init+0x1ec>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_GPIO_Init+0x2c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00d      	beq.n	80031b0 <HAL_GPIO_Init+0x1e8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <HAL_GPIO_Init+0x2c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3d      	ldr	r2, [pc, #244]	; (8003294 <HAL_GPIO_Init+0x2cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_GPIO_Init+0x1e0>
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e004      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b4:	2300      	movs	r3, #0
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	f002 0203 	and.w	r2, r2, #3
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	4093      	lsls	r3, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031c6:	492f      	ldr	r1, [pc, #188]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	492c      	ldr	r1, [pc, #176]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4928      	ldr	r1, [pc, #160]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	43db      	mvns	r3, r3
 800321e:	491e      	ldr	r1, [pc, #120]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003220:	4013      	ands	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4918      	ldr	r1, [pc, #96]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	43db      	mvns	r3, r3
 8003246:	4914      	ldr	r1, [pc, #80]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003248:	4013      	ands	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
 8003264:	e021      	b.n	80032aa <HAL_GPIO_Init+0x2e2>
 8003266:	bf00      	nop
 8003268:	10320000 	.word	0x10320000
 800326c:	10310000 	.word	0x10310000
 8003270:	10220000 	.word	0x10220000
 8003274:	10210000 	.word	0x10210000
 8003278:	10120000 	.word	0x10120000
 800327c:	10110000 	.word	0x10110000
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	40010800 	.word	0x40010800
 800328c:	40010c00 	.word	0x40010c00
 8003290:	40011000 	.word	0x40011000
 8003294:	40011400 	.word	0x40011400
 8003298:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_GPIO_Init+0x304>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4909      	ldr	r1, [pc, #36]	; (80032cc <HAL_GPIO_Init+0x304>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f ae8e 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	372c      	adds	r7, #44	; 0x2c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e12b      	b.n	800353a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff f80c 	bl	8002314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	; 0x24
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003334:	f000 ffea 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8003338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a81      	ldr	r2, [pc, #516]	; (8003544 <HAL_I2C_Init+0x274>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d807      	bhi.n	8003354 <HAL_I2C_Init+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a80      	ldr	r2, [pc, #512]	; (8003548 <HAL_I2C_Init+0x278>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e006      	b.n	8003362 <HAL_I2C_Init+0x92>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a7d      	ldr	r2, [pc, #500]	; (800354c <HAL_I2C_Init+0x27c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0e7      	b.n	800353a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a78      	ldr	r2, [pc, #480]	; (8003550 <HAL_I2C_Init+0x280>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0c9b      	lsrs	r3, r3, #18
 8003374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a6a      	ldr	r2, [pc, #424]	; (8003544 <HAL_I2C_Init+0x274>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d802      	bhi.n	80033a4 <HAL_I2C_Init+0xd4>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3301      	adds	r3, #1
 80033a2:	e009      	b.n	80033b8 <HAL_I2C_Init+0xe8>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	4a69      	ldr	r2, [pc, #420]	; (8003554 <HAL_I2C_Init+0x284>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	3301      	adds	r3, #1
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	495c      	ldr	r1, [pc, #368]	; (8003544 <HAL_I2C_Init+0x274>)
 80033d4:	428b      	cmp	r3, r1
 80033d6:	d819      	bhi.n	800340c <HAL_I2C_Init+0x13c>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e59      	subs	r1, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033ec:	400b      	ands	r3, r1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_I2C_Init+0x138>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e59      	subs	r1, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003400:	3301      	adds	r3, #1
 8003402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003406:	e051      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 8003408:	2304      	movs	r3, #4
 800340a:	e04f      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d111      	bne.n	8003438 <HAL_I2C_Init+0x168>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e012      	b.n	800345e <HAL_I2C_Init+0x18e>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e58      	subs	r0, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	0099      	lsls	r1, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Init+0x196>
 8003462:	2301      	movs	r3, #1
 8003464:	e022      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10e      	bne.n	800348c <HAL_I2C_Init+0x1bc>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e58      	subs	r0, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348a:	e00f      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	0099      	lsls	r1, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	6809      	ldr	r1, [r1, #0]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6911      	ldr	r1, [r2, #16]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68d2      	ldr	r2, [r2, #12]
 80034e6:	4311      	orrs	r1, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	000186a0 	.word	0x000186a0
 8003548:	001e847f 	.word	0x001e847f
 800354c:	003d08ff 	.word	0x003d08ff
 8003550:	431bde83 	.word	0x431bde83
 8003554:	10624dd3 	.word	0x10624dd3

08003558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	461a      	mov	r2, r3
 8003564:	460b      	mov	r3, r1
 8003566:	817b      	strh	r3, [r7, #10]
 8003568:	4613      	mov	r3, r2
 800356a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff f8c8 	bl	8002700 <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 80e0 	bne.w	8003740 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2319      	movs	r3, #25
 8003586:	2201      	movs	r2, #1
 8003588:	4970      	ldr	r1, [pc, #448]	; (800374c <HAL_I2C_Master_Transmit+0x1f4>)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f964 	bl	8003858 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
 8003598:	e0d3      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_I2C_Master_Transmit+0x50>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0cc      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d007      	beq.n	80035ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2221      	movs	r2, #33	; 0x21
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2210      	movs	r2, #16
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a50      	ldr	r2, [pc, #320]	; (8003750 <HAL_I2C_Master_Transmit+0x1f8>)
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003610:	8979      	ldrh	r1, [r7, #10]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f89c 	bl	8003754 <I2C_MasterRequestWrite>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e08d      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800363c:	e066      	b.n	800370c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6a39      	ldr	r1, [r7, #32]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f9de 	bl	8003a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06b      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_I2C_Master_Transmit+0x188>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d017      	beq.n	80036e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	6a39      	ldr	r1, [r7, #32]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f9ce 	bl	8003a86 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e01a      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d194      	bne.n	800363e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	00100002 	.word	0x00100002
 8003750:	ffff0000 	.word	0xffff0000

08003754 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	460b      	mov	r3, r1
 8003762:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d006      	beq.n	800377e <I2C_MasterRequestWrite+0x2a>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d003      	beq.n	800377e <I2C_MasterRequestWrite+0x2a>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800377c:	d108      	bne.n	8003790 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e00b      	b.n	80037a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	2b12      	cmp	r3, #18
 8003796:	d107      	bne.n	80037a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f84f 	bl	8003858 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ce:	d103      	bne.n	80037d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e035      	b.n	8003848 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e4:	d108      	bne.n	80037f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f4:	611a      	str	r2, [r3, #16]
 80037f6:	e01b      	b.n	8003830 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037f8:	897b      	ldrh	r3, [r7, #10]
 80037fa:	11db      	asrs	r3, r3, #7
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 0306 	and.w	r3, r3, #6
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f063 030f 	orn	r3, r3, #15
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	490e      	ldr	r1, [pc, #56]	; (8003850 <I2C_MasterRequestWrite+0xfc>)
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f875 	bl	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e010      	b.n	8003848 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4907      	ldr	r1, [pc, #28]	; (8003854 <I2C_MasterRequestWrite+0x100>)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f865 	bl	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	00010008 	.word	0x00010008
 8003854:	00010002 	.word	0x00010002

08003858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003868:	e025      	b.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d021      	beq.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fe ff45 	bl	8002700 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e023      	b.n	80038fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10d      	bne.n	80038dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	e00c      	b.n	80038f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	43da      	mvns	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4013      	ands	r3, r2
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d0b6      	beq.n	800386a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003914:	e051      	b.n	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003924:	d123      	bne.n	800396e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800393e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f043 0204 	orr.w	r2, r3, #4
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e046      	b.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d021      	beq.n	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fe fec3 	bl	8002700 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d116      	bne.n	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e020      	b.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10c      	bne.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	e00b      	b.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	43da      	mvns	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d18d      	bne.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a10:	e02d      	b.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f878 	bl	8003b08 <I2C_IsAcknowledgeFailed>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e02d      	b.n	8003a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d021      	beq.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2a:	f7fe fe69 	bl	8002700 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d116      	bne.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e007      	b.n	8003a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d1ca      	bne.n	8003a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a92:	e02d      	b.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f837 	bl	8003b08 <I2C_IsAcknowledgeFailed>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e02d      	b.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d021      	beq.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fe fe28 	bl	8002700 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e007      	b.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d1ca      	bne.n	8003a94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d11b      	bne.n	8003b58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f043 0204 	orr.w	r2, r3, #4
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e26c      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8087 	beq.w	8003c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b84:	4b92      	ldr	r3, [pc, #584]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00c      	beq.n	8003baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b90:	4b8f      	ldr	r3, [pc, #572]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d112      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
 8003b9c:	4b8c      	ldr	r3, [pc, #560]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d10b      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003baa:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d06c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x12c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d168      	bne.n	8003c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e246      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x76>
 8003bcc:	4b80      	ldr	r3, [pc, #512]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a7f      	ldr	r2, [pc, #508]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e02e      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x98>
 8003be2:	4b7b      	ldr	r3, [pc, #492]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7a      	ldr	r2, [pc, #488]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a77      	ldr	r2, [pc, #476]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0xbc>
 8003c06:	4b72      	ldr	r3, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a71      	ldr	r2, [pc, #452]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003c20:	4b6b      	ldr	r3, [pc, #428]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b68      	ldr	r3, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a67      	ldr	r2, [pc, #412]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe fd5e 	bl	8002700 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe fd5a 	bl	8002700 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e1fa      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xe4>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fd4a 	bl	8002700 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe fd46 	bl	8002700 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1e6      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x10c>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d063      	beq.n	8003d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d11c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x18c>
 8003cb6:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x176>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e1ba      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4939      	ldr	r1, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	e03a      	b.n	8003d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf8:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fcff 	bl	8002700 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fe fcfb 	bl	8002700 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e19b      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4927      	ldr	r1, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe fcde 	bl	8002700 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fe fcda 	bl	8002700 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e17a      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d03a      	beq.n	8003de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d019      	beq.n	8003dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fe fcbe 	bl	8002700 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fe fcba 	bl	8002700 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e15a      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f000 fad8 	bl	800435c <RCC_Delay>
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db4:	f7fe fca4 	bl	8002700 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dba:	e00f      	b.n	8003ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fe fca0 	bl	8002700 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d908      	bls.n	8003ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e140      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	42420000 	.word	0x42420000
 8003dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b9e      	ldr	r3, [pc, #632]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e9      	bne.n	8003dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80a6 	beq.w	8003f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b97      	ldr	r3, [pc, #604]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b94      	ldr	r3, [pc, #592]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4a93      	ldr	r2, [pc, #588]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	61d3      	str	r3, [r2, #28]
 8003e12:	4b91      	ldr	r3, [pc, #580]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b8e      	ldr	r3, [pc, #568]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b8b      	ldr	r3, [pc, #556]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a8a      	ldr	r2, [pc, #552]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fc61 	bl	8002700 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe fc5d 	bl	8002700 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0fd      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_OscConfig+0x4f8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x312>
 8003e68:	4b7b      	ldr	r3, [pc, #492]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4a7a      	ldr	r2, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6213      	str	r3, [r2, #32]
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x334>
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4a75      	ldr	r2, [pc, #468]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6213      	str	r3, [r2, #32]
 8003e8a:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a72      	ldr	r2, [pc, #456]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x356>
 8003ea0:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a6c      	ldr	r2, [pc, #432]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4a69      	ldr	r2, [pc, #420]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6213      	str	r3, [r2, #32]
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a66      	ldr	r2, [pc, #408]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	4b64      	ldr	r3, [pc, #400]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a63      	ldr	r2, [pc, #396]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d015      	beq.n	8003f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fe fc11 	bl	8002700 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe fc0d 	bl	8002700 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0ab      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b57      	ldr	r3, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x37e>
 8003f04:	e014      	b.n	8003f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fe fbfb 	bl	8002700 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe fbf7 	bl	8002700 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e095      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b48      	ldr	r3, [pc, #288]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4a47      	ldr	r2, [pc, #284]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8081 	beq.w	800404e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4c:	4b42      	ldr	r3, [pc, #264]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d061      	beq.n	800401c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d146      	bne.n	8003fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <HAL_RCC_OscConfig+0x4fc>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fe fbcb 	bl	8002700 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fe fbc7 	bl	8002700 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e067      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f80:	4b35      	ldr	r3, [pc, #212]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d108      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f96:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	492d      	ldr	r1, [pc, #180]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a19      	ldr	r1, [r3, #32]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	4927      	ldr	r1, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCC_OscConfig+0x4fc>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fb9b 	bl	8002700 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fe fb97 	bl	8002700 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e037      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x46a>
 8003fec:	e02f      	b.n	800404e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_RCC_OscConfig+0x4fc>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fb84 	bl	8002700 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fb80 	bl	8002700 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e020      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x498>
 800401a:	e018      	b.n	800404e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e013      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x4f4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
 8004060:	42420060 	.word	0x42420060

08004064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0d0      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	4965      	ldr	r1, [pc, #404]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d040      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d115      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e073      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3d      	ldr	r3, [pc, #244]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06b      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4936      	ldr	r1, [pc, #216]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fe fad4 	bl	8002700 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fe fad0 	bl	8002700 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e053      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d210      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	4922      	ldr	r1, [pc, #136]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1cc>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1d0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fa32 	bl	800267c <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40022000 	.word	0x40022000
 8004228:	40021000 	.word	0x40021000
 800422c:	0800a47c 	.word	0x0800a47c
 8004230:	20000004 	.word	0x20000004
 8004234:	20000008 	.word	0x20000008

08004238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	b490      	push	{r4, r7}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800423e:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004240:	1d3c      	adds	r4, r7, #4
 8004242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004248:	f240 2301 	movw	r3, #513	; 0x201
 800424c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	2300      	movs	r3, #0
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b04      	cmp	r3, #4
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x40>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x46>
 8004276:	e02d      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800427a:	623b      	str	r3, [r7, #32]
      break;
 800427c:	e02d      	b.n	80042da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	0c9b      	lsrs	r3, r3, #18
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800428a:	4413      	add	r3, r2
 800428c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004290:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c5b      	lsrs	r3, r3, #17
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042aa:	4413      	add	r3, r2
 80042ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042b6:	fb02 f203 	mul.w	r2, r2, r3
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e004      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	623b      	str	r3, [r7, #32]
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042d6:	623b      	str	r3, [r7, #32]
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	6a3b      	ldr	r3, [r7, #32]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3728      	adds	r7, #40	; 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc90      	pop	{r4, r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	0800a46c 	.word	0x0800a46c
 80042ec:	40021000 	.word	0x40021000
 80042f0:	007a1200 	.word	0x007a1200
 80042f4:	003d0900 	.word	0x003d0900

080042f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042fc:	4b02      	ldr	r3, [pc, #8]	; (8004308 <HAL_RCC_GetHCLKFreq+0x10>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff2 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	0800a48c 	.word	0x0800a48c

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffde 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	0adb      	lsrs	r3, r3, #11
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	0800a48c 	.word	0x0800a48c

0800435c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <RCC_Delay+0x34>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <RCC_Delay+0x38>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0a5b      	lsrs	r3, r3, #9
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004378:	bf00      	nop
  }
  while (Delay --);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1e5a      	subs	r2, r3, #1
 800437e:	60fa      	str	r2, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f9      	bne.n	8004378 <RCC_Delay+0x1c>
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	20000004 	.word	0x20000004
 8004394:	10624dd3 	.word	0x10624dd3

08004398 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d07d      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b8:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	61d3      	str	r3, [r2, #28]
 80043d0:	4b49      	ldr	r3, [pc, #292]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043dc:	2301      	movs	r3, #1
 80043de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d118      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ec:	4b43      	ldr	r3, [pc, #268]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a42      	ldr	r2, [pc, #264]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f8:	f7fe f982 	bl	8002700 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	e008      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fe f97e 	bl	8002700 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e06d      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004412:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02e      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	429a      	cmp	r2, r3
 800443a:	d027      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800443c:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004446:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444c:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004452:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d014      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004462:	f7fe f94d 	bl	8002700 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004468:	e00a      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446a:	f7fe f949 	bl	8002700 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f241 3288 	movw	r2, #5000	; 0x1388
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e036      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004480:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ee      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4917      	ldr	r1, [pc, #92]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	4313      	orrs	r3, r2
 800449c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800449e:	7dfb      	ldrb	r3, [r7, #23]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	490b      	ldr	r1, [pc, #44]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4904      	ldr	r1, [pc, #16]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40007000 	.word	0x40007000
 8004500:	42420440 	.word	0x42420440

08004504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e03f      	b.n	8004596 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd ff30 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f905 	bl	8004758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800457c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b08a      	sub	sp, #40	; 0x28
 80045a2:	af02      	add	r7, sp, #8
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d17c      	bne.n	80046b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_UART_Transmit+0x2c>
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e075      	b.n	80046ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Transmit+0x3e>
 80045d8:	2302      	movs	r3, #2
 80045da:	e06e      	b.n	80046ba <HAL_UART_Transmit+0x11c>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2221      	movs	r2, #33	; 0x21
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f2:	f7fe f885 	bl	8002700 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460c:	d108      	bne.n	8004620 <HAL_UART_Transmit+0x82>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e003      	b.n	8004628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004630:	e02a      	b.n	8004688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f840 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e036      	b.n	80046ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	3302      	adds	r3, #2
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e007      	b.n	800467a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1cf      	bne.n	8004632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f810 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	e02c      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d028      	beq.n	800472e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80046e2:	f7fe f80d 	bl	8002700 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d21d      	bcs.n	800472e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004700:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e00f      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	429a      	cmp	r2, r3
 800474a:	d0c3      	beq.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004792:	f023 030c 	bic.w	r3, r3, #12
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	430b      	orrs	r3, r1
 800479e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	; (800486c <UART_SetConfig+0x114>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047c0:	f7ff fdb8 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	e002      	b.n	80047ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047c8:	f7ff fda0 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 80047cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009a      	lsls	r2, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	4a22      	ldr	r2, [pc, #136]	; (8004870 <UART_SetConfig+0x118>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	0119      	lsls	r1, r3, #4
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009a      	lsls	r2, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fbb2 f2f3 	udiv	r2, r2, r3
 8004804:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <UART_SetConfig+0x118>)
 8004806:	fba3 0302 	umull	r0, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2064      	movs	r0, #100	; 0x64
 800480e:	fb00 f303 	mul.w	r3, r0, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	3332      	adds	r3, #50	; 0x32
 8004818:	4a15      	ldr	r2, [pc, #84]	; (8004870 <UART_SetConfig+0x118>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004824:	4419      	add	r1, r3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f2f3 	udiv	r2, r2, r3
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <UART_SetConfig+0x118>)
 800483e:	fba3 0302 	umull	r0, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2064      	movs	r0, #100	; 0x64
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	3332      	adds	r3, #50	; 0x32
 8004850:	4a07      	ldr	r2, [pc, #28]	; (8004870 <UART_SetConfig+0x118>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	440a      	add	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40013800 	.word	0x40013800
 8004870:	51eb851f 	.word	0x51eb851f

08004874 <__errno>:
 8004874:	4b01      	ldr	r3, [pc, #4]	; (800487c <__errno+0x8>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000010 	.word	0x20000010

08004880 <__libc_init_array>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	2600      	movs	r6, #0
 8004884:	4d0c      	ldr	r5, [pc, #48]	; (80048b8 <__libc_init_array+0x38>)
 8004886:	4c0d      	ldr	r4, [pc, #52]	; (80048bc <__libc_init_array+0x3c>)
 8004888:	1b64      	subs	r4, r4, r5
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	42a6      	cmp	r6, r4
 800488e:	d109      	bne.n	80048a4 <__libc_init_array+0x24>
 8004890:	f005 fcfc 	bl	800a28c <_init>
 8004894:	2600      	movs	r6, #0
 8004896:	4d0a      	ldr	r5, [pc, #40]	; (80048c0 <__libc_init_array+0x40>)
 8004898:	4c0a      	ldr	r4, [pc, #40]	; (80048c4 <__libc_init_array+0x44>)
 800489a:	1b64      	subs	r4, r4, r5
 800489c:	10a4      	asrs	r4, r4, #2
 800489e:	42a6      	cmp	r6, r4
 80048a0:	d105      	bne.n	80048ae <__libc_init_array+0x2e>
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a8:	4798      	blx	r3
 80048aa:	3601      	adds	r6, #1
 80048ac:	e7ee      	b.n	800488c <__libc_init_array+0xc>
 80048ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b2:	4798      	blx	r3
 80048b4:	3601      	adds	r6, #1
 80048b6:	e7f2      	b.n	800489e <__libc_init_array+0x1e>
 80048b8:	0800ab28 	.word	0x0800ab28
 80048bc:	0800ab28 	.word	0x0800ab28
 80048c0:	0800ab28 	.word	0x0800ab28
 80048c4:	0800ab2c 	.word	0x0800ab2c

080048c8 <memset>:
 80048c8:	4603      	mov	r3, r0
 80048ca:	4402      	add	r2, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d100      	bne.n	80048d2 <memset+0xa>
 80048d0:	4770      	bx	lr
 80048d2:	f803 1b01 	strb.w	r1, [r3], #1
 80048d6:	e7f9      	b.n	80048cc <memset+0x4>

080048d8 <__cvt>:
 80048d8:	2b00      	cmp	r3, #0
 80048da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048de:	461f      	mov	r7, r3
 80048e0:	bfbb      	ittet	lt
 80048e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048e6:	461f      	movlt	r7, r3
 80048e8:	2300      	movge	r3, #0
 80048ea:	232d      	movlt	r3, #45	; 0x2d
 80048ec:	b088      	sub	sp, #32
 80048ee:	4614      	mov	r4, r2
 80048f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048f4:	7013      	strb	r3, [r2, #0]
 80048f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048fc:	f023 0820 	bic.w	r8, r3, #32
 8004900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004904:	d005      	beq.n	8004912 <__cvt+0x3a>
 8004906:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800490a:	d100      	bne.n	800490e <__cvt+0x36>
 800490c:	3501      	adds	r5, #1
 800490e:	2302      	movs	r3, #2
 8004910:	e000      	b.n	8004914 <__cvt+0x3c>
 8004912:	2303      	movs	r3, #3
 8004914:	aa07      	add	r2, sp, #28
 8004916:	9204      	str	r2, [sp, #16]
 8004918:	aa06      	add	r2, sp, #24
 800491a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800491e:	e9cd 3500 	strd	r3, r5, [sp]
 8004922:	4622      	mov	r2, r4
 8004924:	463b      	mov	r3, r7
 8004926:	f001 fd9f 	bl	8006468 <_dtoa_r>
 800492a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800492e:	4606      	mov	r6, r0
 8004930:	d102      	bne.n	8004938 <__cvt+0x60>
 8004932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004934:	07db      	lsls	r3, r3, #31
 8004936:	d522      	bpl.n	800497e <__cvt+0xa6>
 8004938:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800493c:	eb06 0905 	add.w	r9, r6, r5
 8004940:	d110      	bne.n	8004964 <__cvt+0x8c>
 8004942:	7833      	ldrb	r3, [r6, #0]
 8004944:	2b30      	cmp	r3, #48	; 0x30
 8004946:	d10a      	bne.n	800495e <__cvt+0x86>
 8004948:	2200      	movs	r2, #0
 800494a:	2300      	movs	r3, #0
 800494c:	4620      	mov	r0, r4
 800494e:	4639      	mov	r1, r7
 8004950:	f7fc f82a 	bl	80009a8 <__aeabi_dcmpeq>
 8004954:	b918      	cbnz	r0, 800495e <__cvt+0x86>
 8004956:	f1c5 0501 	rsb	r5, r5, #1
 800495a:	f8ca 5000 	str.w	r5, [sl]
 800495e:	f8da 3000 	ldr.w	r3, [sl]
 8004962:	4499      	add	r9, r3
 8004964:	2200      	movs	r2, #0
 8004966:	2300      	movs	r3, #0
 8004968:	4620      	mov	r0, r4
 800496a:	4639      	mov	r1, r7
 800496c:	f7fc f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8004970:	b108      	cbz	r0, 8004976 <__cvt+0x9e>
 8004972:	f8cd 901c 	str.w	r9, [sp, #28]
 8004976:	2230      	movs	r2, #48	; 0x30
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	454b      	cmp	r3, r9
 800497c:	d307      	bcc.n	800498e <__cvt+0xb6>
 800497e:	4630      	mov	r0, r6
 8004980:	9b07      	ldr	r3, [sp, #28]
 8004982:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004984:	1b9b      	subs	r3, r3, r6
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	b008      	add	sp, #32
 800498a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498e:	1c59      	adds	r1, r3, #1
 8004990:	9107      	str	r1, [sp, #28]
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e7f0      	b.n	8004978 <__cvt+0xa0>

08004996 <__exponent>:
 8004996:	4603      	mov	r3, r0
 8004998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800499a:	2900      	cmp	r1, #0
 800499c:	f803 2b02 	strb.w	r2, [r3], #2
 80049a0:	bfb6      	itet	lt
 80049a2:	222d      	movlt	r2, #45	; 0x2d
 80049a4:	222b      	movge	r2, #43	; 0x2b
 80049a6:	4249      	neglt	r1, r1
 80049a8:	2909      	cmp	r1, #9
 80049aa:	7042      	strb	r2, [r0, #1]
 80049ac:	dd2b      	ble.n	8004a06 <__exponent+0x70>
 80049ae:	f10d 0407 	add.w	r4, sp, #7
 80049b2:	46a4      	mov	ip, r4
 80049b4:	270a      	movs	r7, #10
 80049b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80049ba:	460a      	mov	r2, r1
 80049bc:	46a6      	mov	lr, r4
 80049be:	fb07 1516 	mls	r5, r7, r6, r1
 80049c2:	2a63      	cmp	r2, #99	; 0x63
 80049c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80049c8:	4631      	mov	r1, r6
 80049ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80049ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049d2:	dcf0      	bgt.n	80049b6 <__exponent+0x20>
 80049d4:	3130      	adds	r1, #48	; 0x30
 80049d6:	f1ae 0502 	sub.w	r5, lr, #2
 80049da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049de:	4629      	mov	r1, r5
 80049e0:	1c44      	adds	r4, r0, #1
 80049e2:	4561      	cmp	r1, ip
 80049e4:	d30a      	bcc.n	80049fc <__exponent+0x66>
 80049e6:	f10d 0209 	add.w	r2, sp, #9
 80049ea:	eba2 020e 	sub.w	r2, r2, lr
 80049ee:	4565      	cmp	r5, ip
 80049f0:	bf88      	it	hi
 80049f2:	2200      	movhi	r2, #0
 80049f4:	4413      	add	r3, r2
 80049f6:	1a18      	subs	r0, r3, r0
 80049f8:	b003      	add	sp, #12
 80049fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a00:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a04:	e7ed      	b.n	80049e2 <__exponent+0x4c>
 8004a06:	2330      	movs	r3, #48	; 0x30
 8004a08:	3130      	adds	r1, #48	; 0x30
 8004a0a:	7083      	strb	r3, [r0, #2]
 8004a0c:	70c1      	strb	r1, [r0, #3]
 8004a0e:	1d03      	adds	r3, r0, #4
 8004a10:	e7f1      	b.n	80049f6 <__exponent+0x60>
	...

08004a14 <_printf_float>:
 8004a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	b091      	sub	sp, #68	; 0x44
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a20:	4616      	mov	r6, r2
 8004a22:	461f      	mov	r7, r3
 8004a24:	4605      	mov	r5, r0
 8004a26:	f002 fe73 	bl	8007710 <_localeconv_r>
 8004a2a:	6803      	ldr	r3, [r0, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a30:	f7fb fb8e 	bl	8000150 <strlen>
 8004a34:	2300      	movs	r3, #0
 8004a36:	930e      	str	r3, [sp, #56]	; 0x38
 8004a38:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a3e:	3307      	adds	r3, #7
 8004a40:	f023 0307 	bic.w	r3, r3, #7
 8004a44:	f103 0208 	add.w	r2, r3, #8
 8004a48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a4c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a50:	f8c8 2000 	str.w	r2, [r8]
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a5c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a60:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a66:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4b9c      	ldr	r3, [pc, #624]	; (8004ce0 <_printf_float+0x2cc>)
 8004a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a70:	f7fb ffcc 	bl	8000a0c <__aeabi_dcmpun>
 8004a74:	bb70      	cbnz	r0, 8004ad4 <_printf_float+0xc0>
 8004a76:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	4b98      	ldr	r3, [pc, #608]	; (8004ce0 <_printf_float+0x2cc>)
 8004a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a80:	f7fb ffa6 	bl	80009d0 <__aeabi_dcmple>
 8004a84:	bb30      	cbnz	r0, 8004ad4 <_printf_float+0xc0>
 8004a86:	2200      	movs	r2, #0
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	f7fb ff95 	bl	80009bc <__aeabi_dcmplt>
 8004a92:	b110      	cbz	r0, 8004a9a <_printf_float+0x86>
 8004a94:	232d      	movs	r3, #45	; 0x2d
 8004a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9a:	4b92      	ldr	r3, [pc, #584]	; (8004ce4 <_printf_float+0x2d0>)
 8004a9c:	4892      	ldr	r0, [pc, #584]	; (8004ce8 <_printf_float+0x2d4>)
 8004a9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004aa2:	bf94      	ite	ls
 8004aa4:	4698      	movls	r8, r3
 8004aa6:	4680      	movhi	r8, r0
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	f04f 0a00 	mov.w	sl, #0
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	f02b 0304 	bic.w	r3, fp, #4
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	4633      	mov	r3, r6
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4628      	mov	r0, r5
 8004abc:	9700      	str	r7, [sp, #0]
 8004abe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ac0:	f000 f9d4 	bl	8004e6c <_printf_common>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	f040 8090 	bne.w	8004bea <_printf_float+0x1d6>
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	b011      	add	sp, #68	; 0x44
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	4653      	mov	r3, sl
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4651      	mov	r1, sl
 8004adc:	f7fb ff96 	bl	8000a0c <__aeabi_dcmpun>
 8004ae0:	b148      	cbz	r0, 8004af6 <_printf_float+0xe2>
 8004ae2:	f1ba 0f00 	cmp.w	sl, #0
 8004ae6:	bfb8      	it	lt
 8004ae8:	232d      	movlt	r3, #45	; 0x2d
 8004aea:	4880      	ldr	r0, [pc, #512]	; (8004cec <_printf_float+0x2d8>)
 8004aec:	bfb8      	it	lt
 8004aee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004af2:	4b7f      	ldr	r3, [pc, #508]	; (8004cf0 <_printf_float+0x2dc>)
 8004af4:	e7d3      	b.n	8004a9e <_printf_float+0x8a>
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	d142      	bne.n	8004b86 <_printf_float+0x172>
 8004b00:	2306      	movs	r3, #6
 8004b02:	6063      	str	r3, [r4, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	9206      	str	r2, [sp, #24]
 8004b08:	aa0e      	add	r2, sp, #56	; 0x38
 8004b0a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b0e:	aa0d      	add	r2, sp, #52	; 0x34
 8004b10:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b14:	9203      	str	r2, [sp, #12]
 8004b16:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	4642      	mov	r2, r8
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	4628      	mov	r0, r5
 8004b28:	4653      	mov	r3, sl
 8004b2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b2c:	f7ff fed4 	bl	80048d8 <__cvt>
 8004b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b32:	4680      	mov	r8, r0
 8004b34:	2947      	cmp	r1, #71	; 0x47
 8004b36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b38:	d108      	bne.n	8004b4c <_printf_float+0x138>
 8004b3a:	1cc8      	adds	r0, r1, #3
 8004b3c:	db02      	blt.n	8004b44 <_printf_float+0x130>
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	4299      	cmp	r1, r3
 8004b42:	dd40      	ble.n	8004bc6 <_printf_float+0x1b2>
 8004b44:	f1a9 0902 	sub.w	r9, r9, #2
 8004b48:	fa5f f989 	uxtb.w	r9, r9
 8004b4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b50:	d81f      	bhi.n	8004b92 <_printf_float+0x17e>
 8004b52:	464a      	mov	r2, r9
 8004b54:	3901      	subs	r1, #1
 8004b56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b5a:	910d      	str	r1, [sp, #52]	; 0x34
 8004b5c:	f7ff ff1b 	bl	8004996 <__exponent>
 8004b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b62:	4682      	mov	sl, r0
 8004b64:	1813      	adds	r3, r2, r0
 8004b66:	2a01      	cmp	r2, #1
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	dc02      	bgt.n	8004b72 <_printf_float+0x15e>
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	07d2      	lsls	r2, r2, #31
 8004b70:	d501      	bpl.n	8004b76 <_printf_float+0x162>
 8004b72:	3301      	adds	r3, #1
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d09b      	beq.n	8004ab6 <_printf_float+0xa2>
 8004b7e:	232d      	movs	r3, #45	; 0x2d
 8004b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b84:	e797      	b.n	8004ab6 <_printf_float+0xa2>
 8004b86:	2947      	cmp	r1, #71	; 0x47
 8004b88:	d1bc      	bne.n	8004b04 <_printf_float+0xf0>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1ba      	bne.n	8004b04 <_printf_float+0xf0>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e7b7      	b.n	8004b02 <_printf_float+0xee>
 8004b92:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b96:	d118      	bne.n	8004bca <_printf_float+0x1b6>
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	dd0b      	ble.n	8004bb6 <_printf_float+0x1a2>
 8004b9e:	6121      	str	r1, [r4, #16]
 8004ba0:	b913      	cbnz	r3, 8004ba8 <_printf_float+0x194>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	07d0      	lsls	r0, r2, #31
 8004ba6:	d502      	bpl.n	8004bae <_printf_float+0x19a>
 8004ba8:	3301      	adds	r3, #1
 8004baa:	440b      	add	r3, r1
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	f04f 0a00 	mov.w	sl, #0
 8004bb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bb4:	e7df      	b.n	8004b76 <_printf_float+0x162>
 8004bb6:	b913      	cbnz	r3, 8004bbe <_printf_float+0x1aa>
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	07d2      	lsls	r2, r2, #31
 8004bbc:	d501      	bpl.n	8004bc2 <_printf_float+0x1ae>
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	e7f4      	b.n	8004bac <_printf_float+0x198>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e7f2      	b.n	8004bac <_printf_float+0x198>
 8004bc6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	db05      	blt.n	8004bdc <_printf_float+0x1c8>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	6121      	str	r1, [r4, #16]
 8004bd4:	07d8      	lsls	r0, r3, #31
 8004bd6:	d5ea      	bpl.n	8004bae <_printf_float+0x19a>
 8004bd8:	1c4b      	adds	r3, r1, #1
 8004bda:	e7e7      	b.n	8004bac <_printf_float+0x198>
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	bfcc      	ite	gt
 8004be0:	2201      	movgt	r2, #1
 8004be2:	f1c1 0202 	rsble	r2, r1, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	e7e0      	b.n	8004bac <_printf_float+0x198>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	055a      	lsls	r2, r3, #21
 8004bee:	d407      	bmi.n	8004c00 <_printf_float+0x1ec>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d12b      	bne.n	8004c56 <_printf_float+0x242>
 8004bfe:	e764      	b.n	8004aca <_printf_float+0xb6>
 8004c00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c04:	f240 80dd 	bls.w	8004dc2 <_printf_float+0x3ae>
 8004c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fb feca 	bl	80009a8 <__aeabi_dcmpeq>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d033      	beq.n	8004c80 <_printf_float+0x26c>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	4a35      	ldr	r2, [pc, #212]	; (8004cf4 <_printf_float+0x2e0>)
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f af51 	beq.w	8004aca <_printf_float+0xb6>
 8004c28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	db02      	blt.n	8004c36 <_printf_float+0x222>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	07d8      	lsls	r0, r3, #31
 8004c34:	d50f      	bpl.n	8004c56 <_printf_float+0x242>
 8004c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	f43f af42 	beq.w	8004aca <_printf_float+0xb6>
 8004c46:	f04f 0800 	mov.w	r8, #0
 8004c4a:	f104 091a 	add.w	r9, r4, #26
 8004c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c50:	3b01      	subs	r3, #1
 8004c52:	4543      	cmp	r3, r8
 8004c54:	dc09      	bgt.n	8004c6a <_printf_float+0x256>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	079b      	lsls	r3, r3, #30
 8004c5a:	f100 8102 	bmi.w	8004e62 <_printf_float+0x44e>
 8004c5e:	68e0      	ldr	r0, [r4, #12]
 8004c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c62:	4298      	cmp	r0, r3
 8004c64:	bfb8      	it	lt
 8004c66:	4618      	movlt	r0, r3
 8004c68:	e731      	b.n	8004ace <_printf_float+0xba>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	464a      	mov	r2, r9
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f af28 	beq.w	8004aca <_printf_float+0xb6>
 8004c7a:	f108 0801 	add.w	r8, r8, #1
 8004c7e:	e7e6      	b.n	8004c4e <_printf_float+0x23a>
 8004c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc38      	bgt.n	8004cf8 <_printf_float+0x2e4>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <_printf_float+0x2e0>)
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f af1a 	beq.w	8004aca <_printf_float+0xb6>
 8004c96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	d102      	bne.n	8004ca4 <_printf_float+0x290>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	07d9      	lsls	r1, r3, #31
 8004ca2:	d5d8      	bpl.n	8004c56 <_printf_float+0x242>
 8004ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f af0b 	beq.w	8004aca <_printf_float+0xb6>
 8004cb4:	f04f 0900 	mov.w	r9, #0
 8004cb8:	f104 0a1a 	add.w	sl, r4, #26
 8004cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cbe:	425b      	negs	r3, r3
 8004cc0:	454b      	cmp	r3, r9
 8004cc2:	dc01      	bgt.n	8004cc8 <_printf_float+0x2b4>
 8004cc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc6:	e794      	b.n	8004bf2 <_printf_float+0x1de>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4652      	mov	r2, sl
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	f43f aef9 	beq.w	8004aca <_printf_float+0xb6>
 8004cd8:	f109 0901 	add.w	r9, r9, #1
 8004cdc:	e7ee      	b.n	8004cbc <_printf_float+0x2a8>
 8004cde:	bf00      	nop
 8004ce0:	7fefffff 	.word	0x7fefffff
 8004ce4:	0800a498 	.word	0x0800a498
 8004ce8:	0800a49c 	.word	0x0800a49c
 8004cec:	0800a4a4 	.word	0x0800a4a4
 8004cf0:	0800a4a0 	.word	0x0800a4a0
 8004cf4:	0800a4a8 	.word	0x0800a4a8
 8004cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	bfa8      	it	ge
 8004d00:	461a      	movge	r2, r3
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	4691      	mov	r9, r2
 8004d06:	dc37      	bgt.n	8004d78 <_printf_float+0x364>
 8004d08:	f04f 0b00 	mov.w	fp, #0
 8004d0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d10:	f104 021a 	add.w	r2, r4, #26
 8004d14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d18:	ebaa 0309 	sub.w	r3, sl, r9
 8004d1c:	455b      	cmp	r3, fp
 8004d1e:	dc33      	bgt.n	8004d88 <_printf_float+0x374>
 8004d20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d24:	429a      	cmp	r2, r3
 8004d26:	db3b      	blt.n	8004da0 <_printf_float+0x38c>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	07da      	lsls	r2, r3, #31
 8004d2c:	d438      	bmi.n	8004da0 <_printf_float+0x38c>
 8004d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d32:	eba2 030a 	sub.w	r3, r2, sl
 8004d36:	eba2 0901 	sub.w	r9, r2, r1
 8004d3a:	4599      	cmp	r9, r3
 8004d3c:	bfa8      	it	ge
 8004d3e:	4699      	movge	r9, r3
 8004d40:	f1b9 0f00 	cmp.w	r9, #0
 8004d44:	dc34      	bgt.n	8004db0 <_printf_float+0x39c>
 8004d46:	f04f 0800 	mov.w	r8, #0
 8004d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d4e:	f104 0a1a 	add.w	sl, r4, #26
 8004d52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	eba3 0309 	sub.w	r3, r3, r9
 8004d5c:	4543      	cmp	r3, r8
 8004d5e:	f77f af7a 	ble.w	8004c56 <_printf_float+0x242>
 8004d62:	2301      	movs	r3, #1
 8004d64:	4652      	mov	r2, sl
 8004d66:	4631      	mov	r1, r6
 8004d68:	4628      	mov	r0, r5
 8004d6a:	47b8      	blx	r7
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	f43f aeac 	beq.w	8004aca <_printf_float+0xb6>
 8004d72:	f108 0801 	add.w	r8, r8, #1
 8004d76:	e7ec      	b.n	8004d52 <_printf_float+0x33e>
 8004d78:	4613      	mov	r3, r2
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	d1c0      	bne.n	8004d08 <_printf_float+0x2f4>
 8004d86:	e6a0      	b.n	8004aca <_printf_float+0xb6>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	f43f ae99 	beq.w	8004aca <_printf_float+0xb6>
 8004d98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d9a:	f10b 0b01 	add.w	fp, fp, #1
 8004d9e:	e7b9      	b.n	8004d14 <_printf_float+0x300>
 8004da0:	4631      	mov	r1, r6
 8004da2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b8      	blx	r7
 8004daa:	3001      	adds	r0, #1
 8004dac:	d1bf      	bne.n	8004d2e <_printf_float+0x31a>
 8004dae:	e68c      	b.n	8004aca <_printf_float+0xb6>
 8004db0:	464b      	mov	r3, r9
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	eb08 020a 	add.w	r2, r8, sl
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d1c2      	bne.n	8004d46 <_printf_float+0x332>
 8004dc0:	e683      	b.n	8004aca <_printf_float+0xb6>
 8004dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dc4:	2a01      	cmp	r2, #1
 8004dc6:	dc01      	bgt.n	8004dcc <_printf_float+0x3b8>
 8004dc8:	07db      	lsls	r3, r3, #31
 8004dca:	d537      	bpl.n	8004e3c <_printf_float+0x428>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	4642      	mov	r2, r8
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f ae77 	beq.w	8004aca <_printf_float+0xb6>
 8004ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de0:	4631      	mov	r1, r6
 8004de2:	4628      	mov	r0, r5
 8004de4:	47b8      	blx	r7
 8004de6:	3001      	adds	r0, #1
 8004de8:	f43f ae6f 	beq.w	8004aca <_printf_float+0xb6>
 8004dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004df0:	2200      	movs	r2, #0
 8004df2:	2300      	movs	r3, #0
 8004df4:	f7fb fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8004df8:	b9d8      	cbnz	r0, 8004e32 <_printf_float+0x41e>
 8004dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dfc:	f108 0201 	add.w	r2, r8, #1
 8004e00:	3b01      	subs	r3, #1
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d10e      	bne.n	8004e2a <_printf_float+0x416>
 8004e0c:	e65d      	b.n	8004aca <_printf_float+0xb6>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	464a      	mov	r2, r9
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b8      	blx	r7
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f43f ae56 	beq.w	8004aca <_printf_float+0xb6>
 8004e1e:	f108 0801 	add.w	r8, r8, #1
 8004e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e24:	3b01      	subs	r3, #1
 8004e26:	4543      	cmp	r3, r8
 8004e28:	dcf1      	bgt.n	8004e0e <_printf_float+0x3fa>
 8004e2a:	4653      	mov	r3, sl
 8004e2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e30:	e6e0      	b.n	8004bf4 <_printf_float+0x1e0>
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	f104 091a 	add.w	r9, r4, #26
 8004e3a:	e7f2      	b.n	8004e22 <_printf_float+0x40e>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4642      	mov	r2, r8
 8004e40:	e7df      	b.n	8004e02 <_printf_float+0x3ee>
 8004e42:	2301      	movs	r3, #1
 8004e44:	464a      	mov	r2, r9
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f43f ae3c 	beq.w	8004aca <_printf_float+0xb6>
 8004e52:	f108 0801 	add.w	r8, r8, #1
 8004e56:	68e3      	ldr	r3, [r4, #12]
 8004e58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e5a:	1a5b      	subs	r3, r3, r1
 8004e5c:	4543      	cmp	r3, r8
 8004e5e:	dcf0      	bgt.n	8004e42 <_printf_float+0x42e>
 8004e60:	e6fd      	b.n	8004c5e <_printf_float+0x24a>
 8004e62:	f04f 0800 	mov.w	r8, #0
 8004e66:	f104 0919 	add.w	r9, r4, #25
 8004e6a:	e7f4      	b.n	8004e56 <_printf_float+0x442>

08004e6c <_printf_common>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	4616      	mov	r6, r2
 8004e72:	4699      	mov	r9, r3
 8004e74:	688a      	ldr	r2, [r1, #8]
 8004e76:	690b      	ldr	r3, [r1, #16]
 8004e78:	4607      	mov	r7, r0
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bfb8      	it	lt
 8004e7e:	4613      	movlt	r3, r2
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e86:	460c      	mov	r4, r1
 8004e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e8c:	b10a      	cbz	r2, 8004e92 <_printf_common+0x26>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	6033      	str	r3, [r6, #0]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	0699      	lsls	r1, r3, #26
 8004e96:	bf42      	ittt	mi
 8004e98:	6833      	ldrmi	r3, [r6, #0]
 8004e9a:	3302      	addmi	r3, #2
 8004e9c:	6033      	strmi	r3, [r6, #0]
 8004e9e:	6825      	ldr	r5, [r4, #0]
 8004ea0:	f015 0506 	ands.w	r5, r5, #6
 8004ea4:	d106      	bne.n	8004eb4 <_printf_common+0x48>
 8004ea6:	f104 0a19 	add.w	sl, r4, #25
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	6832      	ldr	r2, [r6, #0]
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	dc28      	bgt.n	8004f06 <_printf_common+0x9a>
 8004eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb8:	1e13      	subs	r3, r2, #0
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	0692      	lsls	r2, r2, #26
 8004ec2:	d42d      	bmi.n	8004f20 <_printf_common+0xb4>
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ecc:	47c0      	blx	r8
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d020      	beq.n	8004f14 <_printf_common+0xa8>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	68e5      	ldr	r5, [r4, #12]
 8004ed6:	f003 0306 	and.w	r3, r3, #6
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	bf18      	it	ne
 8004ede:	2500      	movne	r5, #0
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	f04f 0600 	mov.w	r6, #0
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	bf08      	it	eq
 8004eea:	1aad      	subeq	r5, r5, r2
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	bf08      	it	eq
 8004ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bfc4      	itt	gt
 8004ef8:	1a9b      	subgt	r3, r3, r2
 8004efa:	18ed      	addgt	r5, r5, r3
 8004efc:	341a      	adds	r4, #26
 8004efe:	42b5      	cmp	r5, r6
 8004f00:	d11a      	bne.n	8004f38 <_printf_common+0xcc>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e008      	b.n	8004f18 <_printf_common+0xac>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4652      	mov	r2, sl
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	47c0      	blx	r8
 8004f10:	3001      	adds	r0, #1
 8004f12:	d103      	bne.n	8004f1c <_printf_common+0xb0>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1c:	3501      	adds	r5, #1
 8004f1e:	e7c4      	b.n	8004eaa <_printf_common+0x3e>
 8004f20:	2030      	movs	r0, #48	; 0x30
 8004f22:	18e1      	adds	r1, r4, r3
 8004f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f2e:	4422      	add	r2, r4
 8004f30:	3302      	adds	r3, #2
 8004f32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f36:	e7c5      	b.n	8004ec4 <_printf_common+0x58>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	4638      	mov	r0, r7
 8004f40:	47c0      	blx	r8
 8004f42:	3001      	adds	r0, #1
 8004f44:	d0e6      	beq.n	8004f14 <_printf_common+0xa8>
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7d9      	b.n	8004efe <_printf_common+0x92>
	...

08004f4c <_printf_i>:
 8004f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	460c      	mov	r4, r1
 8004f52:	7e27      	ldrb	r7, [r4, #24]
 8004f54:	4691      	mov	r9, r2
 8004f56:	2f78      	cmp	r7, #120	; 0x78
 8004f58:	4680      	mov	r8, r0
 8004f5a:	469a      	mov	sl, r3
 8004f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f62:	d807      	bhi.n	8004f74 <_printf_i+0x28>
 8004f64:	2f62      	cmp	r7, #98	; 0x62
 8004f66:	d80a      	bhi.n	8004f7e <_printf_i+0x32>
 8004f68:	2f00      	cmp	r7, #0
 8004f6a:	f000 80d9 	beq.w	8005120 <_printf_i+0x1d4>
 8004f6e:	2f58      	cmp	r7, #88	; 0x58
 8004f70:	f000 80a4 	beq.w	80050bc <_printf_i+0x170>
 8004f74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f7c:	e03a      	b.n	8004ff4 <_printf_i+0xa8>
 8004f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f82:	2b15      	cmp	r3, #21
 8004f84:	d8f6      	bhi.n	8004f74 <_printf_i+0x28>
 8004f86:	a001      	add	r0, pc, #4	; (adr r0, 8004f8c <_printf_i+0x40>)
 8004f88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004ff9 	.word	0x08004ff9
 8004f94:	08004f75 	.word	0x08004f75
 8004f98:	08004f75 	.word	0x08004f75
 8004f9c:	08004f75 	.word	0x08004f75
 8004fa0:	08004f75 	.word	0x08004f75
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08004f75 	.word	0x08004f75
 8004fac:	08004f75 	.word	0x08004f75
 8004fb0:	08004f75 	.word	0x08004f75
 8004fb4:	08004f75 	.word	0x08004f75
 8004fb8:	08005107 	.word	0x08005107
 8004fbc:	08005029 	.word	0x08005029
 8004fc0:	080050e9 	.word	0x080050e9
 8004fc4:	08004f75 	.word	0x08004f75
 8004fc8:	08004f75 	.word	0x08004f75
 8004fcc:	08005129 	.word	0x08005129
 8004fd0:	08004f75 	.word	0x08004f75
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08004f75 	.word	0x08004f75
 8004fdc:	08004f75 	.word	0x08004f75
 8004fe0:	080050f1 	.word	0x080050f1
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	600a      	str	r2, [r1, #0]
 8004ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0a4      	b.n	8005142 <_printf_i+0x1f6>
 8004ff8:	6825      	ldr	r5, [r4, #0]
 8004ffa:	6808      	ldr	r0, [r1, #0]
 8004ffc:	062e      	lsls	r6, r5, #24
 8004ffe:	f100 0304 	add.w	r3, r0, #4
 8005002:	d50a      	bpl.n	800501a <_printf_i+0xce>
 8005004:	6805      	ldr	r5, [r0, #0]
 8005006:	600b      	str	r3, [r1, #0]
 8005008:	2d00      	cmp	r5, #0
 800500a:	da03      	bge.n	8005014 <_printf_i+0xc8>
 800500c:	232d      	movs	r3, #45	; 0x2d
 800500e:	426d      	negs	r5, r5
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005014:	230a      	movs	r3, #10
 8005016:	485e      	ldr	r0, [pc, #376]	; (8005190 <_printf_i+0x244>)
 8005018:	e019      	b.n	800504e <_printf_i+0x102>
 800501a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800501e:	6805      	ldr	r5, [r0, #0]
 8005020:	600b      	str	r3, [r1, #0]
 8005022:	bf18      	it	ne
 8005024:	b22d      	sxthne	r5, r5
 8005026:	e7ef      	b.n	8005008 <_printf_i+0xbc>
 8005028:	680b      	ldr	r3, [r1, #0]
 800502a:	6825      	ldr	r5, [r4, #0]
 800502c:	1d18      	adds	r0, r3, #4
 800502e:	6008      	str	r0, [r1, #0]
 8005030:	0628      	lsls	r0, r5, #24
 8005032:	d501      	bpl.n	8005038 <_printf_i+0xec>
 8005034:	681d      	ldr	r5, [r3, #0]
 8005036:	e002      	b.n	800503e <_printf_i+0xf2>
 8005038:	0669      	lsls	r1, r5, #25
 800503a:	d5fb      	bpl.n	8005034 <_printf_i+0xe8>
 800503c:	881d      	ldrh	r5, [r3, #0]
 800503e:	2f6f      	cmp	r7, #111	; 0x6f
 8005040:	bf0c      	ite	eq
 8005042:	2308      	moveq	r3, #8
 8005044:	230a      	movne	r3, #10
 8005046:	4852      	ldr	r0, [pc, #328]	; (8005190 <_printf_i+0x244>)
 8005048:	2100      	movs	r1, #0
 800504a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504e:	6866      	ldr	r6, [r4, #4]
 8005050:	2e00      	cmp	r6, #0
 8005052:	bfa8      	it	ge
 8005054:	6821      	ldrge	r1, [r4, #0]
 8005056:	60a6      	str	r6, [r4, #8]
 8005058:	bfa4      	itt	ge
 800505a:	f021 0104 	bicge.w	r1, r1, #4
 800505e:	6021      	strge	r1, [r4, #0]
 8005060:	b90d      	cbnz	r5, 8005066 <_printf_i+0x11a>
 8005062:	2e00      	cmp	r6, #0
 8005064:	d04d      	beq.n	8005102 <_printf_i+0x1b6>
 8005066:	4616      	mov	r6, r2
 8005068:	fbb5 f1f3 	udiv	r1, r5, r3
 800506c:	fb03 5711 	mls	r7, r3, r1, r5
 8005070:	5dc7      	ldrb	r7, [r0, r7]
 8005072:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005076:	462f      	mov	r7, r5
 8005078:	42bb      	cmp	r3, r7
 800507a:	460d      	mov	r5, r1
 800507c:	d9f4      	bls.n	8005068 <_printf_i+0x11c>
 800507e:	2b08      	cmp	r3, #8
 8005080:	d10b      	bne.n	800509a <_printf_i+0x14e>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	07df      	lsls	r7, r3, #31
 8005086:	d508      	bpl.n	800509a <_printf_i+0x14e>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	6861      	ldr	r1, [r4, #4]
 800508c:	4299      	cmp	r1, r3
 800508e:	bfde      	ittt	le
 8005090:	2330      	movle	r3, #48	; 0x30
 8005092:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005096:	f106 36ff 	addle.w	r6, r6, #4294967295
 800509a:	1b92      	subs	r2, r2, r6
 800509c:	6122      	str	r2, [r4, #16]
 800509e:	464b      	mov	r3, r9
 80050a0:	4621      	mov	r1, r4
 80050a2:	4640      	mov	r0, r8
 80050a4:	f8cd a000 	str.w	sl, [sp]
 80050a8:	aa03      	add	r2, sp, #12
 80050aa:	f7ff fedf 	bl	8004e6c <_printf_common>
 80050ae:	3001      	adds	r0, #1
 80050b0:	d14c      	bne.n	800514c <_printf_i+0x200>
 80050b2:	f04f 30ff 	mov.w	r0, #4294967295
 80050b6:	b004      	add	sp, #16
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	4834      	ldr	r0, [pc, #208]	; (8005190 <_printf_i+0x244>)
 80050be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050c2:	680e      	ldr	r6, [r1, #0]
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80050ca:	061f      	lsls	r7, r3, #24
 80050cc:	600e      	str	r6, [r1, #0]
 80050ce:	d514      	bpl.n	80050fa <_printf_i+0x1ae>
 80050d0:	07d9      	lsls	r1, r3, #31
 80050d2:	bf44      	itt	mi
 80050d4:	f043 0320 	orrmi.w	r3, r3, #32
 80050d8:	6023      	strmi	r3, [r4, #0]
 80050da:	b91d      	cbnz	r5, 80050e4 <_printf_i+0x198>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	f023 0320 	bic.w	r3, r3, #32
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	2310      	movs	r3, #16
 80050e6:	e7af      	b.n	8005048 <_printf_i+0xfc>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	f043 0320 	orr.w	r3, r3, #32
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	2378      	movs	r3, #120	; 0x78
 80050f2:	4828      	ldr	r0, [pc, #160]	; (8005194 <_printf_i+0x248>)
 80050f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050f8:	e7e3      	b.n	80050c2 <_printf_i+0x176>
 80050fa:	065e      	lsls	r6, r3, #25
 80050fc:	bf48      	it	mi
 80050fe:	b2ad      	uxthmi	r5, r5
 8005100:	e7e6      	b.n	80050d0 <_printf_i+0x184>
 8005102:	4616      	mov	r6, r2
 8005104:	e7bb      	b.n	800507e <_printf_i+0x132>
 8005106:	680b      	ldr	r3, [r1, #0]
 8005108:	6826      	ldr	r6, [r4, #0]
 800510a:	1d1d      	adds	r5, r3, #4
 800510c:	6960      	ldr	r0, [r4, #20]
 800510e:	600d      	str	r5, [r1, #0]
 8005110:	0635      	lsls	r5, r6, #24
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	d501      	bpl.n	800511a <_printf_i+0x1ce>
 8005116:	6018      	str	r0, [r3, #0]
 8005118:	e002      	b.n	8005120 <_printf_i+0x1d4>
 800511a:	0671      	lsls	r1, r6, #25
 800511c:	d5fb      	bpl.n	8005116 <_printf_i+0x1ca>
 800511e:	8018      	strh	r0, [r3, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	4616      	mov	r6, r2
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	e7ba      	b.n	800509e <_printf_i+0x152>
 8005128:	680b      	ldr	r3, [r1, #0]
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	600a      	str	r2, [r1, #0]
 800512e:	681e      	ldr	r6, [r3, #0]
 8005130:	2100      	movs	r1, #0
 8005132:	4630      	mov	r0, r6
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	f002 fb09 	bl	800774c <memchr>
 800513a:	b108      	cbz	r0, 8005140 <_printf_i+0x1f4>
 800513c:	1b80      	subs	r0, r0, r6
 800513e:	6060      	str	r0, [r4, #4]
 8005140:	6863      	ldr	r3, [r4, #4]
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	2300      	movs	r3, #0
 8005146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800514a:	e7a8      	b.n	800509e <_printf_i+0x152>
 800514c:	4632      	mov	r2, r6
 800514e:	4649      	mov	r1, r9
 8005150:	4640      	mov	r0, r8
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	47d0      	blx	sl
 8005156:	3001      	adds	r0, #1
 8005158:	d0ab      	beq.n	80050b2 <_printf_i+0x166>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	079b      	lsls	r3, r3, #30
 800515e:	d413      	bmi.n	8005188 <_printf_i+0x23c>
 8005160:	68e0      	ldr	r0, [r4, #12]
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	4298      	cmp	r0, r3
 8005166:	bfb8      	it	lt
 8005168:	4618      	movlt	r0, r3
 800516a:	e7a4      	b.n	80050b6 <_printf_i+0x16a>
 800516c:	2301      	movs	r3, #1
 800516e:	4632      	mov	r2, r6
 8005170:	4649      	mov	r1, r9
 8005172:	4640      	mov	r0, r8
 8005174:	47d0      	blx	sl
 8005176:	3001      	adds	r0, #1
 8005178:	d09b      	beq.n	80050b2 <_printf_i+0x166>
 800517a:	3501      	adds	r5, #1
 800517c:	68e3      	ldr	r3, [r4, #12]
 800517e:	9903      	ldr	r1, [sp, #12]
 8005180:	1a5b      	subs	r3, r3, r1
 8005182:	42ab      	cmp	r3, r5
 8005184:	dcf2      	bgt.n	800516c <_printf_i+0x220>
 8005186:	e7eb      	b.n	8005160 <_printf_i+0x214>
 8005188:	2500      	movs	r5, #0
 800518a:	f104 0619 	add.w	r6, r4, #25
 800518e:	e7f5      	b.n	800517c <_printf_i+0x230>
 8005190:	0800a4aa 	.word	0x0800a4aa
 8005194:	0800a4bb 	.word	0x0800a4bb

08005198 <_scanf_float>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	b087      	sub	sp, #28
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	688b      	ldr	r3, [r1, #8]
 80051a2:	4617      	mov	r7, r2
 80051a4:	1e5a      	subs	r2, r3, #1
 80051a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051aa:	bf85      	ittet	hi
 80051ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80051b0:	195b      	addhi	r3, r3, r5
 80051b2:	2300      	movls	r3, #0
 80051b4:	9302      	strhi	r3, [sp, #8]
 80051b6:	bf88      	it	hi
 80051b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051bc:	468b      	mov	fp, r1
 80051be:	f04f 0500 	mov.w	r5, #0
 80051c2:	bf8c      	ite	hi
 80051c4:	608b      	strhi	r3, [r1, #8]
 80051c6:	9302      	strls	r3, [sp, #8]
 80051c8:	680b      	ldr	r3, [r1, #0]
 80051ca:	4680      	mov	r8, r0
 80051cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051d0:	f84b 3b1c 	str.w	r3, [fp], #28
 80051d4:	460c      	mov	r4, r1
 80051d6:	465e      	mov	r6, fp
 80051d8:	46aa      	mov	sl, r5
 80051da:	46a9      	mov	r9, r5
 80051dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051e0:	9501      	str	r5, [sp, #4]
 80051e2:	68a2      	ldr	r2, [r4, #8]
 80051e4:	b152      	cbz	r2, 80051fc <_scanf_float+0x64>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b4e      	cmp	r3, #78	; 0x4e
 80051ec:	d864      	bhi.n	80052b8 <_scanf_float+0x120>
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d83c      	bhi.n	800526c <_scanf_float+0xd4>
 80051f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80051f6:	b2c8      	uxtb	r0, r1
 80051f8:	280e      	cmp	r0, #14
 80051fa:	d93a      	bls.n	8005272 <_scanf_float+0xda>
 80051fc:	f1b9 0f00 	cmp.w	r9, #0
 8005200:	d003      	beq.n	800520a <_scanf_float+0x72>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800520e:	f1ba 0f01 	cmp.w	sl, #1
 8005212:	f200 8113 	bhi.w	800543c <_scanf_float+0x2a4>
 8005216:	455e      	cmp	r6, fp
 8005218:	f200 8105 	bhi.w	8005426 <_scanf_float+0x28e>
 800521c:	2501      	movs	r5, #1
 800521e:	4628      	mov	r0, r5
 8005220:	b007      	add	sp, #28
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800522a:	2a0d      	cmp	r2, #13
 800522c:	d8e6      	bhi.n	80051fc <_scanf_float+0x64>
 800522e:	a101      	add	r1, pc, #4	; (adr r1, 8005234 <_scanf_float+0x9c>)
 8005230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005234:	08005373 	.word	0x08005373
 8005238:	080051fd 	.word	0x080051fd
 800523c:	080051fd 	.word	0x080051fd
 8005240:	080051fd 	.word	0x080051fd
 8005244:	080053d3 	.word	0x080053d3
 8005248:	080053ab 	.word	0x080053ab
 800524c:	080051fd 	.word	0x080051fd
 8005250:	080051fd 	.word	0x080051fd
 8005254:	08005381 	.word	0x08005381
 8005258:	080051fd 	.word	0x080051fd
 800525c:	080051fd 	.word	0x080051fd
 8005260:	080051fd 	.word	0x080051fd
 8005264:	080051fd 	.word	0x080051fd
 8005268:	08005339 	.word	0x08005339
 800526c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005270:	e7db      	b.n	800522a <_scanf_float+0x92>
 8005272:	290e      	cmp	r1, #14
 8005274:	d8c2      	bhi.n	80051fc <_scanf_float+0x64>
 8005276:	a001      	add	r0, pc, #4	; (adr r0, 800527c <_scanf_float+0xe4>)
 8005278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800527c:	0800532b 	.word	0x0800532b
 8005280:	080051fd 	.word	0x080051fd
 8005284:	0800532b 	.word	0x0800532b
 8005288:	080053bf 	.word	0x080053bf
 800528c:	080051fd 	.word	0x080051fd
 8005290:	080052d9 	.word	0x080052d9
 8005294:	08005315 	.word	0x08005315
 8005298:	08005315 	.word	0x08005315
 800529c:	08005315 	.word	0x08005315
 80052a0:	08005315 	.word	0x08005315
 80052a4:	08005315 	.word	0x08005315
 80052a8:	08005315 	.word	0x08005315
 80052ac:	08005315 	.word	0x08005315
 80052b0:	08005315 	.word	0x08005315
 80052b4:	08005315 	.word	0x08005315
 80052b8:	2b6e      	cmp	r3, #110	; 0x6e
 80052ba:	d809      	bhi.n	80052d0 <_scanf_float+0x138>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d8b2      	bhi.n	8005226 <_scanf_float+0x8e>
 80052c0:	2b54      	cmp	r3, #84	; 0x54
 80052c2:	d077      	beq.n	80053b4 <_scanf_float+0x21c>
 80052c4:	2b59      	cmp	r3, #89	; 0x59
 80052c6:	d199      	bne.n	80051fc <_scanf_float+0x64>
 80052c8:	2d07      	cmp	r5, #7
 80052ca:	d197      	bne.n	80051fc <_scanf_float+0x64>
 80052cc:	2508      	movs	r5, #8
 80052ce:	e029      	b.n	8005324 <_scanf_float+0x18c>
 80052d0:	2b74      	cmp	r3, #116	; 0x74
 80052d2:	d06f      	beq.n	80053b4 <_scanf_float+0x21c>
 80052d4:	2b79      	cmp	r3, #121	; 0x79
 80052d6:	e7f6      	b.n	80052c6 <_scanf_float+0x12e>
 80052d8:	6821      	ldr	r1, [r4, #0]
 80052da:	05c8      	lsls	r0, r1, #23
 80052dc:	d51a      	bpl.n	8005314 <_scanf_float+0x17c>
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80052e4:	6021      	str	r1, [r4, #0]
 80052e6:	f109 0901 	add.w	r9, r9, #1
 80052ea:	b11b      	cbz	r3, 80052f4 <_scanf_float+0x15c>
 80052ec:	3b01      	subs	r3, #1
 80052ee:	3201      	adds	r2, #1
 80052f0:	9302      	str	r3, [sp, #8]
 80052f2:	60a2      	str	r2, [r4, #8]
 80052f4:	68a3      	ldr	r3, [r4, #8]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	3301      	adds	r3, #1
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3b01      	subs	r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	f340 8084 	ble.w	8005414 <_scanf_float+0x27c>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	3301      	adds	r3, #1
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	e766      	b.n	80051e2 <_scanf_float+0x4a>
 8005314:	eb1a 0f05 	cmn.w	sl, r5
 8005318:	f47f af70 	bne.w	80051fc <_scanf_float+0x64>
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	f806 3b01 	strb.w	r3, [r6], #1
 8005328:	e7e4      	b.n	80052f4 <_scanf_float+0x15c>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	0610      	lsls	r0, r2, #24
 800532e:	f57f af65 	bpl.w	80051fc <_scanf_float+0x64>
 8005332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005336:	e7f4      	b.n	8005322 <_scanf_float+0x18a>
 8005338:	f1ba 0f00 	cmp.w	sl, #0
 800533c:	d10e      	bne.n	800535c <_scanf_float+0x1c4>
 800533e:	f1b9 0f00 	cmp.w	r9, #0
 8005342:	d10e      	bne.n	8005362 <_scanf_float+0x1ca>
 8005344:	6822      	ldr	r2, [r4, #0]
 8005346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800534a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800534e:	d108      	bne.n	8005362 <_scanf_float+0x1ca>
 8005350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005354:	f04f 0a01 	mov.w	sl, #1
 8005358:	6022      	str	r2, [r4, #0]
 800535a:	e7e3      	b.n	8005324 <_scanf_float+0x18c>
 800535c:	f1ba 0f02 	cmp.w	sl, #2
 8005360:	d055      	beq.n	800540e <_scanf_float+0x276>
 8005362:	2d01      	cmp	r5, #1
 8005364:	d002      	beq.n	800536c <_scanf_float+0x1d4>
 8005366:	2d04      	cmp	r5, #4
 8005368:	f47f af48 	bne.w	80051fc <_scanf_float+0x64>
 800536c:	3501      	adds	r5, #1
 800536e:	b2ed      	uxtb	r5, r5
 8005370:	e7d8      	b.n	8005324 <_scanf_float+0x18c>
 8005372:	f1ba 0f01 	cmp.w	sl, #1
 8005376:	f47f af41 	bne.w	80051fc <_scanf_float+0x64>
 800537a:	f04f 0a02 	mov.w	sl, #2
 800537e:	e7d1      	b.n	8005324 <_scanf_float+0x18c>
 8005380:	b97d      	cbnz	r5, 80053a2 <_scanf_float+0x20a>
 8005382:	f1b9 0f00 	cmp.w	r9, #0
 8005386:	f47f af3c 	bne.w	8005202 <_scanf_float+0x6a>
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005394:	f47f af39 	bne.w	800520a <_scanf_float+0x72>
 8005398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800539c:	2501      	movs	r5, #1
 800539e:	6022      	str	r2, [r4, #0]
 80053a0:	e7c0      	b.n	8005324 <_scanf_float+0x18c>
 80053a2:	2d03      	cmp	r5, #3
 80053a4:	d0e2      	beq.n	800536c <_scanf_float+0x1d4>
 80053a6:	2d05      	cmp	r5, #5
 80053a8:	e7de      	b.n	8005368 <_scanf_float+0x1d0>
 80053aa:	2d02      	cmp	r5, #2
 80053ac:	f47f af26 	bne.w	80051fc <_scanf_float+0x64>
 80053b0:	2503      	movs	r5, #3
 80053b2:	e7b7      	b.n	8005324 <_scanf_float+0x18c>
 80053b4:	2d06      	cmp	r5, #6
 80053b6:	f47f af21 	bne.w	80051fc <_scanf_float+0x64>
 80053ba:	2507      	movs	r5, #7
 80053bc:	e7b2      	b.n	8005324 <_scanf_float+0x18c>
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	0591      	lsls	r1, r2, #22
 80053c2:	f57f af1b 	bpl.w	80051fc <_scanf_float+0x64>
 80053c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80053d0:	e7a8      	b.n	8005324 <_scanf_float+0x18c>
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80053d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80053dc:	d006      	beq.n	80053ec <_scanf_float+0x254>
 80053de:	0550      	lsls	r0, r2, #21
 80053e0:	f57f af0c 	bpl.w	80051fc <_scanf_float+0x64>
 80053e4:	f1b9 0f00 	cmp.w	r9, #0
 80053e8:	f43f af0f 	beq.w	800520a <_scanf_float+0x72>
 80053ec:	0591      	lsls	r1, r2, #22
 80053ee:	bf58      	it	pl
 80053f0:	9901      	ldrpl	r1, [sp, #4]
 80053f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053f6:	bf58      	it	pl
 80053f8:	eba9 0101 	subpl.w	r1, r9, r1
 80053fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005400:	f04f 0900 	mov.w	r9, #0
 8005404:	bf58      	it	pl
 8005406:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800540a:	6022      	str	r2, [r4, #0]
 800540c:	e78a      	b.n	8005324 <_scanf_float+0x18c>
 800540e:	f04f 0a03 	mov.w	sl, #3
 8005412:	e787      	b.n	8005324 <_scanf_float+0x18c>
 8005414:	4639      	mov	r1, r7
 8005416:	4640      	mov	r0, r8
 8005418:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800541c:	4798      	blx	r3
 800541e:	2800      	cmp	r0, #0
 8005420:	f43f aedf 	beq.w	80051e2 <_scanf_float+0x4a>
 8005424:	e6ea      	b.n	80051fc <_scanf_float+0x64>
 8005426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800542a:	463a      	mov	r2, r7
 800542c:	4640      	mov	r0, r8
 800542e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005432:	4798      	blx	r3
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	3b01      	subs	r3, #1
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	e6ec      	b.n	8005216 <_scanf_float+0x7e>
 800543c:	1e6b      	subs	r3, r5, #1
 800543e:	2b06      	cmp	r3, #6
 8005440:	d825      	bhi.n	800548e <_scanf_float+0x2f6>
 8005442:	2d02      	cmp	r5, #2
 8005444:	d836      	bhi.n	80054b4 <_scanf_float+0x31c>
 8005446:	455e      	cmp	r6, fp
 8005448:	f67f aee8 	bls.w	800521c <_scanf_float+0x84>
 800544c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005450:	463a      	mov	r2, r7
 8005452:	4640      	mov	r0, r8
 8005454:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005458:	4798      	blx	r3
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	3b01      	subs	r3, #1
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	e7f1      	b.n	8005446 <_scanf_float+0x2ae>
 8005462:	9802      	ldr	r0, [sp, #8]
 8005464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800546c:	463a      	mov	r2, r7
 800546e:	9002      	str	r0, [sp, #8]
 8005470:	4640      	mov	r0, r8
 8005472:	4798      	blx	r3
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	3b01      	subs	r3, #1
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800547e:	fa5f fa8a 	uxtb.w	sl, sl
 8005482:	f1ba 0f02 	cmp.w	sl, #2
 8005486:	d1ec      	bne.n	8005462 <_scanf_float+0x2ca>
 8005488:	3d03      	subs	r5, #3
 800548a:	b2ed      	uxtb	r5, r5
 800548c:	1b76      	subs	r6, r6, r5
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	05da      	lsls	r2, r3, #23
 8005492:	d52f      	bpl.n	80054f4 <_scanf_float+0x35c>
 8005494:	055b      	lsls	r3, r3, #21
 8005496:	d510      	bpl.n	80054ba <_scanf_float+0x322>
 8005498:	455e      	cmp	r6, fp
 800549a:	f67f aebf 	bls.w	800521c <_scanf_float+0x84>
 800549e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054a2:	463a      	mov	r2, r7
 80054a4:	4640      	mov	r0, r8
 80054a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054aa:	4798      	blx	r3
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	e7f1      	b.n	8005498 <_scanf_float+0x300>
 80054b4:	46aa      	mov	sl, r5
 80054b6:	9602      	str	r6, [sp, #8]
 80054b8:	e7df      	b.n	800547a <_scanf_float+0x2e2>
 80054ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	2965      	cmp	r1, #101	; 0x65
 80054c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80054c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	d00c      	beq.n	80054e8 <_scanf_float+0x350>
 80054ce:	2945      	cmp	r1, #69	; 0x45
 80054d0:	d00a      	beq.n	80054e8 <_scanf_float+0x350>
 80054d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054d6:	463a      	mov	r2, r7
 80054d8:	4640      	mov	r0, r8
 80054da:	4798      	blx	r3
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	1eb5      	subs	r5, r6, #2
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	463a      	mov	r2, r7
 80054ea:	4640      	mov	r0, r8
 80054ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054f0:	4798      	blx	r3
 80054f2:	462e      	mov	r6, r5
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	f015 0510 	ands.w	r5, r5, #16
 80054fa:	d159      	bne.n	80055b0 <_scanf_float+0x418>
 80054fc:	7035      	strb	r5, [r6, #0]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005508:	d11c      	bne.n	8005544 <_scanf_float+0x3ac>
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	454b      	cmp	r3, r9
 800550e:	eba3 0209 	sub.w	r2, r3, r9
 8005512:	d124      	bne.n	800555e <_scanf_float+0x3c6>
 8005514:	2200      	movs	r2, #0
 8005516:	4659      	mov	r1, fp
 8005518:	4640      	mov	r0, r8
 800551a:	f000 fe89 	bl	8006230 <_strtod_r>
 800551e:	f8d4 c000 	ldr.w	ip, [r4]
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	f01c 0f02 	tst.w	ip, #2
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	d021      	beq.n	8005574 <_scanf_float+0x3dc>
 8005530:	9903      	ldr	r1, [sp, #12]
 8005532:	1d1a      	adds	r2, r3, #4
 8005534:	600a      	str	r2, [r1, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	e9c3 6700 	strd	r6, r7, [r3]
 800553c:	68e3      	ldr	r3, [r4, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60e3      	str	r3, [r4, #12]
 8005542:	e66c      	b.n	800521e <_scanf_float+0x86>
 8005544:	9b04      	ldr	r3, [sp, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0e4      	beq.n	8005514 <_scanf_float+0x37c>
 800554a:	9905      	ldr	r1, [sp, #20]
 800554c:	230a      	movs	r3, #10
 800554e:	462a      	mov	r2, r5
 8005550:	4640      	mov	r0, r8
 8005552:	3101      	adds	r1, #1
 8005554:	f000 fef8 	bl	8006348 <_strtol_r>
 8005558:	9b04      	ldr	r3, [sp, #16]
 800555a:	9e05      	ldr	r6, [sp, #20]
 800555c:	1ac2      	subs	r2, r0, r3
 800555e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005562:	429e      	cmp	r6, r3
 8005564:	bf28      	it	cs
 8005566:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800556a:	4630      	mov	r0, r6
 800556c:	4911      	ldr	r1, [pc, #68]	; (80055b4 <_scanf_float+0x41c>)
 800556e:	f000 f829 	bl	80055c4 <siprintf>
 8005572:	e7cf      	b.n	8005514 <_scanf_float+0x37c>
 8005574:	f01c 0f04 	tst.w	ip, #4
 8005578:	f103 0e04 	add.w	lr, r3, #4
 800557c:	d003      	beq.n	8005586 <_scanf_float+0x3ee>
 800557e:	9903      	ldr	r1, [sp, #12]
 8005580:	f8c1 e000 	str.w	lr, [r1]
 8005584:	e7d7      	b.n	8005536 <_scanf_float+0x39e>
 8005586:	9a03      	ldr	r2, [sp, #12]
 8005588:	f8c2 e000 	str.w	lr, [r2]
 800558c:	f8d3 8000 	ldr.w	r8, [r3]
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	f7fb fa3a 	bl	8000a0c <__aeabi_dcmpun>
 8005598:	b128      	cbz	r0, 80055a6 <_scanf_float+0x40e>
 800559a:	4807      	ldr	r0, [pc, #28]	; (80055b8 <_scanf_float+0x420>)
 800559c:	f000 f80e 	bl	80055bc <nanf>
 80055a0:	f8c8 0000 	str.w	r0, [r8]
 80055a4:	e7ca      	b.n	800553c <_scanf_float+0x3a4>
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fb fa8d 	bl	8000ac8 <__aeabi_d2f>
 80055ae:	e7f7      	b.n	80055a0 <_scanf_float+0x408>
 80055b0:	2500      	movs	r5, #0
 80055b2:	e634      	b.n	800521e <_scanf_float+0x86>
 80055b4:	0800a4cc 	.word	0x0800a4cc
 80055b8:	0800a8e8 	.word	0x0800a8e8

080055bc <nanf>:
 80055bc:	4800      	ldr	r0, [pc, #0]	; (80055c0 <nanf+0x4>)
 80055be:	4770      	bx	lr
 80055c0:	7fc00000 	.word	0x7fc00000

080055c4 <siprintf>:
 80055c4:	b40e      	push	{r1, r2, r3}
 80055c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ca:	b500      	push	{lr}
 80055cc:	b09c      	sub	sp, #112	; 0x70
 80055ce:	ab1d      	add	r3, sp, #116	; 0x74
 80055d0:	9002      	str	r0, [sp, #8]
 80055d2:	9006      	str	r0, [sp, #24]
 80055d4:	9107      	str	r1, [sp, #28]
 80055d6:	9104      	str	r1, [sp, #16]
 80055d8:	4808      	ldr	r0, [pc, #32]	; (80055fc <siprintf+0x38>)
 80055da:	4909      	ldr	r1, [pc, #36]	; (8005600 <siprintf+0x3c>)
 80055dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e0:	9105      	str	r1, [sp, #20]
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	a902      	add	r1, sp, #8
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	f002 fe94 	bl	8008314 <_svfiprintf_r>
 80055ec:	2200      	movs	r2, #0
 80055ee:	9b02      	ldr	r3, [sp, #8]
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	b01c      	add	sp, #112	; 0x70
 80055f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f8:	b003      	add	sp, #12
 80055fa:	4770      	bx	lr
 80055fc:	20000010 	.word	0x20000010
 8005600:	ffff0208 	.word	0xffff0208

08005604 <sulp>:
 8005604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005608:	460f      	mov	r7, r1
 800560a:	4690      	mov	r8, r2
 800560c:	f002 fc2a 	bl	8007e64 <__ulp>
 8005610:	4604      	mov	r4, r0
 8005612:	460d      	mov	r5, r1
 8005614:	f1b8 0f00 	cmp.w	r8, #0
 8005618:	d011      	beq.n	800563e <sulp+0x3a>
 800561a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800561e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005622:	2b00      	cmp	r3, #0
 8005624:	dd0b      	ble.n	800563e <sulp+0x3a>
 8005626:	2400      	movs	r4, #0
 8005628:	051b      	lsls	r3, r3, #20
 800562a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800562e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	f7fa ff4f 	bl	80004d8 <__aeabi_dmul>
 800563a:	4604      	mov	r4, r0
 800563c:	460d      	mov	r5, r1
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005648 <_strtod_l>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	469b      	mov	fp, r3
 800564e:	2300      	movs	r3, #0
 8005650:	b0a1      	sub	sp, #132	; 0x84
 8005652:	931c      	str	r3, [sp, #112]	; 0x70
 8005654:	4ba1      	ldr	r3, [pc, #644]	; (80058dc <_strtod_l+0x294>)
 8005656:	4682      	mov	sl, r0
 8005658:	681f      	ldr	r7, [r3, #0]
 800565a:	460e      	mov	r6, r1
 800565c:	4638      	mov	r0, r7
 800565e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005660:	f7fa fd76 	bl	8000150 <strlen>
 8005664:	f04f 0800 	mov.w	r8, #0
 8005668:	4604      	mov	r4, r0
 800566a:	f04f 0900 	mov.w	r9, #0
 800566e:	961b      	str	r6, [sp, #108]	; 0x6c
 8005670:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	2a2b      	cmp	r2, #43	; 0x2b
 8005676:	d04c      	beq.n	8005712 <_strtod_l+0xca>
 8005678:	d83a      	bhi.n	80056f0 <_strtod_l+0xa8>
 800567a:	2a0d      	cmp	r2, #13
 800567c:	d833      	bhi.n	80056e6 <_strtod_l+0x9e>
 800567e:	2a08      	cmp	r2, #8
 8005680:	d833      	bhi.n	80056ea <_strtod_l+0xa2>
 8005682:	2a00      	cmp	r2, #0
 8005684:	d03d      	beq.n	8005702 <_strtod_l+0xba>
 8005686:	2300      	movs	r3, #0
 8005688:	930c      	str	r3, [sp, #48]	; 0x30
 800568a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800568c:	782b      	ldrb	r3, [r5, #0]
 800568e:	2b30      	cmp	r3, #48	; 0x30
 8005690:	f040 80af 	bne.w	80057f2 <_strtod_l+0x1aa>
 8005694:	786b      	ldrb	r3, [r5, #1]
 8005696:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800569a:	2b58      	cmp	r3, #88	; 0x58
 800569c:	d16c      	bne.n	8005778 <_strtod_l+0x130>
 800569e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a0:	4650      	mov	r0, sl
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	ab1c      	add	r3, sp, #112	; 0x70
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	4a8d      	ldr	r2, [pc, #564]	; (80058e0 <_strtod_l+0x298>)
 80056aa:	f8cd b008 	str.w	fp, [sp, #8]
 80056ae:	ab1d      	add	r3, sp, #116	; 0x74
 80056b0:	a91b      	add	r1, sp, #108	; 0x6c
 80056b2:	f001 fd2f 	bl	8007114 <__gethex>
 80056b6:	f010 0607 	ands.w	r6, r0, #7
 80056ba:	4604      	mov	r4, r0
 80056bc:	d005      	beq.n	80056ca <_strtod_l+0x82>
 80056be:	2e06      	cmp	r6, #6
 80056c0:	d129      	bne.n	8005716 <_strtod_l+0xce>
 80056c2:	2300      	movs	r3, #0
 80056c4:	3501      	adds	r5, #1
 80056c6:	951b      	str	r5, [sp, #108]	; 0x6c
 80056c8:	930c      	str	r3, [sp, #48]	; 0x30
 80056ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 8596 	bne.w	80061fe <_strtod_l+0xbb6>
 80056d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056d4:	b1d3      	cbz	r3, 800570c <_strtod_l+0xc4>
 80056d6:	4642      	mov	r2, r8
 80056d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	b021      	add	sp, #132	; 0x84
 80056e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e6:	2a20      	cmp	r2, #32
 80056e8:	d1cd      	bne.n	8005686 <_strtod_l+0x3e>
 80056ea:	3301      	adds	r3, #1
 80056ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80056ee:	e7bf      	b.n	8005670 <_strtod_l+0x28>
 80056f0:	2a2d      	cmp	r2, #45	; 0x2d
 80056f2:	d1c8      	bne.n	8005686 <_strtod_l+0x3e>
 80056f4:	2201      	movs	r2, #1
 80056f6:	920c      	str	r2, [sp, #48]	; 0x30
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1c3      	bne.n	800568a <_strtod_l+0x42>
 8005702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005704:	961b      	str	r6, [sp, #108]	; 0x6c
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 8577 	bne.w	80061fa <_strtod_l+0xbb2>
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	e7e4      	b.n	80056dc <_strtod_l+0x94>
 8005712:	2200      	movs	r2, #0
 8005714:	e7ef      	b.n	80056f6 <_strtod_l+0xae>
 8005716:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005718:	b13a      	cbz	r2, 800572a <_strtod_l+0xe2>
 800571a:	2135      	movs	r1, #53	; 0x35
 800571c:	a81e      	add	r0, sp, #120	; 0x78
 800571e:	f002 fca5 	bl	800806c <__copybits>
 8005722:	4650      	mov	r0, sl
 8005724:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005726:	f002 f86d 	bl	8007804 <_Bfree>
 800572a:	3e01      	subs	r6, #1
 800572c:	2e05      	cmp	r6, #5
 800572e:	d807      	bhi.n	8005740 <_strtod_l+0xf8>
 8005730:	e8df f006 	tbb	[pc, r6]
 8005734:	1d180b0e 	.word	0x1d180b0e
 8005738:	030e      	.short	0x030e
 800573a:	f04f 0900 	mov.w	r9, #0
 800573e:	46c8      	mov	r8, r9
 8005740:	0721      	lsls	r1, r4, #28
 8005742:	d5c2      	bpl.n	80056ca <_strtod_l+0x82>
 8005744:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005748:	e7bf      	b.n	80056ca <_strtod_l+0x82>
 800574a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800574e:	e7f7      	b.n	8005740 <_strtod_l+0xf8>
 8005750:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005752:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005756:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800575a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800575e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005762:	e7ed      	b.n	8005740 <_strtod_l+0xf8>
 8005764:	f04f 0800 	mov.w	r8, #0
 8005768:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80058e4 <_strtod_l+0x29c>
 800576c:	e7e8      	b.n	8005740 <_strtod_l+0xf8>
 800576e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005772:	f04f 38ff 	mov.w	r8, #4294967295
 8005776:	e7e3      	b.n	8005740 <_strtod_l+0xf8>
 8005778:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	921b      	str	r2, [sp, #108]	; 0x6c
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2b30      	cmp	r3, #48	; 0x30
 8005782:	d0f9      	beq.n	8005778 <_strtod_l+0x130>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0a0      	beq.n	80056ca <_strtod_l+0x82>
 8005788:	2301      	movs	r3, #1
 800578a:	9307      	str	r3, [sp, #28]
 800578c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800578e:	220a      	movs	r2, #10
 8005790:	9308      	str	r3, [sp, #32]
 8005792:	2300      	movs	r3, #0
 8005794:	469b      	mov	fp, r3
 8005796:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800579a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800579c:	7805      	ldrb	r5, [r0, #0]
 800579e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80057a2:	b2d9      	uxtb	r1, r3
 80057a4:	2909      	cmp	r1, #9
 80057a6:	d926      	bls.n	80057f6 <_strtod_l+0x1ae>
 80057a8:	4622      	mov	r2, r4
 80057aa:	4639      	mov	r1, r7
 80057ac:	f002 fec8 	bl	8008540 <strncmp>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d032      	beq.n	800581a <_strtod_l+0x1d2>
 80057b4:	2000      	movs	r0, #0
 80057b6:	462b      	mov	r3, r5
 80057b8:	465c      	mov	r4, fp
 80057ba:	4602      	mov	r2, r0
 80057bc:	9004      	str	r0, [sp, #16]
 80057be:	2b65      	cmp	r3, #101	; 0x65
 80057c0:	d001      	beq.n	80057c6 <_strtod_l+0x17e>
 80057c2:	2b45      	cmp	r3, #69	; 0x45
 80057c4:	d113      	bne.n	80057ee <_strtod_l+0x1a6>
 80057c6:	b91c      	cbnz	r4, 80057d0 <_strtod_l+0x188>
 80057c8:	9b07      	ldr	r3, [sp, #28]
 80057ca:	4303      	orrs	r3, r0
 80057cc:	d099      	beq.n	8005702 <_strtod_l+0xba>
 80057ce:	2400      	movs	r4, #0
 80057d0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80057d2:	1c73      	adds	r3, r6, #1
 80057d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80057d6:	7873      	ldrb	r3, [r6, #1]
 80057d8:	2b2b      	cmp	r3, #43	; 0x2b
 80057da:	d078      	beq.n	80058ce <_strtod_l+0x286>
 80057dc:	2b2d      	cmp	r3, #45	; 0x2d
 80057de:	d07b      	beq.n	80058d8 <_strtod_l+0x290>
 80057e0:	2700      	movs	r7, #0
 80057e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80057e6:	2909      	cmp	r1, #9
 80057e8:	f240 8082 	bls.w	80058f0 <_strtod_l+0x2a8>
 80057ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80057ee:	2500      	movs	r5, #0
 80057f0:	e09e      	b.n	8005930 <_strtod_l+0x2e8>
 80057f2:	2300      	movs	r3, #0
 80057f4:	e7c9      	b.n	800578a <_strtod_l+0x142>
 80057f6:	f1bb 0f08 	cmp.w	fp, #8
 80057fa:	bfd5      	itete	le
 80057fc:	9906      	ldrle	r1, [sp, #24]
 80057fe:	9905      	ldrgt	r1, [sp, #20]
 8005800:	fb02 3301 	mlale	r3, r2, r1, r3
 8005804:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005808:	f100 0001 	add.w	r0, r0, #1
 800580c:	bfd4      	ite	le
 800580e:	9306      	strle	r3, [sp, #24]
 8005810:	9305      	strgt	r3, [sp, #20]
 8005812:	f10b 0b01 	add.w	fp, fp, #1
 8005816:	901b      	str	r0, [sp, #108]	; 0x6c
 8005818:	e7bf      	b.n	800579a <_strtod_l+0x152>
 800581a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800581c:	191a      	adds	r2, r3, r4
 800581e:	921b      	str	r2, [sp, #108]	; 0x6c
 8005820:	5d1b      	ldrb	r3, [r3, r4]
 8005822:	f1bb 0f00 	cmp.w	fp, #0
 8005826:	d036      	beq.n	8005896 <_strtod_l+0x24e>
 8005828:	465c      	mov	r4, fp
 800582a:	9004      	str	r0, [sp, #16]
 800582c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005830:	2a09      	cmp	r2, #9
 8005832:	d912      	bls.n	800585a <_strtod_l+0x212>
 8005834:	2201      	movs	r2, #1
 8005836:	e7c2      	b.n	80057be <_strtod_l+0x176>
 8005838:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800583a:	3001      	adds	r0, #1
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	921b      	str	r2, [sp, #108]	; 0x6c
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b30      	cmp	r3, #48	; 0x30
 8005844:	d0f8      	beq.n	8005838 <_strtod_l+0x1f0>
 8005846:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800584a:	2a08      	cmp	r2, #8
 800584c:	f200 84dc 	bhi.w	8006208 <_strtod_l+0xbc0>
 8005850:	9004      	str	r0, [sp, #16]
 8005852:	2000      	movs	r0, #0
 8005854:	4604      	mov	r4, r0
 8005856:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005858:	9208      	str	r2, [sp, #32]
 800585a:	3b30      	subs	r3, #48	; 0x30
 800585c:	f100 0201 	add.w	r2, r0, #1
 8005860:	d013      	beq.n	800588a <_strtod_l+0x242>
 8005862:	9904      	ldr	r1, [sp, #16]
 8005864:	1905      	adds	r5, r0, r4
 8005866:	4411      	add	r1, r2
 8005868:	9104      	str	r1, [sp, #16]
 800586a:	4622      	mov	r2, r4
 800586c:	210a      	movs	r1, #10
 800586e:	42aa      	cmp	r2, r5
 8005870:	d113      	bne.n	800589a <_strtod_l+0x252>
 8005872:	1822      	adds	r2, r4, r0
 8005874:	2a08      	cmp	r2, #8
 8005876:	f104 0401 	add.w	r4, r4, #1
 800587a:	4404      	add	r4, r0
 800587c:	dc1b      	bgt.n	80058b6 <_strtod_l+0x26e>
 800587e:	220a      	movs	r2, #10
 8005880:	9906      	ldr	r1, [sp, #24]
 8005882:	fb02 3301 	mla	r3, r2, r1, r3
 8005886:	9306      	str	r3, [sp, #24]
 8005888:	2200      	movs	r2, #0
 800588a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800588c:	4610      	mov	r0, r2
 800588e:	1c59      	adds	r1, r3, #1
 8005890:	911b      	str	r1, [sp, #108]	; 0x6c
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	e7ca      	b.n	800582c <_strtod_l+0x1e4>
 8005896:	4658      	mov	r0, fp
 8005898:	e7d3      	b.n	8005842 <_strtod_l+0x1fa>
 800589a:	2a08      	cmp	r2, #8
 800589c:	dc04      	bgt.n	80058a8 <_strtod_l+0x260>
 800589e:	9f06      	ldr	r7, [sp, #24]
 80058a0:	434f      	muls	r7, r1
 80058a2:	9706      	str	r7, [sp, #24]
 80058a4:	3201      	adds	r2, #1
 80058a6:	e7e2      	b.n	800586e <_strtod_l+0x226>
 80058a8:	1c57      	adds	r7, r2, #1
 80058aa:	2f10      	cmp	r7, #16
 80058ac:	bfde      	ittt	le
 80058ae:	9f05      	ldrle	r7, [sp, #20]
 80058b0:	434f      	mulle	r7, r1
 80058b2:	9705      	strle	r7, [sp, #20]
 80058b4:	e7f6      	b.n	80058a4 <_strtod_l+0x25c>
 80058b6:	2c10      	cmp	r4, #16
 80058b8:	bfdf      	itttt	le
 80058ba:	220a      	movle	r2, #10
 80058bc:	9905      	ldrle	r1, [sp, #20]
 80058be:	fb02 3301 	mlale	r3, r2, r1, r3
 80058c2:	9305      	strle	r3, [sp, #20]
 80058c4:	e7e0      	b.n	8005888 <_strtod_l+0x240>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2201      	movs	r2, #1
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	e77c      	b.n	80057c8 <_strtod_l+0x180>
 80058ce:	2700      	movs	r7, #0
 80058d0:	1cb3      	adds	r3, r6, #2
 80058d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80058d4:	78b3      	ldrb	r3, [r6, #2]
 80058d6:	e784      	b.n	80057e2 <_strtod_l+0x19a>
 80058d8:	2701      	movs	r7, #1
 80058da:	e7f9      	b.n	80058d0 <_strtod_l+0x288>
 80058dc:	0800a728 	.word	0x0800a728
 80058e0:	0800a4d4 	.word	0x0800a4d4
 80058e4:	7ff00000 	.word	0x7ff00000
 80058e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058ea:	1c59      	adds	r1, r3, #1
 80058ec:	911b      	str	r1, [sp, #108]	; 0x6c
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b30      	cmp	r3, #48	; 0x30
 80058f2:	d0f9      	beq.n	80058e8 <_strtod_l+0x2a0>
 80058f4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80058f8:	2908      	cmp	r1, #8
 80058fa:	f63f af78 	bhi.w	80057ee <_strtod_l+0x1a6>
 80058fe:	f04f 0e0a 	mov.w	lr, #10
 8005902:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8005906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005908:	9309      	str	r3, [sp, #36]	; 0x24
 800590a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	911b      	str	r1, [sp, #108]	; 0x6c
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8005916:	2d09      	cmp	r5, #9
 8005918:	d935      	bls.n	8005986 <_strtod_l+0x33e>
 800591a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800591c:	1b49      	subs	r1, r1, r5
 800591e:	2908      	cmp	r1, #8
 8005920:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005924:	dc02      	bgt.n	800592c <_strtod_l+0x2e4>
 8005926:	4565      	cmp	r5, ip
 8005928:	bfa8      	it	ge
 800592a:	4665      	movge	r5, ip
 800592c:	b107      	cbz	r7, 8005930 <_strtod_l+0x2e8>
 800592e:	426d      	negs	r5, r5
 8005930:	2c00      	cmp	r4, #0
 8005932:	d14c      	bne.n	80059ce <_strtod_l+0x386>
 8005934:	9907      	ldr	r1, [sp, #28]
 8005936:	4301      	orrs	r1, r0
 8005938:	f47f aec7 	bne.w	80056ca <_strtod_l+0x82>
 800593c:	2a00      	cmp	r2, #0
 800593e:	f47f aee0 	bne.w	8005702 <_strtod_l+0xba>
 8005942:	2b69      	cmp	r3, #105	; 0x69
 8005944:	d026      	beq.n	8005994 <_strtod_l+0x34c>
 8005946:	dc23      	bgt.n	8005990 <_strtod_l+0x348>
 8005948:	2b49      	cmp	r3, #73	; 0x49
 800594a:	d023      	beq.n	8005994 <_strtod_l+0x34c>
 800594c:	2b4e      	cmp	r3, #78	; 0x4e
 800594e:	f47f aed8 	bne.w	8005702 <_strtod_l+0xba>
 8005952:	499c      	ldr	r1, [pc, #624]	; (8005bc4 <_strtod_l+0x57c>)
 8005954:	a81b      	add	r0, sp, #108	; 0x6c
 8005956:	f001 fe2b 	bl	80075b0 <__match>
 800595a:	2800      	cmp	r0, #0
 800595c:	f43f aed1 	beq.w	8005702 <_strtod_l+0xba>
 8005960:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b28      	cmp	r3, #40	; 0x28
 8005966:	d12c      	bne.n	80059c2 <_strtod_l+0x37a>
 8005968:	4997      	ldr	r1, [pc, #604]	; (8005bc8 <_strtod_l+0x580>)
 800596a:	aa1e      	add	r2, sp, #120	; 0x78
 800596c:	a81b      	add	r0, sp, #108	; 0x6c
 800596e:	f001 fe33 	bl	80075d8 <__hexnan>
 8005972:	2805      	cmp	r0, #5
 8005974:	d125      	bne.n	80059c2 <_strtod_l+0x37a>
 8005976:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005978:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800597c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005980:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005984:	e6a1      	b.n	80056ca <_strtod_l+0x82>
 8005986:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800598a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800598e:	e7bc      	b.n	800590a <_strtod_l+0x2c2>
 8005990:	2b6e      	cmp	r3, #110	; 0x6e
 8005992:	e7dc      	b.n	800594e <_strtod_l+0x306>
 8005994:	498d      	ldr	r1, [pc, #564]	; (8005bcc <_strtod_l+0x584>)
 8005996:	a81b      	add	r0, sp, #108	; 0x6c
 8005998:	f001 fe0a 	bl	80075b0 <__match>
 800599c:	2800      	cmp	r0, #0
 800599e:	f43f aeb0 	beq.w	8005702 <_strtod_l+0xba>
 80059a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a4:	498a      	ldr	r1, [pc, #552]	; (8005bd0 <_strtod_l+0x588>)
 80059a6:	3b01      	subs	r3, #1
 80059a8:	a81b      	add	r0, sp, #108	; 0x6c
 80059aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80059ac:	f001 fe00 	bl	80075b0 <__match>
 80059b0:	b910      	cbnz	r0, 80059b8 <_strtod_l+0x370>
 80059b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059b4:	3301      	adds	r3, #1
 80059b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80059b8:	f04f 0800 	mov.w	r8, #0
 80059bc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005be0 <_strtod_l+0x598>
 80059c0:	e683      	b.n	80056ca <_strtod_l+0x82>
 80059c2:	4884      	ldr	r0, [pc, #528]	; (8005bd4 <_strtod_l+0x58c>)
 80059c4:	f002 fda6 	bl	8008514 <nan>
 80059c8:	4680      	mov	r8, r0
 80059ca:	4689      	mov	r9, r1
 80059cc:	e67d      	b.n	80056ca <_strtod_l+0x82>
 80059ce:	9b04      	ldr	r3, [sp, #16]
 80059d0:	f1bb 0f00 	cmp.w	fp, #0
 80059d4:	bf08      	it	eq
 80059d6:	46a3      	moveq	fp, r4
 80059d8:	1aeb      	subs	r3, r5, r3
 80059da:	2c10      	cmp	r4, #16
 80059dc:	9806      	ldr	r0, [sp, #24]
 80059de:	4626      	mov	r6, r4
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	bfa8      	it	ge
 80059e4:	2610      	movge	r6, #16
 80059e6:	f7fa fcfd 	bl	80003e4 <__aeabi_ui2d>
 80059ea:	2c09      	cmp	r4, #9
 80059ec:	4680      	mov	r8, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	dd13      	ble.n	8005a1a <_strtod_l+0x3d2>
 80059f2:	4b79      	ldr	r3, [pc, #484]	; (8005bd8 <_strtod_l+0x590>)
 80059f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80059fc:	f7fa fd6c 	bl	80004d8 <__aeabi_dmul>
 8005a00:	4680      	mov	r8, r0
 8005a02:	9805      	ldr	r0, [sp, #20]
 8005a04:	4689      	mov	r9, r1
 8005a06:	f7fa fced 	bl	80003e4 <__aeabi_ui2d>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fa fbab 	bl	800016c <__adddf3>
 8005a16:	4680      	mov	r8, r0
 8005a18:	4689      	mov	r9, r1
 8005a1a:	2c0f      	cmp	r4, #15
 8005a1c:	dc36      	bgt.n	8005a8c <_strtod_l+0x444>
 8005a1e:	9b07      	ldr	r3, [sp, #28]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f43f ae52 	beq.w	80056ca <_strtod_l+0x82>
 8005a26:	dd22      	ble.n	8005a6e <_strtod_l+0x426>
 8005a28:	2b16      	cmp	r3, #22
 8005a2a:	dc09      	bgt.n	8005a40 <_strtod_l+0x3f8>
 8005a2c:	4c6a      	ldr	r4, [pc, #424]	; (8005bd8 <_strtod_l+0x590>)
 8005a2e:	4642      	mov	r2, r8
 8005a30:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005a34:	464b      	mov	r3, r9
 8005a36:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005a3a:	f7fa fd4d 	bl	80004d8 <__aeabi_dmul>
 8005a3e:	e7c3      	b.n	80059c8 <_strtod_l+0x380>
 8005a40:	9a07      	ldr	r2, [sp, #28]
 8005a42:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005a46:	4293      	cmp	r3, r2
 8005a48:	db20      	blt.n	8005a8c <_strtod_l+0x444>
 8005a4a:	4d63      	ldr	r5, [pc, #396]	; (8005bd8 <_strtod_l+0x590>)
 8005a4c:	f1c4 040f 	rsb	r4, r4, #15
 8005a50:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005a54:	4642      	mov	r2, r8
 8005a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	f7fa fd3c 	bl	80004d8 <__aeabi_dmul>
 8005a60:	9b07      	ldr	r3, [sp, #28]
 8005a62:	1b1c      	subs	r4, r3, r4
 8005a64:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a6c:	e7e5      	b.n	8005a3a <_strtod_l+0x3f2>
 8005a6e:	9b07      	ldr	r3, [sp, #28]
 8005a70:	3316      	adds	r3, #22
 8005a72:	db0b      	blt.n	8005a8c <_strtod_l+0x444>
 8005a74:	9b04      	ldr	r3, [sp, #16]
 8005a76:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <_strtod_l+0x590>)
 8005a78:	1b5d      	subs	r5, r3, r5
 8005a7a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005a7e:	4640      	mov	r0, r8
 8005a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fe51 	bl	800072c <__aeabi_ddiv>
 8005a8a:	e79d      	b.n	80059c8 <_strtod_l+0x380>
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	1ba6      	subs	r6, r4, r6
 8005a90:	441e      	add	r6, r3
 8005a92:	2e00      	cmp	r6, #0
 8005a94:	dd71      	ble.n	8005b7a <_strtod_l+0x532>
 8005a96:	f016 030f 	ands.w	r3, r6, #15
 8005a9a:	d00a      	beq.n	8005ab2 <_strtod_l+0x46a>
 8005a9c:	494e      	ldr	r1, [pc, #312]	; (8005bd8 <_strtod_l+0x590>)
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	f7fa fd15 	bl	80004d8 <__aeabi_dmul>
 8005aae:	4680      	mov	r8, r0
 8005ab0:	4689      	mov	r9, r1
 8005ab2:	f036 060f 	bics.w	r6, r6, #15
 8005ab6:	d050      	beq.n	8005b5a <_strtod_l+0x512>
 8005ab8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005abc:	dd27      	ble.n	8005b0e <_strtod_l+0x4c6>
 8005abe:	f04f 0b00 	mov.w	fp, #0
 8005ac2:	f8cd b010 	str.w	fp, [sp, #16]
 8005ac6:	f8cd b020 	str.w	fp, [sp, #32]
 8005aca:	f8cd b018 	str.w	fp, [sp, #24]
 8005ace:	2322      	movs	r3, #34	; 0x22
 8005ad0:	f04f 0800 	mov.w	r8, #0
 8005ad4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005be0 <_strtod_l+0x598>
 8005ad8:	f8ca 3000 	str.w	r3, [sl]
 8005adc:	9b08      	ldr	r3, [sp, #32]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f43f adf3 	beq.w	80056ca <_strtod_l+0x82>
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ae8:	f001 fe8c 	bl	8007804 <_Bfree>
 8005aec:	4650      	mov	r0, sl
 8005aee:	9906      	ldr	r1, [sp, #24]
 8005af0:	f001 fe88 	bl	8007804 <_Bfree>
 8005af4:	4650      	mov	r0, sl
 8005af6:	9904      	ldr	r1, [sp, #16]
 8005af8:	f001 fe84 	bl	8007804 <_Bfree>
 8005afc:	4650      	mov	r0, sl
 8005afe:	9908      	ldr	r1, [sp, #32]
 8005b00:	f001 fe80 	bl	8007804 <_Bfree>
 8005b04:	4659      	mov	r1, fp
 8005b06:	4650      	mov	r0, sl
 8005b08:	f001 fe7c 	bl	8007804 <_Bfree>
 8005b0c:	e5dd      	b.n	80056ca <_strtod_l+0x82>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	4640      	mov	r0, r8
 8005b12:	4649      	mov	r1, r9
 8005b14:	461f      	mov	r7, r3
 8005b16:	1136      	asrs	r6, r6, #4
 8005b18:	2e01      	cmp	r6, #1
 8005b1a:	dc21      	bgt.n	8005b60 <_strtod_l+0x518>
 8005b1c:	b10b      	cbz	r3, 8005b22 <_strtod_l+0x4da>
 8005b1e:	4680      	mov	r8, r0
 8005b20:	4689      	mov	r9, r1
 8005b22:	4b2e      	ldr	r3, [pc, #184]	; (8005bdc <_strtod_l+0x594>)
 8005b24:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005b28:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b32:	464b      	mov	r3, r9
 8005b34:	f7fa fcd0 	bl	80004d8 <__aeabi_dmul>
 8005b38:	4b29      	ldr	r3, [pc, #164]	; (8005be0 <_strtod_l+0x598>)
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	400b      	ands	r3, r1
 8005b3e:	4929      	ldr	r1, [pc, #164]	; (8005be4 <_strtod_l+0x59c>)
 8005b40:	4680      	mov	r8, r0
 8005b42:	428b      	cmp	r3, r1
 8005b44:	d8bb      	bhi.n	8005abe <_strtod_l+0x476>
 8005b46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b4a:	428b      	cmp	r3, r1
 8005b4c:	bf86      	itte	hi
 8005b4e:	f04f 38ff 	movhi.w	r8, #4294967295
 8005b52:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005be8 <_strtod_l+0x5a0>
 8005b56:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9305      	str	r3, [sp, #20]
 8005b5e:	e07e      	b.n	8005c5e <_strtod_l+0x616>
 8005b60:	07f2      	lsls	r2, r6, #31
 8005b62:	d507      	bpl.n	8005b74 <_strtod_l+0x52c>
 8005b64:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <_strtod_l+0x594>)
 8005b66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fcb3 	bl	80004d8 <__aeabi_dmul>
 8005b72:	2301      	movs	r3, #1
 8005b74:	3701      	adds	r7, #1
 8005b76:	1076      	asrs	r6, r6, #1
 8005b78:	e7ce      	b.n	8005b18 <_strtod_l+0x4d0>
 8005b7a:	d0ee      	beq.n	8005b5a <_strtod_l+0x512>
 8005b7c:	4276      	negs	r6, r6
 8005b7e:	f016 020f 	ands.w	r2, r6, #15
 8005b82:	d00a      	beq.n	8005b9a <_strtod_l+0x552>
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <_strtod_l+0x590>)
 8005b86:	4640      	mov	r0, r8
 8005b88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fdcb 	bl	800072c <__aeabi_ddiv>
 8005b96:	4680      	mov	r8, r0
 8005b98:	4689      	mov	r9, r1
 8005b9a:	1136      	asrs	r6, r6, #4
 8005b9c:	d0dd      	beq.n	8005b5a <_strtod_l+0x512>
 8005b9e:	2e1f      	cmp	r6, #31
 8005ba0:	dd24      	ble.n	8005bec <_strtod_l+0x5a4>
 8005ba2:	f04f 0b00 	mov.w	fp, #0
 8005ba6:	f8cd b010 	str.w	fp, [sp, #16]
 8005baa:	f8cd b020 	str.w	fp, [sp, #32]
 8005bae:	f8cd b018 	str.w	fp, [sp, #24]
 8005bb2:	2322      	movs	r3, #34	; 0x22
 8005bb4:	f04f 0800 	mov.w	r8, #0
 8005bb8:	f04f 0900 	mov.w	r9, #0
 8005bbc:	f8ca 3000 	str.w	r3, [sl]
 8005bc0:	e78c      	b.n	8005adc <_strtod_l+0x494>
 8005bc2:	bf00      	nop
 8005bc4:	0800a4a5 	.word	0x0800a4a5
 8005bc8:	0800a4e8 	.word	0x0800a4e8
 8005bcc:	0800a49d 	.word	0x0800a49d
 8005bd0:	0800a62c 	.word	0x0800a62c
 8005bd4:	0800a8e8 	.word	0x0800a8e8
 8005bd8:	0800a7c8 	.word	0x0800a7c8
 8005bdc:	0800a7a0 	.word	0x0800a7a0
 8005be0:	7ff00000 	.word	0x7ff00000
 8005be4:	7ca00000 	.word	0x7ca00000
 8005be8:	7fefffff 	.word	0x7fefffff
 8005bec:	f016 0310 	ands.w	r3, r6, #16
 8005bf0:	bf18      	it	ne
 8005bf2:	236a      	movne	r3, #106	; 0x6a
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	9305      	str	r3, [sp, #20]
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4fb2      	ldr	r7, [pc, #712]	; (8005ec8 <_strtod_l+0x880>)
 8005bfe:	07f2      	lsls	r2, r6, #31
 8005c00:	d504      	bpl.n	8005c0c <_strtod_l+0x5c4>
 8005c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c06:	f7fa fc67 	bl	80004d8 <__aeabi_dmul>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	1076      	asrs	r6, r6, #1
 8005c0e:	f107 0708 	add.w	r7, r7, #8
 8005c12:	d1f4      	bne.n	8005bfe <_strtod_l+0x5b6>
 8005c14:	b10b      	cbz	r3, 8005c1a <_strtod_l+0x5d2>
 8005c16:	4680      	mov	r8, r0
 8005c18:	4689      	mov	r9, r1
 8005c1a:	9b05      	ldr	r3, [sp, #20]
 8005c1c:	b1bb      	cbz	r3, 8005c4e <_strtod_l+0x606>
 8005c1e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8005c22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	4649      	mov	r1, r9
 8005c2a:	dd10      	ble.n	8005c4e <_strtod_l+0x606>
 8005c2c:	2b1f      	cmp	r3, #31
 8005c2e:	f340 812b 	ble.w	8005e88 <_strtod_l+0x840>
 8005c32:	2b34      	cmp	r3, #52	; 0x34
 8005c34:	bfd8      	it	le
 8005c36:	f04f 32ff 	movle.w	r2, #4294967295
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	bfcf      	iteee	gt
 8005c40:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005c44:	3b20      	suble	r3, #32
 8005c46:	fa02 f303 	lslle.w	r3, r2, r3
 8005c4a:	ea03 0901 	andle.w	r9, r3, r1
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2300      	movs	r3, #0
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f7fa fea7 	bl	80009a8 <__aeabi_dcmpeq>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d1a1      	bne.n	8005ba2 <_strtod_l+0x55a>
 8005c5e:	9b06      	ldr	r3, [sp, #24]
 8005c60:	465a      	mov	r2, fp
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	4650      	mov	r0, sl
 8005c66:	4623      	mov	r3, r4
 8005c68:	9908      	ldr	r1, [sp, #32]
 8005c6a:	f001 fe37 	bl	80078dc <__s2b>
 8005c6e:	9008      	str	r0, [sp, #32]
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f43f af24 	beq.w	8005abe <_strtod_l+0x476>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	f04f 0b00 	mov.w	fp, #0
 8005c7c:	1b5d      	subs	r5, r3, r5
 8005c7e:	9b07      	ldr	r3, [sp, #28]
 8005c80:	f8cd b010 	str.w	fp, [sp, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bfb4      	ite	lt
 8005c88:	462b      	movlt	r3, r5
 8005c8a:	2300      	movge	r3, #0
 8005c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8005c8e:	9b07      	ldr	r3, [sp, #28]
 8005c90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c94:	9316      	str	r3, [sp, #88]	; 0x58
 8005c96:	9b08      	ldr	r3, [sp, #32]
 8005c98:	4650      	mov	r0, sl
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	f001 fd72 	bl	8007784 <_Balloc>
 8005ca0:	9006      	str	r0, [sp, #24]
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	f43f af13 	beq.w	8005ace <_strtod_l+0x486>
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	300c      	adds	r0, #12
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	f103 010c 	add.w	r1, r3, #12
 8005cb2:	3202      	adds	r2, #2
 8005cb4:	0092      	lsls	r2, r2, #2
 8005cb6:	f001 fd57 	bl	8007768 <memcpy>
 8005cba:	ab1e      	add	r3, sp, #120	; 0x78
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	4642      	mov	r2, r8
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005ccc:	f002 f944 	bl	8007f58 <__d2b>
 8005cd0:	901c      	str	r0, [sp, #112]	; 0x70
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f43f aefb 	beq.w	8005ace <_strtod_l+0x486>
 8005cd8:	2101      	movs	r1, #1
 8005cda:	4650      	mov	r0, sl
 8005cdc:	f001 fe96 	bl	8007a0c <__i2b>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	9004      	str	r0, [sp, #16]
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f43f aef2 	beq.w	8005ace <_strtod_l+0x486>
 8005cea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005cec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	bfab      	itete	ge
 8005cf2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005cf4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005cf6:	18ee      	addge	r6, r5, r3
 8005cf8:	1b5c      	sublt	r4, r3, r5
 8005cfa:	9b05      	ldr	r3, [sp, #20]
 8005cfc:	bfa8      	it	ge
 8005cfe:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005d00:	eba5 0503 	sub.w	r5, r5, r3
 8005d04:	4415      	add	r5, r2
 8005d06:	4b71      	ldr	r3, [pc, #452]	; (8005ecc <_strtod_l+0x884>)
 8005d08:	f105 35ff 	add.w	r5, r5, #4294967295
 8005d0c:	bfb8      	it	lt
 8005d0e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005d10:	429d      	cmp	r5, r3
 8005d12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d16:	f280 80c9 	bge.w	8005eac <_strtod_l+0x864>
 8005d1a:	1b5b      	subs	r3, r3, r5
 8005d1c:	2b1f      	cmp	r3, #31
 8005d1e:	f04f 0701 	mov.w	r7, #1
 8005d22:	eba2 0203 	sub.w	r2, r2, r3
 8005d26:	f300 80b6 	bgt.w	8005e96 <_strtod_l+0x84e>
 8005d2a:	2500      	movs	r5, #0
 8005d2c:	fa07 f303 	lsl.w	r3, r7, r3
 8005d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d32:	18b7      	adds	r7, r6, r2
 8005d34:	9b05      	ldr	r3, [sp, #20]
 8005d36:	42be      	cmp	r6, r7
 8005d38:	4414      	add	r4, r2
 8005d3a:	441c      	add	r4, r3
 8005d3c:	4633      	mov	r3, r6
 8005d3e:	bfa8      	it	ge
 8005d40:	463b      	movge	r3, r7
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	bfa8      	it	ge
 8005d46:	4623      	movge	r3, r4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bfc2      	ittt	gt
 8005d4c:	1aff      	subgt	r7, r7, r3
 8005d4e:	1ae4      	subgt	r4, r4, r3
 8005d50:	1af6      	subgt	r6, r6, r3
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	dd17      	ble.n	8005d88 <_strtod_l+0x740>
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	9904      	ldr	r1, [sp, #16]
 8005d5e:	f001 ff0f 	bl	8007b80 <__pow5mult>
 8005d62:	9004      	str	r0, [sp, #16]
 8005d64:	2800      	cmp	r0, #0
 8005d66:	f43f aeb2 	beq.w	8005ace <_strtod_l+0x486>
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005d6e:	4650      	mov	r0, sl
 8005d70:	f001 fe62 	bl	8007a38 <__multiply>
 8005d74:	9009      	str	r0, [sp, #36]	; 0x24
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f43f aea9 	beq.w	8005ace <_strtod_l+0x486>
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d80:	f001 fd40 	bl	8007804 <_Bfree>
 8005d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d86:	931c      	str	r3, [sp, #112]	; 0x70
 8005d88:	2f00      	cmp	r7, #0
 8005d8a:	f300 8093 	bgt.w	8005eb4 <_strtod_l+0x86c>
 8005d8e:	9b07      	ldr	r3, [sp, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	dd08      	ble.n	8005da6 <_strtod_l+0x75e>
 8005d94:	4650      	mov	r0, sl
 8005d96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d98:	9906      	ldr	r1, [sp, #24]
 8005d9a:	f001 fef1 	bl	8007b80 <__pow5mult>
 8005d9e:	9006      	str	r0, [sp, #24]
 8005da0:	2800      	cmp	r0, #0
 8005da2:	f43f ae94 	beq.w	8005ace <_strtod_l+0x486>
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	dd08      	ble.n	8005dbc <_strtod_l+0x774>
 8005daa:	4622      	mov	r2, r4
 8005dac:	4650      	mov	r0, sl
 8005dae:	9906      	ldr	r1, [sp, #24]
 8005db0:	f001 ff40 	bl	8007c34 <__lshift>
 8005db4:	9006      	str	r0, [sp, #24]
 8005db6:	2800      	cmp	r0, #0
 8005db8:	f43f ae89 	beq.w	8005ace <_strtod_l+0x486>
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	dd08      	ble.n	8005dd2 <_strtod_l+0x78a>
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	9904      	ldr	r1, [sp, #16]
 8005dc6:	f001 ff35 	bl	8007c34 <__lshift>
 8005dca:	9004      	str	r0, [sp, #16]
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f43f ae7e 	beq.w	8005ace <_strtod_l+0x486>
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	9a06      	ldr	r2, [sp, #24]
 8005dd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005dd8:	f001 ffb4 	bl	8007d44 <__mdiff>
 8005ddc:	4683      	mov	fp, r0
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f43f ae75 	beq.w	8005ace <_strtod_l+0x486>
 8005de4:	2400      	movs	r4, #0
 8005de6:	68c3      	ldr	r3, [r0, #12]
 8005de8:	9904      	ldr	r1, [sp, #16]
 8005dea:	60c4      	str	r4, [r0, #12]
 8005dec:	930d      	str	r3, [sp, #52]	; 0x34
 8005dee:	f001 ff8d 	bl	8007d0c <__mcmp>
 8005df2:	42a0      	cmp	r0, r4
 8005df4:	da70      	bge.n	8005ed8 <_strtod_l+0x890>
 8005df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df8:	ea53 0308 	orrs.w	r3, r3, r8
 8005dfc:	f040 8096 	bne.w	8005f2c <_strtod_l+0x8e4>
 8005e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f040 8091 	bne.w	8005f2c <_strtod_l+0x8e4>
 8005e0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e0e:	0d1b      	lsrs	r3, r3, #20
 8005e10:	051b      	lsls	r3, r3, #20
 8005e12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e16:	f240 8089 	bls.w	8005f2c <_strtod_l+0x8e4>
 8005e1a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005e1e:	b923      	cbnz	r3, 8005e2a <_strtod_l+0x7e2>
 8005e20:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	f340 8081 	ble.w	8005f2c <_strtod_l+0x8e4>
 8005e2a:	4659      	mov	r1, fp
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4650      	mov	r0, sl
 8005e30:	f001 ff00 	bl	8007c34 <__lshift>
 8005e34:	9904      	ldr	r1, [sp, #16]
 8005e36:	4683      	mov	fp, r0
 8005e38:	f001 ff68 	bl	8007d0c <__mcmp>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	dd75      	ble.n	8005f2c <_strtod_l+0x8e4>
 8005e40:	9905      	ldr	r1, [sp, #20]
 8005e42:	464b      	mov	r3, r9
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <_strtod_l+0x888>)
 8005e46:	2900      	cmp	r1, #0
 8005e48:	f000 8091 	beq.w	8005f6e <_strtod_l+0x926>
 8005e4c:	ea02 0109 	and.w	r1, r2, r9
 8005e50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e54:	f300 808b 	bgt.w	8005f6e <_strtod_l+0x926>
 8005e58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e5c:	f77f aea9 	ble.w	8005bb2 <_strtod_l+0x56a>
 8005e60:	2300      	movs	r3, #0
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <_strtod_l+0x88c>)
 8005e64:	4640      	mov	r0, r8
 8005e66:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005e70:	f7fa fb32 	bl	80004d8 <__aeabi_dmul>
 8005e74:	460b      	mov	r3, r1
 8005e76:	4303      	orrs	r3, r0
 8005e78:	bf08      	it	eq
 8005e7a:	2322      	moveq	r3, #34	; 0x22
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4689      	mov	r9, r1
 8005e80:	bf08      	it	eq
 8005e82:	f8ca 3000 	streq.w	r3, [sl]
 8005e86:	e62d      	b.n	8005ae4 <_strtod_l+0x49c>
 8005e88:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	ea03 0808 	and.w	r8, r3, r8
 8005e94:	e6db      	b.n	8005c4e <_strtod_l+0x606>
 8005e96:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005e9a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005e9e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005ea2:	35e2      	adds	r5, #226	; 0xe2
 8005ea4:	fa07 f505 	lsl.w	r5, r7, r5
 8005ea8:	970f      	str	r7, [sp, #60]	; 0x3c
 8005eaa:	e742      	b.n	8005d32 <_strtod_l+0x6ea>
 8005eac:	2301      	movs	r3, #1
 8005eae:	2500      	movs	r5, #0
 8005eb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eb2:	e73e      	b.n	8005d32 <_strtod_l+0x6ea>
 8005eb4:	463a      	mov	r2, r7
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005eba:	f001 febb 	bl	8007c34 <__lshift>
 8005ebe:	901c      	str	r0, [sp, #112]	; 0x70
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f47f af64 	bne.w	8005d8e <_strtod_l+0x746>
 8005ec6:	e602      	b.n	8005ace <_strtod_l+0x486>
 8005ec8:	0800a500 	.word	0x0800a500
 8005ecc:	fffffc02 	.word	0xfffffc02
 8005ed0:	7ff00000 	.word	0x7ff00000
 8005ed4:	39500000 	.word	0x39500000
 8005ed8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005edc:	d166      	bne.n	8005fac <_strtod_l+0x964>
 8005ede:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ee4:	b35a      	cbz	r2, 8005f3e <_strtod_l+0x8f6>
 8005ee6:	4a9c      	ldr	r2, [pc, #624]	; (8006158 <_strtod_l+0xb10>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d12c      	bne.n	8005f46 <_strtod_l+0x8fe>
 8005eec:	9b05      	ldr	r3, [sp, #20]
 8005eee:	4640      	mov	r0, r8
 8005ef0:	b303      	cbz	r3, 8005f34 <_strtod_l+0x8ec>
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	4a99      	ldr	r2, [pc, #612]	; (800615c <_strtod_l+0xb14>)
 8005ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8005efa:	401a      	ands	r2, r3
 8005efc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005f00:	d81b      	bhi.n	8005f3a <_strtod_l+0x8f2>
 8005f02:	0d12      	lsrs	r2, r2, #20
 8005f04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	4298      	cmp	r0, r3
 8005f0e:	d11a      	bne.n	8005f46 <_strtod_l+0x8fe>
 8005f10:	4b93      	ldr	r3, [pc, #588]	; (8006160 <_strtod_l+0xb18>)
 8005f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d102      	bne.n	8005f1e <_strtod_l+0x8d6>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f43f add8 	beq.w	8005ace <_strtod_l+0x486>
 8005f1e:	f04f 0800 	mov.w	r8, #0
 8005f22:	4b8e      	ldr	r3, [pc, #568]	; (800615c <_strtod_l+0xb14>)
 8005f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f26:	401a      	ands	r2, r3
 8005f28:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d196      	bne.n	8005e60 <_strtod_l+0x818>
 8005f32:	e5d7      	b.n	8005ae4 <_strtod_l+0x49c>
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295
 8005f38:	e7e8      	b.n	8005f0c <_strtod_l+0x8c4>
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	e7e6      	b.n	8005f0c <_strtod_l+0x8c4>
 8005f3e:	ea53 0308 	orrs.w	r3, r3, r8
 8005f42:	f43f af7d 	beq.w	8005e40 <_strtod_l+0x7f8>
 8005f46:	b1e5      	cbz	r5, 8005f82 <_strtod_l+0x93a>
 8005f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4a:	421d      	tst	r5, r3
 8005f4c:	d0ee      	beq.n	8005f2c <_strtod_l+0x8e4>
 8005f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f50:	4640      	mov	r0, r8
 8005f52:	4649      	mov	r1, r9
 8005f54:	9a05      	ldr	r2, [sp, #20]
 8005f56:	b1c3      	cbz	r3, 8005f8a <_strtod_l+0x942>
 8005f58:	f7ff fb54 	bl	8005604 <sulp>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f64:	f7fa f902 	bl	800016c <__adddf3>
 8005f68:	4680      	mov	r8, r0
 8005f6a:	4689      	mov	r9, r1
 8005f6c:	e7de      	b.n	8005f2c <_strtod_l+0x8e4>
 8005f6e:	4013      	ands	r3, r2
 8005f70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f74:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005f78:	f04f 38ff 	mov.w	r8, #4294967295
 8005f7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005f80:	e7d4      	b.n	8005f2c <_strtod_l+0x8e4>
 8005f82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f84:	ea13 0f08 	tst.w	r3, r8
 8005f88:	e7e0      	b.n	8005f4c <_strtod_l+0x904>
 8005f8a:	f7ff fb3b 	bl	8005604 <sulp>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f96:	f7fa f8e7 	bl	8000168 <__aeabi_dsub>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	4689      	mov	r9, r1
 8005fa2:	f7fa fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d0c0      	beq.n	8005f2c <_strtod_l+0x8e4>
 8005faa:	e602      	b.n	8005bb2 <_strtod_l+0x56a>
 8005fac:	4658      	mov	r0, fp
 8005fae:	9904      	ldr	r1, [sp, #16]
 8005fb0:	f002 f82e 	bl	8008010 <__ratio>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fba:	4606      	mov	r6, r0
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	f7fa fd07 	bl	80009d0 <__aeabi_dcmple>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d075      	beq.n	80060b2 <_strtod_l+0xa6a>
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d047      	beq.n	800605c <_strtod_l+0xa14>
 8005fcc:	2600      	movs	r6, #0
 8005fce:	4f65      	ldr	r7, [pc, #404]	; (8006164 <_strtod_l+0xb1c>)
 8005fd0:	4d64      	ldr	r5, [pc, #400]	; (8006164 <_strtod_l+0xb1c>)
 8005fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fd8:	0d1b      	lsrs	r3, r3, #20
 8005fda:	051b      	lsls	r3, r3, #20
 8005fdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fe0:	4b61      	ldr	r3, [pc, #388]	; (8006168 <_strtod_l+0xb20>)
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	f040 80c8 	bne.w	8006178 <_strtod_l+0xb30>
 8005fe8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	f001 ff33 	bl	8007e64 <__ulp>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4630      	mov	r0, r6
 8006004:	4639      	mov	r1, r7
 8006006:	f7fa fa67 	bl	80004d8 <__aeabi_dmul>
 800600a:	4642      	mov	r2, r8
 800600c:	464b      	mov	r3, r9
 800600e:	f7fa f8ad 	bl	800016c <__adddf3>
 8006012:	460b      	mov	r3, r1
 8006014:	4951      	ldr	r1, [pc, #324]	; (800615c <_strtod_l+0xb14>)
 8006016:	4a55      	ldr	r2, [pc, #340]	; (800616c <_strtod_l+0xb24>)
 8006018:	4019      	ands	r1, r3
 800601a:	4291      	cmp	r1, r2
 800601c:	4680      	mov	r8, r0
 800601e:	d95e      	bls.n	80060de <_strtod_l+0xa96>
 8006020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006022:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006026:	4293      	cmp	r3, r2
 8006028:	d103      	bne.n	8006032 <_strtod_l+0x9ea>
 800602a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602c:	3301      	adds	r3, #1
 800602e:	f43f ad4e 	beq.w	8005ace <_strtod_l+0x486>
 8006032:	f04f 38ff 	mov.w	r8, #4294967295
 8006036:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006160 <_strtod_l+0xb18>
 800603a:	4650      	mov	r0, sl
 800603c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800603e:	f001 fbe1 	bl	8007804 <_Bfree>
 8006042:	4650      	mov	r0, sl
 8006044:	9906      	ldr	r1, [sp, #24]
 8006046:	f001 fbdd 	bl	8007804 <_Bfree>
 800604a:	4650      	mov	r0, sl
 800604c:	9904      	ldr	r1, [sp, #16]
 800604e:	f001 fbd9 	bl	8007804 <_Bfree>
 8006052:	4659      	mov	r1, fp
 8006054:	4650      	mov	r0, sl
 8006056:	f001 fbd5 	bl	8007804 <_Bfree>
 800605a:	e61c      	b.n	8005c96 <_strtod_l+0x64e>
 800605c:	f1b8 0f00 	cmp.w	r8, #0
 8006060:	d119      	bne.n	8006096 <_strtod_l+0xa4e>
 8006062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006068:	b9e3      	cbnz	r3, 80060a4 <_strtod_l+0xa5c>
 800606a:	2200      	movs	r2, #0
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <_strtod_l+0xb1c>)
 8006072:	f7fa fca3 	bl	80009bc <__aeabi_dcmplt>
 8006076:	b9c8      	cbnz	r0, 80060ac <_strtod_l+0xa64>
 8006078:	2200      	movs	r2, #0
 800607a:	4630      	mov	r0, r6
 800607c:	4639      	mov	r1, r7
 800607e:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <_strtod_l+0xb28>)
 8006080:	f7fa fa2a 	bl	80004d8 <__aeabi_dmul>
 8006084:	4604      	mov	r4, r0
 8006086:	460d      	mov	r5, r1
 8006088:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800608c:	9418      	str	r4, [sp, #96]	; 0x60
 800608e:	9319      	str	r3, [sp, #100]	; 0x64
 8006090:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006094:	e79d      	b.n	8005fd2 <_strtod_l+0x98a>
 8006096:	f1b8 0f01 	cmp.w	r8, #1
 800609a:	d103      	bne.n	80060a4 <_strtod_l+0xa5c>
 800609c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f43f ad87 	beq.w	8005bb2 <_strtod_l+0x56a>
 80060a4:	2600      	movs	r6, #0
 80060a6:	2400      	movs	r4, #0
 80060a8:	4f32      	ldr	r7, [pc, #200]	; (8006174 <_strtod_l+0xb2c>)
 80060aa:	e791      	b.n	8005fd0 <_strtod_l+0x988>
 80060ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80060ae:	4d30      	ldr	r5, [pc, #192]	; (8006170 <_strtod_l+0xb28>)
 80060b0:	e7ea      	b.n	8006088 <_strtod_l+0xa40>
 80060b2:	4b2f      	ldr	r3, [pc, #188]	; (8006170 <_strtod_l+0xb28>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa fa0d 	bl	80004d8 <__aeabi_dmul>
 80060be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060c0:	4604      	mov	r4, r0
 80060c2:	460d      	mov	r5, r1
 80060c4:	b933      	cbnz	r3, 80060d4 <_strtod_l+0xa8c>
 80060c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060ca:	9010      	str	r0, [sp, #64]	; 0x40
 80060cc:	9311      	str	r3, [sp, #68]	; 0x44
 80060ce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80060d2:	e77e      	b.n	8005fd2 <_strtod_l+0x98a>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80060dc:	e7f7      	b.n	80060ce <_strtod_l+0xa86>
 80060de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80060e2:	9b05      	ldr	r3, [sp, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1a8      	bne.n	800603a <_strtod_l+0x9f2>
 80060e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060ee:	0d1b      	lsrs	r3, r3, #20
 80060f0:	051b      	lsls	r3, r3, #20
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d1a1      	bne.n	800603a <_strtod_l+0x9f2>
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7fb f809 	bl	8001110 <__aeabi_d2lz>
 80060fe:	f7fa f9bd 	bl	800047c <__aeabi_l2d>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4620      	mov	r0, r4
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa f82d 	bl	8000168 <__aeabi_dsub>
 800610e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006114:	ea43 0308 	orr.w	r3, r3, r8
 8006118:	4313      	orrs	r3, r2
 800611a:	4604      	mov	r4, r0
 800611c:	460d      	mov	r5, r1
 800611e:	d066      	beq.n	80061ee <_strtod_l+0xba6>
 8006120:	a309      	add	r3, pc, #36	; (adr r3, 8006148 <_strtod_l+0xb00>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f7fa fc49 	bl	80009bc <__aeabi_dcmplt>
 800612a:	2800      	cmp	r0, #0
 800612c:	f47f acda 	bne.w	8005ae4 <_strtod_l+0x49c>
 8006130:	a307      	add	r3, pc, #28	; (adr r3, 8006150 <_strtod_l+0xb08>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	4620      	mov	r0, r4
 8006138:	4629      	mov	r1, r5
 800613a:	f7fa fc5d 	bl	80009f8 <__aeabi_dcmpgt>
 800613e:	2800      	cmp	r0, #0
 8006140:	f43f af7b 	beq.w	800603a <_strtod_l+0x9f2>
 8006144:	e4ce      	b.n	8005ae4 <_strtod_l+0x49c>
 8006146:	bf00      	nop
 8006148:	94a03595 	.word	0x94a03595
 800614c:	3fdfffff 	.word	0x3fdfffff
 8006150:	35afe535 	.word	0x35afe535
 8006154:	3fe00000 	.word	0x3fe00000
 8006158:	000fffff 	.word	0x000fffff
 800615c:	7ff00000 	.word	0x7ff00000
 8006160:	7fefffff 	.word	0x7fefffff
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	7fe00000 	.word	0x7fe00000
 800616c:	7c9fffff 	.word	0x7c9fffff
 8006170:	3fe00000 	.word	0x3fe00000
 8006174:	bff00000 	.word	0xbff00000
 8006178:	9b05      	ldr	r3, [sp, #20]
 800617a:	b313      	cbz	r3, 80061c2 <_strtod_l+0xb7a>
 800617c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800617e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006182:	d81e      	bhi.n	80061c2 <_strtod_l+0xb7a>
 8006184:	a326      	add	r3, pc, #152	; (adr r3, 8006220 <_strtod_l+0xbd8>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	4620      	mov	r0, r4
 800618c:	4629      	mov	r1, r5
 800618e:	f7fa fc1f 	bl	80009d0 <__aeabi_dcmple>
 8006192:	b190      	cbz	r0, 80061ba <_strtod_l+0xb72>
 8006194:	4629      	mov	r1, r5
 8006196:	4620      	mov	r0, r4
 8006198:	f7fa fc76 	bl	8000a88 <__aeabi_d2uiz>
 800619c:	2801      	cmp	r0, #1
 800619e:	bf38      	it	cc
 80061a0:	2001      	movcc	r0, #1
 80061a2:	f7fa f91f 	bl	80003e4 <__aeabi_ui2d>
 80061a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a8:	4604      	mov	r4, r0
 80061aa:	460d      	mov	r5, r1
 80061ac:	b9d3      	cbnz	r3, 80061e4 <_strtod_l+0xb9c>
 80061ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061b2:	9012      	str	r0, [sp, #72]	; 0x48
 80061b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80061b6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80061ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061bc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80061c0:	1a9f      	subs	r7, r3, r2
 80061c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061c6:	f001 fe4d 	bl	8007e64 <__ulp>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4630      	mov	r0, r6
 80061d0:	4639      	mov	r1, r7
 80061d2:	f7fa f981 	bl	80004d8 <__aeabi_dmul>
 80061d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061da:	f7f9 ffc7 	bl	800016c <__adddf3>
 80061de:	4680      	mov	r8, r0
 80061e0:	4689      	mov	r9, r1
 80061e2:	e77e      	b.n	80060e2 <_strtod_l+0xa9a>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80061ec:	e7e3      	b.n	80061b6 <_strtod_l+0xb6e>
 80061ee:	a30e      	add	r3, pc, #56	; (adr r3, 8006228 <_strtod_l+0xbe0>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7fa fbe2 	bl	80009bc <__aeabi_dcmplt>
 80061f8:	e7a1      	b.n	800613e <_strtod_l+0xaf6>
 80061fa:	2300      	movs	r3, #0
 80061fc:	930c      	str	r3, [sp, #48]	; 0x30
 80061fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006200:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	f7ff ba65 	b.w	80056d2 <_strtod_l+0x8a>
 8006208:	2b65      	cmp	r3, #101	; 0x65
 800620a:	f43f ab5c 	beq.w	80058c6 <_strtod_l+0x27e>
 800620e:	2b45      	cmp	r3, #69	; 0x45
 8006210:	f43f ab59 	beq.w	80058c6 <_strtod_l+0x27e>
 8006214:	2201      	movs	r2, #1
 8006216:	f7ff bb8d 	b.w	8005934 <_strtod_l+0x2ec>
 800621a:	bf00      	nop
 800621c:	f3af 8000 	nop.w
 8006220:	ffc00000 	.word	0xffc00000
 8006224:	41dfffff 	.word	0x41dfffff
 8006228:	94a03595 	.word	0x94a03595
 800622c:	3fcfffff 	.word	0x3fcfffff

08006230 <_strtod_r>:
 8006230:	4b01      	ldr	r3, [pc, #4]	; (8006238 <_strtod_r+0x8>)
 8006232:	f7ff ba09 	b.w	8005648 <_strtod_l>
 8006236:	bf00      	nop
 8006238:	20000078 	.word	0x20000078

0800623c <_strtol_l.isra.0>:
 800623c:	2b01      	cmp	r3, #1
 800623e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006242:	4686      	mov	lr, r0
 8006244:	d001      	beq.n	800624a <_strtol_l.isra.0+0xe>
 8006246:	2b24      	cmp	r3, #36	; 0x24
 8006248:	d906      	bls.n	8006258 <_strtol_l.isra.0+0x1c>
 800624a:	f7fe fb13 	bl	8004874 <__errno>
 800624e:	2316      	movs	r3, #22
 8006250:	6003      	str	r3, [r0, #0]
 8006252:	2000      	movs	r0, #0
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	468c      	mov	ip, r1
 800625a:	4e3a      	ldr	r6, [pc, #232]	; (8006344 <_strtol_l.isra.0+0x108>)
 800625c:	4660      	mov	r0, ip
 800625e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006262:	5da5      	ldrb	r5, [r4, r6]
 8006264:	f015 0508 	ands.w	r5, r5, #8
 8006268:	d1f8      	bne.n	800625c <_strtol_l.isra.0+0x20>
 800626a:	2c2d      	cmp	r4, #45	; 0x2d
 800626c:	d133      	bne.n	80062d6 <_strtol_l.isra.0+0x9a>
 800626e:	f04f 0801 	mov.w	r8, #1
 8006272:	f89c 4000 	ldrb.w	r4, [ip]
 8006276:	f100 0c02 	add.w	ip, r0, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d05d      	beq.n	800633a <_strtol_l.isra.0+0xfe>
 800627e:	2b10      	cmp	r3, #16
 8006280:	d10c      	bne.n	800629c <_strtol_l.isra.0+0x60>
 8006282:	2c30      	cmp	r4, #48	; 0x30
 8006284:	d10a      	bne.n	800629c <_strtol_l.isra.0+0x60>
 8006286:	f89c 0000 	ldrb.w	r0, [ip]
 800628a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800628e:	2858      	cmp	r0, #88	; 0x58
 8006290:	d14e      	bne.n	8006330 <_strtol_l.isra.0+0xf4>
 8006292:	2310      	movs	r3, #16
 8006294:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006298:	f10c 0c02 	add.w	ip, ip, #2
 800629c:	2500      	movs	r5, #0
 800629e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80062a2:	3f01      	subs	r7, #1
 80062a4:	fbb7 f9f3 	udiv	r9, r7, r3
 80062a8:	4628      	mov	r0, r5
 80062aa:	fb03 7a19 	mls	sl, r3, r9, r7
 80062ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80062b2:	2e09      	cmp	r6, #9
 80062b4:	d818      	bhi.n	80062e8 <_strtol_l.isra.0+0xac>
 80062b6:	4634      	mov	r4, r6
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	dd24      	ble.n	8006306 <_strtol_l.isra.0+0xca>
 80062bc:	2d00      	cmp	r5, #0
 80062be:	db1f      	blt.n	8006300 <_strtol_l.isra.0+0xc4>
 80062c0:	4581      	cmp	r9, r0
 80062c2:	d31d      	bcc.n	8006300 <_strtol_l.isra.0+0xc4>
 80062c4:	d101      	bne.n	80062ca <_strtol_l.isra.0+0x8e>
 80062c6:	45a2      	cmp	sl, r4
 80062c8:	db1a      	blt.n	8006300 <_strtol_l.isra.0+0xc4>
 80062ca:	2501      	movs	r5, #1
 80062cc:	fb00 4003 	mla	r0, r0, r3, r4
 80062d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80062d4:	e7eb      	b.n	80062ae <_strtol_l.isra.0+0x72>
 80062d6:	2c2b      	cmp	r4, #43	; 0x2b
 80062d8:	bf08      	it	eq
 80062da:	f89c 4000 	ldrbeq.w	r4, [ip]
 80062de:	46a8      	mov	r8, r5
 80062e0:	bf08      	it	eq
 80062e2:	f100 0c02 	addeq.w	ip, r0, #2
 80062e6:	e7c8      	b.n	800627a <_strtol_l.isra.0+0x3e>
 80062e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80062ec:	2e19      	cmp	r6, #25
 80062ee:	d801      	bhi.n	80062f4 <_strtol_l.isra.0+0xb8>
 80062f0:	3c37      	subs	r4, #55	; 0x37
 80062f2:	e7e1      	b.n	80062b8 <_strtol_l.isra.0+0x7c>
 80062f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80062f8:	2e19      	cmp	r6, #25
 80062fa:	d804      	bhi.n	8006306 <_strtol_l.isra.0+0xca>
 80062fc:	3c57      	subs	r4, #87	; 0x57
 80062fe:	e7db      	b.n	80062b8 <_strtol_l.isra.0+0x7c>
 8006300:	f04f 35ff 	mov.w	r5, #4294967295
 8006304:	e7e4      	b.n	80062d0 <_strtol_l.isra.0+0x94>
 8006306:	2d00      	cmp	r5, #0
 8006308:	da08      	bge.n	800631c <_strtol_l.isra.0+0xe0>
 800630a:	2322      	movs	r3, #34	; 0x22
 800630c:	4638      	mov	r0, r7
 800630e:	f8ce 3000 	str.w	r3, [lr]
 8006312:	2a00      	cmp	r2, #0
 8006314:	d09e      	beq.n	8006254 <_strtol_l.isra.0+0x18>
 8006316:	f10c 31ff 	add.w	r1, ip, #4294967295
 800631a:	e007      	b.n	800632c <_strtol_l.isra.0+0xf0>
 800631c:	f1b8 0f00 	cmp.w	r8, #0
 8006320:	d000      	beq.n	8006324 <_strtol_l.isra.0+0xe8>
 8006322:	4240      	negs	r0, r0
 8006324:	2a00      	cmp	r2, #0
 8006326:	d095      	beq.n	8006254 <_strtol_l.isra.0+0x18>
 8006328:	2d00      	cmp	r5, #0
 800632a:	d1f4      	bne.n	8006316 <_strtol_l.isra.0+0xda>
 800632c:	6011      	str	r1, [r2, #0]
 800632e:	e791      	b.n	8006254 <_strtol_l.isra.0+0x18>
 8006330:	2430      	movs	r4, #48	; 0x30
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1b2      	bne.n	800629c <_strtol_l.isra.0+0x60>
 8006336:	2308      	movs	r3, #8
 8006338:	e7b0      	b.n	800629c <_strtol_l.isra.0+0x60>
 800633a:	2c30      	cmp	r4, #48	; 0x30
 800633c:	d0a3      	beq.n	8006286 <_strtol_l.isra.0+0x4a>
 800633e:	230a      	movs	r3, #10
 8006340:	e7ac      	b.n	800629c <_strtol_l.isra.0+0x60>
 8006342:	bf00      	nop
 8006344:	0800a529 	.word	0x0800a529

08006348 <_strtol_r>:
 8006348:	f7ff bf78 	b.w	800623c <_strtol_l.isra.0>

0800634c <quorem>:
 800634c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	6903      	ldr	r3, [r0, #16]
 8006352:	690c      	ldr	r4, [r1, #16]
 8006354:	4607      	mov	r7, r0
 8006356:	42a3      	cmp	r3, r4
 8006358:	f2c0 8083 	blt.w	8006462 <quorem+0x116>
 800635c:	3c01      	subs	r4, #1
 800635e:	f100 0514 	add.w	r5, r0, #20
 8006362:	f101 0814 	add.w	r8, r1, #20
 8006366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006374:	3301      	adds	r3, #1
 8006376:	429a      	cmp	r2, r3
 8006378:	fbb2 f6f3 	udiv	r6, r2, r3
 800637c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006384:	d332      	bcc.n	80063ec <quorem+0xa0>
 8006386:	f04f 0e00 	mov.w	lr, #0
 800638a:	4640      	mov	r0, r8
 800638c:	46ac      	mov	ip, r5
 800638e:	46f2      	mov	sl, lr
 8006390:	f850 2b04 	ldr.w	r2, [r0], #4
 8006394:	b293      	uxth	r3, r2
 8006396:	fb06 e303 	mla	r3, r6, r3, lr
 800639a:	0c12      	lsrs	r2, r2, #16
 800639c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063a0:	fb06 e202 	mla	r2, r6, r2, lr
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ebaa 0303 	sub.w	r3, sl, r3
 80063aa:	f8dc a000 	ldr.w	sl, [ip]
 80063ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063b2:	fa1f fa8a 	uxth.w	sl, sl
 80063b6:	4453      	add	r3, sl
 80063b8:	fa1f fa82 	uxth.w	sl, r2
 80063bc:	f8dc 2000 	ldr.w	r2, [ip]
 80063c0:	4581      	cmp	r9, r0
 80063c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063d4:	f84c 3b04 	str.w	r3, [ip], #4
 80063d8:	d2da      	bcs.n	8006390 <quorem+0x44>
 80063da:	f855 300b 	ldr.w	r3, [r5, fp]
 80063de:	b92b      	cbnz	r3, 80063ec <quorem+0xa0>
 80063e0:	9b01      	ldr	r3, [sp, #4]
 80063e2:	3b04      	subs	r3, #4
 80063e4:	429d      	cmp	r5, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	d32f      	bcc.n	800644a <quorem+0xfe>
 80063ea:	613c      	str	r4, [r7, #16]
 80063ec:	4638      	mov	r0, r7
 80063ee:	f001 fc8d 	bl	8007d0c <__mcmp>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	db25      	blt.n	8006442 <quorem+0xf6>
 80063f6:	4628      	mov	r0, r5
 80063f8:	f04f 0c00 	mov.w	ip, #0
 80063fc:	3601      	adds	r6, #1
 80063fe:	f858 1b04 	ldr.w	r1, [r8], #4
 8006402:	f8d0 e000 	ldr.w	lr, [r0]
 8006406:	b28b      	uxth	r3, r1
 8006408:	ebac 0303 	sub.w	r3, ip, r3
 800640c:	fa1f f28e 	uxth.w	r2, lr
 8006410:	4413      	add	r3, r2
 8006412:	0c0a      	lsrs	r2, r1, #16
 8006414:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800641c:	b29b      	uxth	r3, r3
 800641e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006422:	45c1      	cmp	r9, r8
 8006424:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006428:	f840 3b04 	str.w	r3, [r0], #4
 800642c:	d2e7      	bcs.n	80063fe <quorem+0xb2>
 800642e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006436:	b922      	cbnz	r2, 8006442 <quorem+0xf6>
 8006438:	3b04      	subs	r3, #4
 800643a:	429d      	cmp	r5, r3
 800643c:	461a      	mov	r2, r3
 800643e:	d30a      	bcc.n	8006456 <quorem+0x10a>
 8006440:	613c      	str	r4, [r7, #16]
 8006442:	4630      	mov	r0, r6
 8006444:	b003      	add	sp, #12
 8006446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	3b04      	subs	r3, #4
 800644e:	2a00      	cmp	r2, #0
 8006450:	d1cb      	bne.n	80063ea <quorem+0x9e>
 8006452:	3c01      	subs	r4, #1
 8006454:	e7c6      	b.n	80063e4 <quorem+0x98>
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	3b04      	subs	r3, #4
 800645a:	2a00      	cmp	r2, #0
 800645c:	d1f0      	bne.n	8006440 <quorem+0xf4>
 800645e:	3c01      	subs	r4, #1
 8006460:	e7eb      	b.n	800643a <quorem+0xee>
 8006462:	2000      	movs	r0, #0
 8006464:	e7ee      	b.n	8006444 <quorem+0xf8>
	...

08006468 <_dtoa_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	4616      	mov	r6, r2
 800646e:	461f      	mov	r7, r3
 8006470:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006472:	b099      	sub	sp, #100	; 0x64
 8006474:	4605      	mov	r5, r0
 8006476:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800647a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800647e:	b974      	cbnz	r4, 800649e <_dtoa_r+0x36>
 8006480:	2010      	movs	r0, #16
 8006482:	f001 f949 	bl	8007718 <malloc>
 8006486:	4602      	mov	r2, r0
 8006488:	6268      	str	r0, [r5, #36]	; 0x24
 800648a:	b920      	cbnz	r0, 8006496 <_dtoa_r+0x2e>
 800648c:	21ea      	movs	r1, #234	; 0xea
 800648e:	4bae      	ldr	r3, [pc, #696]	; (8006748 <_dtoa_r+0x2e0>)
 8006490:	48ae      	ldr	r0, [pc, #696]	; (800674c <_dtoa_r+0x2e4>)
 8006492:	f002 f875 	bl	8008580 <__assert_func>
 8006496:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800649a:	6004      	str	r4, [r0, #0]
 800649c:	60c4      	str	r4, [r0, #12]
 800649e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	b151      	cbz	r1, 80064ba <_dtoa_r+0x52>
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	2301      	movs	r3, #1
 80064a8:	4093      	lsls	r3, r2
 80064aa:	604a      	str	r2, [r1, #4]
 80064ac:	608b      	str	r3, [r1, #8]
 80064ae:	4628      	mov	r0, r5
 80064b0:	f001 f9a8 	bl	8007804 <_Bfree>
 80064b4:	2200      	movs	r2, #0
 80064b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	1e3b      	subs	r3, r7, #0
 80064bc:	bfaf      	iteee	ge
 80064be:	2300      	movge	r3, #0
 80064c0:	2201      	movlt	r2, #1
 80064c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	9305      	strlt	r3, [sp, #20]
 80064c8:	bfa8      	it	ge
 80064ca:	f8c8 3000 	strge.w	r3, [r8]
 80064ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80064d2:	4b9f      	ldr	r3, [pc, #636]	; (8006750 <_dtoa_r+0x2e8>)
 80064d4:	bfb8      	it	lt
 80064d6:	f8c8 2000 	strlt.w	r2, [r8]
 80064da:	ea33 0309 	bics.w	r3, r3, r9
 80064de:	d119      	bne.n	8006514 <_dtoa_r+0xac>
 80064e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80064e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ec:	4333      	orrs	r3, r6
 80064ee:	f000 8580 	beq.w	8006ff2 <_dtoa_r+0xb8a>
 80064f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064f4:	b953      	cbnz	r3, 800650c <_dtoa_r+0xa4>
 80064f6:	4b97      	ldr	r3, [pc, #604]	; (8006754 <_dtoa_r+0x2ec>)
 80064f8:	e022      	b.n	8006540 <_dtoa_r+0xd8>
 80064fa:	4b97      	ldr	r3, [pc, #604]	; (8006758 <_dtoa_r+0x2f0>)
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	3308      	adds	r3, #8
 8006500:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	9808      	ldr	r0, [sp, #32]
 8006506:	b019      	add	sp, #100	; 0x64
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	4b91      	ldr	r3, [pc, #580]	; (8006754 <_dtoa_r+0x2ec>)
 800650e:	9308      	str	r3, [sp, #32]
 8006510:	3303      	adds	r3, #3
 8006512:	e7f5      	b.n	8006500 <_dtoa_r+0x98>
 8006514:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006518:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800651c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
 8006524:	f7fa fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8006528:	4680      	mov	r8, r0
 800652a:	b158      	cbz	r0, 8006544 <_dtoa_r+0xdc>
 800652c:	2301      	movs	r3, #1
 800652e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8559 	beq.w	8006fec <_dtoa_r+0xb84>
 800653a:	4888      	ldr	r0, [pc, #544]	; (800675c <_dtoa_r+0x2f4>)
 800653c:	6018      	str	r0, [r3, #0]
 800653e:	1e43      	subs	r3, r0, #1
 8006540:	9308      	str	r3, [sp, #32]
 8006542:	e7df      	b.n	8006504 <_dtoa_r+0x9c>
 8006544:	ab16      	add	r3, sp, #88	; 0x58
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	ab17      	add	r3, sp, #92	; 0x5c
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	4628      	mov	r0, r5
 800654e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006552:	f001 fd01 	bl	8007f58 <__d2b>
 8006556:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800655a:	4682      	mov	sl, r0
 800655c:	2c00      	cmp	r4, #0
 800655e:	d07e      	beq.n	800665e <_dtoa_r+0x1f6>
 8006560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006566:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800656a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006572:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006576:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800657a:	2200      	movs	r2, #0
 800657c:	4b78      	ldr	r3, [pc, #480]	; (8006760 <_dtoa_r+0x2f8>)
 800657e:	f7f9 fdf3 	bl	8000168 <__aeabi_dsub>
 8006582:	a36b      	add	r3, pc, #428	; (adr r3, 8006730 <_dtoa_r+0x2c8>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	a36a      	add	r3, pc, #424	; (adr r3, 8006738 <_dtoa_r+0x2d0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fdeb 	bl	800016c <__adddf3>
 8006596:	4606      	mov	r6, r0
 8006598:	4620      	mov	r0, r4
 800659a:	460f      	mov	r7, r1
 800659c:	f7f9 ff32 	bl	8000404 <__aeabi_i2d>
 80065a0:	a367      	add	r3, pc, #412	; (adr r3, 8006740 <_dtoa_r+0x2d8>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7f9 ff97 	bl	80004d8 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fddb 	bl	800016c <__adddf3>
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	f7fa fa3d 	bl	8000a38 <__aeabi_d2iz>
 80065be:	2200      	movs	r2, #0
 80065c0:	4681      	mov	r9, r0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7fa f9f8 	bl	80009bc <__aeabi_dcmplt>
 80065cc:	b148      	cbz	r0, 80065e2 <_dtoa_r+0x17a>
 80065ce:	4648      	mov	r0, r9
 80065d0:	f7f9 ff18 	bl	8000404 <__aeabi_i2d>
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	f7fa f9e6 	bl	80009a8 <__aeabi_dcmpeq>
 80065dc:	b908      	cbnz	r0, 80065e2 <_dtoa_r+0x17a>
 80065de:	f109 39ff 	add.w	r9, r9, #4294967295
 80065e2:	f1b9 0f16 	cmp.w	r9, #22
 80065e6:	d857      	bhi.n	8006698 <_dtoa_r+0x230>
 80065e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ec:	4b5d      	ldr	r3, [pc, #372]	; (8006764 <_dtoa_r+0x2fc>)
 80065ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7fa f9e1 	bl	80009bc <__aeabi_dcmplt>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d04e      	beq.n	800669c <_dtoa_r+0x234>
 80065fe:	2300      	movs	r3, #0
 8006600:	f109 39ff 	add.w	r9, r9, #4294967295
 8006604:	930f      	str	r3, [sp, #60]	; 0x3c
 8006606:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006608:	1b1c      	subs	r4, r3, r4
 800660a:	1e63      	subs	r3, r4, #1
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	bf49      	itett	mi
 8006610:	f1c4 0301 	rsbmi	r3, r4, #1
 8006614:	2300      	movpl	r3, #0
 8006616:	9306      	strmi	r3, [sp, #24]
 8006618:	2300      	movmi	r3, #0
 800661a:	bf54      	ite	pl
 800661c:	9306      	strpl	r3, [sp, #24]
 800661e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	db3c      	blt.n	80066a0 <_dtoa_r+0x238>
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800662c:	444b      	add	r3, r9
 800662e:	9309      	str	r3, [sp, #36]	; 0x24
 8006630:	2300      	movs	r3, #0
 8006632:	930a      	str	r3, [sp, #40]	; 0x28
 8006634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006636:	2b09      	cmp	r3, #9
 8006638:	d86c      	bhi.n	8006714 <_dtoa_r+0x2ac>
 800663a:	2b05      	cmp	r3, #5
 800663c:	bfc4      	itt	gt
 800663e:	3b04      	subgt	r3, #4
 8006640:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006644:	bfc8      	it	gt
 8006646:	2400      	movgt	r4, #0
 8006648:	f1a3 0302 	sub.w	r3, r3, #2
 800664c:	bfd8      	it	le
 800664e:	2401      	movle	r4, #1
 8006650:	2b03      	cmp	r3, #3
 8006652:	f200 808b 	bhi.w	800676c <_dtoa_r+0x304>
 8006656:	e8df f003 	tbb	[pc, r3]
 800665a:	4f2d      	.short	0x4f2d
 800665c:	5b4d      	.short	0x5b4d
 800665e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006662:	441c      	add	r4, r3
 8006664:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006668:	2b20      	cmp	r3, #32
 800666a:	bfc3      	ittte	gt
 800666c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006670:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006674:	fa09 f303 	lslgt.w	r3, r9, r3
 8006678:	f1c3 0320 	rsble	r3, r3, #32
 800667c:	bfc6      	itte	gt
 800667e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006682:	4318      	orrgt	r0, r3
 8006684:	fa06 f003 	lslle.w	r0, r6, r3
 8006688:	f7f9 feac 	bl	80003e4 <__aeabi_ui2d>
 800668c:	2301      	movs	r3, #1
 800668e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006692:	3c01      	subs	r4, #1
 8006694:	9313      	str	r3, [sp, #76]	; 0x4c
 8006696:	e770      	b.n	800657a <_dtoa_r+0x112>
 8006698:	2301      	movs	r3, #1
 800669a:	e7b3      	b.n	8006604 <_dtoa_r+0x19c>
 800669c:	900f      	str	r0, [sp, #60]	; 0x3c
 800669e:	e7b2      	b.n	8006606 <_dtoa_r+0x19e>
 80066a0:	9b06      	ldr	r3, [sp, #24]
 80066a2:	eba3 0309 	sub.w	r3, r3, r9
 80066a6:	9306      	str	r3, [sp, #24]
 80066a8:	f1c9 0300 	rsb	r3, r9, #0
 80066ac:	930a      	str	r3, [sp, #40]	; 0x28
 80066ae:	2300      	movs	r3, #0
 80066b0:	930e      	str	r3, [sp, #56]	; 0x38
 80066b2:	e7bf      	b.n	8006634 <_dtoa_r+0x1cc>
 80066b4:	2300      	movs	r3, #0
 80066b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dc59      	bgt.n	8006772 <_dtoa_r+0x30a>
 80066be:	f04f 0b01 	mov.w	fp, #1
 80066c2:	465b      	mov	r3, fp
 80066c4:	f8cd b008 	str.w	fp, [sp, #8]
 80066c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80066cc:	2200      	movs	r2, #0
 80066ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80066d0:	6042      	str	r2, [r0, #4]
 80066d2:	2204      	movs	r2, #4
 80066d4:	f102 0614 	add.w	r6, r2, #20
 80066d8:	429e      	cmp	r6, r3
 80066da:	6841      	ldr	r1, [r0, #4]
 80066dc:	d94f      	bls.n	800677e <_dtoa_r+0x316>
 80066de:	4628      	mov	r0, r5
 80066e0:	f001 f850 	bl	8007784 <_Balloc>
 80066e4:	9008      	str	r0, [sp, #32]
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d14d      	bne.n	8006786 <_dtoa_r+0x31e>
 80066ea:	4602      	mov	r2, r0
 80066ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <_dtoa_r+0x300>)
 80066f2:	e6cd      	b.n	8006490 <_dtoa_r+0x28>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e7de      	b.n	80066b6 <_dtoa_r+0x24e>
 80066f8:	2300      	movs	r3, #0
 80066fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80066fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066fe:	eb09 0b03 	add.w	fp, r9, r3
 8006702:	f10b 0301 	add.w	r3, fp, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	bfb8      	it	lt
 800670c:	2301      	movlt	r3, #1
 800670e:	e7dd      	b.n	80066cc <_dtoa_r+0x264>
 8006710:	2301      	movs	r3, #1
 8006712:	e7f2      	b.n	80066fa <_dtoa_r+0x292>
 8006714:	2401      	movs	r4, #1
 8006716:	2300      	movs	r3, #0
 8006718:	940b      	str	r4, [sp, #44]	; 0x2c
 800671a:	9322      	str	r3, [sp, #136]	; 0x88
 800671c:	f04f 3bff 	mov.w	fp, #4294967295
 8006720:	2200      	movs	r2, #0
 8006722:	2312      	movs	r3, #18
 8006724:	f8cd b008 	str.w	fp, [sp, #8]
 8006728:	9223      	str	r2, [sp, #140]	; 0x8c
 800672a:	e7cf      	b.n	80066cc <_dtoa_r+0x264>
 800672c:	f3af 8000 	nop.w
 8006730:	636f4361 	.word	0x636f4361
 8006734:	3fd287a7 	.word	0x3fd287a7
 8006738:	8b60c8b3 	.word	0x8b60c8b3
 800673c:	3fc68a28 	.word	0x3fc68a28
 8006740:	509f79fb 	.word	0x509f79fb
 8006744:	3fd34413 	.word	0x3fd34413
 8006748:	0800a636 	.word	0x0800a636
 800674c:	0800a64d 	.word	0x0800a64d
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	0800a632 	.word	0x0800a632
 8006758:	0800a629 	.word	0x0800a629
 800675c:	0800a4a9 	.word	0x0800a4a9
 8006760:	3ff80000 	.word	0x3ff80000
 8006764:	0800a7c8 	.word	0x0800a7c8
 8006768:	0800a6ac 	.word	0x0800a6ac
 800676c:	2301      	movs	r3, #1
 800676e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006770:	e7d4      	b.n	800671c <_dtoa_r+0x2b4>
 8006772:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006776:	465b      	mov	r3, fp
 8006778:	f8cd b008 	str.w	fp, [sp, #8]
 800677c:	e7a6      	b.n	80066cc <_dtoa_r+0x264>
 800677e:	3101      	adds	r1, #1
 8006780:	6041      	str	r1, [r0, #4]
 8006782:	0052      	lsls	r2, r2, #1
 8006784:	e7a6      	b.n	80066d4 <_dtoa_r+0x26c>
 8006786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006788:	9a08      	ldr	r2, [sp, #32]
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	9b02      	ldr	r3, [sp, #8]
 800678e:	2b0e      	cmp	r3, #14
 8006790:	f200 80a8 	bhi.w	80068e4 <_dtoa_r+0x47c>
 8006794:	2c00      	cmp	r4, #0
 8006796:	f000 80a5 	beq.w	80068e4 <_dtoa_r+0x47c>
 800679a:	f1b9 0f00 	cmp.w	r9, #0
 800679e:	dd34      	ble.n	800680a <_dtoa_r+0x3a2>
 80067a0:	4a9a      	ldr	r2, [pc, #616]	; (8006a0c <_dtoa_r+0x5a4>)
 80067a2:	f009 030f 	and.w	r3, r9, #15
 80067a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80067ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80067b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80067ba:	d016      	beq.n	80067ea <_dtoa_r+0x382>
 80067bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067c0:	4b93      	ldr	r3, [pc, #588]	; (8006a10 <_dtoa_r+0x5a8>)
 80067c2:	2703      	movs	r7, #3
 80067c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067c8:	f7f9 ffb0 	bl	800072c <__aeabi_ddiv>
 80067cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067d0:	f004 040f 	and.w	r4, r4, #15
 80067d4:	4e8e      	ldr	r6, [pc, #568]	; (8006a10 <_dtoa_r+0x5a8>)
 80067d6:	b954      	cbnz	r4, 80067ee <_dtoa_r+0x386>
 80067d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067e0:	f7f9 ffa4 	bl	800072c <__aeabi_ddiv>
 80067e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067e8:	e029      	b.n	800683e <_dtoa_r+0x3d6>
 80067ea:	2702      	movs	r7, #2
 80067ec:	e7f2      	b.n	80067d4 <_dtoa_r+0x36c>
 80067ee:	07e1      	lsls	r1, r4, #31
 80067f0:	d508      	bpl.n	8006804 <_dtoa_r+0x39c>
 80067f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067fa:	f7f9 fe6d 	bl	80004d8 <__aeabi_dmul>
 80067fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006802:	3701      	adds	r7, #1
 8006804:	1064      	asrs	r4, r4, #1
 8006806:	3608      	adds	r6, #8
 8006808:	e7e5      	b.n	80067d6 <_dtoa_r+0x36e>
 800680a:	f000 80a5 	beq.w	8006958 <_dtoa_r+0x4f0>
 800680e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006812:	f1c9 0400 	rsb	r4, r9, #0
 8006816:	4b7d      	ldr	r3, [pc, #500]	; (8006a0c <_dtoa_r+0x5a4>)
 8006818:	f004 020f 	and.w	r2, r4, #15
 800681c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 fe58 	bl	80004d8 <__aeabi_dmul>
 8006828:	2702      	movs	r7, #2
 800682a:	2300      	movs	r3, #0
 800682c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006830:	4e77      	ldr	r6, [pc, #476]	; (8006a10 <_dtoa_r+0x5a8>)
 8006832:	1124      	asrs	r4, r4, #4
 8006834:	2c00      	cmp	r4, #0
 8006836:	f040 8084 	bne.w	8006942 <_dtoa_r+0x4da>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1d2      	bne.n	80067e4 <_dtoa_r+0x37c>
 800683e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 808b 	beq.w	800695c <_dtoa_r+0x4f4>
 8006846:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800684a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800684e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006852:	2200      	movs	r2, #0
 8006854:	4b6f      	ldr	r3, [pc, #444]	; (8006a14 <_dtoa_r+0x5ac>)
 8006856:	f7fa f8b1 	bl	80009bc <__aeabi_dcmplt>
 800685a:	2800      	cmp	r0, #0
 800685c:	d07e      	beq.n	800695c <_dtoa_r+0x4f4>
 800685e:	9b02      	ldr	r3, [sp, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d07b      	beq.n	800695c <_dtoa_r+0x4f4>
 8006864:	f1bb 0f00 	cmp.w	fp, #0
 8006868:	dd38      	ble.n	80068dc <_dtoa_r+0x474>
 800686a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800686e:	2200      	movs	r2, #0
 8006870:	4b69      	ldr	r3, [pc, #420]	; (8006a18 <_dtoa_r+0x5b0>)
 8006872:	f7f9 fe31 	bl	80004d8 <__aeabi_dmul>
 8006876:	465c      	mov	r4, fp
 8006878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800687c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006880:	3701      	adds	r7, #1
 8006882:	4638      	mov	r0, r7
 8006884:	f7f9 fdbe 	bl	8000404 <__aeabi_i2d>
 8006888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688c:	f7f9 fe24 	bl	80004d8 <__aeabi_dmul>
 8006890:	2200      	movs	r2, #0
 8006892:	4b62      	ldr	r3, [pc, #392]	; (8006a1c <_dtoa_r+0x5b4>)
 8006894:	f7f9 fc6a 	bl	800016c <__adddf3>
 8006898:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800689c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068a0:	9611      	str	r6, [sp, #68]	; 0x44
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d15d      	bne.n	8006962 <_dtoa_r+0x4fa>
 80068a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068aa:	2200      	movs	r2, #0
 80068ac:	4b5c      	ldr	r3, [pc, #368]	; (8006a20 <_dtoa_r+0x5b8>)
 80068ae:	f7f9 fc5b 	bl	8000168 <__aeabi_dsub>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ba:	4633      	mov	r3, r6
 80068bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068be:	f7fa f89b 	bl	80009f8 <__aeabi_dcmpgt>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f040 829e 	bne.w	8006e04 <_dtoa_r+0x99c>
 80068c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068d2:	f7fa f873 	bl	80009bc <__aeabi_dcmplt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f040 8292 	bne.w	8006e00 <_dtoa_r+0x998>
 80068dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80068e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f2c0 8153 	blt.w	8006b92 <_dtoa_r+0x72a>
 80068ec:	f1b9 0f0e 	cmp.w	r9, #14
 80068f0:	f300 814f 	bgt.w	8006b92 <_dtoa_r+0x72a>
 80068f4:	4b45      	ldr	r3, [pc, #276]	; (8006a0c <_dtoa_r+0x5a4>)
 80068f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80068fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006902:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006904:	2b00      	cmp	r3, #0
 8006906:	f280 80db 	bge.w	8006ac0 <_dtoa_r+0x658>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f300 80d7 	bgt.w	8006ac0 <_dtoa_r+0x658>
 8006912:	f040 8274 	bne.w	8006dfe <_dtoa_r+0x996>
 8006916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800691a:	2200      	movs	r2, #0
 800691c:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <_dtoa_r+0x5b8>)
 800691e:	f7f9 fddb 	bl	80004d8 <__aeabi_dmul>
 8006922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006926:	f7fa f85d 	bl	80009e4 <__aeabi_dcmpge>
 800692a:	9c02      	ldr	r4, [sp, #8]
 800692c:	4626      	mov	r6, r4
 800692e:	2800      	cmp	r0, #0
 8006930:	f040 824a 	bne.w	8006dc8 <_dtoa_r+0x960>
 8006934:	2331      	movs	r3, #49	; 0x31
 8006936:	9f08      	ldr	r7, [sp, #32]
 8006938:	f109 0901 	add.w	r9, r9, #1
 800693c:	f807 3b01 	strb.w	r3, [r7], #1
 8006940:	e246      	b.n	8006dd0 <_dtoa_r+0x968>
 8006942:	07e2      	lsls	r2, r4, #31
 8006944:	d505      	bpl.n	8006952 <_dtoa_r+0x4ea>
 8006946:	e9d6 2300 	ldrd	r2, r3, [r6]
 800694a:	f7f9 fdc5 	bl	80004d8 <__aeabi_dmul>
 800694e:	2301      	movs	r3, #1
 8006950:	3701      	adds	r7, #1
 8006952:	1064      	asrs	r4, r4, #1
 8006954:	3608      	adds	r6, #8
 8006956:	e76d      	b.n	8006834 <_dtoa_r+0x3cc>
 8006958:	2702      	movs	r7, #2
 800695a:	e770      	b.n	800683e <_dtoa_r+0x3d6>
 800695c:	46c8      	mov	r8, r9
 800695e:	9c02      	ldr	r4, [sp, #8]
 8006960:	e78f      	b.n	8006882 <_dtoa_r+0x41a>
 8006962:	9908      	ldr	r1, [sp, #32]
 8006964:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <_dtoa_r+0x5a4>)
 8006966:	4421      	add	r1, r4
 8006968:	9112      	str	r1, [sp, #72]	; 0x48
 800696a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800696c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006970:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006974:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006978:	2900      	cmp	r1, #0
 800697a:	d055      	beq.n	8006a28 <_dtoa_r+0x5c0>
 800697c:	2000      	movs	r0, #0
 800697e:	4929      	ldr	r1, [pc, #164]	; (8006a24 <_dtoa_r+0x5bc>)
 8006980:	f7f9 fed4 	bl	800072c <__aeabi_ddiv>
 8006984:	463b      	mov	r3, r7
 8006986:	4632      	mov	r2, r6
 8006988:	f7f9 fbee 	bl	8000168 <__aeabi_dsub>
 800698c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006990:	9f08      	ldr	r7, [sp, #32]
 8006992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006996:	f7fa f84f 	bl	8000a38 <__aeabi_d2iz>
 800699a:	4604      	mov	r4, r0
 800699c:	f7f9 fd32 	bl	8000404 <__aeabi_i2d>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a8:	f7f9 fbde 	bl	8000168 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	3430      	adds	r4, #48	; 0x30
 80069b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069ba:	f807 4b01 	strb.w	r4, [r7], #1
 80069be:	f7f9 fffd 	bl	80009bc <__aeabi_dcmplt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d174      	bne.n	8006ab0 <_dtoa_r+0x648>
 80069c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ca:	2000      	movs	r0, #0
 80069cc:	4911      	ldr	r1, [pc, #68]	; (8006a14 <_dtoa_r+0x5ac>)
 80069ce:	f7f9 fbcb 	bl	8000168 <__aeabi_dsub>
 80069d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069d6:	f7f9 fff1 	bl	80009bc <__aeabi_dcmplt>
 80069da:	2800      	cmp	r0, #0
 80069dc:	f040 80b6 	bne.w	8006b4c <_dtoa_r+0x6e4>
 80069e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069e2:	429f      	cmp	r7, r3
 80069e4:	f43f af7a 	beq.w	80068dc <_dtoa_r+0x474>
 80069e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069ec:	2200      	movs	r2, #0
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <_dtoa_r+0x5b0>)
 80069f0:	f7f9 fd72 	bl	80004d8 <__aeabi_dmul>
 80069f4:	2200      	movs	r2, #0
 80069f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <_dtoa_r+0x5b0>)
 8006a00:	f7f9 fd6a 	bl	80004d8 <__aeabi_dmul>
 8006a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a08:	e7c3      	b.n	8006992 <_dtoa_r+0x52a>
 8006a0a:	bf00      	nop
 8006a0c:	0800a7c8 	.word	0x0800a7c8
 8006a10:	0800a7a0 	.word	0x0800a7a0
 8006a14:	3ff00000 	.word	0x3ff00000
 8006a18:	40240000 	.word	0x40240000
 8006a1c:	401c0000 	.word	0x401c0000
 8006a20:	40140000 	.word	0x40140000
 8006a24:	3fe00000 	.word	0x3fe00000
 8006a28:	4630      	mov	r0, r6
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	f7f9 fd54 	bl	80004d8 <__aeabi_dmul>
 8006a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a36:	9c08      	ldr	r4, [sp, #32]
 8006a38:	9314      	str	r3, [sp, #80]	; 0x50
 8006a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a3e:	f7f9 fffb 	bl	8000a38 <__aeabi_d2iz>
 8006a42:	9015      	str	r0, [sp, #84]	; 0x54
 8006a44:	f7f9 fcde 	bl	8000404 <__aeabi_i2d>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a50:	f7f9 fb8a 	bl	8000168 <__aeabi_dsub>
 8006a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a56:	4606      	mov	r6, r0
 8006a58:	3330      	adds	r3, #48	; 0x30
 8006a5a:	f804 3b01 	strb.w	r3, [r4], #1
 8006a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a60:	460f      	mov	r7, r1
 8006a62:	429c      	cmp	r4, r3
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	d124      	bne.n	8006ab4 <_dtoa_r+0x64c>
 8006a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a6e:	4bb3      	ldr	r3, [pc, #716]	; (8006d3c <_dtoa_r+0x8d4>)
 8006a70:	f7f9 fb7c 	bl	800016c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 ffbc 	bl	80009f8 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d162      	bne.n	8006b4a <_dtoa_r+0x6e2>
 8006a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a88:	2000      	movs	r0, #0
 8006a8a:	49ac      	ldr	r1, [pc, #688]	; (8006d3c <_dtoa_r+0x8d4>)
 8006a8c:	f7f9 fb6c 	bl	8000168 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7f9 ff90 	bl	80009bc <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af1d 	beq.w	80068dc <_dtoa_r+0x474>
 8006aa2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006aa4:	1e7b      	subs	r3, r7, #1
 8006aa6:	9314      	str	r3, [sp, #80]	; 0x50
 8006aa8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d0f8      	beq.n	8006aa2 <_dtoa_r+0x63a>
 8006ab0:	46c1      	mov	r9, r8
 8006ab2:	e03a      	b.n	8006b2a <_dtoa_r+0x6c2>
 8006ab4:	4ba2      	ldr	r3, [pc, #648]	; (8006d40 <_dtoa_r+0x8d8>)
 8006ab6:	f7f9 fd0f 	bl	80004d8 <__aeabi_dmul>
 8006aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006abe:	e7bc      	b.n	8006a3a <_dtoa_r+0x5d2>
 8006ac0:	9f08      	ldr	r7, [sp, #32]
 8006ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aca:	f7f9 fe2f 	bl	800072c <__aeabi_ddiv>
 8006ace:	f7f9 ffb3 	bl	8000a38 <__aeabi_d2iz>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	f7f9 fc96 	bl	8000404 <__aeabi_i2d>
 8006ad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006adc:	f7f9 fcfc 	bl	80004d8 <__aeabi_dmul>
 8006ae0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aec:	f7f9 fb3c 	bl	8000168 <__aeabi_dsub>
 8006af0:	f807 6b01 	strb.w	r6, [r7], #1
 8006af4:	9e08      	ldr	r6, [sp, #32]
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	1bbe      	subs	r6, r7, r6
 8006afa:	42b3      	cmp	r3, r6
 8006afc:	d13a      	bne.n	8006b74 <_dtoa_r+0x70c>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	f7f9 fb33 	bl	800016c <__adddf3>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b12:	f7f9 ff71 	bl	80009f8 <__aeabi_dcmpgt>
 8006b16:	bb58      	cbnz	r0, 8006b70 <_dtoa_r+0x708>
 8006b18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b20:	f7f9 ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8006b24:	b108      	cbz	r0, 8006b2a <_dtoa_r+0x6c2>
 8006b26:	07e1      	lsls	r1, r4, #31
 8006b28:	d422      	bmi.n	8006b70 <_dtoa_r+0x708>
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	4651      	mov	r1, sl
 8006b2e:	f000 fe69 	bl	8007804 <_Bfree>
 8006b32:	2300      	movs	r3, #0
 8006b34:	703b      	strb	r3, [r7, #0]
 8006b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b38:	f109 0001 	add.w	r0, r9, #1
 8006b3c:	6018      	str	r0, [r3, #0]
 8006b3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f43f acdf 	beq.w	8006504 <_dtoa_r+0x9c>
 8006b46:	601f      	str	r7, [r3, #0]
 8006b48:	e4dc      	b.n	8006504 <_dtoa_r+0x9c>
 8006b4a:	4627      	mov	r7, r4
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	461f      	mov	r7, r3
 8006b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b54:	2a39      	cmp	r2, #57	; 0x39
 8006b56:	d107      	bne.n	8006b68 <_dtoa_r+0x700>
 8006b58:	9a08      	ldr	r2, [sp, #32]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d1f7      	bne.n	8006b4e <_dtoa_r+0x6e6>
 8006b5e:	2230      	movs	r2, #48	; 0x30
 8006b60:	9908      	ldr	r1, [sp, #32]
 8006b62:	f108 0801 	add.w	r8, r8, #1
 8006b66:	700a      	strb	r2, [r1, #0]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	3201      	adds	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e79f      	b.n	8006ab0 <_dtoa_r+0x648>
 8006b70:	46c8      	mov	r8, r9
 8006b72:	e7eb      	b.n	8006b4c <_dtoa_r+0x6e4>
 8006b74:	2200      	movs	r2, #0
 8006b76:	4b72      	ldr	r3, [pc, #456]	; (8006d40 <_dtoa_r+0x8d8>)
 8006b78:	f7f9 fcae 	bl	80004d8 <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b84:	2200      	movs	r2, #0
 8006b86:	2300      	movs	r3, #0
 8006b88:	f7f9 ff0e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d098      	beq.n	8006ac2 <_dtoa_r+0x65a>
 8006b90:	e7cb      	b.n	8006b2a <_dtoa_r+0x6c2>
 8006b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	f000 80cd 	beq.w	8006d34 <_dtoa_r+0x8cc>
 8006b9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b9c:	2a01      	cmp	r2, #1
 8006b9e:	f300 80af 	bgt.w	8006d00 <_dtoa_r+0x898>
 8006ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	f000 80a7 	beq.w	8006cf8 <_dtoa_r+0x890>
 8006baa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bb0:	9f06      	ldr	r7, [sp, #24]
 8006bb2:	9a06      	ldr	r2, [sp, #24]
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	441a      	add	r2, r3
 8006bb8:	9206      	str	r2, [sp, #24]
 8006bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	441a      	add	r2, r3
 8006bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc2:	f000 ff23 	bl	8007a0c <__i2b>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	dd0c      	ble.n	8006be6 <_dtoa_r+0x77e>
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd09      	ble.n	8006be6 <_dtoa_r+0x77e>
 8006bd2:	42bb      	cmp	r3, r7
 8006bd4:	bfa8      	it	ge
 8006bd6:	463b      	movge	r3, r7
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	1aff      	subs	r7, r7, r3
 8006bdc:	1ad2      	subs	r2, r2, r3
 8006bde:	9206      	str	r2, [sp, #24]
 8006be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	9309      	str	r3, [sp, #36]	; 0x24
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	b1f3      	cbz	r3, 8006c28 <_dtoa_r+0x7c0>
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80a9 	beq.w	8006d44 <_dtoa_r+0x8dc>
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	dd10      	ble.n	8006c18 <_dtoa_r+0x7b0>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 ffc0 	bl	8007b80 <__pow5mult>
 8006c00:	4652      	mov	r2, sl
 8006c02:	4601      	mov	r1, r0
 8006c04:	4606      	mov	r6, r0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 ff16 	bl	8007a38 <__multiply>
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	4651      	mov	r1, sl
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 fdf7 	bl	8007804 <_Bfree>
 8006c16:	46c2      	mov	sl, r8
 8006c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1a:	1b1a      	subs	r2, r3, r4
 8006c1c:	d004      	beq.n	8006c28 <_dtoa_r+0x7c0>
 8006c1e:	4651      	mov	r1, sl
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 ffad 	bl	8007b80 <__pow5mult>
 8006c26:	4682      	mov	sl, r0
 8006c28:	2101      	movs	r1, #1
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 feee 	bl	8007a0c <__i2b>
 8006c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c32:	4604      	mov	r4, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f340 8087 	ble.w	8006d48 <_dtoa_r+0x8e0>
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4601      	mov	r1, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 ff9e 	bl	8007b80 <__pow5mult>
 8006c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c46:	4604      	mov	r4, r0
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	f340 8080 	ble.w	8006d4e <_dtoa_r+0x8e6>
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c58:	6918      	ldr	r0, [r3, #16]
 8006c5a:	f000 fe89 	bl	8007970 <__hi0bits>
 8006c5e:	f1c0 0020 	rsb	r0, r0, #32
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	4418      	add	r0, r3
 8006c66:	f010 001f 	ands.w	r0, r0, #31
 8006c6a:	f000 8092 	beq.w	8006d92 <_dtoa_r+0x92a>
 8006c6e:	f1c0 0320 	rsb	r3, r0, #32
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	f340 808a 	ble.w	8006d8c <_dtoa_r+0x924>
 8006c78:	f1c0 001c 	rsb	r0, r0, #28
 8006c7c:	9b06      	ldr	r3, [sp, #24]
 8006c7e:	4407      	add	r7, r0
 8006c80:	4403      	add	r3, r0
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c86:	4403      	add	r3, r0
 8006c88:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dd05      	ble.n	8006c9c <_dtoa_r+0x834>
 8006c90:	4651      	mov	r1, sl
 8006c92:	461a      	mov	r2, r3
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 ffcd 	bl	8007c34 <__lshift>
 8006c9a:	4682      	mov	sl, r0
 8006c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dd05      	ble.n	8006cae <_dtoa_r+0x846>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 ffc4 	bl	8007c34 <__lshift>
 8006cac:	4604      	mov	r4, r0
 8006cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d070      	beq.n	8006d96 <_dtoa_r+0x92e>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f001 f828 	bl	8007d0c <__mcmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	da6a      	bge.n	8006d96 <_dtoa_r+0x92e>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 fdbe 	bl	8007848 <__multadd>
 8006ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cce:	4682      	mov	sl, r0
 8006cd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8193 	beq.w	8007000 <_dtoa_r+0xb98>
 8006cda:	4631      	mov	r1, r6
 8006cdc:	2300      	movs	r3, #0
 8006cde:	220a      	movs	r2, #10
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 fdb1 	bl	8007848 <__multadd>
 8006ce6:	f1bb 0f00 	cmp.w	fp, #0
 8006cea:	4606      	mov	r6, r0
 8006cec:	f300 8093 	bgt.w	8006e16 <_dtoa_r+0x9ae>
 8006cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	dc57      	bgt.n	8006da6 <_dtoa_r+0x93e>
 8006cf6:	e08e      	b.n	8006e16 <_dtoa_r+0x9ae>
 8006cf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cfe:	e756      	b.n	8006bae <_dtoa_r+0x746>
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	1e5c      	subs	r4, r3, #1
 8006d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	bfb7      	itett	lt
 8006d0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d0c:	1b1c      	subge	r4, r3, r4
 8006d0e:	1ae2      	sublt	r2, r4, r3
 8006d10:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006d12:	bfbe      	ittt	lt
 8006d14:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d16:	189b      	addlt	r3, r3, r2
 8006d18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	bfb8      	it	lt
 8006d1e:	2400      	movlt	r4, #0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bfbb      	ittet	lt
 8006d24:	9b06      	ldrlt	r3, [sp, #24]
 8006d26:	9a02      	ldrlt	r2, [sp, #8]
 8006d28:	9f06      	ldrge	r7, [sp, #24]
 8006d2a:	1a9f      	sublt	r7, r3, r2
 8006d2c:	bfac      	ite	ge
 8006d2e:	9b02      	ldrge	r3, [sp, #8]
 8006d30:	2300      	movlt	r3, #0
 8006d32:	e73e      	b.n	8006bb2 <_dtoa_r+0x74a>
 8006d34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d36:	9f06      	ldr	r7, [sp, #24]
 8006d38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d3a:	e745      	b.n	8006bc8 <_dtoa_r+0x760>
 8006d3c:	3fe00000 	.word	0x3fe00000
 8006d40:	40240000 	.word	0x40240000
 8006d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d46:	e76a      	b.n	8006c1e <_dtoa_r+0x7b6>
 8006d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	dc19      	bgt.n	8006d82 <_dtoa_r+0x91a>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	b9bb      	cbnz	r3, 8006d82 <_dtoa_r+0x91a>
 8006d52:	9b05      	ldr	r3, [sp, #20]
 8006d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d58:	b99b      	cbnz	r3, 8006d82 <_dtoa_r+0x91a>
 8006d5a:	9b05      	ldr	r3, [sp, #20]
 8006d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	0d1b      	lsrs	r3, r3, #20
 8006d62:	051b      	lsls	r3, r3, #20
 8006d64:	b183      	cbz	r3, 8006d88 <_dtoa_r+0x920>
 8006d66:	f04f 0801 	mov.w	r8, #1
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	9306      	str	r3, [sp, #24]
 8006d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d72:	3301      	adds	r3, #1
 8006d74:	9309      	str	r3, [sp, #36]	; 0x24
 8006d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f47f af6a 	bne.w	8006c52 <_dtoa_r+0x7ea>
 8006d7e:	2001      	movs	r0, #1
 8006d80:	e76f      	b.n	8006c62 <_dtoa_r+0x7fa>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	e7f6      	b.n	8006d76 <_dtoa_r+0x90e>
 8006d88:	4698      	mov	r8, r3
 8006d8a:	e7f4      	b.n	8006d76 <_dtoa_r+0x90e>
 8006d8c:	f43f af7d 	beq.w	8006c8a <_dtoa_r+0x822>
 8006d90:	4618      	mov	r0, r3
 8006d92:	301c      	adds	r0, #28
 8006d94:	e772      	b.n	8006c7c <_dtoa_r+0x814>
 8006d96:	9b02      	ldr	r3, [sp, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dc36      	bgt.n	8006e0a <_dtoa_r+0x9a2>
 8006d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	dd33      	ble.n	8006e0a <_dtoa_r+0x9a2>
 8006da2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006da6:	f1bb 0f00 	cmp.w	fp, #0
 8006daa:	d10d      	bne.n	8006dc8 <_dtoa_r+0x960>
 8006dac:	4621      	mov	r1, r4
 8006dae:	465b      	mov	r3, fp
 8006db0:	2205      	movs	r2, #5
 8006db2:	4628      	mov	r0, r5
 8006db4:	f000 fd48 	bl	8007848 <__multadd>
 8006db8:	4601      	mov	r1, r0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	f000 ffa5 	bl	8007d0c <__mcmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f73f adb6 	bgt.w	8006934 <_dtoa_r+0x4cc>
 8006dc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dca:	9f08      	ldr	r7, [sp, #32]
 8006dcc:	ea6f 0903 	mvn.w	r9, r3
 8006dd0:	f04f 0800 	mov.w	r8, #0
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 fd14 	bl	8007804 <_Bfree>
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	f43f aea4 	beq.w	8006b2a <_dtoa_r+0x6c2>
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	d005      	beq.n	8006df4 <_dtoa_r+0x98c>
 8006de8:	45b0      	cmp	r8, r6
 8006dea:	d003      	beq.n	8006df4 <_dtoa_r+0x98c>
 8006dec:	4641      	mov	r1, r8
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 fd08 	bl	8007804 <_Bfree>
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 fd04 	bl	8007804 <_Bfree>
 8006dfc:	e695      	b.n	8006b2a <_dtoa_r+0x6c2>
 8006dfe:	2400      	movs	r4, #0
 8006e00:	4626      	mov	r6, r4
 8006e02:	e7e1      	b.n	8006dc8 <_dtoa_r+0x960>
 8006e04:	46c1      	mov	r9, r8
 8006e06:	4626      	mov	r6, r4
 8006e08:	e594      	b.n	8006934 <_dtoa_r+0x4cc>
 8006e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80fc 	beq.w	800700e <_dtoa_r+0xba6>
 8006e16:	2f00      	cmp	r7, #0
 8006e18:	dd05      	ble.n	8006e26 <_dtoa_r+0x9be>
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	463a      	mov	r2, r7
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 ff08 	bl	8007c34 <__lshift>
 8006e24:	4606      	mov	r6, r0
 8006e26:	f1b8 0f00 	cmp.w	r8, #0
 8006e2a:	d05c      	beq.n	8006ee6 <_dtoa_r+0xa7e>
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	6871      	ldr	r1, [r6, #4]
 8006e30:	f000 fca8 	bl	8007784 <_Balloc>
 8006e34:	4607      	mov	r7, r0
 8006e36:	b928      	cbnz	r0, 8006e44 <_dtoa_r+0x9dc>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e3e:	4b7e      	ldr	r3, [pc, #504]	; (8007038 <_dtoa_r+0xbd0>)
 8006e40:	f7ff bb26 	b.w	8006490 <_dtoa_r+0x28>
 8006e44:	6932      	ldr	r2, [r6, #16]
 8006e46:	f106 010c 	add.w	r1, r6, #12
 8006e4a:	3202      	adds	r2, #2
 8006e4c:	0092      	lsls	r2, r2, #2
 8006e4e:	300c      	adds	r0, #12
 8006e50:	f000 fc8a 	bl	8007768 <memcpy>
 8006e54:	2201      	movs	r2, #1
 8006e56:	4639      	mov	r1, r7
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 feeb 	bl	8007c34 <__lshift>
 8006e5e:	46b0      	mov	r8, r6
 8006e60:	4606      	mov	r6, r0
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	3301      	adds	r3, #1
 8006e66:	9302      	str	r3, [sp, #8]
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	445b      	add	r3, fp
 8006e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6e:	9b04      	ldr	r3, [sp, #16]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	9309      	str	r3, [sp, #36]	; 0x24
 8006e76:	9b02      	ldr	r3, [sp, #8]
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4650      	mov	r0, sl
 8006e7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e80:	f7ff fa64 	bl	800634c <quorem>
 8006e84:	4603      	mov	r3, r0
 8006e86:	4641      	mov	r1, r8
 8006e88:	3330      	adds	r3, #48	; 0x30
 8006e8a:	9004      	str	r0, [sp, #16]
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e90:	f000 ff3c 	bl	8007d0c <__mcmp>
 8006e94:	4632      	mov	r2, r6
 8006e96:	9006      	str	r0, [sp, #24]
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 ff52 	bl	8007d44 <__mdiff>
 8006ea0:	68c2      	ldr	r2, [r0, #12]
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea6:	bb02      	cbnz	r2, 8006eea <_dtoa_r+0xa82>
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f000 ff2e 	bl	8007d0c <__mcmp>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ebc:	f000 fca2 	bl	8007804 <_Bfree>
 8006ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec4:	9f02      	ldr	r7, [sp, #8]
 8006ec6:	ea43 0102 	orr.w	r1, r3, r2
 8006eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed0:	d10d      	bne.n	8006eee <_dtoa_r+0xa86>
 8006ed2:	2b39      	cmp	r3, #57	; 0x39
 8006ed4:	d027      	beq.n	8006f26 <_dtoa_r+0xabe>
 8006ed6:	9a06      	ldr	r2, [sp, #24]
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	dd01      	ble.n	8006ee0 <_dtoa_r+0xa78>
 8006edc:	9b04      	ldr	r3, [sp, #16]
 8006ede:	3331      	adds	r3, #49	; 0x31
 8006ee0:	f88b 3000 	strb.w	r3, [fp]
 8006ee4:	e776      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	e7b9      	b.n	8006e5e <_dtoa_r+0x9f6>
 8006eea:	2201      	movs	r2, #1
 8006eec:	e7e2      	b.n	8006eb4 <_dtoa_r+0xa4c>
 8006eee:	9906      	ldr	r1, [sp, #24]
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	db04      	blt.n	8006efe <_dtoa_r+0xa96>
 8006ef4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006ef6:	4301      	orrs	r1, r0
 8006ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006efa:	4301      	orrs	r1, r0
 8006efc:	d120      	bne.n	8006f40 <_dtoa_r+0xad8>
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	ddee      	ble.n	8006ee0 <_dtoa_r+0xa78>
 8006f02:	4651      	mov	r1, sl
 8006f04:	2201      	movs	r2, #1
 8006f06:	4628      	mov	r0, r5
 8006f08:	9302      	str	r3, [sp, #8]
 8006f0a:	f000 fe93 	bl	8007c34 <__lshift>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4682      	mov	sl, r0
 8006f12:	f000 fefb 	bl	8007d0c <__mcmp>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	dc02      	bgt.n	8006f22 <_dtoa_r+0xaba>
 8006f1c:	d1e0      	bne.n	8006ee0 <_dtoa_r+0xa78>
 8006f1e:	07da      	lsls	r2, r3, #31
 8006f20:	d5de      	bpl.n	8006ee0 <_dtoa_r+0xa78>
 8006f22:	2b39      	cmp	r3, #57	; 0x39
 8006f24:	d1da      	bne.n	8006edc <_dtoa_r+0xa74>
 8006f26:	2339      	movs	r3, #57	; 0x39
 8006f28:	f88b 3000 	strb.w	r3, [fp]
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	461f      	mov	r7, r3
 8006f30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	2a39      	cmp	r2, #57	; 0x39
 8006f38:	d050      	beq.n	8006fdc <_dtoa_r+0xb74>
 8006f3a:	3201      	adds	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e749      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	dd03      	ble.n	8006f4c <_dtoa_r+0xae4>
 8006f44:	2b39      	cmp	r3, #57	; 0x39
 8006f46:	d0ee      	beq.n	8006f26 <_dtoa_r+0xabe>
 8006f48:	3301      	adds	r3, #1
 8006f4a:	e7c9      	b.n	8006ee0 <_dtoa_r+0xa78>
 8006f4c:	9a02      	ldr	r2, [sp, #8]
 8006f4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f54:	428a      	cmp	r2, r1
 8006f56:	d02a      	beq.n	8006fae <_dtoa_r+0xb46>
 8006f58:	4651      	mov	r1, sl
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 fc72 	bl	8007848 <__multadd>
 8006f64:	45b0      	cmp	r8, r6
 8006f66:	4682      	mov	sl, r0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	f04f 020a 	mov.w	r2, #10
 8006f70:	4641      	mov	r1, r8
 8006f72:	4628      	mov	r0, r5
 8006f74:	d107      	bne.n	8006f86 <_dtoa_r+0xb1e>
 8006f76:	f000 fc67 	bl	8007848 <__multadd>
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	9b02      	ldr	r3, [sp, #8]
 8006f80:	3301      	adds	r3, #1
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	e777      	b.n	8006e76 <_dtoa_r+0xa0e>
 8006f86:	f000 fc5f 	bl	8007848 <__multadd>
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	220a      	movs	r2, #10
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 fc58 	bl	8007848 <__multadd>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	e7f0      	b.n	8006f7e <_dtoa_r+0xb16>
 8006f9c:	f1bb 0f00 	cmp.w	fp, #0
 8006fa0:	bfcc      	ite	gt
 8006fa2:	465f      	movgt	r7, fp
 8006fa4:	2701      	movle	r7, #1
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	9a08      	ldr	r2, [sp, #32]
 8006fac:	4417      	add	r7, r2
 8006fae:	4651      	mov	r1, sl
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	9302      	str	r3, [sp, #8]
 8006fb6:	f000 fe3d 	bl	8007c34 <__lshift>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4682      	mov	sl, r0
 8006fbe:	f000 fea5 	bl	8007d0c <__mcmp>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	dcb2      	bgt.n	8006f2c <_dtoa_r+0xac4>
 8006fc6:	d102      	bne.n	8006fce <_dtoa_r+0xb66>
 8006fc8:	9b02      	ldr	r3, [sp, #8]
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d4ae      	bmi.n	8006f2c <_dtoa_r+0xac4>
 8006fce:	463b      	mov	r3, r7
 8006fd0:	461f      	mov	r7, r3
 8006fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd6:	2a30      	cmp	r2, #48	; 0x30
 8006fd8:	d0fa      	beq.n	8006fd0 <_dtoa_r+0xb68>
 8006fda:	e6fb      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006fdc:	9a08      	ldr	r2, [sp, #32]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d1a5      	bne.n	8006f2e <_dtoa_r+0xac6>
 8006fe2:	2331      	movs	r3, #49	; 0x31
 8006fe4:	f109 0901 	add.w	r9, r9, #1
 8006fe8:	7013      	strb	r3, [r2, #0]
 8006fea:	e6f3      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006fec:	4b13      	ldr	r3, [pc, #76]	; (800703c <_dtoa_r+0xbd4>)
 8006fee:	f7ff baa7 	b.w	8006540 <_dtoa_r+0xd8>
 8006ff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f47f aa80 	bne.w	80064fa <_dtoa_r+0x92>
 8006ffa:	4b11      	ldr	r3, [pc, #68]	; (8007040 <_dtoa_r+0xbd8>)
 8006ffc:	f7ff baa0 	b.w	8006540 <_dtoa_r+0xd8>
 8007000:	f1bb 0f00 	cmp.w	fp, #0
 8007004:	dc03      	bgt.n	800700e <_dtoa_r+0xba6>
 8007006:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007008:	2b02      	cmp	r3, #2
 800700a:	f73f aecc 	bgt.w	8006da6 <_dtoa_r+0x93e>
 800700e:	9f08      	ldr	r7, [sp, #32]
 8007010:	4621      	mov	r1, r4
 8007012:	4650      	mov	r0, sl
 8007014:	f7ff f99a 	bl	800634c <quorem>
 8007018:	9a08      	ldr	r2, [sp, #32]
 800701a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800701e:	f807 3b01 	strb.w	r3, [r7], #1
 8007022:	1aba      	subs	r2, r7, r2
 8007024:	4593      	cmp	fp, r2
 8007026:	ddb9      	ble.n	8006f9c <_dtoa_r+0xb34>
 8007028:	4651      	mov	r1, sl
 800702a:	2300      	movs	r3, #0
 800702c:	220a      	movs	r2, #10
 800702e:	4628      	mov	r0, r5
 8007030:	f000 fc0a 	bl	8007848 <__multadd>
 8007034:	4682      	mov	sl, r0
 8007036:	e7eb      	b.n	8007010 <_dtoa_r+0xba8>
 8007038:	0800a6ac 	.word	0x0800a6ac
 800703c:	0800a4a8 	.word	0x0800a4a8
 8007040:	0800a629 	.word	0x0800a629

08007044 <rshift>:
 8007044:	6903      	ldr	r3, [r0, #16]
 8007046:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800704a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800704e:	f100 0414 	add.w	r4, r0, #20
 8007052:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007056:	dd46      	ble.n	80070e6 <rshift+0xa2>
 8007058:	f011 011f 	ands.w	r1, r1, #31
 800705c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007060:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007064:	d10c      	bne.n	8007080 <rshift+0x3c>
 8007066:	4629      	mov	r1, r5
 8007068:	f100 0710 	add.w	r7, r0, #16
 800706c:	42b1      	cmp	r1, r6
 800706e:	d335      	bcc.n	80070dc <rshift+0x98>
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	1eea      	subs	r2, r5, #3
 8007076:	4296      	cmp	r6, r2
 8007078:	bf38      	it	cc
 800707a:	2300      	movcc	r3, #0
 800707c:	4423      	add	r3, r4
 800707e:	e015      	b.n	80070ac <rshift+0x68>
 8007080:	46a1      	mov	r9, r4
 8007082:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007086:	f1c1 0820 	rsb	r8, r1, #32
 800708a:	40cf      	lsrs	r7, r1
 800708c:	f105 0e04 	add.w	lr, r5, #4
 8007090:	4576      	cmp	r6, lr
 8007092:	46f4      	mov	ip, lr
 8007094:	d816      	bhi.n	80070c4 <rshift+0x80>
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	009a      	lsls	r2, r3, #2
 800709a:	3a04      	subs	r2, #4
 800709c:	3501      	adds	r5, #1
 800709e:	42ae      	cmp	r6, r5
 80070a0:	bf38      	it	cc
 80070a2:	2200      	movcc	r2, #0
 80070a4:	18a3      	adds	r3, r4, r2
 80070a6:	50a7      	str	r7, [r4, r2]
 80070a8:	b107      	cbz	r7, 80070ac <rshift+0x68>
 80070aa:	3304      	adds	r3, #4
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	eba3 0204 	sub.w	r2, r3, r4
 80070b2:	bf08      	it	eq
 80070b4:	2300      	moveq	r3, #0
 80070b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070ba:	6102      	str	r2, [r0, #16]
 80070bc:	bf08      	it	eq
 80070be:	6143      	streq	r3, [r0, #20]
 80070c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070c4:	f8dc c000 	ldr.w	ip, [ip]
 80070c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80070cc:	ea4c 0707 	orr.w	r7, ip, r7
 80070d0:	f849 7b04 	str.w	r7, [r9], #4
 80070d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070d8:	40cf      	lsrs	r7, r1
 80070da:	e7d9      	b.n	8007090 <rshift+0x4c>
 80070dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80070e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80070e4:	e7c2      	b.n	800706c <rshift+0x28>
 80070e6:	4623      	mov	r3, r4
 80070e8:	e7e0      	b.n	80070ac <rshift+0x68>

080070ea <__hexdig_fun>:
 80070ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80070ee:	2b09      	cmp	r3, #9
 80070f0:	d802      	bhi.n	80070f8 <__hexdig_fun+0xe>
 80070f2:	3820      	subs	r0, #32
 80070f4:	b2c0      	uxtb	r0, r0
 80070f6:	4770      	bx	lr
 80070f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80070fc:	2b05      	cmp	r3, #5
 80070fe:	d801      	bhi.n	8007104 <__hexdig_fun+0x1a>
 8007100:	3847      	subs	r0, #71	; 0x47
 8007102:	e7f7      	b.n	80070f4 <__hexdig_fun+0xa>
 8007104:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007108:	2b05      	cmp	r3, #5
 800710a:	d801      	bhi.n	8007110 <__hexdig_fun+0x26>
 800710c:	3827      	subs	r0, #39	; 0x27
 800710e:	e7f1      	b.n	80070f4 <__hexdig_fun+0xa>
 8007110:	2000      	movs	r0, #0
 8007112:	4770      	bx	lr

08007114 <__gethex>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	b08b      	sub	sp, #44	; 0x2c
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	4bb9      	ldr	r3, [pc, #740]	; (8007404 <__gethex+0x2f0>)
 800711e:	9002      	str	r0, [sp, #8]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	468b      	mov	fp, r1
 8007124:	4618      	mov	r0, r3
 8007126:	4690      	mov	r8, r2
 8007128:	9303      	str	r3, [sp, #12]
 800712a:	f7f9 f811 	bl	8000150 <strlen>
 800712e:	4682      	mov	sl, r0
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	f8db 2000 	ldr.w	r2, [fp]
 8007136:	4403      	add	r3, r0
 8007138:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800713c:	9307      	str	r3, [sp, #28]
 800713e:	1c93      	adds	r3, r2, #2
 8007140:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007144:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007148:	32fe      	adds	r2, #254	; 0xfe
 800714a:	18d1      	adds	r1, r2, r3
 800714c:	461f      	mov	r7, r3
 800714e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007152:	9101      	str	r1, [sp, #4]
 8007154:	2830      	cmp	r0, #48	; 0x30
 8007156:	d0f8      	beq.n	800714a <__gethex+0x36>
 8007158:	f7ff ffc7 	bl	80070ea <__hexdig_fun>
 800715c:	4604      	mov	r4, r0
 800715e:	2800      	cmp	r0, #0
 8007160:	d13a      	bne.n	80071d8 <__gethex+0xc4>
 8007162:	4652      	mov	r2, sl
 8007164:	4638      	mov	r0, r7
 8007166:	9903      	ldr	r1, [sp, #12]
 8007168:	f001 f9ea 	bl	8008540 <strncmp>
 800716c:	4605      	mov	r5, r0
 800716e:	2800      	cmp	r0, #0
 8007170:	d166      	bne.n	8007240 <__gethex+0x12c>
 8007172:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007176:	eb07 060a 	add.w	r6, r7, sl
 800717a:	f7ff ffb6 	bl	80070ea <__hexdig_fun>
 800717e:	2800      	cmp	r0, #0
 8007180:	d060      	beq.n	8007244 <__gethex+0x130>
 8007182:	4633      	mov	r3, r6
 8007184:	7818      	ldrb	r0, [r3, #0]
 8007186:	461f      	mov	r7, r3
 8007188:	2830      	cmp	r0, #48	; 0x30
 800718a:	f103 0301 	add.w	r3, r3, #1
 800718e:	d0f9      	beq.n	8007184 <__gethex+0x70>
 8007190:	f7ff ffab 	bl	80070ea <__hexdig_fun>
 8007194:	2301      	movs	r3, #1
 8007196:	fab0 f480 	clz	r4, r0
 800719a:	4635      	mov	r5, r6
 800719c:	0964      	lsrs	r4, r4, #5
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	463a      	mov	r2, r7
 80071a2:	4616      	mov	r6, r2
 80071a4:	7830      	ldrb	r0, [r6, #0]
 80071a6:	3201      	adds	r2, #1
 80071a8:	f7ff ff9f 	bl	80070ea <__hexdig_fun>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d1f8      	bne.n	80071a2 <__gethex+0x8e>
 80071b0:	4652      	mov	r2, sl
 80071b2:	4630      	mov	r0, r6
 80071b4:	9903      	ldr	r1, [sp, #12]
 80071b6:	f001 f9c3 	bl	8008540 <strncmp>
 80071ba:	b980      	cbnz	r0, 80071de <__gethex+0xca>
 80071bc:	b94d      	cbnz	r5, 80071d2 <__gethex+0xbe>
 80071be:	eb06 050a 	add.w	r5, r6, sl
 80071c2:	462a      	mov	r2, r5
 80071c4:	4616      	mov	r6, r2
 80071c6:	7830      	ldrb	r0, [r6, #0]
 80071c8:	3201      	adds	r2, #1
 80071ca:	f7ff ff8e 	bl	80070ea <__hexdig_fun>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1f8      	bne.n	80071c4 <__gethex+0xb0>
 80071d2:	1bad      	subs	r5, r5, r6
 80071d4:	00ad      	lsls	r5, r5, #2
 80071d6:	e004      	b.n	80071e2 <__gethex+0xce>
 80071d8:	2400      	movs	r4, #0
 80071da:	4625      	mov	r5, r4
 80071dc:	e7e0      	b.n	80071a0 <__gethex+0x8c>
 80071de:	2d00      	cmp	r5, #0
 80071e0:	d1f7      	bne.n	80071d2 <__gethex+0xbe>
 80071e2:	7833      	ldrb	r3, [r6, #0]
 80071e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071e8:	2b50      	cmp	r3, #80	; 0x50
 80071ea:	d139      	bne.n	8007260 <__gethex+0x14c>
 80071ec:	7873      	ldrb	r3, [r6, #1]
 80071ee:	2b2b      	cmp	r3, #43	; 0x2b
 80071f0:	d02a      	beq.n	8007248 <__gethex+0x134>
 80071f2:	2b2d      	cmp	r3, #45	; 0x2d
 80071f4:	d02c      	beq.n	8007250 <__gethex+0x13c>
 80071f6:	f04f 0900 	mov.w	r9, #0
 80071fa:	1c71      	adds	r1, r6, #1
 80071fc:	7808      	ldrb	r0, [r1, #0]
 80071fe:	f7ff ff74 	bl	80070ea <__hexdig_fun>
 8007202:	1e43      	subs	r3, r0, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b18      	cmp	r3, #24
 8007208:	d82a      	bhi.n	8007260 <__gethex+0x14c>
 800720a:	f1a0 0210 	sub.w	r2, r0, #16
 800720e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007212:	f7ff ff6a 	bl	80070ea <__hexdig_fun>
 8007216:	1e43      	subs	r3, r0, #1
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b18      	cmp	r3, #24
 800721c:	d91b      	bls.n	8007256 <__gethex+0x142>
 800721e:	f1b9 0f00 	cmp.w	r9, #0
 8007222:	d000      	beq.n	8007226 <__gethex+0x112>
 8007224:	4252      	negs	r2, r2
 8007226:	4415      	add	r5, r2
 8007228:	f8cb 1000 	str.w	r1, [fp]
 800722c:	b1d4      	cbz	r4, 8007264 <__gethex+0x150>
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	bf14      	ite	ne
 8007234:	2700      	movne	r7, #0
 8007236:	2706      	moveq	r7, #6
 8007238:	4638      	mov	r0, r7
 800723a:	b00b      	add	sp, #44	; 0x2c
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	463e      	mov	r6, r7
 8007242:	4625      	mov	r5, r4
 8007244:	2401      	movs	r4, #1
 8007246:	e7cc      	b.n	80071e2 <__gethex+0xce>
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	1cb1      	adds	r1, r6, #2
 800724e:	e7d5      	b.n	80071fc <__gethex+0xe8>
 8007250:	f04f 0901 	mov.w	r9, #1
 8007254:	e7fa      	b.n	800724c <__gethex+0x138>
 8007256:	230a      	movs	r3, #10
 8007258:	fb03 0202 	mla	r2, r3, r2, r0
 800725c:	3a10      	subs	r2, #16
 800725e:	e7d6      	b.n	800720e <__gethex+0xfa>
 8007260:	4631      	mov	r1, r6
 8007262:	e7e1      	b.n	8007228 <__gethex+0x114>
 8007264:	4621      	mov	r1, r4
 8007266:	1bf3      	subs	r3, r6, r7
 8007268:	3b01      	subs	r3, #1
 800726a:	2b07      	cmp	r3, #7
 800726c:	dc0a      	bgt.n	8007284 <__gethex+0x170>
 800726e:	9802      	ldr	r0, [sp, #8]
 8007270:	f000 fa88 	bl	8007784 <_Balloc>
 8007274:	4604      	mov	r4, r0
 8007276:	b940      	cbnz	r0, 800728a <__gethex+0x176>
 8007278:	4602      	mov	r2, r0
 800727a:	21de      	movs	r1, #222	; 0xde
 800727c:	4b62      	ldr	r3, [pc, #392]	; (8007408 <__gethex+0x2f4>)
 800727e:	4863      	ldr	r0, [pc, #396]	; (800740c <__gethex+0x2f8>)
 8007280:	f001 f97e 	bl	8008580 <__assert_func>
 8007284:	3101      	adds	r1, #1
 8007286:	105b      	asrs	r3, r3, #1
 8007288:	e7ef      	b.n	800726a <__gethex+0x156>
 800728a:	f04f 0b00 	mov.w	fp, #0
 800728e:	f100 0914 	add.w	r9, r0, #20
 8007292:	f1ca 0301 	rsb	r3, sl, #1
 8007296:	f8cd 9010 	str.w	r9, [sp, #16]
 800729a:	f8cd b004 	str.w	fp, [sp, #4]
 800729e:	9308      	str	r3, [sp, #32]
 80072a0:	42b7      	cmp	r7, r6
 80072a2:	d33f      	bcc.n	8007324 <__gethex+0x210>
 80072a4:	9f04      	ldr	r7, [sp, #16]
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	f847 3b04 	str.w	r3, [r7], #4
 80072ac:	eba7 0709 	sub.w	r7, r7, r9
 80072b0:	10bf      	asrs	r7, r7, #2
 80072b2:	6127      	str	r7, [r4, #16]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fb5b 	bl	8007970 <__hi0bits>
 80072ba:	017f      	lsls	r7, r7, #5
 80072bc:	f8d8 6000 	ldr.w	r6, [r8]
 80072c0:	1a3f      	subs	r7, r7, r0
 80072c2:	42b7      	cmp	r7, r6
 80072c4:	dd62      	ble.n	800738c <__gethex+0x278>
 80072c6:	1bbf      	subs	r7, r7, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 fef1 	bl	80080b2 <__any_on>
 80072d0:	4682      	mov	sl, r0
 80072d2:	b1a8      	cbz	r0, 8007300 <__gethex+0x1ec>
 80072d4:	f04f 0a01 	mov.w	sl, #1
 80072d8:	1e7b      	subs	r3, r7, #1
 80072da:	1159      	asrs	r1, r3, #5
 80072dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80072e0:	f003 021f 	and.w	r2, r3, #31
 80072e4:	fa0a f202 	lsl.w	r2, sl, r2
 80072e8:	420a      	tst	r2, r1
 80072ea:	d009      	beq.n	8007300 <__gethex+0x1ec>
 80072ec:	4553      	cmp	r3, sl
 80072ee:	dd05      	ble.n	80072fc <__gethex+0x1e8>
 80072f0:	4620      	mov	r0, r4
 80072f2:	1eb9      	subs	r1, r7, #2
 80072f4:	f000 fedd 	bl	80080b2 <__any_on>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d144      	bne.n	8007386 <__gethex+0x272>
 80072fc:	f04f 0a02 	mov.w	sl, #2
 8007300:	4639      	mov	r1, r7
 8007302:	4620      	mov	r0, r4
 8007304:	f7ff fe9e 	bl	8007044 <rshift>
 8007308:	443d      	add	r5, r7
 800730a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800730e:	42ab      	cmp	r3, r5
 8007310:	da4a      	bge.n	80073a8 <__gethex+0x294>
 8007312:	4621      	mov	r1, r4
 8007314:	9802      	ldr	r0, [sp, #8]
 8007316:	f000 fa75 	bl	8007804 <_Bfree>
 800731a:	2300      	movs	r3, #0
 800731c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800731e:	27a3      	movs	r7, #163	; 0xa3
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e789      	b.n	8007238 <__gethex+0x124>
 8007324:	1e73      	subs	r3, r6, #1
 8007326:	9a07      	ldr	r2, [sp, #28]
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800732e:	4293      	cmp	r3, r2
 8007330:	d019      	beq.n	8007366 <__gethex+0x252>
 8007332:	f1bb 0f20 	cmp.w	fp, #32
 8007336:	d107      	bne.n	8007348 <__gethex+0x234>
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	9a01      	ldr	r2, [sp, #4]
 800733c:	f843 2b04 	str.w	r2, [r3], #4
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	2300      	movs	r3, #0
 8007344:	469b      	mov	fp, r3
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800734c:	f7ff fecd 	bl	80070ea <__hexdig_fun>
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	f000 000f 	and.w	r0, r0, #15
 8007356:	fa00 f00b 	lsl.w	r0, r0, fp
 800735a:	4303      	orrs	r3, r0
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	f10b 0b04 	add.w	fp, fp, #4
 8007362:	9b05      	ldr	r3, [sp, #20]
 8007364:	e00d      	b.n	8007382 <__gethex+0x26e>
 8007366:	9b05      	ldr	r3, [sp, #20]
 8007368:	9a08      	ldr	r2, [sp, #32]
 800736a:	4413      	add	r3, r2
 800736c:	42bb      	cmp	r3, r7
 800736e:	d3e0      	bcc.n	8007332 <__gethex+0x21e>
 8007370:	4618      	mov	r0, r3
 8007372:	4652      	mov	r2, sl
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	9309      	str	r3, [sp, #36]	; 0x24
 8007378:	f001 f8e2 	bl	8008540 <strncmp>
 800737c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737e:	2800      	cmp	r0, #0
 8007380:	d1d7      	bne.n	8007332 <__gethex+0x21e>
 8007382:	461e      	mov	r6, r3
 8007384:	e78c      	b.n	80072a0 <__gethex+0x18c>
 8007386:	f04f 0a03 	mov.w	sl, #3
 800738a:	e7b9      	b.n	8007300 <__gethex+0x1ec>
 800738c:	da09      	bge.n	80073a2 <__gethex+0x28e>
 800738e:	1bf7      	subs	r7, r6, r7
 8007390:	4621      	mov	r1, r4
 8007392:	463a      	mov	r2, r7
 8007394:	9802      	ldr	r0, [sp, #8]
 8007396:	f000 fc4d 	bl	8007c34 <__lshift>
 800739a:	4604      	mov	r4, r0
 800739c:	1bed      	subs	r5, r5, r7
 800739e:	f100 0914 	add.w	r9, r0, #20
 80073a2:	f04f 0a00 	mov.w	sl, #0
 80073a6:	e7b0      	b.n	800730a <__gethex+0x1f6>
 80073a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80073ac:	42a8      	cmp	r0, r5
 80073ae:	dd71      	ble.n	8007494 <__gethex+0x380>
 80073b0:	1b45      	subs	r5, r0, r5
 80073b2:	42ae      	cmp	r6, r5
 80073b4:	dc34      	bgt.n	8007420 <__gethex+0x30c>
 80073b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d028      	beq.n	8007410 <__gethex+0x2fc>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d02a      	beq.n	8007418 <__gethex+0x304>
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d115      	bne.n	80073f2 <__gethex+0x2de>
 80073c6:	42ae      	cmp	r6, r5
 80073c8:	d113      	bne.n	80073f2 <__gethex+0x2de>
 80073ca:	2e01      	cmp	r6, #1
 80073cc:	d10b      	bne.n	80073e6 <__gethex+0x2d2>
 80073ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073d2:	9a06      	ldr	r2, [sp, #24]
 80073d4:	2762      	movs	r7, #98	; 0x62
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	2301      	movs	r3, #1
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	f8c9 3000 	str.w	r3, [r9]
 80073e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073e2:	601c      	str	r4, [r3, #0]
 80073e4:	e728      	b.n	8007238 <__gethex+0x124>
 80073e6:	4620      	mov	r0, r4
 80073e8:	1e71      	subs	r1, r6, #1
 80073ea:	f000 fe62 	bl	80080b2 <__any_on>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d1ed      	bne.n	80073ce <__gethex+0x2ba>
 80073f2:	4621      	mov	r1, r4
 80073f4:	9802      	ldr	r0, [sp, #8]
 80073f6:	f000 fa05 	bl	8007804 <_Bfree>
 80073fa:	2300      	movs	r3, #0
 80073fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073fe:	2750      	movs	r7, #80	; 0x50
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	e719      	b.n	8007238 <__gethex+0x124>
 8007404:	0800a728 	.word	0x0800a728
 8007408:	0800a6ac 	.word	0x0800a6ac
 800740c:	0800a6bd 	.word	0x0800a6bd
 8007410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1ed      	bne.n	80073f2 <__gethex+0x2de>
 8007416:	e7da      	b.n	80073ce <__gethex+0x2ba>
 8007418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1d7      	bne.n	80073ce <__gethex+0x2ba>
 800741e:	e7e8      	b.n	80073f2 <__gethex+0x2de>
 8007420:	1e6f      	subs	r7, r5, #1
 8007422:	f1ba 0f00 	cmp.w	sl, #0
 8007426:	d132      	bne.n	800748e <__gethex+0x37a>
 8007428:	b127      	cbz	r7, 8007434 <__gethex+0x320>
 800742a:	4639      	mov	r1, r7
 800742c:	4620      	mov	r0, r4
 800742e:	f000 fe40 	bl	80080b2 <__any_on>
 8007432:	4682      	mov	sl, r0
 8007434:	2101      	movs	r1, #1
 8007436:	117b      	asrs	r3, r7, #5
 8007438:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800743c:	f007 071f 	and.w	r7, r7, #31
 8007440:	fa01 f707 	lsl.w	r7, r1, r7
 8007444:	421f      	tst	r7, r3
 8007446:	f04f 0702 	mov.w	r7, #2
 800744a:	4629      	mov	r1, r5
 800744c:	4620      	mov	r0, r4
 800744e:	bf18      	it	ne
 8007450:	f04a 0a02 	orrne.w	sl, sl, #2
 8007454:	1b76      	subs	r6, r6, r5
 8007456:	f7ff fdf5 	bl	8007044 <rshift>
 800745a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800745e:	f1ba 0f00 	cmp.w	sl, #0
 8007462:	d048      	beq.n	80074f6 <__gethex+0x3e2>
 8007464:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d015      	beq.n	8007498 <__gethex+0x384>
 800746c:	2b03      	cmp	r3, #3
 800746e:	d017      	beq.n	80074a0 <__gethex+0x38c>
 8007470:	2b01      	cmp	r3, #1
 8007472:	d109      	bne.n	8007488 <__gethex+0x374>
 8007474:	f01a 0f02 	tst.w	sl, #2
 8007478:	d006      	beq.n	8007488 <__gethex+0x374>
 800747a:	f8d9 0000 	ldr.w	r0, [r9]
 800747e:	ea4a 0a00 	orr.w	sl, sl, r0
 8007482:	f01a 0f01 	tst.w	sl, #1
 8007486:	d10e      	bne.n	80074a6 <__gethex+0x392>
 8007488:	f047 0710 	orr.w	r7, r7, #16
 800748c:	e033      	b.n	80074f6 <__gethex+0x3e2>
 800748e:	f04f 0a01 	mov.w	sl, #1
 8007492:	e7cf      	b.n	8007434 <__gethex+0x320>
 8007494:	2701      	movs	r7, #1
 8007496:	e7e2      	b.n	800745e <__gethex+0x34a>
 8007498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800749a:	f1c3 0301 	rsb	r3, r3, #1
 800749e:	9315      	str	r3, [sp, #84]	; 0x54
 80074a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0f0      	beq.n	8007488 <__gethex+0x374>
 80074a6:	f04f 0c00 	mov.w	ip, #0
 80074aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074ae:	f104 0314 	add.w	r3, r4, #20
 80074b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80074b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80074c4:	d01c      	beq.n	8007500 <__gethex+0x3ec>
 80074c6:	3201      	adds	r2, #1
 80074c8:	6002      	str	r2, [r0, #0]
 80074ca:	2f02      	cmp	r7, #2
 80074cc:	f104 0314 	add.w	r3, r4, #20
 80074d0:	d13d      	bne.n	800754e <__gethex+0x43a>
 80074d2:	f8d8 2000 	ldr.w	r2, [r8]
 80074d6:	3a01      	subs	r2, #1
 80074d8:	42b2      	cmp	r2, r6
 80074da:	d10a      	bne.n	80074f2 <__gethex+0x3de>
 80074dc:	2201      	movs	r2, #1
 80074de:	1171      	asrs	r1, r6, #5
 80074e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074e4:	f006 061f 	and.w	r6, r6, #31
 80074e8:	fa02 f606 	lsl.w	r6, r2, r6
 80074ec:	421e      	tst	r6, r3
 80074ee:	bf18      	it	ne
 80074f0:	4617      	movne	r7, r2
 80074f2:	f047 0720 	orr.w	r7, r7, #32
 80074f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f8:	601c      	str	r4, [r3, #0]
 80074fa:	9b06      	ldr	r3, [sp, #24]
 80074fc:	601d      	str	r5, [r3, #0]
 80074fe:	e69b      	b.n	8007238 <__gethex+0x124>
 8007500:	4299      	cmp	r1, r3
 8007502:	f843 cc04 	str.w	ip, [r3, #-4]
 8007506:	d8d8      	bhi.n	80074ba <__gethex+0x3a6>
 8007508:	68a3      	ldr	r3, [r4, #8]
 800750a:	459b      	cmp	fp, r3
 800750c:	db17      	blt.n	800753e <__gethex+0x42a>
 800750e:	6861      	ldr	r1, [r4, #4]
 8007510:	9802      	ldr	r0, [sp, #8]
 8007512:	3101      	adds	r1, #1
 8007514:	f000 f936 	bl	8007784 <_Balloc>
 8007518:	4681      	mov	r9, r0
 800751a:	b918      	cbnz	r0, 8007524 <__gethex+0x410>
 800751c:	4602      	mov	r2, r0
 800751e:	2184      	movs	r1, #132	; 0x84
 8007520:	4b19      	ldr	r3, [pc, #100]	; (8007588 <__gethex+0x474>)
 8007522:	e6ac      	b.n	800727e <__gethex+0x16a>
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	f104 010c 	add.w	r1, r4, #12
 800752a:	3202      	adds	r2, #2
 800752c:	0092      	lsls	r2, r2, #2
 800752e:	300c      	adds	r0, #12
 8007530:	f000 f91a 	bl	8007768 <memcpy>
 8007534:	4621      	mov	r1, r4
 8007536:	9802      	ldr	r0, [sp, #8]
 8007538:	f000 f964 	bl	8007804 <_Bfree>
 800753c:	464c      	mov	r4, r9
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	6122      	str	r2, [r4, #16]
 8007544:	2201      	movs	r2, #1
 8007546:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800754a:	615a      	str	r2, [r3, #20]
 800754c:	e7bd      	b.n	80074ca <__gethex+0x3b6>
 800754e:	6922      	ldr	r2, [r4, #16]
 8007550:	455a      	cmp	r2, fp
 8007552:	dd0b      	ble.n	800756c <__gethex+0x458>
 8007554:	2101      	movs	r1, #1
 8007556:	4620      	mov	r0, r4
 8007558:	f7ff fd74 	bl	8007044 <rshift>
 800755c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007560:	3501      	adds	r5, #1
 8007562:	42ab      	cmp	r3, r5
 8007564:	f6ff aed5 	blt.w	8007312 <__gethex+0x1fe>
 8007568:	2701      	movs	r7, #1
 800756a:	e7c2      	b.n	80074f2 <__gethex+0x3de>
 800756c:	f016 061f 	ands.w	r6, r6, #31
 8007570:	d0fa      	beq.n	8007568 <__gethex+0x454>
 8007572:	449a      	add	sl, r3
 8007574:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007578:	f000 f9fa 	bl	8007970 <__hi0bits>
 800757c:	f1c6 0620 	rsb	r6, r6, #32
 8007580:	42b0      	cmp	r0, r6
 8007582:	dbe7      	blt.n	8007554 <__gethex+0x440>
 8007584:	e7f0      	b.n	8007568 <__gethex+0x454>
 8007586:	bf00      	nop
 8007588:	0800a6ac 	.word	0x0800a6ac

0800758c <L_shift>:
 800758c:	f1c2 0208 	rsb	r2, r2, #8
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	b570      	push	{r4, r5, r6, lr}
 8007594:	f1c2 0620 	rsb	r6, r2, #32
 8007598:	6843      	ldr	r3, [r0, #4]
 800759a:	6804      	ldr	r4, [r0, #0]
 800759c:	fa03 f506 	lsl.w	r5, r3, r6
 80075a0:	432c      	orrs	r4, r5
 80075a2:	40d3      	lsrs	r3, r2
 80075a4:	6004      	str	r4, [r0, #0]
 80075a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80075aa:	4288      	cmp	r0, r1
 80075ac:	d3f4      	bcc.n	8007598 <L_shift+0xc>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}

080075b0 <__match>:
 80075b0:	b530      	push	{r4, r5, lr}
 80075b2:	6803      	ldr	r3, [r0, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ba:	b914      	cbnz	r4, 80075c2 <__match+0x12>
 80075bc:	6003      	str	r3, [r0, #0]
 80075be:	2001      	movs	r0, #1
 80075c0:	bd30      	pop	{r4, r5, pc}
 80075c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075ca:	2d19      	cmp	r5, #25
 80075cc:	bf98      	it	ls
 80075ce:	3220      	addls	r2, #32
 80075d0:	42a2      	cmp	r2, r4
 80075d2:	d0f0      	beq.n	80075b6 <__match+0x6>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7f3      	b.n	80075c0 <__match+0x10>

080075d8 <__hexnan>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	2500      	movs	r5, #0
 80075de:	680b      	ldr	r3, [r1, #0]
 80075e0:	4682      	mov	sl, r0
 80075e2:	115e      	asrs	r6, r3, #5
 80075e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075e8:	f013 031f 	ands.w	r3, r3, #31
 80075ec:	bf18      	it	ne
 80075ee:	3604      	addne	r6, #4
 80075f0:	1f37      	subs	r7, r6, #4
 80075f2:	4690      	mov	r8, r2
 80075f4:	46b9      	mov	r9, r7
 80075f6:	463c      	mov	r4, r7
 80075f8:	46ab      	mov	fp, r5
 80075fa:	b087      	sub	sp, #28
 80075fc:	6801      	ldr	r1, [r0, #0]
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	f846 5c04 	str.w	r5, [r6, #-4]
 8007604:	9502      	str	r5, [sp, #8]
 8007606:	784a      	ldrb	r2, [r1, #1]
 8007608:	1c4b      	adds	r3, r1, #1
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	b342      	cbz	r2, 8007660 <__hexnan+0x88>
 800760e:	4610      	mov	r0, r2
 8007610:	9105      	str	r1, [sp, #20]
 8007612:	9204      	str	r2, [sp, #16]
 8007614:	f7ff fd69 	bl	80070ea <__hexdig_fun>
 8007618:	2800      	cmp	r0, #0
 800761a:	d14f      	bne.n	80076bc <__hexnan+0xe4>
 800761c:	9a04      	ldr	r2, [sp, #16]
 800761e:	9905      	ldr	r1, [sp, #20]
 8007620:	2a20      	cmp	r2, #32
 8007622:	d818      	bhi.n	8007656 <__hexnan+0x7e>
 8007624:	9b02      	ldr	r3, [sp, #8]
 8007626:	459b      	cmp	fp, r3
 8007628:	dd13      	ble.n	8007652 <__hexnan+0x7a>
 800762a:	454c      	cmp	r4, r9
 800762c:	d206      	bcs.n	800763c <__hexnan+0x64>
 800762e:	2d07      	cmp	r5, #7
 8007630:	dc04      	bgt.n	800763c <__hexnan+0x64>
 8007632:	462a      	mov	r2, r5
 8007634:	4649      	mov	r1, r9
 8007636:	4620      	mov	r0, r4
 8007638:	f7ff ffa8 	bl	800758c <L_shift>
 800763c:	4544      	cmp	r4, r8
 800763e:	d950      	bls.n	80076e2 <__hexnan+0x10a>
 8007640:	2300      	movs	r3, #0
 8007642:	f1a4 0904 	sub.w	r9, r4, #4
 8007646:	f844 3c04 	str.w	r3, [r4, #-4]
 800764a:	461d      	mov	r5, r3
 800764c:	464c      	mov	r4, r9
 800764e:	f8cd b008 	str.w	fp, [sp, #8]
 8007652:	9903      	ldr	r1, [sp, #12]
 8007654:	e7d7      	b.n	8007606 <__hexnan+0x2e>
 8007656:	2a29      	cmp	r2, #41	; 0x29
 8007658:	d156      	bne.n	8007708 <__hexnan+0x130>
 800765a:	3102      	adds	r1, #2
 800765c:	f8ca 1000 	str.w	r1, [sl]
 8007660:	f1bb 0f00 	cmp.w	fp, #0
 8007664:	d050      	beq.n	8007708 <__hexnan+0x130>
 8007666:	454c      	cmp	r4, r9
 8007668:	d206      	bcs.n	8007678 <__hexnan+0xa0>
 800766a:	2d07      	cmp	r5, #7
 800766c:	dc04      	bgt.n	8007678 <__hexnan+0xa0>
 800766e:	462a      	mov	r2, r5
 8007670:	4649      	mov	r1, r9
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff ff8a 	bl	800758c <L_shift>
 8007678:	4544      	cmp	r4, r8
 800767a:	d934      	bls.n	80076e6 <__hexnan+0x10e>
 800767c:	4623      	mov	r3, r4
 800767e:	f1a8 0204 	sub.w	r2, r8, #4
 8007682:	f853 1b04 	ldr.w	r1, [r3], #4
 8007686:	429f      	cmp	r7, r3
 8007688:	f842 1f04 	str.w	r1, [r2, #4]!
 800768c:	d2f9      	bcs.n	8007682 <__hexnan+0xaa>
 800768e:	1b3b      	subs	r3, r7, r4
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	3304      	adds	r3, #4
 8007696:	3401      	adds	r4, #1
 8007698:	3e03      	subs	r6, #3
 800769a:	42b4      	cmp	r4, r6
 800769c:	bf88      	it	hi
 800769e:	2304      	movhi	r3, #4
 80076a0:	2200      	movs	r2, #0
 80076a2:	4443      	add	r3, r8
 80076a4:	f843 2b04 	str.w	r2, [r3], #4
 80076a8:	429f      	cmp	r7, r3
 80076aa:	d2fb      	bcs.n	80076a4 <__hexnan+0xcc>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	b91b      	cbnz	r3, 80076b8 <__hexnan+0xe0>
 80076b0:	4547      	cmp	r7, r8
 80076b2:	d127      	bne.n	8007704 <__hexnan+0x12c>
 80076b4:	2301      	movs	r3, #1
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	2005      	movs	r0, #5
 80076ba:	e026      	b.n	800770a <__hexnan+0x132>
 80076bc:	3501      	adds	r5, #1
 80076be:	2d08      	cmp	r5, #8
 80076c0:	f10b 0b01 	add.w	fp, fp, #1
 80076c4:	dd06      	ble.n	80076d4 <__hexnan+0xfc>
 80076c6:	4544      	cmp	r4, r8
 80076c8:	d9c3      	bls.n	8007652 <__hexnan+0x7a>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2501      	movs	r5, #1
 80076ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80076d2:	3c04      	subs	r4, #4
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	f000 000f 	and.w	r0, r0, #15
 80076da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	e7b7      	b.n	8007652 <__hexnan+0x7a>
 80076e2:	2508      	movs	r5, #8
 80076e4:	e7b5      	b.n	8007652 <__hexnan+0x7a>
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0df      	beq.n	80076ac <__hexnan+0xd4>
 80076ec:	f04f 32ff 	mov.w	r2, #4294967295
 80076f0:	f1c3 0320 	rsb	r3, r3, #32
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
 80076f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076fc:	401a      	ands	r2, r3
 80076fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8007702:	e7d3      	b.n	80076ac <__hexnan+0xd4>
 8007704:	3f04      	subs	r7, #4
 8007706:	e7d1      	b.n	80076ac <__hexnan+0xd4>
 8007708:	2004      	movs	r0, #4
 800770a:	b007      	add	sp, #28
 800770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007710 <_localeconv_r>:
 8007710:	4800      	ldr	r0, [pc, #0]	; (8007714 <_localeconv_r+0x4>)
 8007712:	4770      	bx	lr
 8007714:	20000168 	.word	0x20000168

08007718 <malloc>:
 8007718:	4b02      	ldr	r3, [pc, #8]	; (8007724 <malloc+0xc>)
 800771a:	4601      	mov	r1, r0
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	f000 bd43 	b.w	80081a8 <_malloc_r>
 8007722:	bf00      	nop
 8007724:	20000010 	.word	0x20000010

08007728 <__ascii_mbtowc>:
 8007728:	b082      	sub	sp, #8
 800772a:	b901      	cbnz	r1, 800772e <__ascii_mbtowc+0x6>
 800772c:	a901      	add	r1, sp, #4
 800772e:	b142      	cbz	r2, 8007742 <__ascii_mbtowc+0x1a>
 8007730:	b14b      	cbz	r3, 8007746 <__ascii_mbtowc+0x1e>
 8007732:	7813      	ldrb	r3, [r2, #0]
 8007734:	600b      	str	r3, [r1, #0]
 8007736:	7812      	ldrb	r2, [r2, #0]
 8007738:	1e10      	subs	r0, r2, #0
 800773a:	bf18      	it	ne
 800773c:	2001      	movne	r0, #1
 800773e:	b002      	add	sp, #8
 8007740:	4770      	bx	lr
 8007742:	4610      	mov	r0, r2
 8007744:	e7fb      	b.n	800773e <__ascii_mbtowc+0x16>
 8007746:	f06f 0001 	mvn.w	r0, #1
 800774a:	e7f8      	b.n	800773e <__ascii_mbtowc+0x16>

0800774c <memchr>:
 800774c:	4603      	mov	r3, r0
 800774e:	b510      	push	{r4, lr}
 8007750:	b2c9      	uxtb	r1, r1
 8007752:	4402      	add	r2, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	4618      	mov	r0, r3
 8007758:	d101      	bne.n	800775e <memchr+0x12>
 800775a:	2000      	movs	r0, #0
 800775c:	e003      	b.n	8007766 <memchr+0x1a>
 800775e:	7804      	ldrb	r4, [r0, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	428c      	cmp	r4, r1
 8007764:	d1f6      	bne.n	8007754 <memchr+0x8>
 8007766:	bd10      	pop	{r4, pc}

08007768 <memcpy>:
 8007768:	440a      	add	r2, r1
 800776a:	4291      	cmp	r1, r2
 800776c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007770:	d100      	bne.n	8007774 <memcpy+0xc>
 8007772:	4770      	bx	lr
 8007774:	b510      	push	{r4, lr}
 8007776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800777a:	4291      	cmp	r1, r2
 800777c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007780:	d1f9      	bne.n	8007776 <memcpy+0xe>
 8007782:	bd10      	pop	{r4, pc}

08007784 <_Balloc>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	b976      	cbnz	r6, 80077ac <_Balloc+0x28>
 800778e:	2010      	movs	r0, #16
 8007790:	f7ff ffc2 	bl	8007718 <malloc>
 8007794:	4602      	mov	r2, r0
 8007796:	6260      	str	r0, [r4, #36]	; 0x24
 8007798:	b920      	cbnz	r0, 80077a4 <_Balloc+0x20>
 800779a:	2166      	movs	r1, #102	; 0x66
 800779c:	4b17      	ldr	r3, [pc, #92]	; (80077fc <_Balloc+0x78>)
 800779e:	4818      	ldr	r0, [pc, #96]	; (8007800 <_Balloc+0x7c>)
 80077a0:	f000 feee 	bl	8008580 <__assert_func>
 80077a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a8:	6006      	str	r6, [r0, #0]
 80077aa:	60c6      	str	r6, [r0, #12]
 80077ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077ae:	68f3      	ldr	r3, [r6, #12]
 80077b0:	b183      	cbz	r3, 80077d4 <_Balloc+0x50>
 80077b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077ba:	b9b8      	cbnz	r0, 80077ec <_Balloc+0x68>
 80077bc:	2101      	movs	r1, #1
 80077be:	fa01 f605 	lsl.w	r6, r1, r5
 80077c2:	1d72      	adds	r2, r6, #5
 80077c4:	4620      	mov	r0, r4
 80077c6:	0092      	lsls	r2, r2, #2
 80077c8:	f000 fc94 	bl	80080f4 <_calloc_r>
 80077cc:	b160      	cbz	r0, 80077e8 <_Balloc+0x64>
 80077ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077d2:	e00e      	b.n	80077f2 <_Balloc+0x6e>
 80077d4:	2221      	movs	r2, #33	; 0x21
 80077d6:	2104      	movs	r1, #4
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fc8b 	bl	80080f4 <_calloc_r>
 80077de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077e0:	60f0      	str	r0, [r6, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <_Balloc+0x2e>
 80077e8:	2000      	movs	r0, #0
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	6802      	ldr	r2, [r0, #0]
 80077ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077f2:	2300      	movs	r3, #0
 80077f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f8:	e7f7      	b.n	80077ea <_Balloc+0x66>
 80077fa:	bf00      	nop
 80077fc:	0800a636 	.word	0x0800a636
 8007800:	0800a73c 	.word	0x0800a73c

08007804 <_Bfree>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007808:	4605      	mov	r5, r0
 800780a:	460c      	mov	r4, r1
 800780c:	b976      	cbnz	r6, 800782c <_Bfree+0x28>
 800780e:	2010      	movs	r0, #16
 8007810:	f7ff ff82 	bl	8007718 <malloc>
 8007814:	4602      	mov	r2, r0
 8007816:	6268      	str	r0, [r5, #36]	; 0x24
 8007818:	b920      	cbnz	r0, 8007824 <_Bfree+0x20>
 800781a:	218a      	movs	r1, #138	; 0x8a
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <_Bfree+0x3c>)
 800781e:	4809      	ldr	r0, [pc, #36]	; (8007844 <_Bfree+0x40>)
 8007820:	f000 feae 	bl	8008580 <__assert_func>
 8007824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007828:	6006      	str	r6, [r0, #0]
 800782a:	60c6      	str	r6, [r0, #12]
 800782c:	b13c      	cbz	r4, 800783e <_Bfree+0x3a>
 800782e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007830:	6862      	ldr	r2, [r4, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007838:	6021      	str	r1, [r4, #0]
 800783a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	0800a636 	.word	0x0800a636
 8007844:	0800a73c 	.word	0x0800a73c

08007848 <__multadd>:
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	4698      	mov	r8, r3
 800784e:	460c      	mov	r4, r1
 8007850:	2300      	movs	r3, #0
 8007852:	690e      	ldr	r6, [r1, #16]
 8007854:	4607      	mov	r7, r0
 8007856:	f101 0014 	add.w	r0, r1, #20
 800785a:	6805      	ldr	r5, [r0, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	b2a9      	uxth	r1, r5
 8007860:	fb02 8101 	mla	r1, r2, r1, r8
 8007864:	0c2d      	lsrs	r5, r5, #16
 8007866:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800786a:	fb02 c505 	mla	r5, r2, r5, ip
 800786e:	b289      	uxth	r1, r1
 8007870:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007874:	429e      	cmp	r6, r3
 8007876:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800787a:	f840 1b04 	str.w	r1, [r0], #4
 800787e:	dcec      	bgt.n	800785a <__multadd+0x12>
 8007880:	f1b8 0f00 	cmp.w	r8, #0
 8007884:	d022      	beq.n	80078cc <__multadd+0x84>
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	42b3      	cmp	r3, r6
 800788a:	dc19      	bgt.n	80078c0 <__multadd+0x78>
 800788c:	6861      	ldr	r1, [r4, #4]
 800788e:	4638      	mov	r0, r7
 8007890:	3101      	adds	r1, #1
 8007892:	f7ff ff77 	bl	8007784 <_Balloc>
 8007896:	4605      	mov	r5, r0
 8007898:	b928      	cbnz	r0, 80078a6 <__multadd+0x5e>
 800789a:	4602      	mov	r2, r0
 800789c:	21b5      	movs	r1, #181	; 0xb5
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <__multadd+0x8c>)
 80078a0:	480d      	ldr	r0, [pc, #52]	; (80078d8 <__multadd+0x90>)
 80078a2:	f000 fe6d 	bl	8008580 <__assert_func>
 80078a6:	6922      	ldr	r2, [r4, #16]
 80078a8:	f104 010c 	add.w	r1, r4, #12
 80078ac:	3202      	adds	r2, #2
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	300c      	adds	r0, #12
 80078b2:	f7ff ff59 	bl	8007768 <memcpy>
 80078b6:	4621      	mov	r1, r4
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ffa3 	bl	8007804 <_Bfree>
 80078be:	462c      	mov	r4, r5
 80078c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80078c4:	3601      	adds	r6, #1
 80078c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80078ca:	6126      	str	r6, [r4, #16]
 80078cc:	4620      	mov	r0, r4
 80078ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d2:	bf00      	nop
 80078d4:	0800a6ac 	.word	0x0800a6ac
 80078d8:	0800a73c 	.word	0x0800a73c

080078dc <__s2b>:
 80078dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e0:	4615      	mov	r5, r2
 80078e2:	2209      	movs	r2, #9
 80078e4:	461f      	mov	r7, r3
 80078e6:	3308      	adds	r3, #8
 80078e8:	460c      	mov	r4, r1
 80078ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ee:	4606      	mov	r6, r0
 80078f0:	2201      	movs	r2, #1
 80078f2:	2100      	movs	r1, #0
 80078f4:	429a      	cmp	r2, r3
 80078f6:	db09      	blt.n	800790c <__s2b+0x30>
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7ff ff43 	bl	8007784 <_Balloc>
 80078fe:	b940      	cbnz	r0, 8007912 <__s2b+0x36>
 8007900:	4602      	mov	r2, r0
 8007902:	21ce      	movs	r1, #206	; 0xce
 8007904:	4b18      	ldr	r3, [pc, #96]	; (8007968 <__s2b+0x8c>)
 8007906:	4819      	ldr	r0, [pc, #100]	; (800796c <__s2b+0x90>)
 8007908:	f000 fe3a 	bl	8008580 <__assert_func>
 800790c:	0052      	lsls	r2, r2, #1
 800790e:	3101      	adds	r1, #1
 8007910:	e7f0      	b.n	80078f4 <__s2b+0x18>
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	2d09      	cmp	r5, #9
 8007916:	6143      	str	r3, [r0, #20]
 8007918:	f04f 0301 	mov.w	r3, #1
 800791c:	6103      	str	r3, [r0, #16]
 800791e:	dd16      	ble.n	800794e <__s2b+0x72>
 8007920:	f104 0909 	add.w	r9, r4, #9
 8007924:	46c8      	mov	r8, r9
 8007926:	442c      	add	r4, r5
 8007928:	f818 3b01 	ldrb.w	r3, [r8], #1
 800792c:	4601      	mov	r1, r0
 800792e:	220a      	movs	r2, #10
 8007930:	4630      	mov	r0, r6
 8007932:	3b30      	subs	r3, #48	; 0x30
 8007934:	f7ff ff88 	bl	8007848 <__multadd>
 8007938:	45a0      	cmp	r8, r4
 800793a:	d1f5      	bne.n	8007928 <__s2b+0x4c>
 800793c:	f1a5 0408 	sub.w	r4, r5, #8
 8007940:	444c      	add	r4, r9
 8007942:	1b2d      	subs	r5, r5, r4
 8007944:	1963      	adds	r3, r4, r5
 8007946:	42bb      	cmp	r3, r7
 8007948:	db04      	blt.n	8007954 <__s2b+0x78>
 800794a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794e:	2509      	movs	r5, #9
 8007950:	340a      	adds	r4, #10
 8007952:	e7f6      	b.n	8007942 <__s2b+0x66>
 8007954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007958:	4601      	mov	r1, r0
 800795a:	220a      	movs	r2, #10
 800795c:	4630      	mov	r0, r6
 800795e:	3b30      	subs	r3, #48	; 0x30
 8007960:	f7ff ff72 	bl	8007848 <__multadd>
 8007964:	e7ee      	b.n	8007944 <__s2b+0x68>
 8007966:	bf00      	nop
 8007968:	0800a6ac 	.word	0x0800a6ac
 800796c:	0800a73c 	.word	0x0800a73c

08007970 <__hi0bits>:
 8007970:	0c02      	lsrs	r2, r0, #16
 8007972:	0412      	lsls	r2, r2, #16
 8007974:	4603      	mov	r3, r0
 8007976:	b9ca      	cbnz	r2, 80079ac <__hi0bits+0x3c>
 8007978:	0403      	lsls	r3, r0, #16
 800797a:	2010      	movs	r0, #16
 800797c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007980:	bf04      	itt	eq
 8007982:	021b      	lsleq	r3, r3, #8
 8007984:	3008      	addeq	r0, #8
 8007986:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800798a:	bf04      	itt	eq
 800798c:	011b      	lsleq	r3, r3, #4
 800798e:	3004      	addeq	r0, #4
 8007990:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007994:	bf04      	itt	eq
 8007996:	009b      	lsleq	r3, r3, #2
 8007998:	3002      	addeq	r0, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	db05      	blt.n	80079aa <__hi0bits+0x3a>
 800799e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80079a2:	f100 0001 	add.w	r0, r0, #1
 80079a6:	bf08      	it	eq
 80079a8:	2020      	moveq	r0, #32
 80079aa:	4770      	bx	lr
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7e5      	b.n	800797c <__hi0bits+0xc>

080079b0 <__lo0bits>:
 80079b0:	6803      	ldr	r3, [r0, #0]
 80079b2:	4602      	mov	r2, r0
 80079b4:	f013 0007 	ands.w	r0, r3, #7
 80079b8:	d00b      	beq.n	80079d2 <__lo0bits+0x22>
 80079ba:	07d9      	lsls	r1, r3, #31
 80079bc:	d422      	bmi.n	8007a04 <__lo0bits+0x54>
 80079be:	0798      	lsls	r0, r3, #30
 80079c0:	bf49      	itett	mi
 80079c2:	085b      	lsrmi	r3, r3, #1
 80079c4:	089b      	lsrpl	r3, r3, #2
 80079c6:	2001      	movmi	r0, #1
 80079c8:	6013      	strmi	r3, [r2, #0]
 80079ca:	bf5c      	itt	pl
 80079cc:	2002      	movpl	r0, #2
 80079ce:	6013      	strpl	r3, [r2, #0]
 80079d0:	4770      	bx	lr
 80079d2:	b299      	uxth	r1, r3
 80079d4:	b909      	cbnz	r1, 80079da <__lo0bits+0x2a>
 80079d6:	2010      	movs	r0, #16
 80079d8:	0c1b      	lsrs	r3, r3, #16
 80079da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079de:	bf04      	itt	eq
 80079e0:	0a1b      	lsreq	r3, r3, #8
 80079e2:	3008      	addeq	r0, #8
 80079e4:	0719      	lsls	r1, r3, #28
 80079e6:	bf04      	itt	eq
 80079e8:	091b      	lsreq	r3, r3, #4
 80079ea:	3004      	addeq	r0, #4
 80079ec:	0799      	lsls	r1, r3, #30
 80079ee:	bf04      	itt	eq
 80079f0:	089b      	lsreq	r3, r3, #2
 80079f2:	3002      	addeq	r0, #2
 80079f4:	07d9      	lsls	r1, r3, #31
 80079f6:	d403      	bmi.n	8007a00 <__lo0bits+0x50>
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	f100 0001 	add.w	r0, r0, #1
 80079fe:	d003      	beq.n	8007a08 <__lo0bits+0x58>
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	4770      	bx	lr
 8007a04:	2000      	movs	r0, #0
 8007a06:	4770      	bx	lr
 8007a08:	2020      	movs	r0, #32
 8007a0a:	4770      	bx	lr

08007a0c <__i2b>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2101      	movs	r1, #1
 8007a12:	f7ff feb7 	bl	8007784 <_Balloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	b928      	cbnz	r0, 8007a26 <__i2b+0x1a>
 8007a1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a1e:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <__i2b+0x24>)
 8007a20:	4804      	ldr	r0, [pc, #16]	; (8007a34 <__i2b+0x28>)
 8007a22:	f000 fdad 	bl	8008580 <__assert_func>
 8007a26:	2301      	movs	r3, #1
 8007a28:	6144      	str	r4, [r0, #20]
 8007a2a:	6103      	str	r3, [r0, #16]
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	bf00      	nop
 8007a30:	0800a6ac 	.word	0x0800a6ac
 8007a34:	0800a73c 	.word	0x0800a73c

08007a38 <__multiply>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	690a      	ldr	r2, [r1, #16]
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	460d      	mov	r5, r1
 8007a44:	429a      	cmp	r2, r3
 8007a46:	bfbe      	ittt	lt
 8007a48:	460b      	movlt	r3, r1
 8007a4a:	4625      	movlt	r5, r4
 8007a4c:	461c      	movlt	r4, r3
 8007a4e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007a52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a56:	68ab      	ldr	r3, [r5, #8]
 8007a58:	6869      	ldr	r1, [r5, #4]
 8007a5a:	eb0a 0709 	add.w	r7, sl, r9
 8007a5e:	42bb      	cmp	r3, r7
 8007a60:	b085      	sub	sp, #20
 8007a62:	bfb8      	it	lt
 8007a64:	3101      	addlt	r1, #1
 8007a66:	f7ff fe8d 	bl	8007784 <_Balloc>
 8007a6a:	b930      	cbnz	r0, 8007a7a <__multiply+0x42>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	f240 115d 	movw	r1, #349	; 0x15d
 8007a72:	4b41      	ldr	r3, [pc, #260]	; (8007b78 <__multiply+0x140>)
 8007a74:	4841      	ldr	r0, [pc, #260]	; (8007b7c <__multiply+0x144>)
 8007a76:	f000 fd83 	bl	8008580 <__assert_func>
 8007a7a:	f100 0614 	add.w	r6, r0, #20
 8007a7e:	4633      	mov	r3, r6
 8007a80:	2200      	movs	r2, #0
 8007a82:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007a86:	4543      	cmp	r3, r8
 8007a88:	d31e      	bcc.n	8007ac8 <__multiply+0x90>
 8007a8a:	f105 0c14 	add.w	ip, r5, #20
 8007a8e:	f104 0314 	add.w	r3, r4, #20
 8007a92:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007a96:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007a9a:	9202      	str	r2, [sp, #8]
 8007a9c:	ebac 0205 	sub.w	r2, ip, r5
 8007aa0:	3a15      	subs	r2, #21
 8007aa2:	f022 0203 	bic.w	r2, r2, #3
 8007aa6:	3204      	adds	r2, #4
 8007aa8:	f105 0115 	add.w	r1, r5, #21
 8007aac:	458c      	cmp	ip, r1
 8007aae:	bf38      	it	cc
 8007ab0:	2204      	movcc	r2, #4
 8007ab2:	9201      	str	r2, [sp, #4]
 8007ab4:	9a02      	ldr	r2, [sp, #8]
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d808      	bhi.n	8007ace <__multiply+0x96>
 8007abc:	2f00      	cmp	r7, #0
 8007abe:	dc55      	bgt.n	8007b6c <__multiply+0x134>
 8007ac0:	6107      	str	r7, [r0, #16]
 8007ac2:	b005      	add	sp, #20
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	f843 2b04 	str.w	r2, [r3], #4
 8007acc:	e7db      	b.n	8007a86 <__multiply+0x4e>
 8007ace:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ad2:	f1ba 0f00 	cmp.w	sl, #0
 8007ad6:	d020      	beq.n	8007b1a <__multiply+0xe2>
 8007ad8:	46b1      	mov	r9, r6
 8007ada:	2200      	movs	r2, #0
 8007adc:	f105 0e14 	add.w	lr, r5, #20
 8007ae0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ae4:	f8d9 b000 	ldr.w	fp, [r9]
 8007ae8:	b2a1      	uxth	r1, r4
 8007aea:	fa1f fb8b 	uxth.w	fp, fp
 8007aee:	fb0a b101 	mla	r1, sl, r1, fp
 8007af2:	4411      	add	r1, r2
 8007af4:	f8d9 2000 	ldr.w	r2, [r9]
 8007af8:	0c24      	lsrs	r4, r4, #16
 8007afa:	0c12      	lsrs	r2, r2, #16
 8007afc:	fb0a 2404 	mla	r4, sl, r4, r2
 8007b00:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007b04:	b289      	uxth	r1, r1
 8007b06:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007b0a:	45f4      	cmp	ip, lr
 8007b0c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007b10:	f849 1b04 	str.w	r1, [r9], #4
 8007b14:	d8e4      	bhi.n	8007ae0 <__multiply+0xa8>
 8007b16:	9901      	ldr	r1, [sp, #4]
 8007b18:	5072      	str	r2, [r6, r1]
 8007b1a:	9a03      	ldr	r2, [sp, #12]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b22:	f1b9 0f00 	cmp.w	r9, #0
 8007b26:	d01f      	beq.n	8007b68 <__multiply+0x130>
 8007b28:	46b6      	mov	lr, r6
 8007b2a:	f04f 0a00 	mov.w	sl, #0
 8007b2e:	6834      	ldr	r4, [r6, #0]
 8007b30:	f105 0114 	add.w	r1, r5, #20
 8007b34:	880a      	ldrh	r2, [r1, #0]
 8007b36:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007b3a:	b2a4      	uxth	r4, r4
 8007b3c:	fb09 b202 	mla	r2, r9, r2, fp
 8007b40:	4492      	add	sl, r2
 8007b42:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007b46:	f84e 4b04 	str.w	r4, [lr], #4
 8007b4a:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b4e:	f8be 2000 	ldrh.w	r2, [lr]
 8007b52:	0c24      	lsrs	r4, r4, #16
 8007b54:	fb09 2404 	mla	r4, r9, r4, r2
 8007b58:	458c      	cmp	ip, r1
 8007b5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007b5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b62:	d8e7      	bhi.n	8007b34 <__multiply+0xfc>
 8007b64:	9a01      	ldr	r2, [sp, #4]
 8007b66:	50b4      	str	r4, [r6, r2]
 8007b68:	3604      	adds	r6, #4
 8007b6a:	e7a3      	b.n	8007ab4 <__multiply+0x7c>
 8007b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1a5      	bne.n	8007ac0 <__multiply+0x88>
 8007b74:	3f01      	subs	r7, #1
 8007b76:	e7a1      	b.n	8007abc <__multiply+0x84>
 8007b78:	0800a6ac 	.word	0x0800a6ac
 8007b7c:	0800a73c 	.word	0x0800a73c

08007b80 <__pow5mult>:
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4615      	mov	r5, r2
 8007b86:	f012 0203 	ands.w	r2, r2, #3
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	d007      	beq.n	8007ba0 <__pow5mult+0x20>
 8007b90:	4c25      	ldr	r4, [pc, #148]	; (8007c28 <__pow5mult+0xa8>)
 8007b92:	3a01      	subs	r2, #1
 8007b94:	2300      	movs	r3, #0
 8007b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b9a:	f7ff fe55 	bl	8007848 <__multadd>
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	10ad      	asrs	r5, r5, #2
 8007ba2:	d03d      	beq.n	8007c20 <__pow5mult+0xa0>
 8007ba4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ba6:	b97c      	cbnz	r4, 8007bc8 <__pow5mult+0x48>
 8007ba8:	2010      	movs	r0, #16
 8007baa:	f7ff fdb5 	bl	8007718 <malloc>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	6270      	str	r0, [r6, #36]	; 0x24
 8007bb2:	b928      	cbnz	r0, 8007bc0 <__pow5mult+0x40>
 8007bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007bb8:	4b1c      	ldr	r3, [pc, #112]	; (8007c2c <__pow5mult+0xac>)
 8007bba:	481d      	ldr	r0, [pc, #116]	; (8007c30 <__pow5mult+0xb0>)
 8007bbc:	f000 fce0 	bl	8008580 <__assert_func>
 8007bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bc4:	6004      	str	r4, [r0, #0]
 8007bc6:	60c4      	str	r4, [r0, #12]
 8007bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bd0:	b94c      	cbnz	r4, 8007be6 <__pow5mult+0x66>
 8007bd2:	f240 2171 	movw	r1, #625	; 0x271
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ff18 	bl	8007a0c <__i2b>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4604      	mov	r4, r0
 8007be0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007be4:	6003      	str	r3, [r0, #0]
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	07eb      	lsls	r3, r5, #31
 8007bec:	d50a      	bpl.n	8007c04 <__pow5mult+0x84>
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ff20 	bl	8007a38 <__multiply>
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fe01 	bl	8007804 <_Bfree>
 8007c02:	4647      	mov	r7, r8
 8007c04:	106d      	asrs	r5, r5, #1
 8007c06:	d00b      	beq.n	8007c20 <__pow5mult+0xa0>
 8007c08:	6820      	ldr	r0, [r4, #0]
 8007c0a:	b938      	cbnz	r0, 8007c1c <__pow5mult+0x9c>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff ff11 	bl	8007a38 <__multiply>
 8007c16:	6020      	str	r0, [r4, #0]
 8007c18:	f8c0 9000 	str.w	r9, [r0]
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	e7e4      	b.n	8007bea <__pow5mult+0x6a>
 8007c20:	4638      	mov	r0, r7
 8007c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c26:	bf00      	nop
 8007c28:	0800a890 	.word	0x0800a890
 8007c2c:	0800a636 	.word	0x0800a636
 8007c30:	0800a73c 	.word	0x0800a73c

08007c34 <__lshift>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	460c      	mov	r4, r1
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	4691      	mov	r9, r2
 8007c3e:	6923      	ldr	r3, [r4, #16]
 8007c40:	6849      	ldr	r1, [r1, #4]
 8007c42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c46:	68a3      	ldr	r3, [r4, #8]
 8007c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c4c:	f108 0601 	add.w	r6, r8, #1
 8007c50:	42b3      	cmp	r3, r6
 8007c52:	db0b      	blt.n	8007c6c <__lshift+0x38>
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff fd95 	bl	8007784 <_Balloc>
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	b948      	cbnz	r0, 8007c72 <__lshift+0x3e>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c64:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <__lshift+0xd0>)
 8007c66:	4828      	ldr	r0, [pc, #160]	; (8007d08 <__lshift+0xd4>)
 8007c68:	f000 fc8a 	bl	8008580 <__assert_func>
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	e7ee      	b.n	8007c50 <__lshift+0x1c>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f100 0114 	add.w	r1, r0, #20
 8007c78:	f100 0210 	add.w	r2, r0, #16
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	4553      	cmp	r3, sl
 8007c80:	db33      	blt.n	8007cea <__lshift+0xb6>
 8007c82:	6920      	ldr	r0, [r4, #16]
 8007c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c88:	f104 0314 	add.w	r3, r4, #20
 8007c8c:	f019 091f 	ands.w	r9, r9, #31
 8007c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c98:	d02b      	beq.n	8007cf2 <__lshift+0xbe>
 8007c9a:	468a      	mov	sl, r1
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f1c9 0e20 	rsb	lr, r9, #32
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ca8:	4302      	orrs	r2, r0
 8007caa:	f84a 2b04 	str.w	r2, [sl], #4
 8007cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb2:	459c      	cmp	ip, r3
 8007cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cb8:	d8f3      	bhi.n	8007ca2 <__lshift+0x6e>
 8007cba:	ebac 0304 	sub.w	r3, ip, r4
 8007cbe:	3b15      	subs	r3, #21
 8007cc0:	f023 0303 	bic.w	r3, r3, #3
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	f104 0015 	add.w	r0, r4, #21
 8007cca:	4584      	cmp	ip, r0
 8007ccc:	bf38      	it	cc
 8007cce:	2304      	movcc	r3, #4
 8007cd0:	50ca      	str	r2, [r1, r3]
 8007cd2:	b10a      	cbz	r2, 8007cd8 <__lshift+0xa4>
 8007cd4:	f108 0602 	add.w	r6, r8, #2
 8007cd8:	3e01      	subs	r6, #1
 8007cda:	4638      	mov	r0, r7
 8007cdc:	4621      	mov	r1, r4
 8007cde:	612e      	str	r6, [r5, #16]
 8007ce0:	f7ff fd90 	bl	8007804 <_Bfree>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7c5      	b.n	8007c7e <__lshift+0x4a>
 8007cf2:	3904      	subs	r1, #4
 8007cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf8:	459c      	cmp	ip, r3
 8007cfa:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cfe:	d8f9      	bhi.n	8007cf4 <__lshift+0xc0>
 8007d00:	e7ea      	b.n	8007cd8 <__lshift+0xa4>
 8007d02:	bf00      	nop
 8007d04:	0800a6ac 	.word	0x0800a6ac
 8007d08:	0800a73c 	.word	0x0800a73c

08007d0c <__mcmp>:
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	690a      	ldr	r2, [r1, #16]
 8007d10:	6900      	ldr	r0, [r0, #16]
 8007d12:	b530      	push	{r4, r5, lr}
 8007d14:	1a80      	subs	r0, r0, r2
 8007d16:	d10d      	bne.n	8007d34 <__mcmp+0x28>
 8007d18:	3314      	adds	r3, #20
 8007d1a:	3114      	adds	r1, #20
 8007d1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d2c:	4295      	cmp	r5, r2
 8007d2e:	d002      	beq.n	8007d36 <__mcmp+0x2a>
 8007d30:	d304      	bcc.n	8007d3c <__mcmp+0x30>
 8007d32:	2001      	movs	r0, #1
 8007d34:	bd30      	pop	{r4, r5, pc}
 8007d36:	42a3      	cmp	r3, r4
 8007d38:	d3f4      	bcc.n	8007d24 <__mcmp+0x18>
 8007d3a:	e7fb      	b.n	8007d34 <__mcmp+0x28>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e7f8      	b.n	8007d34 <__mcmp+0x28>
	...

08007d44 <__mdiff>:
 8007d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	460c      	mov	r4, r1
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4692      	mov	sl, r2
 8007d52:	f7ff ffdb 	bl	8007d0c <__mcmp>
 8007d56:	1e05      	subs	r5, r0, #0
 8007d58:	d111      	bne.n	8007d7e <__mdiff+0x3a>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fd11 	bl	8007784 <_Balloc>
 8007d62:	4602      	mov	r2, r0
 8007d64:	b928      	cbnz	r0, 8007d72 <__mdiff+0x2e>
 8007d66:	f240 2132 	movw	r1, #562	; 0x232
 8007d6a:	4b3c      	ldr	r3, [pc, #240]	; (8007e5c <__mdiff+0x118>)
 8007d6c:	483c      	ldr	r0, [pc, #240]	; (8007e60 <__mdiff+0x11c>)
 8007d6e:	f000 fc07 	bl	8008580 <__assert_func>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d78:	4610      	mov	r0, r2
 8007d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	bfa4      	itt	ge
 8007d80:	4653      	movge	r3, sl
 8007d82:	46a2      	movge	sl, r4
 8007d84:	4630      	mov	r0, r6
 8007d86:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007d8a:	bfa6      	itte	ge
 8007d8c:	461c      	movge	r4, r3
 8007d8e:	2500      	movge	r5, #0
 8007d90:	2501      	movlt	r5, #1
 8007d92:	f7ff fcf7 	bl	8007784 <_Balloc>
 8007d96:	4602      	mov	r2, r0
 8007d98:	b918      	cbnz	r0, 8007da2 <__mdiff+0x5e>
 8007d9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d9e:	4b2f      	ldr	r3, [pc, #188]	; (8007e5c <__mdiff+0x118>)
 8007da0:	e7e4      	b.n	8007d6c <__mdiff+0x28>
 8007da2:	f100 0814 	add.w	r8, r0, #20
 8007da6:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007daa:	60c5      	str	r5, [r0, #12]
 8007dac:	f04f 0c00 	mov.w	ip, #0
 8007db0:	f10a 0514 	add.w	r5, sl, #20
 8007db4:	f10a 0010 	add.w	r0, sl, #16
 8007db8:	46c2      	mov	sl, r8
 8007dba:	6926      	ldr	r6, [r4, #16]
 8007dbc:	f104 0914 	add.w	r9, r4, #20
 8007dc0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007dc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dc8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007dcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dd0:	fa1f f18b 	uxth.w	r1, fp
 8007dd4:	4461      	add	r1, ip
 8007dd6:	fa1f fc83 	uxth.w	ip, r3
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	eba1 010c 	sub.w	r1, r1, ip
 8007de0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007de4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007de8:	b289      	uxth	r1, r1
 8007dea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007dee:	454e      	cmp	r6, r9
 8007df0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007df4:	f84a 3b04 	str.w	r3, [sl], #4
 8007df8:	d8e6      	bhi.n	8007dc8 <__mdiff+0x84>
 8007dfa:	1b33      	subs	r3, r6, r4
 8007dfc:	3b15      	subs	r3, #21
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	3415      	adds	r4, #21
 8007e04:	3304      	adds	r3, #4
 8007e06:	42a6      	cmp	r6, r4
 8007e08:	bf38      	it	cc
 8007e0a:	2304      	movcc	r3, #4
 8007e0c:	441d      	add	r5, r3
 8007e0e:	4443      	add	r3, r8
 8007e10:	461e      	mov	r6, r3
 8007e12:	462c      	mov	r4, r5
 8007e14:	4574      	cmp	r4, lr
 8007e16:	d30e      	bcc.n	8007e36 <__mdiff+0xf2>
 8007e18:	f10e 0103 	add.w	r1, lr, #3
 8007e1c:	1b49      	subs	r1, r1, r5
 8007e1e:	f021 0103 	bic.w	r1, r1, #3
 8007e22:	3d03      	subs	r5, #3
 8007e24:	45ae      	cmp	lr, r5
 8007e26:	bf38      	it	cc
 8007e28:	2100      	movcc	r1, #0
 8007e2a:	4419      	add	r1, r3
 8007e2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007e30:	b18b      	cbz	r3, 8007e56 <__mdiff+0x112>
 8007e32:	6117      	str	r7, [r2, #16]
 8007e34:	e7a0      	b.n	8007d78 <__mdiff+0x34>
 8007e36:	f854 8b04 	ldr.w	r8, [r4], #4
 8007e3a:	fa1f f188 	uxth.w	r1, r8
 8007e3e:	4461      	add	r1, ip
 8007e40:	1408      	asrs	r0, r1, #16
 8007e42:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007e46:	b289      	uxth	r1, r1
 8007e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e50:	f846 1b04 	str.w	r1, [r6], #4
 8007e54:	e7de      	b.n	8007e14 <__mdiff+0xd0>
 8007e56:	3f01      	subs	r7, #1
 8007e58:	e7e8      	b.n	8007e2c <__mdiff+0xe8>
 8007e5a:	bf00      	nop
 8007e5c:	0800a6ac 	.word	0x0800a6ac
 8007e60:	0800a73c 	.word	0x0800a73c

08007e64 <__ulp>:
 8007e64:	4b11      	ldr	r3, [pc, #68]	; (8007eac <__ulp+0x48>)
 8007e66:	400b      	ands	r3, r1
 8007e68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd02      	ble.n	8007e76 <__ulp+0x12>
 8007e70:	2000      	movs	r0, #0
 8007e72:	4619      	mov	r1, r3
 8007e74:	4770      	bx	lr
 8007e76:	425b      	negs	r3, r3
 8007e78:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e7c:	f04f 0000 	mov.w	r0, #0
 8007e80:	f04f 0100 	mov.w	r1, #0
 8007e84:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e88:	da04      	bge.n	8007e94 <__ulp+0x30>
 8007e8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e8e:	fa43 f102 	asr.w	r1, r3, r2
 8007e92:	4770      	bx	lr
 8007e94:	f1a2 0314 	sub.w	r3, r2, #20
 8007e98:	2b1e      	cmp	r3, #30
 8007e9a:	bfd6      	itet	le
 8007e9c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007ea0:	2301      	movgt	r3, #1
 8007ea2:	fa22 f303 	lsrle.w	r3, r2, r3
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	7ff00000 	.word	0x7ff00000

08007eb0 <__b2d>:
 8007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	6907      	ldr	r7, [r0, #16]
 8007eb6:	f100 0914 	add.w	r9, r0, #20
 8007eba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007ebe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007ec2:	f1a7 0804 	sub.w	r8, r7, #4
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff fd52 	bl	8007970 <__hi0bits>
 8007ecc:	f1c0 0320 	rsb	r3, r0, #32
 8007ed0:	280a      	cmp	r0, #10
 8007ed2:	600b      	str	r3, [r1, #0]
 8007ed4:	491f      	ldr	r1, [pc, #124]	; (8007f54 <__b2d+0xa4>)
 8007ed6:	dc17      	bgt.n	8007f08 <__b2d+0x58>
 8007ed8:	45c1      	cmp	r9, r8
 8007eda:	bf28      	it	cs
 8007edc:	2200      	movcs	r2, #0
 8007ede:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ee2:	fa26 f30c 	lsr.w	r3, r6, ip
 8007ee6:	bf38      	it	cc
 8007ee8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007eec:	ea43 0501 	orr.w	r5, r3, r1
 8007ef0:	f100 0315 	add.w	r3, r0, #21
 8007ef4:	fa06 f303 	lsl.w	r3, r6, r3
 8007ef8:	fa22 f20c 	lsr.w	r2, r2, ip
 8007efc:	ea43 0402 	orr.w	r4, r3, r2
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f08:	45c1      	cmp	r9, r8
 8007f0a:	bf2e      	itee	cs
 8007f0c:	2200      	movcs	r2, #0
 8007f0e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f12:	f1a7 0808 	subcc.w	r8, r7, #8
 8007f16:	f1b0 030b 	subs.w	r3, r0, #11
 8007f1a:	d016      	beq.n	8007f4a <__b2d+0x9a>
 8007f1c:	f1c3 0720 	rsb	r7, r3, #32
 8007f20:	fa22 f107 	lsr.w	r1, r2, r7
 8007f24:	45c8      	cmp	r8, r9
 8007f26:	fa06 f603 	lsl.w	r6, r6, r3
 8007f2a:	ea46 0601 	orr.w	r6, r6, r1
 8007f2e:	bf94      	ite	ls
 8007f30:	2100      	movls	r1, #0
 8007f32:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007f36:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007f3a:	fa02 f003 	lsl.w	r0, r2, r3
 8007f3e:	40f9      	lsrs	r1, r7
 8007f40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f44:	ea40 0401 	orr.w	r4, r0, r1
 8007f48:	e7da      	b.n	8007f00 <__b2d+0x50>
 8007f4a:	4614      	mov	r4, r2
 8007f4c:	ea46 0501 	orr.w	r5, r6, r1
 8007f50:	e7d6      	b.n	8007f00 <__b2d+0x50>
 8007f52:	bf00      	nop
 8007f54:	3ff00000 	.word	0x3ff00000

08007f58 <__d2b>:
 8007f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f62:	4690      	mov	r8, r2
 8007f64:	461d      	mov	r5, r3
 8007f66:	f7ff fc0d 	bl	8007784 <_Balloc>
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	b930      	cbnz	r0, 8007f7c <__d2b+0x24>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	f240 310a 	movw	r1, #778	; 0x30a
 8007f74:	4b24      	ldr	r3, [pc, #144]	; (8008008 <__d2b+0xb0>)
 8007f76:	4825      	ldr	r0, [pc, #148]	; (800800c <__d2b+0xb4>)
 8007f78:	f000 fb02 	bl	8008580 <__assert_func>
 8007f7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f84:	bb2d      	cbnz	r5, 8007fd2 <__d2b+0x7a>
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	f1b8 0300 	subs.w	r3, r8, #0
 8007f8c:	d026      	beq.n	8007fdc <__d2b+0x84>
 8007f8e:	4668      	mov	r0, sp
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	f7ff fd0d 	bl	80079b0 <__lo0bits>
 8007f96:	9900      	ldr	r1, [sp, #0]
 8007f98:	b1f0      	cbz	r0, 8007fd8 <__d2b+0x80>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	f1c0 0320 	rsb	r3, r0, #32
 8007fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	40c2      	lsrs	r2, r0
 8007fa8:	6163      	str	r3, [r4, #20]
 8007faa:	9201      	str	r2, [sp, #4]
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf14      	ite	ne
 8007fb2:	2102      	movne	r1, #2
 8007fb4:	2101      	moveq	r1, #1
 8007fb6:	61a3      	str	r3, [r4, #24]
 8007fb8:	6121      	str	r1, [r4, #16]
 8007fba:	b1c5      	cbz	r5, 8007fee <__d2b+0x96>
 8007fbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fc0:	4405      	add	r5, r0
 8007fc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fc6:	603d      	str	r5, [r7, #0]
 8007fc8:	6030      	str	r0, [r6, #0]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	b002      	add	sp, #8
 8007fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fd6:	e7d6      	b.n	8007f86 <__d2b+0x2e>
 8007fd8:	6161      	str	r1, [r4, #20]
 8007fda:	e7e7      	b.n	8007fac <__d2b+0x54>
 8007fdc:	a801      	add	r0, sp, #4
 8007fde:	f7ff fce7 	bl	80079b0 <__lo0bits>
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	6121      	str	r1, [r4, #16]
 8007fe8:	6163      	str	r3, [r4, #20]
 8007fea:	3020      	adds	r0, #32
 8007fec:	e7e5      	b.n	8007fba <__d2b+0x62>
 8007fee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007ff2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ff6:	6038      	str	r0, [r7, #0]
 8007ff8:	6918      	ldr	r0, [r3, #16]
 8007ffa:	f7ff fcb9 	bl	8007970 <__hi0bits>
 8007ffe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008002:	6031      	str	r1, [r6, #0]
 8008004:	e7e1      	b.n	8007fca <__d2b+0x72>
 8008006:	bf00      	nop
 8008008:	0800a6ac 	.word	0x0800a6ac
 800800c:	0800a73c 	.word	0x0800a73c

08008010 <__ratio>:
 8008010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	4688      	mov	r8, r1
 8008016:	4669      	mov	r1, sp
 8008018:	4681      	mov	r9, r0
 800801a:	f7ff ff49 	bl	8007eb0 <__b2d>
 800801e:	460f      	mov	r7, r1
 8008020:	4604      	mov	r4, r0
 8008022:	460d      	mov	r5, r1
 8008024:	4640      	mov	r0, r8
 8008026:	a901      	add	r1, sp, #4
 8008028:	f7ff ff42 	bl	8007eb0 <__b2d>
 800802c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008030:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008034:	468b      	mov	fp, r1
 8008036:	eba3 0c02 	sub.w	ip, r3, r2
 800803a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008044:	2b00      	cmp	r3, #0
 8008046:	bfd5      	itete	le
 8008048:	460a      	movle	r2, r1
 800804a:	462a      	movgt	r2, r5
 800804c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008050:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008054:	bfd8      	it	le
 8008056:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800805a:	465b      	mov	r3, fp
 800805c:	4602      	mov	r2, r0
 800805e:	4639      	mov	r1, r7
 8008060:	4620      	mov	r0, r4
 8008062:	f7f8 fb63 	bl	800072c <__aeabi_ddiv>
 8008066:	b003      	add	sp, #12
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800806c <__copybits>:
 800806c:	3901      	subs	r1, #1
 800806e:	b570      	push	{r4, r5, r6, lr}
 8008070:	1149      	asrs	r1, r1, #5
 8008072:	6914      	ldr	r4, [r2, #16]
 8008074:	3101      	adds	r1, #1
 8008076:	f102 0314 	add.w	r3, r2, #20
 800807a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800807e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008082:	1f05      	subs	r5, r0, #4
 8008084:	42a3      	cmp	r3, r4
 8008086:	d30c      	bcc.n	80080a2 <__copybits+0x36>
 8008088:	1aa3      	subs	r3, r4, r2
 800808a:	3b11      	subs	r3, #17
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	3211      	adds	r2, #17
 8008092:	42a2      	cmp	r2, r4
 8008094:	bf88      	it	hi
 8008096:	2300      	movhi	r3, #0
 8008098:	4418      	add	r0, r3
 800809a:	2300      	movs	r3, #0
 800809c:	4288      	cmp	r0, r1
 800809e:	d305      	bcc.n	80080ac <__copybits+0x40>
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80080a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80080aa:	e7eb      	b.n	8008084 <__copybits+0x18>
 80080ac:	f840 3b04 	str.w	r3, [r0], #4
 80080b0:	e7f4      	b.n	800809c <__copybits+0x30>

080080b2 <__any_on>:
 80080b2:	f100 0214 	add.w	r2, r0, #20
 80080b6:	6900      	ldr	r0, [r0, #16]
 80080b8:	114b      	asrs	r3, r1, #5
 80080ba:	4298      	cmp	r0, r3
 80080bc:	b510      	push	{r4, lr}
 80080be:	db11      	blt.n	80080e4 <__any_on+0x32>
 80080c0:	dd0a      	ble.n	80080d8 <__any_on+0x26>
 80080c2:	f011 011f 	ands.w	r1, r1, #31
 80080c6:	d007      	beq.n	80080d8 <__any_on+0x26>
 80080c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080cc:	fa24 f001 	lsr.w	r0, r4, r1
 80080d0:	fa00 f101 	lsl.w	r1, r0, r1
 80080d4:	428c      	cmp	r4, r1
 80080d6:	d10b      	bne.n	80080f0 <__any_on+0x3e>
 80080d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080dc:	4293      	cmp	r3, r2
 80080de:	d803      	bhi.n	80080e8 <__any_on+0x36>
 80080e0:	2000      	movs	r0, #0
 80080e2:	bd10      	pop	{r4, pc}
 80080e4:	4603      	mov	r3, r0
 80080e6:	e7f7      	b.n	80080d8 <__any_on+0x26>
 80080e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d0f5      	beq.n	80080dc <__any_on+0x2a>
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7f6      	b.n	80080e2 <__any_on+0x30>

080080f4 <_calloc_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	fb02 f501 	mul.w	r5, r2, r1
 80080fa:	4629      	mov	r1, r5
 80080fc:	f000 f854 	bl	80081a8 <_malloc_r>
 8008100:	4604      	mov	r4, r0
 8008102:	b118      	cbz	r0, 800810c <_calloc_r+0x18>
 8008104:	462a      	mov	r2, r5
 8008106:	2100      	movs	r1, #0
 8008108:	f7fc fbde 	bl	80048c8 <memset>
 800810c:	4620      	mov	r0, r4
 800810e:	bd38      	pop	{r3, r4, r5, pc}

08008110 <_free_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4605      	mov	r5, r0
 8008114:	2900      	cmp	r1, #0
 8008116:	d043      	beq.n	80081a0 <_free_r+0x90>
 8008118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800811c:	1f0c      	subs	r4, r1, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfb8      	it	lt
 8008122:	18e4      	addlt	r4, r4, r3
 8008124:	f000 fa76 	bl	8008614 <__malloc_lock>
 8008128:	4a1e      	ldr	r2, [pc, #120]	; (80081a4 <_free_r+0x94>)
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	4610      	mov	r0, r2
 800812e:	b933      	cbnz	r3, 800813e <_free_r+0x2e>
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	6014      	str	r4, [r2, #0]
 8008134:	4628      	mov	r0, r5
 8008136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813a:	f000 ba71 	b.w	8008620 <__malloc_unlock>
 800813e:	42a3      	cmp	r3, r4
 8008140:	d90a      	bls.n	8008158 <_free_r+0x48>
 8008142:	6821      	ldr	r1, [r4, #0]
 8008144:	1862      	adds	r2, r4, r1
 8008146:	4293      	cmp	r3, r2
 8008148:	bf01      	itttt	eq
 800814a:	681a      	ldreq	r2, [r3, #0]
 800814c:	685b      	ldreq	r3, [r3, #4]
 800814e:	1852      	addeq	r2, r2, r1
 8008150:	6022      	streq	r2, [r4, #0]
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	6004      	str	r4, [r0, #0]
 8008156:	e7ed      	b.n	8008134 <_free_r+0x24>
 8008158:	461a      	mov	r2, r3
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	b10b      	cbz	r3, 8008162 <_free_r+0x52>
 800815e:	42a3      	cmp	r3, r4
 8008160:	d9fa      	bls.n	8008158 <_free_r+0x48>
 8008162:	6811      	ldr	r1, [r2, #0]
 8008164:	1850      	adds	r0, r2, r1
 8008166:	42a0      	cmp	r0, r4
 8008168:	d10b      	bne.n	8008182 <_free_r+0x72>
 800816a:	6820      	ldr	r0, [r4, #0]
 800816c:	4401      	add	r1, r0
 800816e:	1850      	adds	r0, r2, r1
 8008170:	4283      	cmp	r3, r0
 8008172:	6011      	str	r1, [r2, #0]
 8008174:	d1de      	bne.n	8008134 <_free_r+0x24>
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	4401      	add	r1, r0
 800817c:	6011      	str	r1, [r2, #0]
 800817e:	6053      	str	r3, [r2, #4]
 8008180:	e7d8      	b.n	8008134 <_free_r+0x24>
 8008182:	d902      	bls.n	800818a <_free_r+0x7a>
 8008184:	230c      	movs	r3, #12
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	e7d4      	b.n	8008134 <_free_r+0x24>
 800818a:	6820      	ldr	r0, [r4, #0]
 800818c:	1821      	adds	r1, r4, r0
 800818e:	428b      	cmp	r3, r1
 8008190:	bf01      	itttt	eq
 8008192:	6819      	ldreq	r1, [r3, #0]
 8008194:	685b      	ldreq	r3, [r3, #4]
 8008196:	1809      	addeq	r1, r1, r0
 8008198:	6021      	streq	r1, [r4, #0]
 800819a:	6063      	str	r3, [r4, #4]
 800819c:	6054      	str	r4, [r2, #4]
 800819e:	e7c9      	b.n	8008134 <_free_r+0x24>
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	20000254 	.word	0x20000254

080081a8 <_malloc_r>:
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081aa:	1ccd      	adds	r5, r1, #3
 80081ac:	f025 0503 	bic.w	r5, r5, #3
 80081b0:	3508      	adds	r5, #8
 80081b2:	2d0c      	cmp	r5, #12
 80081b4:	bf38      	it	cc
 80081b6:	250c      	movcc	r5, #12
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	4606      	mov	r6, r0
 80081bc:	db01      	blt.n	80081c2 <_malloc_r+0x1a>
 80081be:	42a9      	cmp	r1, r5
 80081c0:	d903      	bls.n	80081ca <_malloc_r+0x22>
 80081c2:	230c      	movs	r3, #12
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	2000      	movs	r0, #0
 80081c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ca:	f000 fa23 	bl	8008614 <__malloc_lock>
 80081ce:	4921      	ldr	r1, [pc, #132]	; (8008254 <_malloc_r+0xac>)
 80081d0:	680a      	ldr	r2, [r1, #0]
 80081d2:	4614      	mov	r4, r2
 80081d4:	b99c      	cbnz	r4, 80081fe <_malloc_r+0x56>
 80081d6:	4f20      	ldr	r7, [pc, #128]	; (8008258 <_malloc_r+0xb0>)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	b923      	cbnz	r3, 80081e6 <_malloc_r+0x3e>
 80081dc:	4621      	mov	r1, r4
 80081de:	4630      	mov	r0, r6
 80081e0:	f000 f99e 	bl	8008520 <_sbrk_r>
 80081e4:	6038      	str	r0, [r7, #0]
 80081e6:	4629      	mov	r1, r5
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f999 	bl	8008520 <_sbrk_r>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d123      	bne.n	800823a <_malloc_r+0x92>
 80081f2:	230c      	movs	r3, #12
 80081f4:	4630      	mov	r0, r6
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	f000 fa12 	bl	8008620 <__malloc_unlock>
 80081fc:	e7e3      	b.n	80081c6 <_malloc_r+0x1e>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	1b5b      	subs	r3, r3, r5
 8008202:	d417      	bmi.n	8008234 <_malloc_r+0x8c>
 8008204:	2b0b      	cmp	r3, #11
 8008206:	d903      	bls.n	8008210 <_malloc_r+0x68>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	441c      	add	r4, r3
 800820c:	6025      	str	r5, [r4, #0]
 800820e:	e004      	b.n	800821a <_malloc_r+0x72>
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	42a2      	cmp	r2, r4
 8008214:	bf0c      	ite	eq
 8008216:	600b      	streq	r3, [r1, #0]
 8008218:	6053      	strne	r3, [r2, #4]
 800821a:	4630      	mov	r0, r6
 800821c:	f000 fa00 	bl	8008620 <__malloc_unlock>
 8008220:	f104 000b 	add.w	r0, r4, #11
 8008224:	1d23      	adds	r3, r4, #4
 8008226:	f020 0007 	bic.w	r0, r0, #7
 800822a:	1ac2      	subs	r2, r0, r3
 800822c:	d0cc      	beq.n	80081c8 <_malloc_r+0x20>
 800822e:	1a1b      	subs	r3, r3, r0
 8008230:	50a3      	str	r3, [r4, r2]
 8008232:	e7c9      	b.n	80081c8 <_malloc_r+0x20>
 8008234:	4622      	mov	r2, r4
 8008236:	6864      	ldr	r4, [r4, #4]
 8008238:	e7cc      	b.n	80081d4 <_malloc_r+0x2c>
 800823a:	1cc4      	adds	r4, r0, #3
 800823c:	f024 0403 	bic.w	r4, r4, #3
 8008240:	42a0      	cmp	r0, r4
 8008242:	d0e3      	beq.n	800820c <_malloc_r+0x64>
 8008244:	1a21      	subs	r1, r4, r0
 8008246:	4630      	mov	r0, r6
 8008248:	f000 f96a 	bl	8008520 <_sbrk_r>
 800824c:	3001      	adds	r0, #1
 800824e:	d1dd      	bne.n	800820c <_malloc_r+0x64>
 8008250:	e7cf      	b.n	80081f2 <_malloc_r+0x4a>
 8008252:	bf00      	nop
 8008254:	20000254 	.word	0x20000254
 8008258:	20000258 	.word	0x20000258

0800825c <__ssputs_r>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	688e      	ldr	r6, [r1, #8]
 8008262:	4682      	mov	sl, r0
 8008264:	429e      	cmp	r6, r3
 8008266:	460c      	mov	r4, r1
 8008268:	4690      	mov	r8, r2
 800826a:	461f      	mov	r7, r3
 800826c:	d838      	bhi.n	80082e0 <__ssputs_r+0x84>
 800826e:	898a      	ldrh	r2, [r1, #12]
 8008270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008274:	d032      	beq.n	80082dc <__ssputs_r+0x80>
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	6909      	ldr	r1, [r1, #16]
 800827a:	3301      	adds	r3, #1
 800827c:	eba5 0901 	sub.w	r9, r5, r1
 8008280:	6965      	ldr	r5, [r4, #20]
 8008282:	444b      	add	r3, r9
 8008284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800828c:	106d      	asrs	r5, r5, #1
 800828e:	429d      	cmp	r5, r3
 8008290:	bf38      	it	cc
 8008292:	461d      	movcc	r5, r3
 8008294:	0553      	lsls	r3, r2, #21
 8008296:	d531      	bpl.n	80082fc <__ssputs_r+0xa0>
 8008298:	4629      	mov	r1, r5
 800829a:	f7ff ff85 	bl	80081a8 <_malloc_r>
 800829e:	4606      	mov	r6, r0
 80082a0:	b950      	cbnz	r0, 80082b8 <__ssputs_r+0x5c>
 80082a2:	230c      	movs	r3, #12
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	f8ca 3000 	str.w	r3, [sl]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	464a      	mov	r2, r9
 80082ba:	6921      	ldr	r1, [r4, #16]
 80082bc:	f7ff fa54 	bl	8007768 <memcpy>
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	6126      	str	r6, [r4, #16]
 80082ce:	444e      	add	r6, r9
 80082d0:	6026      	str	r6, [r4, #0]
 80082d2:	463e      	mov	r6, r7
 80082d4:	6165      	str	r5, [r4, #20]
 80082d6:	eba5 0509 	sub.w	r5, r5, r9
 80082da:	60a5      	str	r5, [r4, #8]
 80082dc:	42be      	cmp	r6, r7
 80082de:	d900      	bls.n	80082e2 <__ssputs_r+0x86>
 80082e0:	463e      	mov	r6, r7
 80082e2:	4632      	mov	r2, r6
 80082e4:	4641      	mov	r1, r8
 80082e6:	6820      	ldr	r0, [r4, #0]
 80082e8:	f000 f97a 	bl	80085e0 <memmove>
 80082ec:	68a3      	ldr	r3, [r4, #8]
 80082ee:	6822      	ldr	r2, [r4, #0]
 80082f0:	1b9b      	subs	r3, r3, r6
 80082f2:	4432      	add	r2, r6
 80082f4:	2000      	movs	r0, #0
 80082f6:	60a3      	str	r3, [r4, #8]
 80082f8:	6022      	str	r2, [r4, #0]
 80082fa:	e7db      	b.n	80082b4 <__ssputs_r+0x58>
 80082fc:	462a      	mov	r2, r5
 80082fe:	f000 f995 	bl	800862c <_realloc_r>
 8008302:	4606      	mov	r6, r0
 8008304:	2800      	cmp	r0, #0
 8008306:	d1e1      	bne.n	80082cc <__ssputs_r+0x70>
 8008308:	4650      	mov	r0, sl
 800830a:	6921      	ldr	r1, [r4, #16]
 800830c:	f7ff ff00 	bl	8008110 <_free_r>
 8008310:	e7c7      	b.n	80082a2 <__ssputs_r+0x46>
	...

08008314 <_svfiprintf_r>:
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	4698      	mov	r8, r3
 800831a:	898b      	ldrh	r3, [r1, #12]
 800831c:	4607      	mov	r7, r0
 800831e:	061b      	lsls	r3, r3, #24
 8008320:	460d      	mov	r5, r1
 8008322:	4614      	mov	r4, r2
 8008324:	b09d      	sub	sp, #116	; 0x74
 8008326:	d50e      	bpl.n	8008346 <_svfiprintf_r+0x32>
 8008328:	690b      	ldr	r3, [r1, #16]
 800832a:	b963      	cbnz	r3, 8008346 <_svfiprintf_r+0x32>
 800832c:	2140      	movs	r1, #64	; 0x40
 800832e:	f7ff ff3b 	bl	80081a8 <_malloc_r>
 8008332:	6028      	str	r0, [r5, #0]
 8008334:	6128      	str	r0, [r5, #16]
 8008336:	b920      	cbnz	r0, 8008342 <_svfiprintf_r+0x2e>
 8008338:	230c      	movs	r3, #12
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	e0d1      	b.n	80084e6 <_svfiprintf_r+0x1d2>
 8008342:	2340      	movs	r3, #64	; 0x40
 8008344:	616b      	str	r3, [r5, #20]
 8008346:	2300      	movs	r3, #0
 8008348:	9309      	str	r3, [sp, #36]	; 0x24
 800834a:	2320      	movs	r3, #32
 800834c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008350:	2330      	movs	r3, #48	; 0x30
 8008352:	f04f 0901 	mov.w	r9, #1
 8008356:	f8cd 800c 	str.w	r8, [sp, #12]
 800835a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008500 <_svfiprintf_r+0x1ec>
 800835e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008362:	4623      	mov	r3, r4
 8008364:	469a      	mov	sl, r3
 8008366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836a:	b10a      	cbz	r2, 8008370 <_svfiprintf_r+0x5c>
 800836c:	2a25      	cmp	r2, #37	; 0x25
 800836e:	d1f9      	bne.n	8008364 <_svfiprintf_r+0x50>
 8008370:	ebba 0b04 	subs.w	fp, sl, r4
 8008374:	d00b      	beq.n	800838e <_svfiprintf_r+0x7a>
 8008376:	465b      	mov	r3, fp
 8008378:	4622      	mov	r2, r4
 800837a:	4629      	mov	r1, r5
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff ff6d 	bl	800825c <__ssputs_r>
 8008382:	3001      	adds	r0, #1
 8008384:	f000 80aa 	beq.w	80084dc <_svfiprintf_r+0x1c8>
 8008388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800838a:	445a      	add	r2, fp
 800838c:	9209      	str	r2, [sp, #36]	; 0x24
 800838e:	f89a 3000 	ldrb.w	r3, [sl]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 80a2 	beq.w	80084dc <_svfiprintf_r+0x1c8>
 8008398:	2300      	movs	r3, #0
 800839a:	f04f 32ff 	mov.w	r2, #4294967295
 800839e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a2:	f10a 0a01 	add.w	sl, sl, #1
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	9307      	str	r3, [sp, #28]
 80083aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ae:	931a      	str	r3, [sp, #104]	; 0x68
 80083b0:	4654      	mov	r4, sl
 80083b2:	2205      	movs	r2, #5
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	4851      	ldr	r0, [pc, #324]	; (8008500 <_svfiprintf_r+0x1ec>)
 80083ba:	f7ff f9c7 	bl	800774c <memchr>
 80083be:	9a04      	ldr	r2, [sp, #16]
 80083c0:	b9d8      	cbnz	r0, 80083fa <_svfiprintf_r+0xe6>
 80083c2:	06d0      	lsls	r0, r2, #27
 80083c4:	bf44      	itt	mi
 80083c6:	2320      	movmi	r3, #32
 80083c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083cc:	0711      	lsls	r1, r2, #28
 80083ce:	bf44      	itt	mi
 80083d0:	232b      	movmi	r3, #43	; 0x2b
 80083d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d6:	f89a 3000 	ldrb.w	r3, [sl]
 80083da:	2b2a      	cmp	r3, #42	; 0x2a
 80083dc:	d015      	beq.n	800840a <_svfiprintf_r+0xf6>
 80083de:	4654      	mov	r4, sl
 80083e0:	2000      	movs	r0, #0
 80083e2:	f04f 0c0a 	mov.w	ip, #10
 80083e6:	9a07      	ldr	r2, [sp, #28]
 80083e8:	4621      	mov	r1, r4
 80083ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ee:	3b30      	subs	r3, #48	; 0x30
 80083f0:	2b09      	cmp	r3, #9
 80083f2:	d94e      	bls.n	8008492 <_svfiprintf_r+0x17e>
 80083f4:	b1b0      	cbz	r0, 8008424 <_svfiprintf_r+0x110>
 80083f6:	9207      	str	r2, [sp, #28]
 80083f8:	e014      	b.n	8008424 <_svfiprintf_r+0x110>
 80083fa:	eba0 0308 	sub.w	r3, r0, r8
 80083fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008402:	4313      	orrs	r3, r2
 8008404:	46a2      	mov	sl, r4
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	e7d2      	b.n	80083b0 <_svfiprintf_r+0x9c>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	1d19      	adds	r1, r3, #4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	9103      	str	r1, [sp, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bfbb      	ittet	lt
 8008416:	425b      	neglt	r3, r3
 8008418:	f042 0202 	orrlt.w	r2, r2, #2
 800841c:	9307      	strge	r3, [sp, #28]
 800841e:	9307      	strlt	r3, [sp, #28]
 8008420:	bfb8      	it	lt
 8008422:	9204      	strlt	r2, [sp, #16]
 8008424:	7823      	ldrb	r3, [r4, #0]
 8008426:	2b2e      	cmp	r3, #46	; 0x2e
 8008428:	d10c      	bne.n	8008444 <_svfiprintf_r+0x130>
 800842a:	7863      	ldrb	r3, [r4, #1]
 800842c:	2b2a      	cmp	r3, #42	; 0x2a
 800842e:	d135      	bne.n	800849c <_svfiprintf_r+0x188>
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	3402      	adds	r4, #2
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	9203      	str	r2, [sp, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	bfb8      	it	lt
 800843e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008442:	9305      	str	r3, [sp, #20]
 8008444:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008510 <_svfiprintf_r+0x1fc>
 8008448:	2203      	movs	r2, #3
 800844a:	4650      	mov	r0, sl
 800844c:	7821      	ldrb	r1, [r4, #0]
 800844e:	f7ff f97d 	bl	800774c <memchr>
 8008452:	b140      	cbz	r0, 8008466 <_svfiprintf_r+0x152>
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	eba0 000a 	sub.w	r0, r0, sl
 800845a:	fa03 f000 	lsl.w	r0, r3, r0
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	3401      	adds	r4, #1
 8008462:	4303      	orrs	r3, r0
 8008464:	9304      	str	r3, [sp, #16]
 8008466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846a:	2206      	movs	r2, #6
 800846c:	4825      	ldr	r0, [pc, #148]	; (8008504 <_svfiprintf_r+0x1f0>)
 800846e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008472:	f7ff f96b 	bl	800774c <memchr>
 8008476:	2800      	cmp	r0, #0
 8008478:	d038      	beq.n	80084ec <_svfiprintf_r+0x1d8>
 800847a:	4b23      	ldr	r3, [pc, #140]	; (8008508 <_svfiprintf_r+0x1f4>)
 800847c:	bb1b      	cbnz	r3, 80084c6 <_svfiprintf_r+0x1b2>
 800847e:	9b03      	ldr	r3, [sp, #12]
 8008480:	3307      	adds	r3, #7
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	3308      	adds	r3, #8
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	4433      	add	r3, r6
 800848e:	9309      	str	r3, [sp, #36]	; 0x24
 8008490:	e767      	b.n	8008362 <_svfiprintf_r+0x4e>
 8008492:	460c      	mov	r4, r1
 8008494:	2001      	movs	r0, #1
 8008496:	fb0c 3202 	mla	r2, ip, r2, r3
 800849a:	e7a5      	b.n	80083e8 <_svfiprintf_r+0xd4>
 800849c:	2300      	movs	r3, #0
 800849e:	f04f 0c0a 	mov.w	ip, #10
 80084a2:	4619      	mov	r1, r3
 80084a4:	3401      	adds	r4, #1
 80084a6:	9305      	str	r3, [sp, #20]
 80084a8:	4620      	mov	r0, r4
 80084aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ae:	3a30      	subs	r2, #48	; 0x30
 80084b0:	2a09      	cmp	r2, #9
 80084b2:	d903      	bls.n	80084bc <_svfiprintf_r+0x1a8>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0c5      	beq.n	8008444 <_svfiprintf_r+0x130>
 80084b8:	9105      	str	r1, [sp, #20]
 80084ba:	e7c3      	b.n	8008444 <_svfiprintf_r+0x130>
 80084bc:	4604      	mov	r4, r0
 80084be:	2301      	movs	r3, #1
 80084c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084c4:	e7f0      	b.n	80084a8 <_svfiprintf_r+0x194>
 80084c6:	ab03      	add	r3, sp, #12
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	462a      	mov	r2, r5
 80084cc:	4638      	mov	r0, r7
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <_svfiprintf_r+0x1f8>)
 80084d0:	a904      	add	r1, sp, #16
 80084d2:	f7fc fa9f 	bl	8004a14 <_printf_float>
 80084d6:	1c42      	adds	r2, r0, #1
 80084d8:	4606      	mov	r6, r0
 80084da:	d1d6      	bne.n	800848a <_svfiprintf_r+0x176>
 80084dc:	89ab      	ldrh	r3, [r5, #12]
 80084de:	065b      	lsls	r3, r3, #25
 80084e0:	f53f af2c 	bmi.w	800833c <_svfiprintf_r+0x28>
 80084e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084e6:	b01d      	add	sp, #116	; 0x74
 80084e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ec:	ab03      	add	r3, sp, #12
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	462a      	mov	r2, r5
 80084f2:	4638      	mov	r0, r7
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <_svfiprintf_r+0x1f8>)
 80084f6:	a904      	add	r1, sp, #16
 80084f8:	f7fc fd28 	bl	8004f4c <_printf_i>
 80084fc:	e7eb      	b.n	80084d6 <_svfiprintf_r+0x1c2>
 80084fe:	bf00      	nop
 8008500:	0800a89c 	.word	0x0800a89c
 8008504:	0800a8a6 	.word	0x0800a8a6
 8008508:	08004a15 	.word	0x08004a15
 800850c:	0800825d 	.word	0x0800825d
 8008510:	0800a8a2 	.word	0x0800a8a2

08008514 <nan>:
 8008514:	2000      	movs	r0, #0
 8008516:	4901      	ldr	r1, [pc, #4]	; (800851c <nan+0x8>)
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	7ff80000 	.word	0x7ff80000

08008520 <_sbrk_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	2300      	movs	r3, #0
 8008524:	4d05      	ldr	r5, [pc, #20]	; (800853c <_sbrk_r+0x1c>)
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	f7fa f82e 	bl	800258c <_sbrk>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_sbrk_r+0x1a>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_sbrk_r+0x1a>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	2000043c 	.word	0x2000043c

08008540 <strncmp>:
 8008540:	b510      	push	{r4, lr}
 8008542:	b16a      	cbz	r2, 8008560 <strncmp+0x20>
 8008544:	3901      	subs	r1, #1
 8008546:	1884      	adds	r4, r0, r2
 8008548:	f810 3b01 	ldrb.w	r3, [r0], #1
 800854c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008550:	4293      	cmp	r3, r2
 8008552:	d103      	bne.n	800855c <strncmp+0x1c>
 8008554:	42a0      	cmp	r0, r4
 8008556:	d001      	beq.n	800855c <strncmp+0x1c>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1f5      	bne.n	8008548 <strncmp+0x8>
 800855c:	1a98      	subs	r0, r3, r2
 800855e:	bd10      	pop	{r4, pc}
 8008560:	4610      	mov	r0, r2
 8008562:	e7fc      	b.n	800855e <strncmp+0x1e>

08008564 <__ascii_wctomb>:
 8008564:	4603      	mov	r3, r0
 8008566:	4608      	mov	r0, r1
 8008568:	b141      	cbz	r1, 800857c <__ascii_wctomb+0x18>
 800856a:	2aff      	cmp	r2, #255	; 0xff
 800856c:	d904      	bls.n	8008578 <__ascii_wctomb+0x14>
 800856e:	228a      	movs	r2, #138	; 0x8a
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	4770      	bx	lr
 8008578:	2001      	movs	r0, #1
 800857a:	700a      	strb	r2, [r1, #0]
 800857c:	4770      	bx	lr
	...

08008580 <__assert_func>:
 8008580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008582:	4614      	mov	r4, r2
 8008584:	461a      	mov	r2, r3
 8008586:	4b09      	ldr	r3, [pc, #36]	; (80085ac <__assert_func+0x2c>)
 8008588:	4605      	mov	r5, r0
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68d8      	ldr	r0, [r3, #12]
 800858e:	b14c      	cbz	r4, 80085a4 <__assert_func+0x24>
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <__assert_func+0x30>)
 8008592:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008596:	9100      	str	r1, [sp, #0]
 8008598:	462b      	mov	r3, r5
 800859a:	4906      	ldr	r1, [pc, #24]	; (80085b4 <__assert_func+0x34>)
 800859c:	f000 f80e 	bl	80085bc <fiprintf>
 80085a0:	f000 fa82 	bl	8008aa8 <abort>
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <__assert_func+0x38>)
 80085a6:	461c      	mov	r4, r3
 80085a8:	e7f3      	b.n	8008592 <__assert_func+0x12>
 80085aa:	bf00      	nop
 80085ac:	20000010 	.word	0x20000010
 80085b0:	0800a8ad 	.word	0x0800a8ad
 80085b4:	0800a8ba 	.word	0x0800a8ba
 80085b8:	0800a8e8 	.word	0x0800a8e8

080085bc <fiprintf>:
 80085bc:	b40e      	push	{r1, r2, r3}
 80085be:	b503      	push	{r0, r1, lr}
 80085c0:	4601      	mov	r1, r0
 80085c2:	ab03      	add	r3, sp, #12
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <fiprintf+0x20>)
 80085c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	f000 f87b 	bl	80086c8 <_vfiprintf_r>
 80085d2:	b002      	add	sp, #8
 80085d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085d8:	b003      	add	sp, #12
 80085da:	4770      	bx	lr
 80085dc:	20000010 	.word	0x20000010

080085e0 <memmove>:
 80085e0:	4288      	cmp	r0, r1
 80085e2:	b510      	push	{r4, lr}
 80085e4:	eb01 0402 	add.w	r4, r1, r2
 80085e8:	d902      	bls.n	80085f0 <memmove+0x10>
 80085ea:	4284      	cmp	r4, r0
 80085ec:	4623      	mov	r3, r4
 80085ee:	d807      	bhi.n	8008600 <memmove+0x20>
 80085f0:	1e43      	subs	r3, r0, #1
 80085f2:	42a1      	cmp	r1, r4
 80085f4:	d008      	beq.n	8008608 <memmove+0x28>
 80085f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085fe:	e7f8      	b.n	80085f2 <memmove+0x12>
 8008600:	4601      	mov	r1, r0
 8008602:	4402      	add	r2, r0
 8008604:	428a      	cmp	r2, r1
 8008606:	d100      	bne.n	800860a <memmove+0x2a>
 8008608:	bd10      	pop	{r4, pc}
 800860a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800860e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008612:	e7f7      	b.n	8008604 <memmove+0x24>

08008614 <__malloc_lock>:
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <__malloc_lock+0x8>)
 8008616:	f000 bc07 	b.w	8008e28 <__retarget_lock_acquire_recursive>
 800861a:	bf00      	nop
 800861c:	20000444 	.word	0x20000444

08008620 <__malloc_unlock>:
 8008620:	4801      	ldr	r0, [pc, #4]	; (8008628 <__malloc_unlock+0x8>)
 8008622:	f000 bc02 	b.w	8008e2a <__retarget_lock_release_recursive>
 8008626:	bf00      	nop
 8008628:	20000444 	.word	0x20000444

0800862c <_realloc_r>:
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	4607      	mov	r7, r0
 8008630:	4614      	mov	r4, r2
 8008632:	460e      	mov	r6, r1
 8008634:	b921      	cbnz	r1, 8008640 <_realloc_r+0x14>
 8008636:	4611      	mov	r1, r2
 8008638:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800863c:	f7ff bdb4 	b.w	80081a8 <_malloc_r>
 8008640:	b922      	cbnz	r2, 800864c <_realloc_r+0x20>
 8008642:	f7ff fd65 	bl	8008110 <_free_r>
 8008646:	4625      	mov	r5, r4
 8008648:	4628      	mov	r0, r5
 800864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864c:	f000 fc52 	bl	8008ef4 <_malloc_usable_size_r>
 8008650:	42a0      	cmp	r0, r4
 8008652:	d20f      	bcs.n	8008674 <_realloc_r+0x48>
 8008654:	4621      	mov	r1, r4
 8008656:	4638      	mov	r0, r7
 8008658:	f7ff fda6 	bl	80081a8 <_malloc_r>
 800865c:	4605      	mov	r5, r0
 800865e:	2800      	cmp	r0, #0
 8008660:	d0f2      	beq.n	8008648 <_realloc_r+0x1c>
 8008662:	4631      	mov	r1, r6
 8008664:	4622      	mov	r2, r4
 8008666:	f7ff f87f 	bl	8007768 <memcpy>
 800866a:	4631      	mov	r1, r6
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff fd4f 	bl	8008110 <_free_r>
 8008672:	e7e9      	b.n	8008648 <_realloc_r+0x1c>
 8008674:	4635      	mov	r5, r6
 8008676:	e7e7      	b.n	8008648 <_realloc_r+0x1c>

08008678 <__sfputc_r>:
 8008678:	6893      	ldr	r3, [r2, #8]
 800867a:	b410      	push	{r4}
 800867c:	3b01      	subs	r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	6093      	str	r3, [r2, #8]
 8008682:	da07      	bge.n	8008694 <__sfputc_r+0x1c>
 8008684:	6994      	ldr	r4, [r2, #24]
 8008686:	42a3      	cmp	r3, r4
 8008688:	db01      	blt.n	800868e <__sfputc_r+0x16>
 800868a:	290a      	cmp	r1, #10
 800868c:	d102      	bne.n	8008694 <__sfputc_r+0x1c>
 800868e:	bc10      	pop	{r4}
 8008690:	f000 b94a 	b.w	8008928 <__swbuf_r>
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	1c58      	adds	r0, r3, #1
 8008698:	6010      	str	r0, [r2, #0]
 800869a:	7019      	strb	r1, [r3, #0]
 800869c:	4608      	mov	r0, r1
 800869e:	bc10      	pop	{r4}
 80086a0:	4770      	bx	lr

080086a2 <__sfputs_r>:
 80086a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a4:	4606      	mov	r6, r0
 80086a6:	460f      	mov	r7, r1
 80086a8:	4614      	mov	r4, r2
 80086aa:	18d5      	adds	r5, r2, r3
 80086ac:	42ac      	cmp	r4, r5
 80086ae:	d101      	bne.n	80086b4 <__sfputs_r+0x12>
 80086b0:	2000      	movs	r0, #0
 80086b2:	e007      	b.n	80086c4 <__sfputs_r+0x22>
 80086b4:	463a      	mov	r2, r7
 80086b6:	4630      	mov	r0, r6
 80086b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086bc:	f7ff ffdc 	bl	8008678 <__sfputc_r>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d1f3      	bne.n	80086ac <__sfputs_r+0xa>
 80086c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086c8 <_vfiprintf_r>:
 80086c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	460d      	mov	r5, r1
 80086ce:	4614      	mov	r4, r2
 80086d0:	4698      	mov	r8, r3
 80086d2:	4606      	mov	r6, r0
 80086d4:	b09d      	sub	sp, #116	; 0x74
 80086d6:	b118      	cbz	r0, 80086e0 <_vfiprintf_r+0x18>
 80086d8:	6983      	ldr	r3, [r0, #24]
 80086da:	b90b      	cbnz	r3, 80086e0 <_vfiprintf_r+0x18>
 80086dc:	f000 fb06 	bl	8008cec <__sinit>
 80086e0:	4b89      	ldr	r3, [pc, #548]	; (8008908 <_vfiprintf_r+0x240>)
 80086e2:	429d      	cmp	r5, r3
 80086e4:	d11b      	bne.n	800871e <_vfiprintf_r+0x56>
 80086e6:	6875      	ldr	r5, [r6, #4]
 80086e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ea:	07d9      	lsls	r1, r3, #31
 80086ec:	d405      	bmi.n	80086fa <_vfiprintf_r+0x32>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	059a      	lsls	r2, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_vfiprintf_r+0x32>
 80086f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f6:	f000 fb97 	bl	8008e28 <__retarget_lock_acquire_recursive>
 80086fa:	89ab      	ldrh	r3, [r5, #12]
 80086fc:	071b      	lsls	r3, r3, #28
 80086fe:	d501      	bpl.n	8008704 <_vfiprintf_r+0x3c>
 8008700:	692b      	ldr	r3, [r5, #16]
 8008702:	b9eb      	cbnz	r3, 8008740 <_vfiprintf_r+0x78>
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f000 f960 	bl	80089cc <__swsetup_r>
 800870c:	b1c0      	cbz	r0, 8008740 <_vfiprintf_r+0x78>
 800870e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008710:	07dc      	lsls	r4, r3, #31
 8008712:	d50e      	bpl.n	8008732 <_vfiprintf_r+0x6a>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	b01d      	add	sp, #116	; 0x74
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	4b7b      	ldr	r3, [pc, #492]	; (800890c <_vfiprintf_r+0x244>)
 8008720:	429d      	cmp	r5, r3
 8008722:	d101      	bne.n	8008728 <_vfiprintf_r+0x60>
 8008724:	68b5      	ldr	r5, [r6, #8]
 8008726:	e7df      	b.n	80086e8 <_vfiprintf_r+0x20>
 8008728:	4b79      	ldr	r3, [pc, #484]	; (8008910 <_vfiprintf_r+0x248>)
 800872a:	429d      	cmp	r5, r3
 800872c:	bf08      	it	eq
 800872e:	68f5      	ldreq	r5, [r6, #12]
 8008730:	e7da      	b.n	80086e8 <_vfiprintf_r+0x20>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	0598      	lsls	r0, r3, #22
 8008736:	d4ed      	bmi.n	8008714 <_vfiprintf_r+0x4c>
 8008738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800873a:	f000 fb76 	bl	8008e2a <__retarget_lock_release_recursive>
 800873e:	e7e9      	b.n	8008714 <_vfiprintf_r+0x4c>
 8008740:	2300      	movs	r3, #0
 8008742:	9309      	str	r3, [sp, #36]	; 0x24
 8008744:	2320      	movs	r3, #32
 8008746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800874a:	2330      	movs	r3, #48	; 0x30
 800874c:	f04f 0901 	mov.w	r9, #1
 8008750:	f8cd 800c 	str.w	r8, [sp, #12]
 8008754:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008914 <_vfiprintf_r+0x24c>
 8008758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800875c:	4623      	mov	r3, r4
 800875e:	469a      	mov	sl, r3
 8008760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008764:	b10a      	cbz	r2, 800876a <_vfiprintf_r+0xa2>
 8008766:	2a25      	cmp	r2, #37	; 0x25
 8008768:	d1f9      	bne.n	800875e <_vfiprintf_r+0x96>
 800876a:	ebba 0b04 	subs.w	fp, sl, r4
 800876e:	d00b      	beq.n	8008788 <_vfiprintf_r+0xc0>
 8008770:	465b      	mov	r3, fp
 8008772:	4622      	mov	r2, r4
 8008774:	4629      	mov	r1, r5
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff ff93 	bl	80086a2 <__sfputs_r>
 800877c:	3001      	adds	r0, #1
 800877e:	f000 80aa 	beq.w	80088d6 <_vfiprintf_r+0x20e>
 8008782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008784:	445a      	add	r2, fp
 8008786:	9209      	str	r2, [sp, #36]	; 0x24
 8008788:	f89a 3000 	ldrb.w	r3, [sl]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80a2 	beq.w	80088d6 <_vfiprintf_r+0x20e>
 8008792:	2300      	movs	r3, #0
 8008794:	f04f 32ff 	mov.w	r2, #4294967295
 8008798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800879c:	f10a 0a01 	add.w	sl, sl, #1
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087a8:	931a      	str	r3, [sp, #104]	; 0x68
 80087aa:	4654      	mov	r4, sl
 80087ac:	2205      	movs	r2, #5
 80087ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b2:	4858      	ldr	r0, [pc, #352]	; (8008914 <_vfiprintf_r+0x24c>)
 80087b4:	f7fe ffca 	bl	800774c <memchr>
 80087b8:	9a04      	ldr	r2, [sp, #16]
 80087ba:	b9d8      	cbnz	r0, 80087f4 <_vfiprintf_r+0x12c>
 80087bc:	06d1      	lsls	r1, r2, #27
 80087be:	bf44      	itt	mi
 80087c0:	2320      	movmi	r3, #32
 80087c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c6:	0713      	lsls	r3, r2, #28
 80087c8:	bf44      	itt	mi
 80087ca:	232b      	movmi	r3, #43	; 0x2b
 80087cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087d0:	f89a 3000 	ldrb.w	r3, [sl]
 80087d4:	2b2a      	cmp	r3, #42	; 0x2a
 80087d6:	d015      	beq.n	8008804 <_vfiprintf_r+0x13c>
 80087d8:	4654      	mov	r4, sl
 80087da:	2000      	movs	r0, #0
 80087dc:	f04f 0c0a 	mov.w	ip, #10
 80087e0:	9a07      	ldr	r2, [sp, #28]
 80087e2:	4621      	mov	r1, r4
 80087e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e8:	3b30      	subs	r3, #48	; 0x30
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	d94e      	bls.n	800888c <_vfiprintf_r+0x1c4>
 80087ee:	b1b0      	cbz	r0, 800881e <_vfiprintf_r+0x156>
 80087f0:	9207      	str	r2, [sp, #28]
 80087f2:	e014      	b.n	800881e <_vfiprintf_r+0x156>
 80087f4:	eba0 0308 	sub.w	r3, r0, r8
 80087f8:	fa09 f303 	lsl.w	r3, r9, r3
 80087fc:	4313      	orrs	r3, r2
 80087fe:	46a2      	mov	sl, r4
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	e7d2      	b.n	80087aa <_vfiprintf_r+0xe2>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	1d19      	adds	r1, r3, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	9103      	str	r1, [sp, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	bfbb      	ittet	lt
 8008810:	425b      	neglt	r3, r3
 8008812:	f042 0202 	orrlt.w	r2, r2, #2
 8008816:	9307      	strge	r3, [sp, #28]
 8008818:	9307      	strlt	r3, [sp, #28]
 800881a:	bfb8      	it	lt
 800881c:	9204      	strlt	r2, [sp, #16]
 800881e:	7823      	ldrb	r3, [r4, #0]
 8008820:	2b2e      	cmp	r3, #46	; 0x2e
 8008822:	d10c      	bne.n	800883e <_vfiprintf_r+0x176>
 8008824:	7863      	ldrb	r3, [r4, #1]
 8008826:	2b2a      	cmp	r3, #42	; 0x2a
 8008828:	d135      	bne.n	8008896 <_vfiprintf_r+0x1ce>
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	3402      	adds	r4, #2
 800882e:	1d1a      	adds	r2, r3, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	9203      	str	r2, [sp, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	bfb8      	it	lt
 8008838:	f04f 33ff 	movlt.w	r3, #4294967295
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008924 <_vfiprintf_r+0x25c>
 8008842:	2203      	movs	r2, #3
 8008844:	4650      	mov	r0, sl
 8008846:	7821      	ldrb	r1, [r4, #0]
 8008848:	f7fe ff80 	bl	800774c <memchr>
 800884c:	b140      	cbz	r0, 8008860 <_vfiprintf_r+0x198>
 800884e:	2340      	movs	r3, #64	; 0x40
 8008850:	eba0 000a 	sub.w	r0, r0, sl
 8008854:	fa03 f000 	lsl.w	r0, r3, r0
 8008858:	9b04      	ldr	r3, [sp, #16]
 800885a:	3401      	adds	r4, #1
 800885c:	4303      	orrs	r3, r0
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	2206      	movs	r2, #6
 8008866:	482c      	ldr	r0, [pc, #176]	; (8008918 <_vfiprintf_r+0x250>)
 8008868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800886c:	f7fe ff6e 	bl	800774c <memchr>
 8008870:	2800      	cmp	r0, #0
 8008872:	d03f      	beq.n	80088f4 <_vfiprintf_r+0x22c>
 8008874:	4b29      	ldr	r3, [pc, #164]	; (800891c <_vfiprintf_r+0x254>)
 8008876:	bb1b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x1f8>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	3307      	adds	r3, #7
 800887c:	f023 0307 	bic.w	r3, r3, #7
 8008880:	3308      	adds	r3, #8
 8008882:	9303      	str	r3, [sp, #12]
 8008884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008886:	443b      	add	r3, r7
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	e767      	b.n	800875c <_vfiprintf_r+0x94>
 800888c:	460c      	mov	r4, r1
 800888e:	2001      	movs	r0, #1
 8008890:	fb0c 3202 	mla	r2, ip, r2, r3
 8008894:	e7a5      	b.n	80087e2 <_vfiprintf_r+0x11a>
 8008896:	2300      	movs	r3, #0
 8008898:	f04f 0c0a 	mov.w	ip, #10
 800889c:	4619      	mov	r1, r3
 800889e:	3401      	adds	r4, #1
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	4620      	mov	r0, r4
 80088a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a8:	3a30      	subs	r2, #48	; 0x30
 80088aa:	2a09      	cmp	r2, #9
 80088ac:	d903      	bls.n	80088b6 <_vfiprintf_r+0x1ee>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0c5      	beq.n	800883e <_vfiprintf_r+0x176>
 80088b2:	9105      	str	r1, [sp, #20]
 80088b4:	e7c3      	b.n	800883e <_vfiprintf_r+0x176>
 80088b6:	4604      	mov	r4, r0
 80088b8:	2301      	movs	r3, #1
 80088ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80088be:	e7f0      	b.n	80088a2 <_vfiprintf_r+0x1da>
 80088c0:	ab03      	add	r3, sp, #12
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	462a      	mov	r2, r5
 80088c6:	4630      	mov	r0, r6
 80088c8:	4b15      	ldr	r3, [pc, #84]	; (8008920 <_vfiprintf_r+0x258>)
 80088ca:	a904      	add	r1, sp, #16
 80088cc:	f7fc f8a2 	bl	8004a14 <_printf_float>
 80088d0:	4607      	mov	r7, r0
 80088d2:	1c78      	adds	r0, r7, #1
 80088d4:	d1d6      	bne.n	8008884 <_vfiprintf_r+0x1bc>
 80088d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d8:	07d9      	lsls	r1, r3, #31
 80088da:	d405      	bmi.n	80088e8 <_vfiprintf_r+0x220>
 80088dc:	89ab      	ldrh	r3, [r5, #12]
 80088de:	059a      	lsls	r2, r3, #22
 80088e0:	d402      	bmi.n	80088e8 <_vfiprintf_r+0x220>
 80088e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e4:	f000 faa1 	bl	8008e2a <__retarget_lock_release_recursive>
 80088e8:	89ab      	ldrh	r3, [r5, #12]
 80088ea:	065b      	lsls	r3, r3, #25
 80088ec:	f53f af12 	bmi.w	8008714 <_vfiprintf_r+0x4c>
 80088f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088f2:	e711      	b.n	8008718 <_vfiprintf_r+0x50>
 80088f4:	ab03      	add	r3, sp, #12
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	462a      	mov	r2, r5
 80088fa:	4630      	mov	r0, r6
 80088fc:	4b08      	ldr	r3, [pc, #32]	; (8008920 <_vfiprintf_r+0x258>)
 80088fe:	a904      	add	r1, sp, #16
 8008900:	f7fc fb24 	bl	8004f4c <_printf_i>
 8008904:	e7e4      	b.n	80088d0 <_vfiprintf_r+0x208>
 8008906:	bf00      	nop
 8008908:	0800a90c 	.word	0x0800a90c
 800890c:	0800a92c 	.word	0x0800a92c
 8008910:	0800a8ec 	.word	0x0800a8ec
 8008914:	0800a89c 	.word	0x0800a89c
 8008918:	0800a8a6 	.word	0x0800a8a6
 800891c:	08004a15 	.word	0x08004a15
 8008920:	080086a3 	.word	0x080086a3
 8008924:	0800a8a2 	.word	0x0800a8a2

08008928 <__swbuf_r>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	460e      	mov	r6, r1
 800892c:	4614      	mov	r4, r2
 800892e:	4605      	mov	r5, r0
 8008930:	b118      	cbz	r0, 800893a <__swbuf_r+0x12>
 8008932:	6983      	ldr	r3, [r0, #24]
 8008934:	b90b      	cbnz	r3, 800893a <__swbuf_r+0x12>
 8008936:	f000 f9d9 	bl	8008cec <__sinit>
 800893a:	4b21      	ldr	r3, [pc, #132]	; (80089c0 <__swbuf_r+0x98>)
 800893c:	429c      	cmp	r4, r3
 800893e:	d12b      	bne.n	8008998 <__swbuf_r+0x70>
 8008940:	686c      	ldr	r4, [r5, #4]
 8008942:	69a3      	ldr	r3, [r4, #24]
 8008944:	60a3      	str	r3, [r4, #8]
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	071a      	lsls	r2, r3, #28
 800894a:	d52f      	bpl.n	80089ac <__swbuf_r+0x84>
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	b36b      	cbz	r3, 80089ac <__swbuf_r+0x84>
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	6820      	ldr	r0, [r4, #0]
 8008954:	b2f6      	uxtb	r6, r6
 8008956:	1ac0      	subs	r0, r0, r3
 8008958:	6963      	ldr	r3, [r4, #20]
 800895a:	4637      	mov	r7, r6
 800895c:	4283      	cmp	r3, r0
 800895e:	dc04      	bgt.n	800896a <__swbuf_r+0x42>
 8008960:	4621      	mov	r1, r4
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f92e 	bl	8008bc4 <_fflush_r>
 8008968:	bb30      	cbnz	r0, 80089b8 <__swbuf_r+0x90>
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	3001      	adds	r0, #1
 800896e:	3b01      	subs	r3, #1
 8008970:	60a3      	str	r3, [r4, #8]
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	701e      	strb	r6, [r3, #0]
 800897a:	6963      	ldr	r3, [r4, #20]
 800897c:	4283      	cmp	r3, r0
 800897e:	d004      	beq.n	800898a <__swbuf_r+0x62>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	07db      	lsls	r3, r3, #31
 8008984:	d506      	bpl.n	8008994 <__swbuf_r+0x6c>
 8008986:	2e0a      	cmp	r6, #10
 8008988:	d104      	bne.n	8008994 <__swbuf_r+0x6c>
 800898a:	4621      	mov	r1, r4
 800898c:	4628      	mov	r0, r5
 800898e:	f000 f919 	bl	8008bc4 <_fflush_r>
 8008992:	b988      	cbnz	r0, 80089b8 <__swbuf_r+0x90>
 8008994:	4638      	mov	r0, r7
 8008996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008998:	4b0a      	ldr	r3, [pc, #40]	; (80089c4 <__swbuf_r+0x9c>)
 800899a:	429c      	cmp	r4, r3
 800899c:	d101      	bne.n	80089a2 <__swbuf_r+0x7a>
 800899e:	68ac      	ldr	r4, [r5, #8]
 80089a0:	e7cf      	b.n	8008942 <__swbuf_r+0x1a>
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <__swbuf_r+0xa0>)
 80089a4:	429c      	cmp	r4, r3
 80089a6:	bf08      	it	eq
 80089a8:	68ec      	ldreq	r4, [r5, #12]
 80089aa:	e7ca      	b.n	8008942 <__swbuf_r+0x1a>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f80c 	bl	80089cc <__swsetup_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d0cb      	beq.n	8008950 <__swbuf_r+0x28>
 80089b8:	f04f 37ff 	mov.w	r7, #4294967295
 80089bc:	e7ea      	b.n	8008994 <__swbuf_r+0x6c>
 80089be:	bf00      	nop
 80089c0:	0800a90c 	.word	0x0800a90c
 80089c4:	0800a92c 	.word	0x0800a92c
 80089c8:	0800a8ec 	.word	0x0800a8ec

080089cc <__swsetup_r>:
 80089cc:	4b32      	ldr	r3, [pc, #200]	; (8008a98 <__swsetup_r+0xcc>)
 80089ce:	b570      	push	{r4, r5, r6, lr}
 80089d0:	681d      	ldr	r5, [r3, #0]
 80089d2:	4606      	mov	r6, r0
 80089d4:	460c      	mov	r4, r1
 80089d6:	b125      	cbz	r5, 80089e2 <__swsetup_r+0x16>
 80089d8:	69ab      	ldr	r3, [r5, #24]
 80089da:	b913      	cbnz	r3, 80089e2 <__swsetup_r+0x16>
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 f985 	bl	8008cec <__sinit>
 80089e2:	4b2e      	ldr	r3, [pc, #184]	; (8008a9c <__swsetup_r+0xd0>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	d10f      	bne.n	8008a08 <__swsetup_r+0x3c>
 80089e8:	686c      	ldr	r4, [r5, #4]
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089f0:	0719      	lsls	r1, r3, #28
 80089f2:	d42c      	bmi.n	8008a4e <__swsetup_r+0x82>
 80089f4:	06dd      	lsls	r5, r3, #27
 80089f6:	d411      	bmi.n	8008a1c <__swsetup_r+0x50>
 80089f8:	2309      	movs	r3, #9
 80089fa:	6033      	str	r3, [r6, #0]
 80089fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	e03e      	b.n	8008a86 <__swsetup_r+0xba>
 8008a08:	4b25      	ldr	r3, [pc, #148]	; (8008aa0 <__swsetup_r+0xd4>)
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d101      	bne.n	8008a12 <__swsetup_r+0x46>
 8008a0e:	68ac      	ldr	r4, [r5, #8]
 8008a10:	e7eb      	b.n	80089ea <__swsetup_r+0x1e>
 8008a12:	4b24      	ldr	r3, [pc, #144]	; (8008aa4 <__swsetup_r+0xd8>)
 8008a14:	429c      	cmp	r4, r3
 8008a16:	bf08      	it	eq
 8008a18:	68ec      	ldreq	r4, [r5, #12]
 8008a1a:	e7e6      	b.n	80089ea <__swsetup_r+0x1e>
 8008a1c:	0758      	lsls	r0, r3, #29
 8008a1e:	d512      	bpl.n	8008a46 <__swsetup_r+0x7a>
 8008a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a22:	b141      	cbz	r1, 8008a36 <__swsetup_r+0x6a>
 8008a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	d002      	beq.n	8008a32 <__swsetup_r+0x66>
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7ff fb6f 	bl	8008110 <_free_r>
 8008a32:	2300      	movs	r3, #0
 8008a34:	6363      	str	r3, [r4, #52]	; 0x34
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f043 0308 	orr.w	r3, r3, #8
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	b94b      	cbnz	r3, 8008a66 <__swsetup_r+0x9a>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a5c:	d003      	beq.n	8008a66 <__swsetup_r+0x9a>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 fa07 	bl	8008e74 <__smakebuf_r>
 8008a66:	89a0      	ldrh	r0, [r4, #12]
 8008a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a6c:	f010 0301 	ands.w	r3, r0, #1
 8008a70:	d00a      	beq.n	8008a88 <__swsetup_r+0xbc>
 8008a72:	2300      	movs	r3, #0
 8008a74:	60a3      	str	r3, [r4, #8]
 8008a76:	6963      	ldr	r3, [r4, #20]
 8008a78:	425b      	negs	r3, r3
 8008a7a:	61a3      	str	r3, [r4, #24]
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	b943      	cbnz	r3, 8008a92 <__swsetup_r+0xc6>
 8008a80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a84:	d1ba      	bne.n	80089fc <__swsetup_r+0x30>
 8008a86:	bd70      	pop	{r4, r5, r6, pc}
 8008a88:	0781      	lsls	r1, r0, #30
 8008a8a:	bf58      	it	pl
 8008a8c:	6963      	ldrpl	r3, [r4, #20]
 8008a8e:	60a3      	str	r3, [r4, #8]
 8008a90:	e7f4      	b.n	8008a7c <__swsetup_r+0xb0>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e7f7      	b.n	8008a86 <__swsetup_r+0xba>
 8008a96:	bf00      	nop
 8008a98:	20000010 	.word	0x20000010
 8008a9c:	0800a90c 	.word	0x0800a90c
 8008aa0:	0800a92c 	.word	0x0800a92c
 8008aa4:	0800a8ec 	.word	0x0800a8ec

08008aa8 <abort>:
 8008aa8:	2006      	movs	r0, #6
 8008aaa:	b508      	push	{r3, lr}
 8008aac:	f000 fa52 	bl	8008f54 <raise>
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f7f9 fcf7 	bl	80024a4 <_exit>
	...

08008ab8 <__sflush_r>:
 8008ab8:	898a      	ldrh	r2, [r1, #12]
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	4605      	mov	r5, r0
 8008ac0:	0710      	lsls	r0, r2, #28
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	d458      	bmi.n	8008b78 <__sflush_r+0xc0>
 8008ac6:	684b      	ldr	r3, [r1, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc05      	bgt.n	8008ad8 <__sflush_r+0x20>
 8008acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	dc02      	bgt.n	8008ad8 <__sflush_r+0x20>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ada:	2e00      	cmp	r6, #0
 8008adc:	d0f9      	beq.n	8008ad2 <__sflush_r+0x1a>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ae4:	682f      	ldr	r7, [r5, #0]
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	d032      	beq.n	8008b50 <__sflush_r+0x98>
 8008aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	075a      	lsls	r2, r3, #29
 8008af0:	d505      	bpl.n	8008afe <__sflush_r+0x46>
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	1ac0      	subs	r0, r0, r3
 8008af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008af8:	b10b      	cbz	r3, 8008afe <__sflush_r+0x46>
 8008afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008afc:	1ac0      	subs	r0, r0, r3
 8008afe:	2300      	movs	r3, #0
 8008b00:	4602      	mov	r2, r0
 8008b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b04:	4628      	mov	r0, r5
 8008b06:	6a21      	ldr	r1, [r4, #32]
 8008b08:	47b0      	blx	r6
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	d106      	bne.n	8008b1e <__sflush_r+0x66>
 8008b10:	6829      	ldr	r1, [r5, #0]
 8008b12:	291d      	cmp	r1, #29
 8008b14:	d82c      	bhi.n	8008b70 <__sflush_r+0xb8>
 8008b16:	4a2a      	ldr	r2, [pc, #168]	; (8008bc0 <__sflush_r+0x108>)
 8008b18:	40ca      	lsrs	r2, r1
 8008b1a:	07d6      	lsls	r6, r2, #31
 8008b1c:	d528      	bpl.n	8008b70 <__sflush_r+0xb8>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	6062      	str	r2, [r4, #4]
 8008b22:	6922      	ldr	r2, [r4, #16]
 8008b24:	04d9      	lsls	r1, r3, #19
 8008b26:	6022      	str	r2, [r4, #0]
 8008b28:	d504      	bpl.n	8008b34 <__sflush_r+0x7c>
 8008b2a:	1c42      	adds	r2, r0, #1
 8008b2c:	d101      	bne.n	8008b32 <__sflush_r+0x7a>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b903      	cbnz	r3, 8008b34 <__sflush_r+0x7c>
 8008b32:	6560      	str	r0, [r4, #84]	; 0x54
 8008b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b36:	602f      	str	r7, [r5, #0]
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	d0ca      	beq.n	8008ad2 <__sflush_r+0x1a>
 8008b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b40:	4299      	cmp	r1, r3
 8008b42:	d002      	beq.n	8008b4a <__sflush_r+0x92>
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7ff fae3 	bl	8008110 <_free_r>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b4e:	e7c1      	b.n	8008ad4 <__sflush_r+0x1c>
 8008b50:	6a21      	ldr	r1, [r4, #32]
 8008b52:	2301      	movs	r3, #1
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b0      	blx	r6
 8008b58:	1c41      	adds	r1, r0, #1
 8008b5a:	d1c7      	bne.n	8008aec <__sflush_r+0x34>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0c4      	beq.n	8008aec <__sflush_r+0x34>
 8008b62:	2b1d      	cmp	r3, #29
 8008b64:	d001      	beq.n	8008b6a <__sflush_r+0xb2>
 8008b66:	2b16      	cmp	r3, #22
 8008b68:	d101      	bne.n	8008b6e <__sflush_r+0xb6>
 8008b6a:	602f      	str	r7, [r5, #0]
 8008b6c:	e7b1      	b.n	8008ad2 <__sflush_r+0x1a>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	e7ad      	b.n	8008ad4 <__sflush_r+0x1c>
 8008b78:	690f      	ldr	r7, [r1, #16]
 8008b7a:	2f00      	cmp	r7, #0
 8008b7c:	d0a9      	beq.n	8008ad2 <__sflush_r+0x1a>
 8008b7e:	0793      	lsls	r3, r2, #30
 8008b80:	bf18      	it	ne
 8008b82:	2300      	movne	r3, #0
 8008b84:	680e      	ldr	r6, [r1, #0]
 8008b86:	bf08      	it	eq
 8008b88:	694b      	ldreq	r3, [r1, #20]
 8008b8a:	eba6 0807 	sub.w	r8, r6, r7
 8008b8e:	600f      	str	r7, [r1, #0]
 8008b90:	608b      	str	r3, [r1, #8]
 8008b92:	f1b8 0f00 	cmp.w	r8, #0
 8008b96:	dd9c      	ble.n	8008ad2 <__sflush_r+0x1a>
 8008b98:	4643      	mov	r3, r8
 8008b9a:	463a      	mov	r2, r7
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	6a21      	ldr	r1, [r4, #32]
 8008ba0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ba2:	47b0      	blx	r6
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	dc06      	bgt.n	8008bb6 <__sflush_r+0xfe>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	e78e      	b.n	8008ad4 <__sflush_r+0x1c>
 8008bb6:	4407      	add	r7, r0
 8008bb8:	eba8 0800 	sub.w	r8, r8, r0
 8008bbc:	e7e9      	b.n	8008b92 <__sflush_r+0xda>
 8008bbe:	bf00      	nop
 8008bc0:	20400001 	.word	0x20400001

08008bc4 <_fflush_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	4605      	mov	r5, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	b913      	cbnz	r3, 8008bd4 <_fflush_r+0x10>
 8008bce:	2500      	movs	r5, #0
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	b118      	cbz	r0, 8008bde <_fflush_r+0x1a>
 8008bd6:	6983      	ldr	r3, [r0, #24]
 8008bd8:	b90b      	cbnz	r3, 8008bde <_fflush_r+0x1a>
 8008bda:	f000 f887 	bl	8008cec <__sinit>
 8008bde:	4b14      	ldr	r3, [pc, #80]	; (8008c30 <_fflush_r+0x6c>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d11b      	bne.n	8008c1c <_fflush_r+0x58>
 8008be4:	686c      	ldr	r4, [r5, #4]
 8008be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0ef      	beq.n	8008bce <_fflush_r+0xa>
 8008bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bf0:	07d0      	lsls	r0, r2, #31
 8008bf2:	d404      	bmi.n	8008bfe <_fflush_r+0x3a>
 8008bf4:	0599      	lsls	r1, r3, #22
 8008bf6:	d402      	bmi.n	8008bfe <_fflush_r+0x3a>
 8008bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bfa:	f000 f915 	bl	8008e28 <__retarget_lock_acquire_recursive>
 8008bfe:	4628      	mov	r0, r5
 8008c00:	4621      	mov	r1, r4
 8008c02:	f7ff ff59 	bl	8008ab8 <__sflush_r>
 8008c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c08:	4605      	mov	r5, r0
 8008c0a:	07da      	lsls	r2, r3, #31
 8008c0c:	d4e0      	bmi.n	8008bd0 <_fflush_r+0xc>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	059b      	lsls	r3, r3, #22
 8008c12:	d4dd      	bmi.n	8008bd0 <_fflush_r+0xc>
 8008c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c16:	f000 f908 	bl	8008e2a <__retarget_lock_release_recursive>
 8008c1a:	e7d9      	b.n	8008bd0 <_fflush_r+0xc>
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <_fflush_r+0x70>)
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d101      	bne.n	8008c26 <_fflush_r+0x62>
 8008c22:	68ac      	ldr	r4, [r5, #8]
 8008c24:	e7df      	b.n	8008be6 <_fflush_r+0x22>
 8008c26:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <_fflush_r+0x74>)
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	bf08      	it	eq
 8008c2c:	68ec      	ldreq	r4, [r5, #12]
 8008c2e:	e7da      	b.n	8008be6 <_fflush_r+0x22>
 8008c30:	0800a90c 	.word	0x0800a90c
 8008c34:	0800a92c 	.word	0x0800a92c
 8008c38:	0800a8ec 	.word	0x0800a8ec

08008c3c <std>:
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	4604      	mov	r4, r0
 8008c42:	e9c0 3300 	strd	r3, r3, [r0]
 8008c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c4a:	6083      	str	r3, [r0, #8]
 8008c4c:	8181      	strh	r1, [r0, #12]
 8008c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c50:	81c2      	strh	r2, [r0, #14]
 8008c52:	6183      	str	r3, [r0, #24]
 8008c54:	4619      	mov	r1, r3
 8008c56:	2208      	movs	r2, #8
 8008c58:	305c      	adds	r0, #92	; 0x5c
 8008c5a:	f7fb fe35 	bl	80048c8 <memset>
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <std+0x38>)
 8008c60:	6224      	str	r4, [r4, #32]
 8008c62:	6263      	str	r3, [r4, #36]	; 0x24
 8008c64:	4b04      	ldr	r3, [pc, #16]	; (8008c78 <std+0x3c>)
 8008c66:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c68:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <std+0x40>)
 8008c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <std+0x44>)
 8008c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	bf00      	nop
 8008c74:	08008f8d 	.word	0x08008f8d
 8008c78:	08008faf 	.word	0x08008faf
 8008c7c:	08008fe7 	.word	0x08008fe7
 8008c80:	0800900b 	.word	0x0800900b

08008c84 <_cleanup_r>:
 8008c84:	4901      	ldr	r1, [pc, #4]	; (8008c8c <_cleanup_r+0x8>)
 8008c86:	f000 b8af 	b.w	8008de8 <_fwalk_reent>
 8008c8a:	bf00      	nop
 8008c8c:	08008bc5 	.word	0x08008bc5

08008c90 <__sfmoreglue>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	2568      	movs	r5, #104	; 0x68
 8008c94:	1e4a      	subs	r2, r1, #1
 8008c96:	4355      	muls	r5, r2
 8008c98:	460e      	mov	r6, r1
 8008c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c9e:	f7ff fa83 	bl	80081a8 <_malloc_r>
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	b140      	cbz	r0, 8008cb8 <__sfmoreglue+0x28>
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8008cac:	300c      	adds	r0, #12
 8008cae:	60a0      	str	r0, [r4, #8]
 8008cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cb4:	f7fb fe08 	bl	80048c8 <memset>
 8008cb8:	4620      	mov	r0, r4
 8008cba:	bd70      	pop	{r4, r5, r6, pc}

08008cbc <__sfp_lock_acquire>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	; (8008cc4 <__sfp_lock_acquire+0x8>)
 8008cbe:	f000 b8b3 	b.w	8008e28 <__retarget_lock_acquire_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	20000448 	.word	0x20000448

08008cc8 <__sfp_lock_release>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__sfp_lock_release+0x8>)
 8008cca:	f000 b8ae 	b.w	8008e2a <__retarget_lock_release_recursive>
 8008cce:	bf00      	nop
 8008cd0:	20000448 	.word	0x20000448

08008cd4 <__sinit_lock_acquire>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__sinit_lock_acquire+0x8>)
 8008cd6:	f000 b8a7 	b.w	8008e28 <__retarget_lock_acquire_recursive>
 8008cda:	bf00      	nop
 8008cdc:	20000443 	.word	0x20000443

08008ce0 <__sinit_lock_release>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sinit_lock_release+0x8>)
 8008ce2:	f000 b8a2 	b.w	8008e2a <__retarget_lock_release_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20000443 	.word	0x20000443

08008cec <__sinit>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	4604      	mov	r4, r0
 8008cf0:	f7ff fff0 	bl	8008cd4 <__sinit_lock_acquire>
 8008cf4:	69a3      	ldr	r3, [r4, #24]
 8008cf6:	b11b      	cbz	r3, 8008d00 <__sinit+0x14>
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f7ff bff0 	b.w	8008ce0 <__sinit_lock_release>
 8008d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d04:	6523      	str	r3, [r4, #80]	; 0x50
 8008d06:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <__sinit+0x68>)
 8008d08:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <__sinit+0x6c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d0e:	42a3      	cmp	r3, r4
 8008d10:	bf08      	it	eq
 8008d12:	2301      	moveq	r3, #1
 8008d14:	4620      	mov	r0, r4
 8008d16:	bf08      	it	eq
 8008d18:	61a3      	streq	r3, [r4, #24]
 8008d1a:	f000 f81f 	bl	8008d5c <__sfp>
 8008d1e:	6060      	str	r0, [r4, #4]
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 f81b 	bl	8008d5c <__sfp>
 8008d26:	60a0      	str	r0, [r4, #8]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 f817 	bl	8008d5c <__sfp>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2104      	movs	r1, #4
 8008d32:	60e0      	str	r0, [r4, #12]
 8008d34:	6860      	ldr	r0, [r4, #4]
 8008d36:	f7ff ff81 	bl	8008c3c <std>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	2109      	movs	r1, #9
 8008d3e:	68a0      	ldr	r0, [r4, #8]
 8008d40:	f7ff ff7c 	bl	8008c3c <std>
 8008d44:	2202      	movs	r2, #2
 8008d46:	2112      	movs	r1, #18
 8008d48:	68e0      	ldr	r0, [r4, #12]
 8008d4a:	f7ff ff77 	bl	8008c3c <std>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	61a3      	str	r3, [r4, #24]
 8008d52:	e7d1      	b.n	8008cf8 <__sinit+0xc>
 8008d54:	0800a494 	.word	0x0800a494
 8008d58:	08008c85 	.word	0x08008c85

08008d5c <__sfp>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	4607      	mov	r7, r0
 8008d60:	f7ff ffac 	bl	8008cbc <__sfp_lock_acquire>
 8008d64:	4b1e      	ldr	r3, [pc, #120]	; (8008de0 <__sfp+0x84>)
 8008d66:	681e      	ldr	r6, [r3, #0]
 8008d68:	69b3      	ldr	r3, [r6, #24]
 8008d6a:	b913      	cbnz	r3, 8008d72 <__sfp+0x16>
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff ffbd 	bl	8008cec <__sinit>
 8008d72:	3648      	adds	r6, #72	; 0x48
 8008d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	d503      	bpl.n	8008d84 <__sfp+0x28>
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	b30b      	cbz	r3, 8008dc4 <__sfp+0x68>
 8008d80:	6836      	ldr	r6, [r6, #0]
 8008d82:	e7f7      	b.n	8008d74 <__sfp+0x18>
 8008d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d88:	b9d5      	cbnz	r5, 8008dc0 <__sfp+0x64>
 8008d8a:	4b16      	ldr	r3, [pc, #88]	; (8008de4 <__sfp+0x88>)
 8008d8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d90:	60e3      	str	r3, [r4, #12]
 8008d92:	6665      	str	r5, [r4, #100]	; 0x64
 8008d94:	f000 f847 	bl	8008e26 <__retarget_lock_init_recursive>
 8008d98:	f7ff ff96 	bl	8008cc8 <__sfp_lock_release>
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	4629      	mov	r1, r5
 8008da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008da8:	6025      	str	r5, [r4, #0]
 8008daa:	61a5      	str	r5, [r4, #24]
 8008dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008db0:	f7fb fd8a 	bl	80048c8 <memset>
 8008db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc0:	3468      	adds	r4, #104	; 0x68
 8008dc2:	e7d9      	b.n	8008d78 <__sfp+0x1c>
 8008dc4:	2104      	movs	r1, #4
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff ff62 	bl	8008c90 <__sfmoreglue>
 8008dcc:	4604      	mov	r4, r0
 8008dce:	6030      	str	r0, [r6, #0]
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1d5      	bne.n	8008d80 <__sfp+0x24>
 8008dd4:	f7ff ff78 	bl	8008cc8 <__sfp_lock_release>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	e7ee      	b.n	8008dbc <__sfp+0x60>
 8008dde:	bf00      	nop
 8008de0:	0800a494 	.word	0x0800a494
 8008de4:	ffff0001 	.word	0xffff0001

08008de8 <_fwalk_reent>:
 8008de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dec:	4606      	mov	r6, r0
 8008dee:	4688      	mov	r8, r1
 8008df0:	2700      	movs	r7, #0
 8008df2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8008dfe:	d505      	bpl.n	8008e0c <_fwalk_reent+0x24>
 8008e00:	6824      	ldr	r4, [r4, #0]
 8008e02:	2c00      	cmp	r4, #0
 8008e04:	d1f7      	bne.n	8008df6 <_fwalk_reent+0xe>
 8008e06:	4638      	mov	r0, r7
 8008e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0c:	89ab      	ldrh	r3, [r5, #12]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d907      	bls.n	8008e22 <_fwalk_reent+0x3a>
 8008e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e16:	3301      	adds	r3, #1
 8008e18:	d003      	beq.n	8008e22 <_fwalk_reent+0x3a>
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	47c0      	blx	r8
 8008e20:	4307      	orrs	r7, r0
 8008e22:	3568      	adds	r5, #104	; 0x68
 8008e24:	e7e9      	b.n	8008dfa <_fwalk_reent+0x12>

08008e26 <__retarget_lock_init_recursive>:
 8008e26:	4770      	bx	lr

08008e28 <__retarget_lock_acquire_recursive>:
 8008e28:	4770      	bx	lr

08008e2a <__retarget_lock_release_recursive>:
 8008e2a:	4770      	bx	lr

08008e2c <__swhatbuf_r>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	460e      	mov	r6, r1
 8008e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e34:	4614      	mov	r4, r2
 8008e36:	2900      	cmp	r1, #0
 8008e38:	461d      	mov	r5, r3
 8008e3a:	b096      	sub	sp, #88	; 0x58
 8008e3c:	da07      	bge.n	8008e4e <__swhatbuf_r+0x22>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	89b3      	ldrh	r3, [r6, #12]
 8008e44:	061a      	lsls	r2, r3, #24
 8008e46:	d410      	bmi.n	8008e6a <__swhatbuf_r+0x3e>
 8008e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e4c:	e00e      	b.n	8008e6c <__swhatbuf_r+0x40>
 8008e4e:	466a      	mov	r2, sp
 8008e50:	f000 f902 	bl	8009058 <_fstat_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	dbf2      	blt.n	8008e3e <__swhatbuf_r+0x12>
 8008e58:	9a01      	ldr	r2, [sp, #4]
 8008e5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e62:	425a      	negs	r2, r3
 8008e64:	415a      	adcs	r2, r3
 8008e66:	602a      	str	r2, [r5, #0]
 8008e68:	e7ee      	b.n	8008e48 <__swhatbuf_r+0x1c>
 8008e6a:	2340      	movs	r3, #64	; 0x40
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	b016      	add	sp, #88	; 0x58
 8008e72:	bd70      	pop	{r4, r5, r6, pc}

08008e74 <__smakebuf_r>:
 8008e74:	898b      	ldrh	r3, [r1, #12]
 8008e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e78:	079d      	lsls	r5, r3, #30
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	d507      	bpl.n	8008e90 <__smakebuf_r+0x1c>
 8008e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	6123      	str	r3, [r4, #16]
 8008e88:	2301      	movs	r3, #1
 8008e8a:	6163      	str	r3, [r4, #20]
 8008e8c:	b002      	add	sp, #8
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	466a      	mov	r2, sp
 8008e92:	ab01      	add	r3, sp, #4
 8008e94:	f7ff ffca 	bl	8008e2c <__swhatbuf_r>
 8008e98:	9900      	ldr	r1, [sp, #0]
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7ff f983 	bl	80081a8 <_malloc_r>
 8008ea2:	b948      	cbnz	r0, 8008eb8 <__smakebuf_r+0x44>
 8008ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea8:	059a      	lsls	r2, r3, #22
 8008eaa:	d4ef      	bmi.n	8008e8c <__smakebuf_r+0x18>
 8008eac:	f023 0303 	bic.w	r3, r3, #3
 8008eb0:	f043 0302 	orr.w	r3, r3, #2
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	e7e3      	b.n	8008e80 <__smakebuf_r+0xc>
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <__smakebuf_r+0x7c>)
 8008eba:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	6020      	str	r0, [r4, #0]
 8008ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	6120      	str	r0, [r4, #16]
 8008eca:	6163      	str	r3, [r4, #20]
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	b15b      	cbz	r3, 8008ee8 <__smakebuf_r+0x74>
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed6:	f000 f8d1 	bl	800907c <_isatty_r>
 8008eda:	b128      	cbz	r0, 8008ee8 <__smakebuf_r+0x74>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	89a0      	ldrh	r0, [r4, #12]
 8008eea:	4305      	orrs	r5, r0
 8008eec:	81a5      	strh	r5, [r4, #12]
 8008eee:	e7cd      	b.n	8008e8c <__smakebuf_r+0x18>
 8008ef0:	08008c85 	.word	0x08008c85

08008ef4 <_malloc_usable_size_r>:
 8008ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef8:	1f18      	subs	r0, r3, #4
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bfbc      	itt	lt
 8008efe:	580b      	ldrlt	r3, [r1, r0]
 8008f00:	18c0      	addlt	r0, r0, r3
 8008f02:	4770      	bx	lr

08008f04 <_raise_r>:
 8008f04:	291f      	cmp	r1, #31
 8008f06:	b538      	push	{r3, r4, r5, lr}
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	d904      	bls.n	8008f18 <_raise_r+0x14>
 8008f0e:	2316      	movs	r3, #22
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	f04f 30ff 	mov.w	r0, #4294967295
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f1a:	b112      	cbz	r2, 8008f22 <_raise_r+0x1e>
 8008f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f20:	b94b      	cbnz	r3, 8008f36 <_raise_r+0x32>
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 f830 	bl	8008f88 <_getpid_r>
 8008f28:	462a      	mov	r2, r5
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f32:	f000 b817 	b.w	8008f64 <_kill_r>
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d00a      	beq.n	8008f50 <_raise_r+0x4c>
 8008f3a:	1c59      	adds	r1, r3, #1
 8008f3c:	d103      	bne.n	8008f46 <_raise_r+0x42>
 8008f3e:	2316      	movs	r3, #22
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	2001      	movs	r0, #1
 8008f44:	e7e7      	b.n	8008f16 <_raise_r+0x12>
 8008f46:	2400      	movs	r4, #0
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f4e:	4798      	blx	r3
 8008f50:	2000      	movs	r0, #0
 8008f52:	e7e0      	b.n	8008f16 <_raise_r+0x12>

08008f54 <raise>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <raise+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f7ff bfd3 	b.w	8008f04 <_raise_r>
 8008f5e:	bf00      	nop
 8008f60:	20000010 	.word	0x20000010

08008f64 <_kill_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	2300      	movs	r3, #0
 8008f68:	4d06      	ldr	r5, [pc, #24]	; (8008f84 <_kill_r+0x20>)
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	f7f9 fa87 	bl	8002484 <_kill>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d102      	bne.n	8008f80 <_kill_r+0x1c>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	b103      	cbz	r3, 8008f80 <_kill_r+0x1c>
 8008f7e:	6023      	str	r3, [r4, #0]
 8008f80:	bd38      	pop	{r3, r4, r5, pc}
 8008f82:	bf00      	nop
 8008f84:	2000043c 	.word	0x2000043c

08008f88 <_getpid_r>:
 8008f88:	f7f9 ba75 	b.w	8002476 <_getpid>

08008f8c <__sread>:
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	460c      	mov	r4, r1
 8008f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f94:	f000 f894 	bl	80090c0 <_read_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	bfab      	itete	ge
 8008f9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8008fa0:	181b      	addge	r3, r3, r0
 8008fa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fa6:	bfac      	ite	ge
 8008fa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008faa:	81a3      	strhlt	r3, [r4, #12]
 8008fac:	bd10      	pop	{r4, pc}

08008fae <__swrite>:
 8008fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb2:	461f      	mov	r7, r3
 8008fb4:	898b      	ldrh	r3, [r1, #12]
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	05db      	lsls	r3, r3, #23
 8008fba:	460c      	mov	r4, r1
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	d505      	bpl.n	8008fcc <__swrite+0x1e>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc8:	f000 f868 	bl	800909c <_lseek_r>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	4632      	mov	r2, r6
 8008fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fd4:	81a3      	strh	r3, [r4, #12]
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	463b      	mov	r3, r7
 8008fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe2:	f000 b817 	b.w	8009014 <_write_r>

08008fe6 <__sseek>:
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	460c      	mov	r4, r1
 8008fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fee:	f000 f855 	bl	800909c <_lseek_r>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	bf15      	itete	ne
 8008ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009002:	81a3      	strheq	r3, [r4, #12]
 8009004:	bf18      	it	ne
 8009006:	81a3      	strhne	r3, [r4, #12]
 8009008:	bd10      	pop	{r4, pc}

0800900a <__sclose>:
 800900a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900e:	f000 b813 	b.w	8009038 <_close_r>
	...

08009014 <_write_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4604      	mov	r4, r0
 8009018:	4608      	mov	r0, r1
 800901a:	4611      	mov	r1, r2
 800901c:	2200      	movs	r2, #0
 800901e:	4d05      	ldr	r5, [pc, #20]	; (8009034 <_write_r+0x20>)
 8009020:	602a      	str	r2, [r5, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	f7f9 fa65 	bl	80024f2 <_write>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d102      	bne.n	8009032 <_write_r+0x1e>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	b103      	cbz	r3, 8009032 <_write_r+0x1e>
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	2000043c 	.word	0x2000043c

08009038 <_close_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	2300      	movs	r3, #0
 800903c:	4d05      	ldr	r5, [pc, #20]	; (8009054 <_close_r+0x1c>)
 800903e:	4604      	mov	r4, r0
 8009040:	4608      	mov	r0, r1
 8009042:	602b      	str	r3, [r5, #0]
 8009044:	f7f9 fa71 	bl	800252a <_close>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d102      	bne.n	8009052 <_close_r+0x1a>
 800904c:	682b      	ldr	r3, [r5, #0]
 800904e:	b103      	cbz	r3, 8009052 <_close_r+0x1a>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	2000043c 	.word	0x2000043c

08009058 <_fstat_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	2300      	movs	r3, #0
 800905c:	4d06      	ldr	r5, [pc, #24]	; (8009078 <_fstat_r+0x20>)
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	f7f9 fa6b 	bl	8002540 <_fstat>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	d102      	bne.n	8009074 <_fstat_r+0x1c>
 800906e:	682b      	ldr	r3, [r5, #0]
 8009070:	b103      	cbz	r3, 8009074 <_fstat_r+0x1c>
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	bd38      	pop	{r3, r4, r5, pc}
 8009076:	bf00      	nop
 8009078:	2000043c 	.word	0x2000043c

0800907c <_isatty_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	2300      	movs	r3, #0
 8009080:	4d05      	ldr	r5, [pc, #20]	; (8009098 <_isatty_r+0x1c>)
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	f7f9 fa69 	bl	800255e <_isatty>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_isatty_r+0x1a>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b103      	cbz	r3, 8009096 <_isatty_r+0x1a>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	2000043c 	.word	0x2000043c

0800909c <_lseek_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	2200      	movs	r2, #0
 80090a6:	4d05      	ldr	r5, [pc, #20]	; (80090bc <_lseek_r+0x20>)
 80090a8:	602a      	str	r2, [r5, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	f7f9 fa61 	bl	8002572 <_lseek>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_lseek_r+0x1e>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_lseek_r+0x1e>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	2000043c 	.word	0x2000043c

080090c0 <_read_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	4611      	mov	r1, r2
 80090c8:	2200      	movs	r2, #0
 80090ca:	4d05      	ldr	r5, [pc, #20]	; (80090e0 <_read_r+0x20>)
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f7f9 f9f2 	bl	80024b8 <_read>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_read_r+0x1e>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_read_r+0x1e>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	2000043c 	.word	0x2000043c

080090e4 <cos>:
 80090e4:	b530      	push	{r4, r5, lr}
 80090e6:	4a1e      	ldr	r2, [pc, #120]	; (8009160 <cos+0x7c>)
 80090e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090ec:	4293      	cmp	r3, r2
 80090ee:	b087      	sub	sp, #28
 80090f0:	dc04      	bgt.n	80090fc <cos+0x18>
 80090f2:	2200      	movs	r2, #0
 80090f4:	2300      	movs	r3, #0
 80090f6:	f000 faff 	bl	80096f8 <__kernel_cos>
 80090fa:	e006      	b.n	800910a <cos+0x26>
 80090fc:	4a19      	ldr	r2, [pc, #100]	; (8009164 <cos+0x80>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	dd05      	ble.n	800910e <cos+0x2a>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	f7f7 f82f 	bl	8000168 <__aeabi_dsub>
 800910a:	b007      	add	sp, #28
 800910c:	bd30      	pop	{r4, r5, pc}
 800910e:	aa02      	add	r2, sp, #8
 8009110:	f000 f856 	bl	80091c0 <__ieee754_rem_pio2>
 8009114:	f000 0003 	and.w	r0, r0, #3
 8009118:	2801      	cmp	r0, #1
 800911a:	d007      	beq.n	800912c <cos+0x48>
 800911c:	2802      	cmp	r0, #2
 800911e:	d00f      	beq.n	8009140 <cos+0x5c>
 8009120:	b9a8      	cbnz	r0, 800914e <cos+0x6a>
 8009122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912a:	e7e4      	b.n	80090f6 <cos+0x12>
 800912c:	9000      	str	r0, [sp, #0]
 800912e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009136:	f000 fee7 	bl	8009f08 <__kernel_sin>
 800913a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800913e:	e7e4      	b.n	800910a <cos+0x26>
 8009140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009148:	f000 fad6 	bl	80096f8 <__kernel_cos>
 800914c:	e7f5      	b.n	800913a <cos+0x56>
 800914e:	2301      	movs	r3, #1
 8009150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800915a:	f000 fed5 	bl	8009f08 <__kernel_sin>
 800915e:	e7d4      	b.n	800910a <cos+0x26>
 8009160:	3fe921fb 	.word	0x3fe921fb
 8009164:	7fefffff 	.word	0x7fefffff

08009168 <sqrt>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	f000 fa17 	bl	80095a0 <__ieee754_sqrt>
 8009172:	4b12      	ldr	r3, [pc, #72]	; (80091bc <sqrt+0x54>)
 8009174:	4604      	mov	r4, r0
 8009176:	f993 3000 	ldrsb.w	r3, [r3]
 800917a:	460d      	mov	r5, r1
 800917c:	3301      	adds	r3, #1
 800917e:	d019      	beq.n	80091b4 <sqrt+0x4c>
 8009180:	4632      	mov	r2, r6
 8009182:	463b      	mov	r3, r7
 8009184:	4630      	mov	r0, r6
 8009186:	4639      	mov	r1, r7
 8009188:	f7f7 fc40 	bl	8000a0c <__aeabi_dcmpun>
 800918c:	b990      	cbnz	r0, 80091b4 <sqrt+0x4c>
 800918e:	2200      	movs	r2, #0
 8009190:	2300      	movs	r3, #0
 8009192:	4630      	mov	r0, r6
 8009194:	4639      	mov	r1, r7
 8009196:	f7f7 fc11 	bl	80009bc <__aeabi_dcmplt>
 800919a:	b158      	cbz	r0, 80091b4 <sqrt+0x4c>
 800919c:	f7fb fb6a 	bl	8004874 <__errno>
 80091a0:	2321      	movs	r3, #33	; 0x21
 80091a2:	2200      	movs	r2, #0
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	2300      	movs	r3, #0
 80091a8:	4610      	mov	r0, r2
 80091aa:	4619      	mov	r1, r3
 80091ac:	f7f7 fabe 	bl	800072c <__aeabi_ddiv>
 80091b0:	4604      	mov	r4, r0
 80091b2:	460d      	mov	r5, r1
 80091b4:	4620      	mov	r0, r4
 80091b6:	4629      	mov	r1, r5
 80091b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ba:	bf00      	nop
 80091bc:	200001e4 	.word	0x200001e4

080091c0 <__ieee754_rem_pio2>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	4614      	mov	r4, r2
 80091c6:	4ac4      	ldr	r2, [pc, #784]	; (80094d8 <__ieee754_rem_pio2+0x318>)
 80091c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80091cc:	b08d      	sub	sp, #52	; 0x34
 80091ce:	4592      	cmp	sl, r2
 80091d0:	9104      	str	r1, [sp, #16]
 80091d2:	dc07      	bgt.n	80091e4 <__ieee754_rem_pio2+0x24>
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	e9c4 0100 	strd	r0, r1, [r4]
 80091dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80091e0:	2500      	movs	r5, #0
 80091e2:	e024      	b.n	800922e <__ieee754_rem_pio2+0x6e>
 80091e4:	4abd      	ldr	r2, [pc, #756]	; (80094dc <__ieee754_rem_pio2+0x31c>)
 80091e6:	4592      	cmp	sl, r2
 80091e8:	dc72      	bgt.n	80092d0 <__ieee754_rem_pio2+0x110>
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	4dbc      	ldr	r5, [pc, #752]	; (80094e0 <__ieee754_rem_pio2+0x320>)
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	a3ab      	add	r3, pc, #684	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x2e0>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	dd36      	ble.n	8009266 <__ieee754_rem_pio2+0xa6>
 80091f8:	f7f6 ffb6 	bl	8000168 <__aeabi_dsub>
 80091fc:	45aa      	cmp	sl, r5
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	d018      	beq.n	8009236 <__ieee754_rem_pio2+0x76>
 8009204:	a3a8      	add	r3, pc, #672	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 ffad 	bl	8000168 <__aeabi_dsub>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4630      	mov	r0, r6
 8009214:	e9c4 2300 	strd	r2, r3, [r4]
 8009218:	4639      	mov	r1, r7
 800921a:	f7f6 ffa5 	bl	8000168 <__aeabi_dsub>
 800921e:	a3a2      	add	r3, pc, #648	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f6 ffa0 	bl	8000168 <__aeabi_dsub>
 8009228:	2501      	movs	r5, #1
 800922a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800922e:	4628      	mov	r0, r5
 8009230:	b00d      	add	sp, #52	; 0x34
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	a39e      	add	r3, pc, #632	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x2f0>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f6 ff94 	bl	8000168 <__aeabi_dsub>
 8009240:	a39d      	add	r3, pc, #628	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	f7f6 ff8d 	bl	8000168 <__aeabi_dsub>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4630      	mov	r0, r6
 8009254:	e9c4 2300 	strd	r2, r3, [r4]
 8009258:	4639      	mov	r1, r7
 800925a:	f7f6 ff85 	bl	8000168 <__aeabi_dsub>
 800925e:	a396      	add	r3, pc, #600	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	e7de      	b.n	8009224 <__ieee754_rem_pio2+0x64>
 8009266:	f7f6 ff81 	bl	800016c <__adddf3>
 800926a:	45aa      	cmp	sl, r5
 800926c:	4606      	mov	r6, r0
 800926e:	460f      	mov	r7, r1
 8009270:	d016      	beq.n	80092a0 <__ieee754_rem_pio2+0xe0>
 8009272:	a38d      	add	r3, pc, #564	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f6 ff78 	bl	800016c <__adddf3>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4630      	mov	r0, r6
 8009282:	e9c4 2300 	strd	r2, r3, [r4]
 8009286:	4639      	mov	r1, r7
 8009288:	f7f6 ff6e 	bl	8000168 <__aeabi_dsub>
 800928c:	a386      	add	r3, pc, #536	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f6 ff6b 	bl	800016c <__adddf3>
 8009296:	f04f 35ff 	mov.w	r5, #4294967295
 800929a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800929e:	e7c6      	b.n	800922e <__ieee754_rem_pio2+0x6e>
 80092a0:	a383      	add	r3, pc, #524	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x2f0>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f6 ff61 	bl	800016c <__adddf3>
 80092aa:	a383      	add	r3, pc, #524	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	4606      	mov	r6, r0
 80092b2:	460f      	mov	r7, r1
 80092b4:	f7f6 ff5a 	bl	800016c <__adddf3>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4630      	mov	r0, r6
 80092be:	e9c4 2300 	strd	r2, r3, [r4]
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f6 ff50 	bl	8000168 <__aeabi_dsub>
 80092c8:	a37b      	add	r3, pc, #492	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	e7e0      	b.n	8009292 <__ieee754_rem_pio2+0xd2>
 80092d0:	4a84      	ldr	r2, [pc, #528]	; (80094e4 <__ieee754_rem_pio2+0x324>)
 80092d2:	4592      	cmp	sl, r2
 80092d4:	f300 80d5 	bgt.w	8009482 <__ieee754_rem_pio2+0x2c2>
 80092d8:	f000 fecc 	bl	800a074 <fabs>
 80092dc:	a378      	add	r3, pc, #480	; (adr r3, 80094c0 <__ieee754_rem_pio2+0x300>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	f7f7 f8f7 	bl	80004d8 <__aeabi_dmul>
 80092ea:	2200      	movs	r2, #0
 80092ec:	4b7e      	ldr	r3, [pc, #504]	; (80094e8 <__ieee754_rem_pio2+0x328>)
 80092ee:	f7f6 ff3d 	bl	800016c <__adddf3>
 80092f2:	f7f7 fba1 	bl	8000a38 <__aeabi_d2iz>
 80092f6:	4605      	mov	r5, r0
 80092f8:	f7f7 f884 	bl	8000404 <__aeabi_i2d>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009304:	a366      	add	r3, pc, #408	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x2e0>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f7 f8e5 	bl	80004d8 <__aeabi_dmul>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f6 ff27 	bl	8000168 <__aeabi_dsub>
 800931a:	a363      	add	r3, pc, #396	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2e8>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009328:	f7f7 f8d6 	bl	80004d8 <__aeabi_dmul>
 800932c:	2d1f      	cmp	r5, #31
 800932e:	4606      	mov	r6, r0
 8009330:	460f      	mov	r7, r1
 8009332:	dc0e      	bgt.n	8009352 <__ieee754_rem_pio2+0x192>
 8009334:	4b6d      	ldr	r3, [pc, #436]	; (80094ec <__ieee754_rem_pio2+0x32c>)
 8009336:	1e6a      	subs	r2, r5, #1
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	4553      	cmp	r3, sl
 800933e:	d008      	beq.n	8009352 <__ieee754_rem_pio2+0x192>
 8009340:	4632      	mov	r2, r6
 8009342:	463b      	mov	r3, r7
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f6 ff0e 	bl	8000168 <__aeabi_dsub>
 800934c:	e9c4 0100 	strd	r0, r1, [r4]
 8009350:	e013      	b.n	800937a <__ieee754_rem_pio2+0x1ba>
 8009352:	463b      	mov	r3, r7
 8009354:	4632      	mov	r2, r6
 8009356:	4640      	mov	r0, r8
 8009358:	4649      	mov	r1, r9
 800935a:	f7f6 ff05 	bl	8000168 <__aeabi_dsub>
 800935e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009368:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800936c:	f1ba 0f10 	cmp.w	sl, #16
 8009370:	dc1f      	bgt.n	80093b2 <__ieee754_rem_pio2+0x1f2>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	e9c4 2300 	strd	r2, r3, [r4]
 800937a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800937e:	4640      	mov	r0, r8
 8009380:	4653      	mov	r3, sl
 8009382:	4649      	mov	r1, r9
 8009384:	f7f6 fef0 	bl	8000168 <__aeabi_dsub>
 8009388:	4632      	mov	r2, r6
 800938a:	463b      	mov	r3, r7
 800938c:	f7f6 feec 	bl	8000168 <__aeabi_dsub>
 8009390:	460b      	mov	r3, r1
 8009392:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009396:	9904      	ldr	r1, [sp, #16]
 8009398:	4602      	mov	r2, r0
 800939a:	2900      	cmp	r1, #0
 800939c:	f6bf af47 	bge.w	800922e <__ieee754_rem_pio2+0x6e>
 80093a0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80093a4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80093a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093ac:	60e3      	str	r3, [r4, #12]
 80093ae:	426d      	negs	r5, r5
 80093b0:	e73d      	b.n	800922e <__ieee754_rem_pio2+0x6e>
 80093b2:	a33f      	add	r3, pc, #252	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x2f0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093bc:	f7f7 f88c 	bl	80004d8 <__aeabi_dmul>
 80093c0:	4606      	mov	r6, r0
 80093c2:	460f      	mov	r7, r1
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	f7f6 fecc 	bl	8000168 <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	4640      	mov	r0, r8
 80093da:	4649      	mov	r1, r9
 80093dc:	f7f6 fec4 	bl	8000168 <__aeabi_dsub>
 80093e0:	4632      	mov	r2, r6
 80093e2:	463b      	mov	r3, r7
 80093e4:	f7f6 fec0 	bl	8000168 <__aeabi_dsub>
 80093e8:	a333      	add	r3, pc, #204	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x2f8>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	4606      	mov	r6, r0
 80093f0:	460f      	mov	r7, r1
 80093f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f6:	f7f7 f86f 	bl	80004d8 <__aeabi_dmul>
 80093fa:	4632      	mov	r2, r6
 80093fc:	463b      	mov	r3, r7
 80093fe:	f7f6 feb3 	bl	8000168 <__aeabi_dsub>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4606      	mov	r6, r0
 8009408:	460f      	mov	r7, r1
 800940a:	4650      	mov	r0, sl
 800940c:	4659      	mov	r1, fp
 800940e:	f7f6 feab 	bl	8000168 <__aeabi_dsub>
 8009412:	9a05      	ldr	r2, [sp, #20]
 8009414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b31      	cmp	r3, #49	; 0x31
 800941c:	dc06      	bgt.n	800942c <__ieee754_rem_pio2+0x26c>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	46d0      	mov	r8, sl
 8009424:	46d9      	mov	r9, fp
 8009426:	e9c4 2300 	strd	r2, r3, [r4]
 800942a:	e7a6      	b.n	800937a <__ieee754_rem_pio2+0x1ba>
 800942c:	a326      	add	r3, pc, #152	; (adr r3, 80094c8 <__ieee754_rem_pio2+0x308>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009436:	f7f7 f84f 	bl	80004d8 <__aeabi_dmul>
 800943a:	4606      	mov	r6, r0
 800943c:	460f      	mov	r7, r1
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	f7f6 fe8f 	bl	8000168 <__aeabi_dsub>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4680      	mov	r8, r0
 8009450:	4689      	mov	r9, r1
 8009452:	4650      	mov	r0, sl
 8009454:	4659      	mov	r1, fp
 8009456:	f7f6 fe87 	bl	8000168 <__aeabi_dsub>
 800945a:	4632      	mov	r2, r6
 800945c:	463b      	mov	r3, r7
 800945e:	f7f6 fe83 	bl	8000168 <__aeabi_dsub>
 8009462:	a31b      	add	r3, pc, #108	; (adr r3, 80094d0 <__ieee754_rem_pio2+0x310>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	4606      	mov	r6, r0
 800946a:	460f      	mov	r7, r1
 800946c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009470:	f7f7 f832 	bl	80004d8 <__aeabi_dmul>
 8009474:	4632      	mov	r2, r6
 8009476:	463b      	mov	r3, r7
 8009478:	f7f6 fe76 	bl	8000168 <__aeabi_dsub>
 800947c:	4606      	mov	r6, r0
 800947e:	460f      	mov	r7, r1
 8009480:	e75e      	b.n	8009340 <__ieee754_rem_pio2+0x180>
 8009482:	4a1b      	ldr	r2, [pc, #108]	; (80094f0 <__ieee754_rem_pio2+0x330>)
 8009484:	4592      	cmp	sl, r2
 8009486:	dd35      	ble.n	80094f4 <__ieee754_rem_pio2+0x334>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	f7f6 fe6c 	bl	8000168 <__aeabi_dsub>
 8009490:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009494:	e9c4 0100 	strd	r0, r1, [r4]
 8009498:	e6a2      	b.n	80091e0 <__ieee754_rem_pio2+0x20>
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w
 80094a0:	54400000 	.word	0x54400000
 80094a4:	3ff921fb 	.word	0x3ff921fb
 80094a8:	1a626331 	.word	0x1a626331
 80094ac:	3dd0b461 	.word	0x3dd0b461
 80094b0:	1a600000 	.word	0x1a600000
 80094b4:	3dd0b461 	.word	0x3dd0b461
 80094b8:	2e037073 	.word	0x2e037073
 80094bc:	3ba3198a 	.word	0x3ba3198a
 80094c0:	6dc9c883 	.word	0x6dc9c883
 80094c4:	3fe45f30 	.word	0x3fe45f30
 80094c8:	2e000000 	.word	0x2e000000
 80094cc:	3ba3198a 	.word	0x3ba3198a
 80094d0:	252049c1 	.word	0x252049c1
 80094d4:	397b839a 	.word	0x397b839a
 80094d8:	3fe921fb 	.word	0x3fe921fb
 80094dc:	4002d97b 	.word	0x4002d97b
 80094e0:	3ff921fb 	.word	0x3ff921fb
 80094e4:	413921fb 	.word	0x413921fb
 80094e8:	3fe00000 	.word	0x3fe00000
 80094ec:	0800a94c 	.word	0x0800a94c
 80094f0:	7fefffff 	.word	0x7fefffff
 80094f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80094f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80094fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009500:	460f      	mov	r7, r1
 8009502:	4606      	mov	r6, r0
 8009504:	f7f7 fa98 	bl	8000a38 <__aeabi_d2iz>
 8009508:	f7f6 ff7c 	bl	8000404 <__aeabi_i2d>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4630      	mov	r0, r6
 8009512:	4639      	mov	r1, r7
 8009514:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009518:	f7f6 fe26 	bl	8000168 <__aeabi_dsub>
 800951c:	2200      	movs	r2, #0
 800951e:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <__ieee754_rem_pio2+0x3d8>)
 8009520:	f7f6 ffda 	bl	80004d8 <__aeabi_dmul>
 8009524:	460f      	mov	r7, r1
 8009526:	4606      	mov	r6, r0
 8009528:	f7f7 fa86 	bl	8000a38 <__aeabi_d2iz>
 800952c:	f7f6 ff6a 	bl	8000404 <__aeabi_i2d>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4630      	mov	r0, r6
 8009536:	4639      	mov	r1, r7
 8009538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800953c:	f7f6 fe14 	bl	8000168 <__aeabi_dsub>
 8009540:	2200      	movs	r2, #0
 8009542:	4b15      	ldr	r3, [pc, #84]	; (8009598 <__ieee754_rem_pio2+0x3d8>)
 8009544:	f7f6 ffc8 	bl	80004d8 <__aeabi_dmul>
 8009548:	f04f 0803 	mov.w	r8, #3
 800954c:	2600      	movs	r6, #0
 800954e:	2700      	movs	r7, #0
 8009550:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009554:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009558:	4632      	mov	r2, r6
 800955a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800955e:	463b      	mov	r3, r7
 8009560:	46c2      	mov	sl, r8
 8009562:	f108 38ff 	add.w	r8, r8, #4294967295
 8009566:	f7f7 fa1f 	bl	80009a8 <__aeabi_dcmpeq>
 800956a:	2800      	cmp	r0, #0
 800956c:	d1f4      	bne.n	8009558 <__ieee754_rem_pio2+0x398>
 800956e:	4b0b      	ldr	r3, [pc, #44]	; (800959c <__ieee754_rem_pio2+0x3dc>)
 8009570:	462a      	mov	r2, r5
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	2302      	movs	r3, #2
 8009576:	4621      	mov	r1, r4
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	a806      	add	r0, sp, #24
 800957c:	4653      	mov	r3, sl
 800957e:	f000 f979 	bl	8009874 <__kernel_rem_pio2>
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	4605      	mov	r5, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	f6bf ae51 	bge.w	800922e <__ieee754_rem_pio2+0x6e>
 800958c:	6863      	ldr	r3, [r4, #4]
 800958e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009592:	6063      	str	r3, [r4, #4]
 8009594:	68e3      	ldr	r3, [r4, #12]
 8009596:	e707      	b.n	80093a8 <__ieee754_rem_pio2+0x1e8>
 8009598:	41700000 	.word	0x41700000
 800959c:	0800a9cc 	.word	0x0800a9cc

080095a0 <__ieee754_sqrt>:
 80095a0:	f8df c150 	ldr.w	ip, [pc, #336]	; 80096f4 <__ieee754_sqrt+0x154>
 80095a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	ea3c 0c01 	bics.w	ip, ip, r1
 80095ac:	460b      	mov	r3, r1
 80095ae:	4606      	mov	r6, r0
 80095b0:	460d      	mov	r5, r1
 80095b2:	460a      	mov	r2, r1
 80095b4:	4607      	mov	r7, r0
 80095b6:	4604      	mov	r4, r0
 80095b8:	d10e      	bne.n	80095d8 <__ieee754_sqrt+0x38>
 80095ba:	4602      	mov	r2, r0
 80095bc:	f7f6 ff8c 	bl	80004d8 <__aeabi_dmul>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4630      	mov	r0, r6
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f6 fdd0 	bl	800016c <__adddf3>
 80095cc:	4606      	mov	r6, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	4630      	mov	r0, r6
 80095d2:	4629      	mov	r1, r5
 80095d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d8:	2900      	cmp	r1, #0
 80095da:	dc0d      	bgt.n	80095f8 <__ieee754_sqrt+0x58>
 80095dc:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80095e0:	ea5c 0707 	orrs.w	r7, ip, r7
 80095e4:	d0f4      	beq.n	80095d0 <__ieee754_sqrt+0x30>
 80095e6:	b139      	cbz	r1, 80095f8 <__ieee754_sqrt+0x58>
 80095e8:	4602      	mov	r2, r0
 80095ea:	f7f6 fdbd 	bl	8000168 <__aeabi_dsub>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	f7f7 f89b 	bl	800072c <__aeabi_ddiv>
 80095f6:	e7e9      	b.n	80095cc <__ieee754_sqrt+0x2c>
 80095f8:	1512      	asrs	r2, r2, #20
 80095fa:	d074      	beq.n	80096e6 <__ieee754_sqrt+0x146>
 80095fc:	2000      	movs	r0, #0
 80095fe:	07d5      	lsls	r5, r2, #31
 8009600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009604:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8009608:	bf5e      	ittt	pl
 800960a:	0fe3      	lsrpl	r3, r4, #31
 800960c:	0064      	lslpl	r4, r4, #1
 800960e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8009612:	0fe3      	lsrs	r3, r4, #31
 8009614:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009618:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800961c:	2516      	movs	r5, #22
 800961e:	4601      	mov	r1, r0
 8009620:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009624:	1076      	asrs	r6, r6, #1
 8009626:	0064      	lsls	r4, r4, #1
 8009628:	188f      	adds	r7, r1, r2
 800962a:	429f      	cmp	r7, r3
 800962c:	bfde      	ittt	le
 800962e:	1bdb      	suble	r3, r3, r7
 8009630:	18b9      	addle	r1, r7, r2
 8009632:	1880      	addle	r0, r0, r2
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	3d01      	subs	r5, #1
 8009638:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800963c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009640:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009644:	d1f0      	bne.n	8009628 <__ieee754_sqrt+0x88>
 8009646:	462a      	mov	r2, r5
 8009648:	f04f 0e20 	mov.w	lr, #32
 800964c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009650:	428b      	cmp	r3, r1
 8009652:	eb07 0c05 	add.w	ip, r7, r5
 8009656:	dc02      	bgt.n	800965e <__ieee754_sqrt+0xbe>
 8009658:	d113      	bne.n	8009682 <__ieee754_sqrt+0xe2>
 800965a:	45a4      	cmp	ip, r4
 800965c:	d811      	bhi.n	8009682 <__ieee754_sqrt+0xe2>
 800965e:	f1bc 0f00 	cmp.w	ip, #0
 8009662:	eb0c 0507 	add.w	r5, ip, r7
 8009666:	da43      	bge.n	80096f0 <__ieee754_sqrt+0x150>
 8009668:	2d00      	cmp	r5, #0
 800966a:	db41      	blt.n	80096f0 <__ieee754_sqrt+0x150>
 800966c:	f101 0801 	add.w	r8, r1, #1
 8009670:	1a5b      	subs	r3, r3, r1
 8009672:	4641      	mov	r1, r8
 8009674:	45a4      	cmp	ip, r4
 8009676:	bf88      	it	hi
 8009678:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800967c:	eba4 040c 	sub.w	r4, r4, ip
 8009680:	443a      	add	r2, r7
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	f1be 0e01 	subs.w	lr, lr, #1
 8009688:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800968c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8009690:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009694:	d1dc      	bne.n	8009650 <__ieee754_sqrt+0xb0>
 8009696:	4323      	orrs	r3, r4
 8009698:	d006      	beq.n	80096a8 <__ieee754_sqrt+0x108>
 800969a:	1c54      	adds	r4, r2, #1
 800969c:	bf0b      	itete	eq
 800969e:	4672      	moveq	r2, lr
 80096a0:	3201      	addne	r2, #1
 80096a2:	3001      	addeq	r0, #1
 80096a4:	f022 0201 	bicne.w	r2, r2, #1
 80096a8:	1043      	asrs	r3, r0, #1
 80096aa:	07c1      	lsls	r1, r0, #31
 80096ac:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80096b0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80096b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80096b8:	bf48      	it	mi
 80096ba:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80096be:	4610      	mov	r0, r2
 80096c0:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80096c4:	e782      	b.n	80095cc <__ieee754_sqrt+0x2c>
 80096c6:	0ae3      	lsrs	r3, r4, #11
 80096c8:	3915      	subs	r1, #21
 80096ca:	0564      	lsls	r4, r4, #21
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d0fa      	beq.n	80096c6 <__ieee754_sqrt+0x126>
 80096d0:	02de      	lsls	r6, r3, #11
 80096d2:	d50a      	bpl.n	80096ea <__ieee754_sqrt+0x14a>
 80096d4:	f1c2 0020 	rsb	r0, r2, #32
 80096d8:	fa24 f000 	lsr.w	r0, r4, r0
 80096dc:	1e55      	subs	r5, r2, #1
 80096de:	4094      	lsls	r4, r2
 80096e0:	4303      	orrs	r3, r0
 80096e2:	1b4a      	subs	r2, r1, r5
 80096e4:	e78a      	b.n	80095fc <__ieee754_sqrt+0x5c>
 80096e6:	4611      	mov	r1, r2
 80096e8:	e7f0      	b.n	80096cc <__ieee754_sqrt+0x12c>
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	3201      	adds	r2, #1
 80096ee:	e7ef      	b.n	80096d0 <__ieee754_sqrt+0x130>
 80096f0:	4688      	mov	r8, r1
 80096f2:	e7bd      	b.n	8009670 <__ieee754_sqrt+0xd0>
 80096f4:	7ff00000 	.word	0x7ff00000

080096f8 <__kernel_cos>:
 80096f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009700:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009704:	4680      	mov	r8, r0
 8009706:	460f      	mov	r7, r1
 8009708:	e9cd 2300 	strd	r2, r3, [sp]
 800970c:	da04      	bge.n	8009718 <__kernel_cos+0x20>
 800970e:	f7f7 f993 	bl	8000a38 <__aeabi_d2iz>
 8009712:	2800      	cmp	r0, #0
 8009714:	f000 8086 	beq.w	8009824 <__kernel_cos+0x12c>
 8009718:	4642      	mov	r2, r8
 800971a:	463b      	mov	r3, r7
 800971c:	4640      	mov	r0, r8
 800971e:	4639      	mov	r1, r7
 8009720:	f7f6 feda 	bl	80004d8 <__aeabi_dmul>
 8009724:	2200      	movs	r2, #0
 8009726:	4b4e      	ldr	r3, [pc, #312]	; (8009860 <__kernel_cos+0x168>)
 8009728:	4604      	mov	r4, r0
 800972a:	460d      	mov	r5, r1
 800972c:	f7f6 fed4 	bl	80004d8 <__aeabi_dmul>
 8009730:	a33f      	add	r3, pc, #252	; (adr r3, 8009830 <__kernel_cos+0x138>)
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	4682      	mov	sl, r0
 8009738:	468b      	mov	fp, r1
 800973a:	4620      	mov	r0, r4
 800973c:	4629      	mov	r1, r5
 800973e:	f7f6 fecb 	bl	80004d8 <__aeabi_dmul>
 8009742:	a33d      	add	r3, pc, #244	; (adr r3, 8009838 <__kernel_cos+0x140>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f7f6 fd10 	bl	800016c <__adddf3>
 800974c:	4622      	mov	r2, r4
 800974e:	462b      	mov	r3, r5
 8009750:	f7f6 fec2 	bl	80004d8 <__aeabi_dmul>
 8009754:	a33a      	add	r3, pc, #232	; (adr r3, 8009840 <__kernel_cos+0x148>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 fd05 	bl	8000168 <__aeabi_dsub>
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	f7f6 feb9 	bl	80004d8 <__aeabi_dmul>
 8009766:	a338      	add	r3, pc, #224	; (adr r3, 8009848 <__kernel_cos+0x150>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 fcfe 	bl	800016c <__adddf3>
 8009770:	4622      	mov	r2, r4
 8009772:	462b      	mov	r3, r5
 8009774:	f7f6 feb0 	bl	80004d8 <__aeabi_dmul>
 8009778:	a335      	add	r3, pc, #212	; (adr r3, 8009850 <__kernel_cos+0x158>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f6 fcf3 	bl	8000168 <__aeabi_dsub>
 8009782:	4622      	mov	r2, r4
 8009784:	462b      	mov	r3, r5
 8009786:	f7f6 fea7 	bl	80004d8 <__aeabi_dmul>
 800978a:	a333      	add	r3, pc, #204	; (adr r3, 8009858 <__kernel_cos+0x160>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f6 fcec 	bl	800016c <__adddf3>
 8009794:	4622      	mov	r2, r4
 8009796:	462b      	mov	r3, r5
 8009798:	f7f6 fe9e 	bl	80004d8 <__aeabi_dmul>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f6 fe9a 	bl	80004d8 <__aeabi_dmul>
 80097a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097a8:	4604      	mov	r4, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	4640      	mov	r0, r8
 80097ae:	4639      	mov	r1, r7
 80097b0:	f7f6 fe92 	bl	80004d8 <__aeabi_dmul>
 80097b4:	460b      	mov	r3, r1
 80097b6:	4602      	mov	r2, r0
 80097b8:	4629      	mov	r1, r5
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7f6 fcd4 	bl	8000168 <__aeabi_dsub>
 80097c0:	4b28      	ldr	r3, [pc, #160]	; (8009864 <__kernel_cos+0x16c>)
 80097c2:	4680      	mov	r8, r0
 80097c4:	429e      	cmp	r6, r3
 80097c6:	4689      	mov	r9, r1
 80097c8:	dc0e      	bgt.n	80097e8 <__kernel_cos+0xf0>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4650      	mov	r0, sl
 80097d0:	4659      	mov	r1, fp
 80097d2:	f7f6 fcc9 	bl	8000168 <__aeabi_dsub>
 80097d6:	4602      	mov	r2, r0
 80097d8:	2000      	movs	r0, #0
 80097da:	460b      	mov	r3, r1
 80097dc:	4922      	ldr	r1, [pc, #136]	; (8009868 <__kernel_cos+0x170>)
 80097de:	f7f6 fcc3 	bl	8000168 <__aeabi_dsub>
 80097e2:	b003      	add	sp, #12
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	2400      	movs	r4, #0
 80097ea:	4b20      	ldr	r3, [pc, #128]	; (800986c <__kernel_cos+0x174>)
 80097ec:	4622      	mov	r2, r4
 80097ee:	429e      	cmp	r6, r3
 80097f0:	bfcc      	ite	gt
 80097f2:	4d1f      	ldrgt	r5, [pc, #124]	; (8009870 <__kernel_cos+0x178>)
 80097f4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80097f8:	462b      	mov	r3, r5
 80097fa:	2000      	movs	r0, #0
 80097fc:	491a      	ldr	r1, [pc, #104]	; (8009868 <__kernel_cos+0x170>)
 80097fe:	f7f6 fcb3 	bl	8000168 <__aeabi_dsub>
 8009802:	4622      	mov	r2, r4
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	462b      	mov	r3, r5
 800980a:	4650      	mov	r0, sl
 800980c:	4659      	mov	r1, fp
 800980e:	f7f6 fcab 	bl	8000168 <__aeabi_dsub>
 8009812:	4642      	mov	r2, r8
 8009814:	464b      	mov	r3, r9
 8009816:	f7f6 fca7 	bl	8000168 <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4630      	mov	r0, r6
 8009820:	4639      	mov	r1, r7
 8009822:	e7dc      	b.n	80097de <__kernel_cos+0xe6>
 8009824:	2000      	movs	r0, #0
 8009826:	4910      	ldr	r1, [pc, #64]	; (8009868 <__kernel_cos+0x170>)
 8009828:	e7db      	b.n	80097e2 <__kernel_cos+0xea>
 800982a:	bf00      	nop
 800982c:	f3af 8000 	nop.w
 8009830:	be8838d4 	.word	0xbe8838d4
 8009834:	bda8fae9 	.word	0xbda8fae9
 8009838:	bdb4b1c4 	.word	0xbdb4b1c4
 800983c:	3e21ee9e 	.word	0x3e21ee9e
 8009840:	809c52ad 	.word	0x809c52ad
 8009844:	3e927e4f 	.word	0x3e927e4f
 8009848:	19cb1590 	.word	0x19cb1590
 800984c:	3efa01a0 	.word	0x3efa01a0
 8009850:	16c15177 	.word	0x16c15177
 8009854:	3f56c16c 	.word	0x3f56c16c
 8009858:	5555554c 	.word	0x5555554c
 800985c:	3fa55555 	.word	0x3fa55555
 8009860:	3fe00000 	.word	0x3fe00000
 8009864:	3fd33332 	.word	0x3fd33332
 8009868:	3ff00000 	.word	0x3ff00000
 800986c:	3fe90000 	.word	0x3fe90000
 8009870:	3fd20000 	.word	0x3fd20000

08009874 <__kernel_rem_pio2>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	9101      	str	r1, [sp, #4]
 8009880:	4bc0      	ldr	r3, [pc, #768]	; (8009b84 <__kernel_rem_pio2+0x310>)
 8009882:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009884:	f112 0f14 	cmn.w	r2, #20
 8009888:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800988c:	bfa8      	it	ge
 800988e:	1ed4      	subge	r4, r2, #3
 8009890:	9304      	str	r3, [sp, #16]
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	bfb8      	it	lt
 8009896:	2400      	movlt	r4, #0
 8009898:	f103 33ff 	add.w	r3, r3, #4294967295
 800989c:	9306      	str	r3, [sp, #24]
 800989e:	bfa4      	itt	ge
 80098a0:	2318      	movge	r3, #24
 80098a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80098a6:	f06f 0317 	mvn.w	r3, #23
 80098aa:	fb04 3303 	mla	r3, r4, r3, r3
 80098ae:	eb03 0a02 	add.w	sl, r3, r2
 80098b2:	9a06      	ldr	r2, [sp, #24]
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	1aa7      	subs	r7, r4, r2
 80098b8:	eb03 0802 	add.w	r8, r3, r2
 80098bc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80098be:	2500      	movs	r5, #0
 80098c0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80098c4:	2200      	movs	r2, #0
 80098c6:	2300      	movs	r3, #0
 80098c8:	9009      	str	r0, [sp, #36]	; 0x24
 80098ca:	ae20      	add	r6, sp, #128	; 0x80
 80098cc:	4545      	cmp	r5, r8
 80098ce:	dd19      	ble.n	8009904 <__kernel_rem_pio2+0x90>
 80098d0:	9b08      	ldr	r3, [sp, #32]
 80098d2:	aa20      	add	r2, sp, #128	; 0x80
 80098d4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80098d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80098dc:	f1c3 0301 	rsb	r3, r3, #1
 80098e0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80098e4:	9307      	str	r3, [sp, #28]
 80098e6:	9b07      	ldr	r3, [sp, #28]
 80098e8:	9a04      	ldr	r2, [sp, #16]
 80098ea:	4443      	add	r3, r8
 80098ec:	429a      	cmp	r2, r3
 80098ee:	db35      	blt.n	800995c <__kernel_rem_pio2+0xe8>
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	2200      	movs	r2, #0
 80098f4:	f1a3 0908 	sub.w	r9, r3, #8
 80098f8:	2300      	movs	r3, #0
 80098fa:	462f      	mov	r7, r5
 80098fc:	2600      	movs	r6, #0
 80098fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009902:	e01f      	b.n	8009944 <__kernel_rem_pio2+0xd0>
 8009904:	42ef      	cmn	r7, r5
 8009906:	d40b      	bmi.n	8009920 <__kernel_rem_pio2+0xac>
 8009908:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800990c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009910:	f7f6 fd78 	bl	8000404 <__aeabi_i2d>
 8009914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009918:	e8e6 0102 	strd	r0, r1, [r6], #8
 800991c:	3501      	adds	r5, #1
 800991e:	e7d5      	b.n	80098cc <__kernel_rem_pio2+0x58>
 8009920:	4610      	mov	r0, r2
 8009922:	4619      	mov	r1, r3
 8009924:	e7f8      	b.n	8009918 <__kernel_rem_pio2+0xa4>
 8009926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800992a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800992e:	f7f6 fdd3 	bl	80004d8 <__aeabi_dmul>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800993a:	f7f6 fc17 	bl	800016c <__adddf3>
 800993e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009942:	3601      	adds	r6, #1
 8009944:	9b06      	ldr	r3, [sp, #24]
 8009946:	3f08      	subs	r7, #8
 8009948:	429e      	cmp	r6, r3
 800994a:	ddec      	ble.n	8009926 <__kernel_rem_pio2+0xb2>
 800994c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009950:	3508      	adds	r5, #8
 8009952:	e8eb 2302 	strd	r2, r3, [fp], #8
 8009956:	f108 0801 	add.w	r8, r8, #1
 800995a:	e7c4      	b.n	80098e6 <__kernel_rem_pio2+0x72>
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	aa0c      	add	r2, sp, #48	; 0x30
 8009960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009964:	930b      	str	r3, [sp, #44]	; 0x2c
 8009966:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009968:	9f04      	ldr	r7, [sp, #16]
 800996a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800996e:	930a      	str	r3, [sp, #40]	; 0x28
 8009970:	463e      	mov	r6, r7
 8009972:	ab98      	add	r3, sp, #608	; 0x260
 8009974:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009978:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800997c:	f8cd b008 	str.w	fp, [sp, #8]
 8009980:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009984:	2e00      	cmp	r6, #0
 8009986:	dc71      	bgt.n	8009a6c <__kernel_rem_pio2+0x1f8>
 8009988:	4652      	mov	r2, sl
 800998a:	4620      	mov	r0, r4
 800998c:	4629      	mov	r1, r5
 800998e:	f000 fbf7 	bl	800a180 <scalbn>
 8009992:	2200      	movs	r2, #0
 8009994:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009998:	4604      	mov	r4, r0
 800999a:	460d      	mov	r5, r1
 800999c:	f7f6 fd9c 	bl	80004d8 <__aeabi_dmul>
 80099a0:	f000 fb6e 	bl	800a080 <floor>
 80099a4:	2200      	movs	r2, #0
 80099a6:	4b78      	ldr	r3, [pc, #480]	; (8009b88 <__kernel_rem_pio2+0x314>)
 80099a8:	f7f6 fd96 	bl	80004d8 <__aeabi_dmul>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4620      	mov	r0, r4
 80099b2:	4629      	mov	r1, r5
 80099b4:	f7f6 fbd8 	bl	8000168 <__aeabi_dsub>
 80099b8:	460d      	mov	r5, r1
 80099ba:	4604      	mov	r4, r0
 80099bc:	f7f7 f83c 	bl	8000a38 <__aeabi_d2iz>
 80099c0:	9007      	str	r0, [sp, #28]
 80099c2:	f7f6 fd1f 	bl	8000404 <__aeabi_i2d>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fbcb 	bl	8000168 <__aeabi_dsub>
 80099d2:	f1ba 0f00 	cmp.w	sl, #0
 80099d6:	4680      	mov	r8, r0
 80099d8:	4689      	mov	r9, r1
 80099da:	dd70      	ble.n	8009abe <__kernel_rem_pio2+0x24a>
 80099dc:	1e7a      	subs	r2, r7, #1
 80099de:	ab0c      	add	r3, sp, #48	; 0x30
 80099e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80099e4:	9c07      	ldr	r4, [sp, #28]
 80099e6:	f1ca 0118 	rsb	r1, sl, #24
 80099ea:	fa40 f301 	asr.w	r3, r0, r1
 80099ee:	441c      	add	r4, r3
 80099f0:	408b      	lsls	r3, r1
 80099f2:	1ac0      	subs	r0, r0, r3
 80099f4:	ab0c      	add	r3, sp, #48	; 0x30
 80099f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80099fa:	f1ca 0317 	rsb	r3, sl, #23
 80099fe:	9407      	str	r4, [sp, #28]
 8009a00:	fa40 f303 	asr.w	r3, r0, r3
 8009a04:	9302      	str	r3, [sp, #8]
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	dd66      	ble.n	8009ada <__kernel_rem_pio2+0x266>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009a12:	4614      	mov	r4, r2
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	3301      	adds	r3, #1
 8009a18:	9307      	str	r3, [sp, #28]
 8009a1a:	4297      	cmp	r7, r2
 8009a1c:	f300 809f 	bgt.w	8009b5e <__kernel_rem_pio2+0x2ea>
 8009a20:	f1ba 0f00 	cmp.w	sl, #0
 8009a24:	dd07      	ble.n	8009a36 <__kernel_rem_pio2+0x1c2>
 8009a26:	f1ba 0f01 	cmp.w	sl, #1
 8009a2a:	f000 80b9 	beq.w	8009ba0 <__kernel_rem_pio2+0x32c>
 8009a2e:	f1ba 0f02 	cmp.w	sl, #2
 8009a32:	f000 80bf 	beq.w	8009bb4 <__kernel_rem_pio2+0x340>
 8009a36:	9b02      	ldr	r3, [sp, #8]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d14e      	bne.n	8009ada <__kernel_rem_pio2+0x266>
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	464b      	mov	r3, r9
 8009a40:	2000      	movs	r0, #0
 8009a42:	4952      	ldr	r1, [pc, #328]	; (8009b8c <__kernel_rem_pio2+0x318>)
 8009a44:	f7f6 fb90 	bl	8000168 <__aeabi_dsub>
 8009a48:	4680      	mov	r8, r0
 8009a4a:	4689      	mov	r9, r1
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	d044      	beq.n	8009ada <__kernel_rem_pio2+0x266>
 8009a50:	4652      	mov	r2, sl
 8009a52:	2000      	movs	r0, #0
 8009a54:	494d      	ldr	r1, [pc, #308]	; (8009b8c <__kernel_rem_pio2+0x318>)
 8009a56:	f000 fb93 	bl	800a180 <scalbn>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4640      	mov	r0, r8
 8009a60:	4649      	mov	r1, r9
 8009a62:	f7f6 fb81 	bl	8000168 <__aeabi_dsub>
 8009a66:	4680      	mov	r8, r0
 8009a68:	4689      	mov	r9, r1
 8009a6a:	e036      	b.n	8009ada <__kernel_rem_pio2+0x266>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4b48      	ldr	r3, [pc, #288]	; (8009b90 <__kernel_rem_pio2+0x31c>)
 8009a70:	4620      	mov	r0, r4
 8009a72:	4629      	mov	r1, r5
 8009a74:	f7f6 fd30 	bl	80004d8 <__aeabi_dmul>
 8009a78:	f7f6 ffde 	bl	8000a38 <__aeabi_d2iz>
 8009a7c:	f7f6 fcc2 	bl	8000404 <__aeabi_i2d>
 8009a80:	2200      	movs	r2, #0
 8009a82:	4b44      	ldr	r3, [pc, #272]	; (8009b94 <__kernel_rem_pio2+0x320>)
 8009a84:	4680      	mov	r8, r0
 8009a86:	4689      	mov	r9, r1
 8009a88:	f7f6 fd26 	bl	80004d8 <__aeabi_dmul>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fb68 	bl	8000168 <__aeabi_dsub>
 8009a98:	f7f6 ffce 	bl	8000a38 <__aeabi_d2iz>
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	3e01      	subs	r6, #1
 8009aa0:	f843 0b04 	str.w	r0, [r3], #4
 8009aa4:	9302      	str	r3, [sp, #8]
 8009aa6:	ab70      	add	r3, sp, #448	; 0x1c0
 8009aa8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aac:	4640      	mov	r0, r8
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	f7f6 fb5a 	bl	800016c <__adddf3>
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	e762      	b.n	8009984 <__kernel_rem_pio2+0x110>
 8009abe:	d105      	bne.n	8009acc <__kernel_rem_pio2+0x258>
 8009ac0:	1e7b      	subs	r3, r7, #1
 8009ac2:	aa0c      	add	r2, sp, #48	; 0x30
 8009ac4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ac8:	15c3      	asrs	r3, r0, #23
 8009aca:	e79b      	b.n	8009a04 <__kernel_rem_pio2+0x190>
 8009acc:	2200      	movs	r2, #0
 8009ace:	4b32      	ldr	r3, [pc, #200]	; (8009b98 <__kernel_rem_pio2+0x324>)
 8009ad0:	f7f6 ff88 	bl	80009e4 <__aeabi_dcmpge>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d13f      	bne.n	8009b58 <__kernel_rem_pio2+0x2e4>
 8009ad8:	9002      	str	r0, [sp, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	f7f6 ff61 	bl	80009a8 <__aeabi_dcmpeq>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f000 80b5 	beq.w	8009c56 <__kernel_rem_pio2+0x3e2>
 8009aec:	1e7c      	subs	r4, r7, #1
 8009aee:	4623      	mov	r3, r4
 8009af0:	2200      	movs	r2, #0
 8009af2:	9904      	ldr	r1, [sp, #16]
 8009af4:	428b      	cmp	r3, r1
 8009af6:	da64      	bge.n	8009bc2 <__kernel_rem_pio2+0x34e>
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	d078      	beq.n	8009bee <__kernel_rem_pio2+0x37a>
 8009afc:	ab0c      	add	r3, sp, #48	; 0x30
 8009afe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009b02:	f1aa 0a18 	sub.w	sl, sl, #24
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 80a3 	beq.w	8009c52 <__kernel_rem_pio2+0x3de>
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	2000      	movs	r0, #0
 8009b10:	491e      	ldr	r1, [pc, #120]	; (8009b8c <__kernel_rem_pio2+0x318>)
 8009b12:	f000 fb35 	bl	800a180 <scalbn>
 8009b16:	46a2      	mov	sl, r4
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	f04f 0800 	mov.w	r8, #0
 8009b20:	00e3      	lsls	r3, r4, #3
 8009b22:	9306      	str	r3, [sp, #24]
 8009b24:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009b90 <__kernel_rem_pio2+0x31c>
 8009b28:	ab70      	add	r3, sp, #448	; 0x1c0
 8009b2a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009b2e:	f1ba 0f00 	cmp.w	sl, #0
 8009b32:	f280 80c6 	bge.w	8009cc2 <__kernel_rem_pio2+0x44e>
 8009b36:	4627      	mov	r7, r4
 8009b38:	f04f 0800 	mov.w	r8, #0
 8009b3c:	2f00      	cmp	r7, #0
 8009b3e:	f2c0 80f3 	blt.w	8009d28 <__kernel_rem_pio2+0x4b4>
 8009b42:	4b16      	ldr	r3, [pc, #88]	; (8009b9c <__kernel_rem_pio2+0x328>)
 8009b44:	f04f 0a00 	mov.w	sl, #0
 8009b48:	461d      	mov	r5, r3
 8009b4a:	ab70      	add	r3, sp, #448	; 0x1c0
 8009b4c:	f04f 0b00 	mov.w	fp, #0
 8009b50:	2600      	movs	r6, #0
 8009b52:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009b56:	e0d9      	b.n	8009d0c <__kernel_rem_pio2+0x498>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	9302      	str	r3, [sp, #8]
 8009b5c:	e756      	b.n	8009a0c <__kernel_rem_pio2+0x198>
 8009b5e:	f8db 3000 	ldr.w	r3, [fp]
 8009b62:	b954      	cbnz	r4, 8009b7a <__kernel_rem_pio2+0x306>
 8009b64:	b123      	cbz	r3, 8009b70 <__kernel_rem_pio2+0x2fc>
 8009b66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009b6a:	f8cb 3000 	str.w	r3, [fp]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	461c      	mov	r4, r3
 8009b72:	3201      	adds	r2, #1
 8009b74:	f10b 0b04 	add.w	fp, fp, #4
 8009b78:	e74f      	b.n	8009a1a <__kernel_rem_pio2+0x1a6>
 8009b7a:	1acb      	subs	r3, r1, r3
 8009b7c:	f8cb 3000 	str.w	r3, [fp]
 8009b80:	4623      	mov	r3, r4
 8009b82:	e7f5      	b.n	8009b70 <__kernel_rem_pio2+0x2fc>
 8009b84:	0800ab18 	.word	0x0800ab18
 8009b88:	40200000 	.word	0x40200000
 8009b8c:	3ff00000 	.word	0x3ff00000
 8009b90:	3e700000 	.word	0x3e700000
 8009b94:	41700000 	.word	0x41700000
 8009b98:	3fe00000 	.word	0x3fe00000
 8009b9c:	0800aad8 	.word	0x0800aad8
 8009ba0:	1e7a      	subs	r2, r7, #1
 8009ba2:	ab0c      	add	r3, sp, #48	; 0x30
 8009ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009bac:	a90c      	add	r1, sp, #48	; 0x30
 8009bae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009bb2:	e740      	b.n	8009a36 <__kernel_rem_pio2+0x1c2>
 8009bb4:	1e7a      	subs	r2, r7, #1
 8009bb6:	ab0c      	add	r3, sp, #48	; 0x30
 8009bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bbc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009bc0:	e7f4      	b.n	8009bac <__kernel_rem_pio2+0x338>
 8009bc2:	a90c      	add	r1, sp, #48	; 0x30
 8009bc4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	e791      	b.n	8009af2 <__kernel_rem_pio2+0x27e>
 8009bce:	3401      	adds	r4, #1
 8009bd0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	d0fa      	beq.n	8009bce <__kernel_rem_pio2+0x35a>
 8009bd8:	9b08      	ldr	r3, [sp, #32]
 8009bda:	1c7e      	adds	r6, r7, #1
 8009bdc:	18fd      	adds	r5, r7, r3
 8009bde:	ab20      	add	r3, sp, #128	; 0x80
 8009be0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009be4:	443c      	add	r4, r7
 8009be6:	42b4      	cmp	r4, r6
 8009be8:	da04      	bge.n	8009bf4 <__kernel_rem_pio2+0x380>
 8009bea:	4627      	mov	r7, r4
 8009bec:	e6c0      	b.n	8009970 <__kernel_rem_pio2+0xfc>
 8009bee:	2401      	movs	r4, #1
 8009bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bf2:	e7ed      	b.n	8009bd0 <__kernel_rem_pio2+0x35c>
 8009bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf6:	462f      	mov	r7, r5
 8009bf8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bfc:	f7f6 fc02 	bl	8000404 <__aeabi_i2d>
 8009c00:	f04f 0b00 	mov.w	fp, #0
 8009c04:	f04f 0800 	mov.w	r8, #0
 8009c08:	f04f 0900 	mov.w	r9, #0
 8009c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c0e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8009c12:	3b08      	subs	r3, #8
 8009c14:	9302      	str	r3, [sp, #8]
 8009c16:	9b06      	ldr	r3, [sp, #24]
 8009c18:	459b      	cmp	fp, r3
 8009c1a:	dd07      	ble.n	8009c2c <__kernel_rem_pio2+0x3b8>
 8009c1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8009c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c22:	463d      	mov	r5, r7
 8009c24:	e9c3 8900 	strd	r8, r9, [r3]
 8009c28:	3601      	adds	r6, #1
 8009c2a:	e7dc      	b.n	8009be6 <__kernel_rem_pio2+0x372>
 8009c2c:	9902      	ldr	r1, [sp, #8]
 8009c2e:	f10b 0b01 	add.w	fp, fp, #1
 8009c32:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009c36:	9102      	str	r1, [sp, #8]
 8009c38:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8009c3c:	f7f6 fc4c 	bl	80004d8 <__aeabi_dmul>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4640      	mov	r0, r8
 8009c46:	4649      	mov	r1, r9
 8009c48:	f7f6 fa90 	bl	800016c <__adddf3>
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	4689      	mov	r9, r1
 8009c50:	e7e1      	b.n	8009c16 <__kernel_rem_pio2+0x3a2>
 8009c52:	3c01      	subs	r4, #1
 8009c54:	e752      	b.n	8009afc <__kernel_rem_pio2+0x288>
 8009c56:	f1ca 0200 	rsb	r2, sl, #0
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f000 fa8f 	bl	800a180 <scalbn>
 8009c62:	2200      	movs	r2, #0
 8009c64:	4ba5      	ldr	r3, [pc, #660]	; (8009efc <__kernel_rem_pio2+0x688>)
 8009c66:	4604      	mov	r4, r0
 8009c68:	460d      	mov	r5, r1
 8009c6a:	f7f6 febb 	bl	80009e4 <__aeabi_dcmpge>
 8009c6e:	b1f8      	cbz	r0, 8009cb0 <__kernel_rem_pio2+0x43c>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4ba3      	ldr	r3, [pc, #652]	; (8009f00 <__kernel_rem_pio2+0x68c>)
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 fc2e 	bl	80004d8 <__aeabi_dmul>
 8009c7c:	f7f6 fedc 	bl	8000a38 <__aeabi_d2iz>
 8009c80:	4606      	mov	r6, r0
 8009c82:	f7f6 fbbf 	bl	8000404 <__aeabi_i2d>
 8009c86:	2200      	movs	r2, #0
 8009c88:	4b9c      	ldr	r3, [pc, #624]	; (8009efc <__kernel_rem_pio2+0x688>)
 8009c8a:	f7f6 fc25 	bl	80004d8 <__aeabi_dmul>
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4602      	mov	r2, r0
 8009c92:	4629      	mov	r1, r5
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7f6 fa67 	bl	8000168 <__aeabi_dsub>
 8009c9a:	f7f6 fecd 	bl	8000a38 <__aeabi_d2iz>
 8009c9e:	1c7c      	adds	r4, r7, #1
 8009ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8009ca2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009ca6:	f10a 0a18 	add.w	sl, sl, #24
 8009caa:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009cae:	e72d      	b.n	8009b0c <__kernel_rem_pio2+0x298>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7f6 fec0 	bl	8000a38 <__aeabi_d2iz>
 8009cb8:	ab0c      	add	r3, sp, #48	; 0x30
 8009cba:	463c      	mov	r4, r7
 8009cbc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009cc0:	e724      	b.n	8009b0c <__kernel_rem_pio2+0x298>
 8009cc2:	ab0c      	add	r3, sp, #48	; 0x30
 8009cc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009cc8:	f7f6 fb9c 	bl	8000404 <__aeabi_i2d>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	f7f6 fc02 	bl	80004d8 <__aeabi_dmul>
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	e86b 0102 	strd	r0, r1, [fp], #-8
 8009cda:	464b      	mov	r3, r9
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fbfa 	bl	80004d8 <__aeabi_dmul>
 8009ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ce8:	4606      	mov	r6, r0
 8009cea:	460f      	mov	r7, r1
 8009cec:	e71f      	b.n	8009b2e <__kernel_rem_pio2+0x2ba>
 8009cee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009cf2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009cf6:	f7f6 fbef 	bl	80004d8 <__aeabi_dmul>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4650      	mov	r0, sl
 8009d00:	4659      	mov	r1, fp
 8009d02:	f7f6 fa33 	bl	800016c <__adddf3>
 8009d06:	4682      	mov	sl, r0
 8009d08:	468b      	mov	fp, r1
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	9b04      	ldr	r3, [sp, #16]
 8009d0e:	429e      	cmp	r6, r3
 8009d10:	dc01      	bgt.n	8009d16 <__kernel_rem_pio2+0x4a2>
 8009d12:	45b0      	cmp	r8, r6
 8009d14:	daeb      	bge.n	8009cee <__kernel_rem_pio2+0x47a>
 8009d16:	ab48      	add	r3, sp, #288	; 0x120
 8009d18:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d1c:	e9c3 ab00 	strd	sl, fp, [r3]
 8009d20:	3f01      	subs	r7, #1
 8009d22:	f108 0801 	add.w	r8, r8, #1
 8009d26:	e709      	b.n	8009b3c <__kernel_rem_pio2+0x2c8>
 8009d28:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	dc09      	bgt.n	8009d42 <__kernel_rem_pio2+0x4ce>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dc34      	bgt.n	8009d9c <__kernel_rem_pio2+0x528>
 8009d32:	d05e      	beq.n	8009df2 <__kernel_rem_pio2+0x57e>
 8009d34:	9b07      	ldr	r3, [sp, #28]
 8009d36:	f003 0007 	and.w	r0, r3, #7
 8009d3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d42:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d1f5      	bne.n	8009d34 <__kernel_rem_pio2+0x4c0>
 8009d48:	9a06      	ldr	r2, [sp, #24]
 8009d4a:	ab48      	add	r3, sp, #288	; 0x120
 8009d4c:	441a      	add	r2, r3
 8009d4e:	4615      	mov	r5, r2
 8009d50:	4692      	mov	sl, r2
 8009d52:	46a3      	mov	fp, r4
 8009d54:	f1bb 0f00 	cmp.w	fp, #0
 8009d58:	dc7a      	bgt.n	8009e50 <__kernel_rem_pio2+0x5dc>
 8009d5a:	46aa      	mov	sl, r5
 8009d5c:	46a3      	mov	fp, r4
 8009d5e:	f1bb 0f01 	cmp.w	fp, #1
 8009d62:	f300 8094 	bgt.w	8009e8e <__kernel_rem_pio2+0x61a>
 8009d66:	2700      	movs	r7, #0
 8009d68:	463e      	mov	r6, r7
 8009d6a:	2c01      	cmp	r4, #1
 8009d6c:	f300 80ae 	bgt.w	8009ecc <__kernel_rem_pio2+0x658>
 8009d70:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009d74:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009d78:	9b02      	ldr	r3, [sp, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 80b0 	bne.w	8009ee0 <__kernel_rem_pio2+0x66c>
 8009d80:	4603      	mov	r3, r0
 8009d82:	462a      	mov	r2, r5
 8009d84:	9801      	ldr	r0, [sp, #4]
 8009d86:	e9c0 2300 	strd	r2, r3, [r0]
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009d92:	463a      	mov	r2, r7
 8009d94:	4633      	mov	r3, r6
 8009d96:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009d9a:	e7cb      	b.n	8009d34 <__kernel_rem_pio2+0x4c0>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	9a06      	ldr	r2, [sp, #24]
 8009da0:	ab48      	add	r3, sp, #288	; 0x120
 8009da2:	441a      	add	r2, r3
 8009da4:	4615      	mov	r5, r2
 8009da6:	46a0      	mov	r8, r4
 8009da8:	4601      	mov	r1, r0
 8009daa:	f1b8 0f00 	cmp.w	r8, #0
 8009dae:	da3c      	bge.n	8009e2a <__kernel_rem_pio2+0x5b6>
 8009db0:	9b02      	ldr	r3, [sp, #8]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d040      	beq.n	8009e38 <__kernel_rem_pio2+0x5c4>
 8009db6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009dba:	4602      	mov	r2, r0
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	9d01      	ldr	r5, [sp, #4]
 8009dc0:	2601      	movs	r6, #1
 8009dc2:	e9c5 2300 	strd	r2, r3, [r5]
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009dcc:	f7f6 f9cc 	bl	8000168 <__aeabi_dsub>
 8009dd0:	4684      	mov	ip, r0
 8009dd2:	460f      	mov	r7, r1
 8009dd4:	ad48      	add	r5, sp, #288	; 0x120
 8009dd6:	42b4      	cmp	r4, r6
 8009dd8:	f105 0508 	add.w	r5, r5, #8
 8009ddc:	da2e      	bge.n	8009e3c <__kernel_rem_pio2+0x5c8>
 8009dde:	9b02      	ldr	r3, [sp, #8]
 8009de0:	b10b      	cbz	r3, 8009de6 <__kernel_rem_pio2+0x572>
 8009de2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009de6:	4662      	mov	r2, ip
 8009de8:	463b      	mov	r3, r7
 8009dea:	9901      	ldr	r1, [sp, #4]
 8009dec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009df0:	e7a0      	b.n	8009d34 <__kernel_rem_pio2+0x4c0>
 8009df2:	9a06      	ldr	r2, [sp, #24]
 8009df4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009df6:	ab48      	add	r3, sp, #288	; 0x120
 8009df8:	441a      	add	r2, r3
 8009dfa:	4615      	mov	r5, r2
 8009dfc:	4637      	mov	r7, r6
 8009dfe:	2c00      	cmp	r4, #0
 8009e00:	da09      	bge.n	8009e16 <__kernel_rem_pio2+0x5a2>
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	b10b      	cbz	r3, 8009e0a <__kernel_rem_pio2+0x596>
 8009e06:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009e0a:	4632      	mov	r2, r6
 8009e0c:	463b      	mov	r3, r7
 8009e0e:	9901      	ldr	r1, [sp, #4]
 8009e10:	e9c1 2300 	strd	r2, r3, [r1]
 8009e14:	e78e      	b.n	8009d34 <__kernel_rem_pio2+0x4c0>
 8009e16:	4630      	mov	r0, r6
 8009e18:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 f9a5 	bl	800016c <__adddf3>
 8009e22:	3c01      	subs	r4, #1
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	e7e9      	b.n	8009dfe <__kernel_rem_pio2+0x58a>
 8009e2a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009e2e:	f7f6 f99d 	bl	800016c <__adddf3>
 8009e32:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e36:	e7b8      	b.n	8009daa <__kernel_rem_pio2+0x536>
 8009e38:	460d      	mov	r5, r1
 8009e3a:	e7be      	b.n	8009dba <__kernel_rem_pio2+0x546>
 8009e3c:	4660      	mov	r0, ip
 8009e3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 f992 	bl	800016c <__adddf3>
 8009e48:	3601      	adds	r6, #1
 8009e4a:	4684      	mov	ip, r0
 8009e4c:	460f      	mov	r7, r1
 8009e4e:	e7c2      	b.n	8009dd6 <__kernel_rem_pio2+0x562>
 8009e50:	e9da 6700 	ldrd	r6, r7, [sl]
 8009e54:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	4649      	mov	r1, r9
 8009e60:	f7f6 f984 	bl	800016c <__adddf3>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	4649      	mov	r1, r9
 8009e70:	f7f6 f97a 	bl	8000168 <__aeabi_dsub>
 8009e74:	4632      	mov	r2, r6
 8009e76:	463b      	mov	r3, r7
 8009e78:	f7f6 f978 	bl	800016c <__adddf3>
 8009e7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e80:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009e84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e88:	e9ca 2300 	strd	r2, r3, [sl]
 8009e8c:	e762      	b.n	8009d54 <__kernel_rem_pio2+0x4e0>
 8009e8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e92:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009e96:	4642      	mov	r2, r8
 8009e98:	464b      	mov	r3, r9
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	f7f6 f965 	bl	800016c <__adddf3>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 f95b 	bl	8000168 <__aeabi_dsub>
 8009eb2:	4642      	mov	r2, r8
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	f7f6 f959 	bl	800016c <__adddf3>
 8009eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ebe:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009ec2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ec6:	e9ca 2300 	strd	r2, r3, [sl]
 8009eca:	e748      	b.n	8009d5e <__kernel_rem_pio2+0x4ea>
 8009ecc:	4638      	mov	r0, r7
 8009ece:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	f7f6 f94a 	bl	800016c <__adddf3>
 8009ed8:	3c01      	subs	r4, #1
 8009eda:	4607      	mov	r7, r0
 8009edc:	460e      	mov	r6, r1
 8009ede:	e744      	b.n	8009d6a <__kernel_rem_pio2+0x4f6>
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009ee6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009eea:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009eee:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009ef2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009ef6:	601d      	str	r5, [r3, #0]
 8009ef8:	615e      	str	r6, [r3, #20]
 8009efa:	e71b      	b.n	8009d34 <__kernel_rem_pio2+0x4c0>
 8009efc:	41700000 	.word	0x41700000
 8009f00:	3e700000 	.word	0x3e700000
 8009f04:	00000000 	.word	0x00000000

08009f08 <__kernel_sin>:
 8009f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f16:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009f1a:	4682      	mov	sl, r0
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009f20:	da03      	bge.n	8009f2a <__kernel_sin+0x22>
 8009f22:	f7f6 fd89 	bl	8000a38 <__aeabi_d2iz>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d050      	beq.n	8009fcc <__kernel_sin+0xc4>
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	4623      	mov	r3, r4
 8009f2e:	4650      	mov	r0, sl
 8009f30:	4621      	mov	r1, r4
 8009f32:	f7f6 fad1 	bl	80004d8 <__aeabi_dmul>
 8009f36:	4606      	mov	r6, r0
 8009f38:	460f      	mov	r7, r1
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4650      	mov	r0, sl
 8009f40:	4621      	mov	r1, r4
 8009f42:	f7f6 fac9 	bl	80004d8 <__aeabi_dmul>
 8009f46:	a33e      	add	r3, pc, #248	; (adr r3, 800a040 <__kernel_sin+0x138>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4689      	mov	r9, r1
 8009f50:	4630      	mov	r0, r6
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fac0 	bl	80004d8 <__aeabi_dmul>
 8009f58:	a33b      	add	r3, pc, #236	; (adr r3, 800a048 <__kernel_sin+0x140>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7f6 f903 	bl	8000168 <__aeabi_dsub>
 8009f62:	4632      	mov	r2, r6
 8009f64:	463b      	mov	r3, r7
 8009f66:	f7f6 fab7 	bl	80004d8 <__aeabi_dmul>
 8009f6a:	a339      	add	r3, pc, #228	; (adr r3, 800a050 <__kernel_sin+0x148>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 f8fc 	bl	800016c <__adddf3>
 8009f74:	4632      	mov	r2, r6
 8009f76:	463b      	mov	r3, r7
 8009f78:	f7f6 faae 	bl	80004d8 <__aeabi_dmul>
 8009f7c:	a336      	add	r3, pc, #216	; (adr r3, 800a058 <__kernel_sin+0x150>)
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f7f6 f8f1 	bl	8000168 <__aeabi_dsub>
 8009f86:	4632      	mov	r2, r6
 8009f88:	463b      	mov	r3, r7
 8009f8a:	f7f6 faa5 	bl	80004d8 <__aeabi_dmul>
 8009f8e:	a334      	add	r3, pc, #208	; (adr r3, 800a060 <__kernel_sin+0x158>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f7f6 f8ea 	bl	800016c <__adddf3>
 8009f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f9c:	b9dd      	cbnz	r5, 8009fd6 <__kernel_sin+0xce>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	f7f6 fa97 	bl	80004d8 <__aeabi_dmul>
 8009faa:	a32f      	add	r3, pc, #188	; (adr r3, 800a068 <__kernel_sin+0x160>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 f8da 	bl	8000168 <__aeabi_dsub>
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	f7f6 fa8e 	bl	80004d8 <__aeabi_dmul>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	f7f6 f8d2 	bl	800016c <__adddf3>
 8009fc8:	4682      	mov	sl, r0
 8009fca:	460c      	mov	r4, r1
 8009fcc:	4650      	mov	r0, sl
 8009fce:	4621      	mov	r1, r4
 8009fd0:	b006      	add	sp, #24
 8009fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fdc:	4b24      	ldr	r3, [pc, #144]	; (800a070 <__kernel_sin+0x168>)
 8009fde:	f7f6 fa7b 	bl	80004d8 <__aeabi_dmul>
 8009fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fea:	4640      	mov	r0, r8
 8009fec:	4649      	mov	r1, r9
 8009fee:	f7f6 fa73 	bl	80004d8 <__aeabi_dmul>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ffa:	f7f6 f8b5 	bl	8000168 <__aeabi_dsub>
 8009ffe:	4632      	mov	r2, r6
 800a000:	463b      	mov	r3, r7
 800a002:	f7f6 fa69 	bl	80004d8 <__aeabi_dmul>
 800a006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a00a:	f7f6 f8ad 	bl	8000168 <__aeabi_dsub>
 800a00e:	a316      	add	r3, pc, #88	; (adr r3, 800a068 <__kernel_sin+0x160>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 fa5c 	bl	80004d8 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 f8a0 	bl	800016c <__adddf3>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4650      	mov	r0, sl
 800a032:	4621      	mov	r1, r4
 800a034:	f7f6 f898 	bl	8000168 <__aeabi_dsub>
 800a038:	e7c6      	b.n	8009fc8 <__kernel_sin+0xc0>
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w
 800a040:	5acfd57c 	.word	0x5acfd57c
 800a044:	3de5d93a 	.word	0x3de5d93a
 800a048:	8a2b9ceb 	.word	0x8a2b9ceb
 800a04c:	3e5ae5e6 	.word	0x3e5ae5e6
 800a050:	57b1fe7d 	.word	0x57b1fe7d
 800a054:	3ec71de3 	.word	0x3ec71de3
 800a058:	19c161d5 	.word	0x19c161d5
 800a05c:	3f2a01a0 	.word	0x3f2a01a0
 800a060:	1110f8a6 	.word	0x1110f8a6
 800a064:	3f811111 	.word	0x3f811111
 800a068:	55555549 	.word	0x55555549
 800a06c:	3fc55555 	.word	0x3fc55555
 800a070:	3fe00000 	.word	0x3fe00000

0800a074 <fabs>:
 800a074:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a078:	4770      	bx	lr
 800a07a:	0000      	movs	r0, r0
 800a07c:	0000      	movs	r0, r0
	...

0800a080 <floor>:
 800a080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a084:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a088:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a08c:	2e13      	cmp	r6, #19
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4607      	mov	r7, r0
 800a094:	460c      	mov	r4, r1
 800a096:	4605      	mov	r5, r0
 800a098:	dc34      	bgt.n	800a104 <floor+0x84>
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	da15      	bge.n	800a0ca <floor+0x4a>
 800a09e:	a334      	add	r3, pc, #208	; (adr r3, 800a170 <floor+0xf0>)
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	f7f6 f862 	bl	800016c <__adddf3>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f7f6 fca4 	bl	80009f8 <__aeabi_dcmpgt>
 800a0b0:	b140      	cbz	r0, 800a0c4 <floor+0x44>
 800a0b2:	2c00      	cmp	r4, #0
 800a0b4:	da59      	bge.n	800a16a <floor+0xea>
 800a0b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a0ba:	ea57 0503 	orrs.w	r5, r7, r3
 800a0be:	d001      	beq.n	800a0c4 <floor+0x44>
 800a0c0:	2500      	movs	r5, #0
 800a0c2:	4c2d      	ldr	r4, [pc, #180]	; (800a178 <floor+0xf8>)
 800a0c4:	4623      	mov	r3, r4
 800a0c6:	462f      	mov	r7, r5
 800a0c8:	e025      	b.n	800a116 <floor+0x96>
 800a0ca:	4a2c      	ldr	r2, [pc, #176]	; (800a17c <floor+0xfc>)
 800a0cc:	fa42 f806 	asr.w	r8, r2, r6
 800a0d0:	ea01 0208 	and.w	r2, r1, r8
 800a0d4:	4302      	orrs	r2, r0
 800a0d6:	d01e      	beq.n	800a116 <floor+0x96>
 800a0d8:	a325      	add	r3, pc, #148	; (adr r3, 800a170 <floor+0xf0>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 f845 	bl	800016c <__adddf3>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f7f6 fc87 	bl	80009f8 <__aeabi_dcmpgt>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d0ea      	beq.n	800a0c4 <floor+0x44>
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	bfbe      	ittt	lt
 800a0f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a0f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a0fa:	19a4      	addlt	r4, r4, r6
 800a0fc:	2500      	movs	r5, #0
 800a0fe:	ea24 0408 	bic.w	r4, r4, r8
 800a102:	e7df      	b.n	800a0c4 <floor+0x44>
 800a104:	2e33      	cmp	r6, #51	; 0x33
 800a106:	dd0a      	ble.n	800a11e <floor+0x9e>
 800a108:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a10c:	d103      	bne.n	800a116 <floor+0x96>
 800a10e:	f7f6 f82d 	bl	800016c <__adddf3>
 800a112:	4607      	mov	r7, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4638      	mov	r0, r7
 800a118:	4619      	mov	r1, r3
 800a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11e:	f04f 32ff 	mov.w	r2, #4294967295
 800a122:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a126:	fa22 f808 	lsr.w	r8, r2, r8
 800a12a:	ea18 0f00 	tst.w	r8, r0
 800a12e:	d0f2      	beq.n	800a116 <floor+0x96>
 800a130:	a30f      	add	r3, pc, #60	; (adr r3, 800a170 <floor+0xf0>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f819 	bl	800016c <__adddf3>
 800a13a:	2200      	movs	r2, #0
 800a13c:	2300      	movs	r3, #0
 800a13e:	f7f6 fc5b 	bl	80009f8 <__aeabi_dcmpgt>
 800a142:	2800      	cmp	r0, #0
 800a144:	d0be      	beq.n	800a0c4 <floor+0x44>
 800a146:	2c00      	cmp	r4, #0
 800a148:	da02      	bge.n	800a150 <floor+0xd0>
 800a14a:	2e14      	cmp	r6, #20
 800a14c:	d103      	bne.n	800a156 <floor+0xd6>
 800a14e:	3401      	adds	r4, #1
 800a150:	ea25 0508 	bic.w	r5, r5, r8
 800a154:	e7b6      	b.n	800a0c4 <floor+0x44>
 800a156:	2301      	movs	r3, #1
 800a158:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a15c:	fa03 f606 	lsl.w	r6, r3, r6
 800a160:	4435      	add	r5, r6
 800a162:	42bd      	cmp	r5, r7
 800a164:	bf38      	it	cc
 800a166:	18e4      	addcc	r4, r4, r3
 800a168:	e7f2      	b.n	800a150 <floor+0xd0>
 800a16a:	2500      	movs	r5, #0
 800a16c:	462c      	mov	r4, r5
 800a16e:	e7a9      	b.n	800a0c4 <floor+0x44>
 800a170:	8800759c 	.word	0x8800759c
 800a174:	7e37e43c 	.word	0x7e37e43c
 800a178:	bff00000 	.word	0xbff00000
 800a17c:	000fffff 	.word	0x000fffff

0800a180 <scalbn>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	4617      	mov	r7, r2
 800a18c:	460b      	mov	r3, r1
 800a18e:	b996      	cbnz	r6, 800a1b6 <scalbn+0x36>
 800a190:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a194:	4303      	orrs	r3, r0
 800a196:	d039      	beq.n	800a20c <scalbn+0x8c>
 800a198:	4b35      	ldr	r3, [pc, #212]	; (800a270 <scalbn+0xf0>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	f7f6 f99c 	bl	80004d8 <__aeabi_dmul>
 800a1a0:	4b34      	ldr	r3, [pc, #208]	; (800a274 <scalbn+0xf4>)
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	429f      	cmp	r7, r3
 800a1a6:	460d      	mov	r5, r1
 800a1a8:	da0f      	bge.n	800a1ca <scalbn+0x4a>
 800a1aa:	a32d      	add	r3, pc, #180	; (adr r3, 800a260 <scalbn+0xe0>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f992 	bl	80004d8 <__aeabi_dmul>
 800a1b4:	e006      	b.n	800a1c4 <scalbn+0x44>
 800a1b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a1ba:	4296      	cmp	r6, r2
 800a1bc:	d10a      	bne.n	800a1d4 <scalbn+0x54>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	f7f5 ffd4 	bl	800016c <__adddf3>
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	e020      	b.n	800a20c <scalbn+0x8c>
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a1d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a1d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a1d8:	19b9      	adds	r1, r7, r6
 800a1da:	4291      	cmp	r1, r2
 800a1dc:	dd0e      	ble.n	800a1fc <scalbn+0x7c>
 800a1de:	a322      	add	r3, pc, #136	; (adr r3, 800a268 <scalbn+0xe8>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a1e8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a1ec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a1f0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a1f4:	4820      	ldr	r0, [pc, #128]	; (800a278 <scalbn+0xf8>)
 800a1f6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a1fa:	e7d9      	b.n	800a1b0 <scalbn+0x30>
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	dd08      	ble.n	800a212 <scalbn+0x92>
 800a200:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a208:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a212:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a216:	da16      	bge.n	800a246 <scalbn+0xc6>
 800a218:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a21c:	429f      	cmp	r7, r3
 800a21e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a222:	dd08      	ble.n	800a236 <scalbn+0xb6>
 800a224:	4c15      	ldr	r4, [pc, #84]	; (800a27c <scalbn+0xfc>)
 800a226:	4814      	ldr	r0, [pc, #80]	; (800a278 <scalbn+0xf8>)
 800a228:	f363 74df 	bfi	r4, r3, #31, #1
 800a22c:	a30e      	add	r3, pc, #56	; (adr r3, 800a268 <scalbn+0xe8>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	4621      	mov	r1, r4
 800a234:	e7bc      	b.n	800a1b0 <scalbn+0x30>
 800a236:	4c12      	ldr	r4, [pc, #72]	; (800a280 <scalbn+0x100>)
 800a238:	4812      	ldr	r0, [pc, #72]	; (800a284 <scalbn+0x104>)
 800a23a:	f363 74df 	bfi	r4, r3, #31, #1
 800a23e:	a308      	add	r3, pc, #32	; (adr r3, 800a260 <scalbn+0xe0>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	e7f5      	b.n	800a232 <scalbn+0xb2>
 800a246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a24a:	3136      	adds	r1, #54	; 0x36
 800a24c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a250:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a254:	4620      	mov	r0, r4
 800a256:	4629      	mov	r1, r5
 800a258:	2200      	movs	r2, #0
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <scalbn+0x108>)
 800a25c:	e7a8      	b.n	800a1b0 <scalbn+0x30>
 800a25e:	bf00      	nop
 800a260:	c2f8f359 	.word	0xc2f8f359
 800a264:	01a56e1f 	.word	0x01a56e1f
 800a268:	8800759c 	.word	0x8800759c
 800a26c:	7e37e43c 	.word	0x7e37e43c
 800a270:	43500000 	.word	0x43500000
 800a274:	ffff3cb0 	.word	0xffff3cb0
 800a278:	8800759c 	.word	0x8800759c
 800a27c:	7e37e43c 	.word	0x7e37e43c
 800a280:	01a56e1f 	.word	0x01a56e1f
 800a284:	c2f8f359 	.word	0xc2f8f359
 800a288:	3c900000 	.word	0x3c900000

0800a28c <_init>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr

0800a298 <_fini>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	bf00      	nop
 800a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29e:	bc08      	pop	{r3}
 800a2a0:	469e      	mov	lr, r3
 800a2a2:	4770      	bx	lr
