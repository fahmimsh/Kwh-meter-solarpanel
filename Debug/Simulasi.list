
Simulasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800a2e8  0800a2e8  0001a2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a93c  0800a93c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a93c  0800a93c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a93c  0800a93c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200001f4  0800ab38  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800ab38  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f09  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002603  00000000  00000000  00031126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00034798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ca5  00000000  00000000  00035700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001288c  00000000  00000000  0004f3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ab5  00000000  00000000  00061c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f56e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  000f573c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a2cc 	.word	0x0800a2cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a2cc 	.word	0x0800a2cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	460c      	mov	r4, r1
 8001114:	4605      	mov	r5, r0
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	2200      	movs	r2, #0
 800111c:	2300      	movs	r3, #0
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 030c 	orr.w	r3, r3, #12
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	f043 030c 	orr.w	r3, r3, #12
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	214e      	movs	r1, #78	; 0x4e
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <lcd_send_cmd+0x5c>)
 80011ce:	f002 ff2b 	bl	8004028 <HAL_I2C_Master_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200003cc 	.word	0x200003cc

080011e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 030d 	orr.w	r3, r3, #13
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0309 	orr.w	r3, r3, #9
 8001208:	b2db      	uxtb	r3, r3
 800120a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	f043 030d 	orr.w	r3, r3, #13
 8001212:	b2db      	uxtb	r3, r3
 8001214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f043 0309 	orr.w	r3, r3, #9
 800121c:	b2db      	uxtb	r3, r3
 800121e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	214e      	movs	r1, #78	; 0x4e
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <lcd_send_data+0x5c>)
 800122e:	f002 fefb 	bl	8004028 <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200003cc 	.word	0x200003cc

08001240 <lcd_clear>:

void lcd_clear (void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff9a 	bl	8001180 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	e005      	b.n	800125e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001252:	2020      	movs	r0, #32
 8001254:	f7ff ffc4 	bl	80011e0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3301      	adds	r3, #1
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b63      	cmp	r3, #99	; 0x63
 8001262:	ddf6      	ble.n	8001252 <lcd_clear+0x12>
	}
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <lcd_init>:

void lcd_init (void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f001 ff96 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001278:	2030      	movs	r0, #48	; 0x30
 800127a:	f7ff ff81 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800127e:	2005      	movs	r0, #5
 8001280:	f001 ff90 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001284:	2030      	movs	r0, #48	; 0x30
 8001286:	f7ff ff7b 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800128a:	2001      	movs	r0, #1
 800128c:	f001 ff8a 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001290:	2030      	movs	r0, #48	; 0x30
 8001292:	f7ff ff75 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 8001296:	200a      	movs	r0, #10
 8001298:	f001 ff84 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800129c:	2020      	movs	r0, #32
 800129e:	f7ff ff6f 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f001 ff7e 	bl	80031a4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012a8:	2028      	movs	r0, #40	; 0x28
 80012aa:	f7ff ff69 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f001 ff78 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80012b4:	2008      	movs	r0, #8
 80012b6:	f7ff ff63 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f001 ff72 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff ff5d 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f001 ff6c 	bl	80031a4 <HAL_Delay>
	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 ff69 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012d2:	2006      	movs	r0, #6
 80012d4:	f7ff ff54 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f001 ff63 	bl	80031a4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012de:	200c      	movs	r0, #12
 80012e0:	f7ff ff4e 	bl	8001180 <lcd_send_cmd>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012f0:	e006      	b.n	8001300 <lcd_send_string+0x18>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff70 	bl	80011e0 <lcd_send_data>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f4      	bne.n	80012f2 <lcd_send_string+0xa>
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <keypad_init>:
#define C4_PIN GPIO_PIN_3
//


void keypad_init(void)
{		
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure; 
	/********************** Init GPIO Keypad *************************/
 	// aktivasi Kolom bit
	GPIO_InitStructure.Pin = C1_PIN|C2_PIN|C3_PIN|C4_PIN;
 800131a:	2378      	movs	r3, #120	; 0x78
 800131c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001326:	2301      	movs	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <keypad_init+0x74>)
 8001330:	f002 fb82 	bl	8003a38 <HAL_GPIO_Init>
	
	// aktivasi Baris bit
	GPIO_InitStructure.Pin = R1_PIN|R2_PIN|R3_PIN|R4_PIN;
 8001334:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001338:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	4810      	ldr	r0, [pc, #64]	; (800138c <keypad_init+0x78>)
 800134c:	f002 fb74 	bl	8003a38 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOB,R1_PIN,GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <keypad_init+0x78>)
 8001358:	f002 fd09 	bl	8003d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R2_PIN,GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <keypad_init+0x78>)
 8001364:	f002 fd03 	bl	8003d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R3_PIN,GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <keypad_init+0x78>)
 8001370:	f002 fcfd 	bl	8003d6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,R4_PIN,GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <keypad_init+0x78>)
 800137c:	f002 fcf7 	bl	8003d6e <HAL_GPIO_WritePin>
/********************** End GPIO LCD ********************/
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40010800 	.word	0x40010800
 800138c:	40010c00 	.word	0x40010c00

08001390 <keypad_get_key_value>:


char keypad_get_key_value(void)
{     int key;
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
			key=' ';
 8001396:	2320      	movs	r3, #32
 8001398:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R1_PIN,GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a0:	486d      	ldr	r0, [pc, #436]	; (8001558 <keypad_get_key_value+0x1c8>)
 80013a2:	f002 fce4 	bl	8003d6e <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f001 fefc 	bl	80031a4 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '1'; 
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	486b      	ldr	r0, [pc, #428]	; (800155c <keypad_get_key_value+0x1cc>)
 80013b0:	f002 fcc6 	bl	8003d40 <HAL_GPIO_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <keypad_get_key_value+0x30>
 80013ba:	2331      	movs	r3, #49	; 0x31
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e01c      	b.n	80013fa <keypad_get_key_value+0x6a>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='2';
 80013c0:	2120      	movs	r1, #32
 80013c2:	4866      	ldr	r0, [pc, #408]	; (800155c <keypad_get_key_value+0x1cc>)
 80013c4:	f002 fcbc 	bl	8003d40 <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <keypad_get_key_value+0x44>
 80013ce:	2332      	movs	r3, #50	; 0x32
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e012      	b.n	80013fa <keypad_get_key_value+0x6a>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='3';
 80013d4:	2110      	movs	r1, #16
 80013d6:	4861      	ldr	r0, [pc, #388]	; (800155c <keypad_get_key_value+0x1cc>)
 80013d8:	f002 fcb2 	bl	8003d40 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <keypad_get_key_value+0x58>
 80013e2:	2333      	movs	r3, #51	; 0x33
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	e008      	b.n	80013fa <keypad_get_key_value+0x6a>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='A';
 80013e8:	2108      	movs	r1, #8
 80013ea:	485c      	ldr	r0, [pc, #368]	; (800155c <keypad_get_key_value+0x1cc>)
 80013ec:	f002 fca8 	bl	8003d40 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <keypad_get_key_value+0x6a>
 80013f6:	2341      	movs	r3, #65	; 0x41
 80013f8:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R1_PIN,GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001400:	4855      	ldr	r0, [pc, #340]	; (8001558 <keypad_get_key_value+0x1c8>)
 8001402:	f002 fcb4 	bl	8003d6e <HAL_GPIO_WritePin>
      
			HAL_GPIO_WritePin(GPIOB,R2_PIN,GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140c:	4852      	ldr	r0, [pc, #328]	; (8001558 <keypad_get_key_value+0x1c8>)
 800140e:	f002 fcae 	bl	8003d6e <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001412:	200a      	movs	r0, #10
 8001414:	f001 fec6 	bl	80031a4 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '4'; 
 8001418:	2140      	movs	r1, #64	; 0x40
 800141a:	4850      	ldr	r0, [pc, #320]	; (800155c <keypad_get_key_value+0x1cc>)
 800141c:	f002 fc90 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <keypad_get_key_value+0x9c>
 8001426:	2334      	movs	r3, #52	; 0x34
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	e01c      	b.n	8001466 <keypad_get_key_value+0xd6>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='5';
 800142c:	2120      	movs	r1, #32
 800142e:	484b      	ldr	r0, [pc, #300]	; (800155c <keypad_get_key_value+0x1cc>)
 8001430:	f002 fc86 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <keypad_get_key_value+0xb0>
 800143a:	2335      	movs	r3, #53	; 0x35
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	e012      	b.n	8001466 <keypad_get_key_value+0xd6>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='6';
 8001440:	2110      	movs	r1, #16
 8001442:	4846      	ldr	r0, [pc, #280]	; (800155c <keypad_get_key_value+0x1cc>)
 8001444:	f002 fc7c 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <keypad_get_key_value+0xc4>
 800144e:	2336      	movs	r3, #54	; 0x36
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e008      	b.n	8001466 <keypad_get_key_value+0xd6>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='B';
 8001454:	2108      	movs	r1, #8
 8001456:	4841      	ldr	r0, [pc, #260]	; (800155c <keypad_get_key_value+0x1cc>)
 8001458:	f002 fc72 	bl	8003d40 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <keypad_get_key_value+0xd6>
 8001462:	2342      	movs	r3, #66	; 0x42
 8001464:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R2_PIN,GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146c:	483a      	ldr	r0, [pc, #232]	; (8001558 <keypad_get_key_value+0x1c8>)
 800146e:	f002 fc7e 	bl	8003d6e <HAL_GPIO_WritePin>
		
 			HAL_GPIO_WritePin(GPIOB,R3_PIN,GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001478:	4837      	ldr	r0, [pc, #220]	; (8001558 <keypad_get_key_value+0x1c8>)
 800147a:	f002 fc78 	bl	8003d6e <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800147e:	200a      	movs	r0, #10
 8001480:	f001 fe90 	bl	80031a4 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '7'; 
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	4835      	ldr	r0, [pc, #212]	; (800155c <keypad_get_key_value+0x1cc>)
 8001488:	f002 fc5a 	bl	8003d40 <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <keypad_get_key_value+0x108>
 8001492:	2337      	movs	r3, #55	; 0x37
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e01c      	b.n	80014d2 <keypad_get_key_value+0x142>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='8';
 8001498:	2120      	movs	r1, #32
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <keypad_get_key_value+0x1cc>)
 800149c:	f002 fc50 	bl	8003d40 <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <keypad_get_key_value+0x11c>
 80014a6:	2338      	movs	r3, #56	; 0x38
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	e012      	b.n	80014d2 <keypad_get_key_value+0x142>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='9';
 80014ac:	2110      	movs	r1, #16
 80014ae:	482b      	ldr	r0, [pc, #172]	; (800155c <keypad_get_key_value+0x1cc>)
 80014b0:	f002 fc46 	bl	8003d40 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <keypad_get_key_value+0x130>
 80014ba:	2339      	movs	r3, #57	; 0x39
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e008      	b.n	80014d2 <keypad_get_key_value+0x142>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='C';
 80014c0:	2108      	movs	r1, #8
 80014c2:	4826      	ldr	r0, [pc, #152]	; (800155c <keypad_get_key_value+0x1cc>)
 80014c4:	f002 fc3c 	bl	8003d40 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <keypad_get_key_value+0x142>
 80014ce:	2343      	movs	r3, #67	; 0x43
 80014d0:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R3_PIN,GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d8:	481f      	ldr	r0, [pc, #124]	; (8001558 <keypad_get_key_value+0x1c8>)
 80014da:	f002 fc48 	bl	8003d6e <HAL_GPIO_WritePin>
	
 			HAL_GPIO_WritePin(GPIOB,R4_PIN,GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e4:	481c      	ldr	r0, [pc, #112]	; (8001558 <keypad_get_key_value+0x1c8>)
 80014e6:	f002 fc42 	bl	8003d6e <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80014ea:	200a      	movs	r0, #10
 80014ec:	f001 fe5a 	bl	80031a4 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C4_PORT,C1_PIN)==0) key = '*'; 
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	481a      	ldr	r0, [pc, #104]	; (800155c <keypad_get_key_value+0x1cc>)
 80014f4:	f002 fc24 	bl	8003d40 <HAL_GPIO_ReadPin>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <keypad_get_key_value+0x174>
 80014fe:	232a      	movs	r3, #42	; 0x2a
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	e01c      	b.n	800153e <keypad_get_key_value+0x1ae>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='0';
 8001504:	2120      	movs	r1, #32
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <keypad_get_key_value+0x1cc>)
 8001508:	f002 fc1a 	bl	8003d40 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <keypad_get_key_value+0x188>
 8001512:	2330      	movs	r3, #48	; 0x30
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	e012      	b.n	800153e <keypad_get_key_value+0x1ae>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='#';
 8001518:	2110      	movs	r1, #16
 800151a:	4810      	ldr	r0, [pc, #64]	; (800155c <keypad_get_key_value+0x1cc>)
 800151c:	f002 fc10 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <keypad_get_key_value+0x19c>
 8001526:	2323      	movs	r3, #35	; 0x23
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	e008      	b.n	800153e <keypad_get_key_value+0x1ae>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='D';
 800152c:	2108      	movs	r1, #8
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <keypad_get_key_value+0x1cc>)
 8001530:	f002 fc06 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <keypad_get_key_value+0x1ae>
 800153a:	2344      	movs	r3, #68	; 0x44
 800153c:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOA,R4_PIN,GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <keypad_get_key_value+0x1cc>)
 8001546:	f002 fc12 	bl	8003d6e <HAL_GPIO_WritePin>
      
			return key;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40010800 	.word	0x40010800

08001560 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <DWT_Init+0x24>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <DWT_Init+0x24>)
 800156a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <DWT_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <DWT_Init+0x28>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	e000edf0 	.word	0xe000edf0
 8001588:	e0001000 	.word	0xe0001000

0800158c <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <micros+0x20>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <micros+0x24>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4906      	ldr	r1, [pc, #24]	; (80015b4 <micros+0x28>)
 800159a:	fba1 1303 	umull	r1, r3, r1, r3
 800159e:	0c9b      	lsrs	r3, r3, #18
 80015a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	e0001000 	.word	0xe0001000
 80015b0:	20000010 	.word	0x20000010
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <cleardata>:
void Tim_micros(uint16_t us){
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
}

void cleardata(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	lcd_clear();
 80015bc:	f7ff fe40 	bl	8001240 <lcd_clear>
	lcd_send_cmd(0x80|0x03);
 80015c0:	2083      	movs	r0, #131	; 0x83
 80015c2:	f7ff fddd 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("KWH METER SOLLAR");
 80015c6:	4802      	ldr	r0, [pc, #8]	; (80015d0 <cleardata+0x18>)
 80015c8:	f7ff fe8e 	bl	80012e8 <lcd_send_string>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	0800a2e8 	.word	0x0800a2e8

080015d4 <Lcd_name>:
void Lcd_name(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80|0x02);
 80015d8:	2082      	movs	r0, #130	; 0x82
 80015da:	f7ff fdd1 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("KWH METER SOLLAR");
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <Lcd_name+0x40>)
 80015e0:	f7ff fe82 	bl	80012e8 <lcd_send_string>
	lcd_send_cmd(0x80|0x18);
 80015e4:	2098      	movs	r0, #152	; 0x98
 80015e6:	f7ff fdcb 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("BI-DIRECTIONAL");
 80015ea:	480b      	ldr	r0, [pc, #44]	; (8001618 <Lcd_name+0x44>)
 80015ec:	f7ff fe7c 	bl	80012e8 <lcd_send_string>
	lcd_send_cmd(0x80|0x42);
 80015f0:	20c2      	movs	r0, #194	; 0xc2
 80015f2:	f7ff fdc5 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("AC ENERGY METER");
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <Lcd_name+0x48>)
 80015f8:	f7ff fe76 	bl	80012e8 <lcd_send_string>
	lcd_send_cmd(0x80|0x57);
 80015fc:	20d7      	movs	r0, #215	; 0xd7
 80015fe:	f7ff fdbf 	bl	8001180 <lcd_send_cmd>
	lcd_send_string("NAMA = FARKHAN");
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <Lcd_name+0x4c>)
 8001604:	f7ff fe70 	bl	80012e8 <lcd_send_string>
	HAL_Delay(3000);
 8001608:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800160c:	f001 fdca 	bl	80031a4 <HAL_Delay>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0800a2e8 	.word	0x0800a2e8
 8001618:	0800a2fc 	.word	0x0800a2fc
 800161c:	0800a30c 	.word	0x0800a30c
 8001620:	0800a31c 	.word	0x0800a31c

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f001 fd59 	bl	80030e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f001 f901 	bl	8002834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001632:	f001 fa7f 	bl	8002b34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001636:	f001 f959 	bl	80028ec <MX_ADC1_Init>
  MX_ADC2_Init();
 800163a:	f001 f995 	bl	8002968 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800163e:	f001 fa4f 	bl	8002ae0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001642:	f001 f9cf 	bl	80029e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001646:	f001 f9fb 	bl	8002a40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800164a:	48aa      	ldr	r0, [pc, #680]	; (80018f4 <main+0x2d0>)
 800164c:	f003 fd12 	bl	8005074 <HAL_TIM_Base_Start>
  DWT_Init();
 8001650:	f7ff ff86 	bl	8001560 <DWT_Init>
  startMicros = micros(); /*mulai counter frequensi*/
 8001654:	f7ff ff9a 	bl	800158c <micros>
 8001658:	4603      	mov	r3, r0
 800165a:	4aa7      	ldr	r2, [pc, #668]	; (80018f8 <main+0x2d4>)
 800165c:	6013      	str	r3, [r2, #0]
  lcd_init();
 800165e:	f7ff fe06 	bl	800126e <lcd_init>
  keypad_init();
 8001662:	f7ff fe57 	bl	8001314 <keypad_init>
  Lcd_name();
 8001666:	f7ff ffb5 	bl	80015d4 <Lcd_name>
  lcd_clear();
 800166a:	f7ff fde9 	bl	8001240 <lcd_clear>
  lcd_send_cmd(0x80|0x03);
 800166e:	2083      	movs	r0, #131	; 0x83
 8001670:	f7ff fd86 	bl	8001180 <lcd_send_cmd>
  lcd_send_string("KWH METER SOLAR");
 8001674:	48a1      	ldr	r0, [pc, #644]	; (80018fc <main+0x2d8>)
 8001676:	f7ff fe37 	bl	80012e8 <lcd_send_string>

  mulai_MillisLCD = HAL_GetTick();
 800167a:	f001 fd89 	bl	8003190 <HAL_GetTick>
 800167e:	4603      	mov	r3, r0
 8001680:	4a9f      	ldr	r2, [pc, #636]	; (8001900 <main+0x2dc>)
 8001682:	6013      	str	r3, [r2, #0]
  startButtonMillis = HAL_GetTick();
 8001684:	f001 fd84 	bl	8003190 <HAL_GetTick>
 8001688:	4603      	mov	r3, r0
 800168a:	4a9e      	ldr	r2, [pc, #632]	; (8001904 <main+0x2e0>)
 800168c:	6013      	str	r3, [r2, #0]
  ukuranstring = sprintf((char*)buff_s, "Mulai Perhitungan Solar");
 800168e:	499e      	ldr	r1, [pc, #632]	; (8001908 <main+0x2e4>)
 8001690:	489e      	ldr	r0, [pc, #632]	; (800190c <main+0x2e8>)
 8001692:	f004 ffb3 	bl	80065fc <siprintf>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	4b9d      	ldr	r3, [pc, #628]	; (8001910 <main+0x2ec>)
 800169c:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 800169e:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <main+0x2ec>)
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	2364      	movs	r3, #100	; 0x64
 80016a4:	4999      	ldr	r1, [pc, #612]	; (800190c <main+0x2e8>)
 80016a6:	489b      	ldr	r0, [pc, #620]	; (8001914 <main+0x2f0>)
 80016a8:	f003 ff95 	bl	80055d6 <HAL_UART_Transmit>
  cleardata();
 80016ac:	f7ff ff84 	bl	80015b8 <cleardata>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  key_val = keypad_get_key_value();
 80016b0:	f7ff fe6e 	bl	8001390 <keypad_get_key_value>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b97      	ldr	r3, [pc, #604]	; (8001918 <main+0x2f4>)
 80016ba:	701a      	strb	r2, [r3, #0]
	  AButtonMillis = HAL_GetTick();
 80016bc:	f001 fd68 	bl	8003190 <HAL_GetTick>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a96      	ldr	r2, [pc, #600]	; (800191c <main+0x2f8>)
 80016c4:	6013      	str	r3, [r2, #0]

	  if (AButtonMillis - startButtonMillis >= 300){
 80016c6:	4b95      	ldr	r3, [pc, #596]	; (800191c <main+0x2f8>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b8e      	ldr	r3, [pc, #568]	; (8001904 <main+0x2e0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016d4:	d35e      	bcc.n	8001794 <main+0x170>
		  if (key_val == '0'){
 80016d6:	4b90      	ldr	r3, [pc, #576]	; (8001918 <main+0x2f4>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b30      	cmp	r3, #48	; 0x30
 80016dc:	d101      	bne.n	80016e2 <main+0xbe>
			  cleardata();
 80016de:	f7ff ff6b 	bl	80015b8 <cleardata>
		  }
		  if (key_val == '6'){
 80016e2:	4b8d      	ldr	r3, [pc, #564]	; (8001918 <main+0x2f4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b36      	cmp	r3, #54	; 0x36
 80016e8:	d107      	bne.n	80016fa <main+0xd6>
			cleardata();
 80016ea:	f7ff ff65 	bl	80015b8 <cleardata>
			lcd_send_cmd(0x80|0x40);
 80016ee:	20c0      	movs	r0, #192	; 0xc0
 80016f0:	f7ff fd46 	bl	8001180 <lcd_send_cmd>
			lcd_send_string("<TEKAN TOMBOL 5");
 80016f4:	488a      	ldr	r0, [pc, #552]	; (8001920 <main+0x2fc>)
 80016f6:	f7ff fdf7 	bl	80012e8 <lcd_send_string>
		  }
		  if (key_val == '2'){
 80016fa:	4b87      	ldr	r3, [pc, #540]	; (8001918 <main+0x2f4>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b32      	cmp	r3, #50	; 0x32
 8001700:	d112      	bne.n	8001728 <main+0x104>
			  cleardata();
 8001702:	f7ff ff59 	bl	80015b8 <cleardata>
			  page = page - 1;
 8001706:	4b87      	ldr	r3, [pc, #540]	; (8001924 <main+0x300>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	4a85      	ldr	r2, [pc, #532]	; (8001924 <main+0x300>)
 800170e:	6013      	str	r3, [r2, #0]
			  if (page <= 0){
 8001710:	4b84      	ldr	r3, [pc, #528]	; (8001924 <main+0x300>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dc02      	bgt.n	800171e <main+0xfa>
				  page = 1;
 8001718:	4b82      	ldr	r3, [pc, #520]	; (8001924 <main+0x300>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
			  }
			  startButtonMillis = HAL_GetTick();
 800171e:	f001 fd37 	bl	8003190 <HAL_GetTick>
 8001722:	4603      	mov	r3, r0
 8001724:	4a77      	ldr	r2, [pc, #476]	; (8001904 <main+0x2e0>)
 8001726:	6013      	str	r3, [r2, #0]
		  }
		  if (key_val == '8'){
 8001728:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <main+0x2f4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b38      	cmp	r3, #56	; 0x38
 800172e:	d112      	bne.n	8001756 <main+0x132>
			  cleardata();
 8001730:	f7ff ff42 	bl	80015b8 <cleardata>
			  page = page + 1;
 8001734:	4b7b      	ldr	r3, [pc, #492]	; (8001924 <main+0x300>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a7a      	ldr	r2, [pc, #488]	; (8001924 <main+0x300>)
 800173c:	6013      	str	r3, [r2, #0]
			  if (page > 3){
 800173e:	4b79      	ldr	r3, [pc, #484]	; (8001924 <main+0x300>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b03      	cmp	r3, #3
 8001744:	dd02      	ble.n	800174c <main+0x128>
				  page = 3;
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <main+0x300>)
 8001748:	2203      	movs	r2, #3
 800174a:	601a      	str	r2, [r3, #0]
			  }
			  startButtonMillis = HAL_GetTick();
 800174c:	f001 fd20 	bl	8003190 <HAL_GetTick>
 8001750:	4603      	mov	r3, r0
 8001752:	4a6c      	ldr	r2, [pc, #432]	; (8001904 <main+0x2e0>)
 8001754:	6013      	str	r3, [r2, #0]
		  }
		  if (key_val == '4'){
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <main+0x2f4>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b34      	cmp	r3, #52	; 0x34
 800175c:	d107      	bne.n	800176e <main+0x14a>
			  	cleardata();
 800175e:	f7ff ff2b 	bl	80015b8 <cleardata>
				lcd_send_cmd(0x80|0x40);
 8001762:	20c0      	movs	r0, #192	; 0xc0
 8001764:	f7ff fd0c 	bl	8001180 <lcd_send_cmd>
				lcd_send_string("TEKAN TOMBOL 5");
 8001768:	486f      	ldr	r0, [pc, #444]	; (8001928 <main+0x304>)
 800176a:	f7ff fdbd 	bl	80012e8 <lcd_send_string>
		  }
		  if (key_val == '5'){
 800176e:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <main+0x2f4>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b35      	cmp	r3, #53	; 0x35
 8001774:	d10e      	bne.n	8001794 <main+0x170>
			  // untuk mengaktifkan offset
            A_Offset_Baca = 1;
 8001776:	4b6d      	ldr	r3, [pc, #436]	; (800192c <main+0x308>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
            V_Offset_Baca = 1;
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <main+0x30c>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
            powerOffsetRead = 1;
 8001782:	4b6c      	ldr	r3, [pc, #432]	; (8001934 <main+0x310>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(0x80|0x40);
 8001788:	20c0      	movs	r0, #192	; 0xc0
 800178a:	f7ff fcf9 	bl	8001180 <lcd_send_cmd>
			lcd_send_string("INISIALISASI 5 DETIK");
 800178e:	486a      	ldr	r0, [pc, #424]	; (8001938 <main+0x314>)
 8001790:	f7ff fdaa 	bl	80012e8 <lcd_send_string>
		  }
	  }


	  /*-------Perhitungan tegangan AC--------*/
	  if(HAL_GetTick() >= V_Last + 1){ //Setiap satu milisecond sekali baca
 8001794:	f001 fcfc 	bl	8003190 <HAL_GetTick>
 8001798:	4603      	mov	r3, r0
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fa9a 	bl	8000cd4 <__aeabi_ui2f>
 80017a0:	4604      	mov	r4, r0
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <main+0x318>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f9e2 	bl	8000b74 <__addsf3>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fc97 	bl	80010e8 <__aeabi_fcmpge>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d062      	beq.n	8001886 <main+0x262>
		  HAL_ADC_Start(&hadc1);
 80017c0:	485f      	ldr	r0, [pc, #380]	; (8001940 <main+0x31c>)
 80017c2:	f001 fdeb 	bl	800339c <HAL_ADC_Start>
		  while (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != SET){;}
 80017c6:	bf00      	nop
 80017c8:	4b5d      	ldr	r3, [pc, #372]	; (8001940 <main+0x31c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d1f8      	bne.n	80017c8 <main+0x1a4>
		  HAL_ADC_Stop(&hadc1);
 80017d6:	485a      	ldr	r0, [pc, #360]	; (8001940 <main+0x31c>)
 80017d8:	f001 fe8e 	bl	80034f8 <HAL_ADC_Stop>
	  	  int getvalue1 = HAL_ADC_GetValue(&hadc1);
 80017dc:	4858      	ldr	r0, [pc, #352]	; (8001940 <main+0x31c>)
 80017de:	f001 feb7 	bl	8003550 <HAL_ADC_GetValue>
 80017e2:	4603      	mov	r3, r0
 80017e4:	61fb      	str	r3, [r7, #28]
		  int voltageanalogInput = map(getvalue1, 0, 4095, 0, 1024);
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4a56      	ldr	r2, [pc, #344]	; (8001944 <main+0x320>)
 80017ec:	fb82 1203 	smull	r1, r2, r2, r3
 80017f0:	441a      	add	r2, r3
 80017f2:	12d2      	asrs	r2, r2, #11
 80017f4:	17db      	asrs	r3, r3, #31
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	61bb      	str	r3, [r7, #24]
		  V_Baca = 2 * (voltageanalogInput - 512) + V_Offset1;
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fa6a 	bl	8000cdc <__aeabi_i2f>
 8001808:	4602      	mov	r2, r0
 800180a:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <main+0x324>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff f9af 	bl	8000b74 <__addsf3>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b4c      	ldr	r3, [pc, #304]	; (800194c <main+0x328>)
 800181c:	601a      	str	r2, [r3, #0]
		  V_SampleSumOffset = V_SampleSumOffset + V_Baca;
 800181e:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <main+0x32c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a4a      	ldr	r2, [pc, #296]	; (800194c <main+0x328>)
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f9a3 	bl	8000b74 <__addsf3>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <main+0x32c>)
 8001834:	601a      	str	r2, [r3, #0]

		  V_SampleSum = V_SampleSum + (V_Baca * V_Baca);
 8001836:	4b45      	ldr	r3, [pc, #276]	; (800194c <main+0x328>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a44      	ldr	r2, [pc, #272]	; (800194c <main+0x328>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa9f 	bl	8000d84 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b42      	ldr	r3, [pc, #264]	; (8001954 <main+0x330>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4619      	mov	r1, r3
 8001850:	4610      	mov	r0, r2
 8001852:	f7ff f98f 	bl	8000b74 <__addsf3>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <main+0x330>)
 800185c:	601a      	str	r2, [r3, #0]
		  V_SampleCount = V_SampleCount + 1;
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <main+0x334>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f984 	bl	8000b74 <__addsf3>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <main+0x334>)
 8001872:	601a      	str	r2, [r3, #0]
		  V_Last = HAL_GetTick();
 8001874:	f001 fc8c 	bl	8003190 <HAL_GetTick>
 8001878:	4603      	mov	r3, r0
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fa2a 	bl	8000cd4 <__aeabi_ui2f>
 8001880:	4603      	mov	r3, r0
 8001882:	4a2e      	ldr	r2, [pc, #184]	; (800193c <main+0x318>)
 8001884:	6013      	str	r3, [r2, #0]
	  }
	  if (V_SampleCount == 1000){
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <main+0x334>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4934      	ldr	r1, [pc, #208]	; (800195c <main+0x338>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fc0d 	bl	80010ac <__aeabi_fcmpeq>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8099 	beq.w	80019cc <main+0x3a8>
		  offset_V_Mean = V_SampleSumOffset/V_SampleCount; //rata rata tegangan
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <main+0x32c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <main+0x334>)
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fb21 	bl	8000eec <__aeabi_fdiv>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <main+0x33c>)
 80018b0:	601a      	str	r2, [r3, #0]
		  V_Mean = V_SampleSum/V_SampleCount;
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <main+0x330>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a28      	ldr	r2, [pc, #160]	; (8001958 <main+0x334>)
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb15 	bl	8000eec <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <main+0x340>)
 80018c8:	601a      	str	r2, [r3, #0]

		  RMSVMean = sqrt(V_Mean)+ V_Offset2;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <main+0x340>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdaa 	bl	8000428 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f008 fc1e 	bl	800a11c <sqrt>
 80018e0:	4604      	mov	r4, r0
 80018e2:	460d      	mov	r5, r1
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <main+0x344>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fd9d 	bl	8000428 <__aeabi_f2d>
 80018ee:	4602      	mov	r2, r0
 80018f0:	e03c      	b.n	800196c <main+0x348>
 80018f2:	bf00      	nop
 80018f4:	200004b4 	.word	0x200004b4
 80018f8:	20000428 	.word	0x20000428
 80018fc:	0800a35c 	.word	0x0800a35c
 8001900:	20000508 	.word	0x20000508
 8001904:	2000045c 	.word	0x2000045c
 8001908:	0800a36c 	.word	0x0800a36c
 800190c:	200002d0 	.word	0x200002d0
 8001910:	20000504 	.word	0x20000504
 8001914:	20000468 	.word	0x20000468
 8001918:	20000420 	.word	0x20000420
 800191c:	20000514 	.word	0x20000514
 8001920:	0800a384 	.word	0x0800a384
 8001924:	20000000 	.word	0x20000000
 8001928:	0800a394 	.word	0x0800a394
 800192c:	20000258 	.word	0x20000258
 8001930:	20000224 	.word	0x20000224
 8001934:	2000028c 	.word	0x2000028c
 8001938:	0800a3a4 	.word	0x0800a3a4
 800193c:	20000218 	.word	0x20000218
 8001940:	2000042c 	.word	0x2000042c
 8001944:	80080081 	.word	0x80080081
 8001948:	20000228 	.word	0x20000228
 800194c:	20000214 	.word	0x20000214
 8001950:	20000230 	.word	0x20000230
 8001954:	2000021c 	.word	0x2000021c
 8001958:	20000220 	.word	0x20000220
 800195c:	447a0000 	.word	0x447a0000
 8001960:	20000234 	.word	0x20000234
 8001964:	20000518 	.word	0x20000518
 8001968:	2000022c 	.word	0x2000022c
 800196c:	460b      	mov	r3, r1
 800196e:	4620      	mov	r0, r4
 8001970:	4629      	mov	r1, r5
 8001972:	f7fe fbfb 	bl	800016c <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f8a3 	bl	8000ac8 <__aeabi_d2f>
 8001982:	4603      	mov	r3, r0
 8001984:	4aa5      	ldr	r2, [pc, #660]	; (8001c1c <main+0x5f8>)
 8001986:	6013      	str	r3, [r2, #0]

		  ukuranstring = sprintf((char*)buff_s, "%.1f V  ",RMSVMean);
 8001988:	4ba4      	ldr	r3, [pc, #656]	; (8001c1c <main+0x5f8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fd4b 	bl	8000428 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	49a2      	ldr	r1, [pc, #648]	; (8001c20 <main+0x5fc>)
 8001998:	48a2      	ldr	r0, [pc, #648]	; (8001c24 <main+0x600>)
 800199a:	f004 fe2f 	bl	80065fc <siprintf>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4ba1      	ldr	r3, [pc, #644]	; (8001c28 <main+0x604>)
 80019a4:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 80019a6:	4ba0      	ldr	r3, [pc, #640]	; (8001c28 <main+0x604>)
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	499d      	ldr	r1, [pc, #628]	; (8001c24 <main+0x600>)
 80019ae:	489f      	ldr	r0, [pc, #636]	; (8001c2c <main+0x608>)
 80019b0:	f003 fe11 	bl	80055d6 <HAL_UART_Transmit>

          V_SampleSum = 0;
 80019b4:	4b9e      	ldr	r3, [pc, #632]	; (8001c30 <main+0x60c>)
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
          V_SampleCount = 0;
 80019bc:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <main+0x610>)
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
          V_SampleSumOffset = 0;
 80019c4:	4b9c      	ldr	r3, [pc, #624]	; (8001c38 <main+0x614>)
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
	  }


	  /*-------Offset Tegangan AC-------*/
	  if (V_Offset_Baca == 1){ //run ketika tombol 5 aktif
 80019cc:	4b9b      	ldr	r3, [pc, #620]	; (8001c3c <main+0x618>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d143      	bne.n	8001a5c <main+0x438>
		  V_Offset1 = 0;
 80019d4:	4b9a      	ldr	r3, [pc, #616]	; (8001c40 <main+0x61c>)
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
		  if(HAL_GetTick() >= V_OffsetLastSample + 1){
 80019dc:	f001 fbd8 	bl	8003190 <HAL_GetTick>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f976 	bl	8000cd4 <__aeabi_ui2f>
 80019e8:	4604      	mov	r4, r0
 80019ea:	4b96      	ldr	r3, [pc, #600]	; (8001c44 <main+0x620>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f8be 	bl	8000b74 <__addsf3>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4619      	mov	r1, r3
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fb73 	bl	80010e8 <__aeabi_fcmpge>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <main+0x40c>
			  V_OffsetSampleCount = V_OffsetSampleCount + 1;
 8001a08:	4b8f      	ldr	r3, [pc, #572]	; (8001c48 <main+0x624>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f8af 	bl	8000b74 <__addsf3>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <main+0x624>)
 8001a1c:	601a      	str	r2, [r3, #0]
			  V_OffsetLastSample = HAL_GetTick(); //reset
 8001a1e:	f001 fbb7 	bl	8003190 <HAL_GetTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f955 	bl	8000cd4 <__aeabi_ui2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a85      	ldr	r2, [pc, #532]	; (8001c44 <main+0x620>)
 8001a2e:	6013      	str	r3, [r2, #0]
		  }
		  if (V_OffsetSampleCount == 2000){ //run setiap 2 detik sekali
 8001a30:	4b85      	ldr	r3, [pc, #532]	; (8001c48 <main+0x624>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4985      	ldr	r1, [pc, #532]	; (8001c4c <main+0x628>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fb38 	bl	80010ac <__aeabi_fcmpeq>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00c      	beq.n	8001a5c <main+0x438>
              V_Offset1 = -1*(offset_V_Mean);   /*set nilai offset */
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <main+0x62c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a4a:	4a7d      	ldr	r2, [pc, #500]	; (8001c40 <main+0x61c>)
 8001a4c:	6013      	str	r3, [r2, #0]
              V_Offset_Baca = 2;
 8001a4e:	4b7b      	ldr	r3, [pc, #492]	; (8001c3c <main+0x618>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	601a      	str	r2, [r3, #0]
              V_OffsetSampleCount = 0;
 8001a54:	4b7c      	ldr	r3, [pc, #496]	; (8001c48 <main+0x624>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (V_Offset_Baca == 2){
 8001a5c:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <main+0x618>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d143      	bne.n	8001aec <main+0x4c8>
		  V_Offset2 = 0;
 8001a64:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <main+0x630>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
		  if(HAL_GetTick() >= V_OffsetLastSample + 1){
 8001a6c:	f001 fb90 	bl	8003190 <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f92e 	bl	8000cd4 <__aeabi_ui2f>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <main+0x620>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f876 	bl	8000b74 <__addsf3>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fb2b 	bl	80010e8 <__aeabi_fcmpge>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <main+0x49c>
              V_OffsetSampleCount = V_OffsetSampleCount + 1;
 8001a98:	4b6b      	ldr	r3, [pc, #428]	; (8001c48 <main+0x624>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f867 	bl	8000b74 <__addsf3>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <main+0x624>)
 8001aac:	601a      	str	r2, [r3, #0]
              V_OffsetLastSample = HAL_GetTick(); //reset
 8001aae:	f001 fb6f 	bl	8003190 <HAL_GetTick>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f90d 	bl	8000cd4 <__aeabi_ui2f>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a61      	ldr	r2, [pc, #388]	; (8001c44 <main+0x620>)
 8001abe:	6013      	str	r3, [r2, #0]
		  }
		  if (V_OffsetSampleCount == 2000){ //run setiap 2 detik sekali
 8001ac0:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <main+0x624>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4961      	ldr	r1, [pc, #388]	; (8001c4c <main+0x628>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff faf0 	bl	80010ac <__aeabi_fcmpeq>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00c      	beq.n	8001aec <main+0x4c8>
              V_Offset2 = - RMSVMean; /* set nilai offset*/
 8001ad2:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <main+0x5f8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <main+0x630>)
 8001adc:	6013      	str	r3, [r2, #0]
              V_Offset_Baca = 0;
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <main+0x618>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
              V_OffsetSampleCount = 0;
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <main+0x624>)
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
		  }
	  }


	  /*--------Perhitungan Arus AC--------*/
	  if (HAL_GetTick() >= A_LastSample + 1){ //baca setiap satu millis
 8001aec:	f001 fb50 	bl	8003190 <HAL_GetTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8ee 	bl	8000cd4 <__aeabi_ui2f>
 8001af8:	4604      	mov	r4, r0
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <main+0x634>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f836 	bl	8000b74 <__addsf3>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff faeb 	bl	80010e8 <__aeabi_fcmpge>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d061      	beq.n	8001bdc <main+0x5b8>
			HAL_ADC_Start(&hadc2);
 8001b18:	4850      	ldr	r0, [pc, #320]	; (8001c5c <main+0x638>)
 8001b1a:	f001 fc3f 	bl	800339c <HAL_ADC_Start>
			while (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) != SET){;}
 8001b1e:	bf00      	nop
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <main+0x638>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d1f8      	bne.n	8001b20 <main+0x4fc>
			HAL_ADC_Stop(&hadc2);
 8001b2e:	484b      	ldr	r0, [pc, #300]	; (8001c5c <main+0x638>)
 8001b30:	f001 fce2 	bl	80034f8 <HAL_ADC_Stop>
			int getvalue_A = HAL_ADC_GetValue(&hadc2);
 8001b34:	4849      	ldr	r0, [pc, #292]	; (8001c5c <main+0x638>)
 8001b36:	f001 fd0b 	bl	8003550 <HAL_ADC_GetValue>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	617b      	str	r3, [r7, #20]
			int CurrentAnalogInput = map(getvalue_A, 0, 4095, 0, 1024);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	4a47      	ldr	r2, [pc, #284]	; (8001c60 <main+0x63c>)
 8001b44:	fb82 1203 	smull	r1, r2, r2, r3
 8001b48:	441a      	add	r2, r3
 8001b4a:	12d2      	asrs	r2, r2, #11
 8001b4c:	17db      	asrs	r3, r3, #31
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	613b      	str	r3, [r7, #16]
			A_SampleBaca = CurrentAnalogInput-512 + A_Offset1;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f8bf 	bl	8000cdc <__aeabi_i2f>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <main+0x640>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f7ff f804 	bl	8000b74 <__addsf3>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <main+0x644>)
 8001b72:	601a      	str	r2, [r3, #0]

			A_SampleSumOffset = A_SampleSumOffset + A_SampleBaca;
 8001b74:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <main+0x648>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a3b      	ldr	r2, [pc, #236]	; (8001c68 <main+0x644>)
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fff8 	bl	8000b74 <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <main+0x648>)
 8001b8a:	601a      	str	r2, [r3, #0]

            A_SampleSum = A_SampleSum + (A_SampleBaca * A_SampleBaca) ;
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <main+0x644>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <main+0x644>)
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f8f4 	bl	8000d84 <__aeabi_fmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <main+0x64c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f7fe ffe4 	bl	8000b74 <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <main+0x64c>)
 8001bb2:	601a      	str	r2, [r3, #0]
            A_SampleCount = A_SampleCount + 1;
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <main+0x650>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe ffd9 	bl	8000b74 <__addsf3>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <main+0x650>)
 8001bc8:	601a      	str	r2, [r3, #0]
            A_LastSample = HAL_GetTick();
 8001bca:	f001 fae1 	bl	8003190 <HAL_GetTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f87f 	bl	8000cd4 <__aeabi_ui2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <main+0x634>)
 8001bda:	6013      	str	r3, [r2, #0]
	  }

	  if (A_SampleCount == 1000){
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <main+0x650>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4925      	ldr	r1, [pc, #148]	; (8001c78 <main+0x654>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fa62 	bl	80010ac <__aeabi_fcmpeq>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80a7 	beq.w	8001d3e <main+0x71a>
          offset_A_Mean = A_SampleSumOffset/A_SampleCount; /*rata rata nilai offset*/
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <main+0x648>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <main+0x650>)
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f976 	bl	8000eec <__aeabi_fdiv>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <main+0x658>)
 8001c06:	601a      	str	r2, [r3, #0]

          A_Mean = A_SampleSum/A_SampleCount;
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <main+0x64c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <main+0x650>)
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f96a 	bl	8000eec <__aeabi_fdiv>
 8001c18:	e032      	b.n	8001c80 <main+0x65c>
 8001c1a:	bf00      	nop
 8001c1c:	20000460 	.word	0x20000460
 8001c20:	0800a3bc 	.word	0x0800a3bc
 8001c24:	200002d0 	.word	0x200002d0
 8001c28:	20000504 	.word	0x20000504
 8001c2c:	20000468 	.word	0x20000468
 8001c30:	2000021c 	.word	0x2000021c
 8001c34:	20000220 	.word	0x20000220
 8001c38:	20000230 	.word	0x20000230
 8001c3c:	20000224 	.word	0x20000224
 8001c40:	20000228 	.word	0x20000228
 8001c44:	20000238 	.word	0x20000238
 8001c48:	2000023c 	.word	0x2000023c
 8001c4c:	44fa0000 	.word	0x44fa0000
 8001c50:	20000234 	.word	0x20000234
 8001c54:	2000022c 	.word	0x2000022c
 8001c58:	20000244 	.word	0x20000244
 8001c5c:	2000039c 	.word	0x2000039c
 8001c60:	80080081 	.word	0x80080081
 8001c64:	2000025c 	.word	0x2000025c
 8001c68:	20000240 	.word	0x20000240
 8001c6c:	20000264 	.word	0x20000264
 8001c70:	20000248 	.word	0x20000248
 8001c74:	2000024c 	.word	0x2000024c
 8001c78:	447a0000 	.word	0x447a0000
 8001c7c:	20000268 	.word	0x20000268
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4baa      	ldr	r3, [pc, #680]	; (8001f30 <main+0x90c>)
 8001c86:	601a      	str	r2, [r3, #0]
          RMS_A_Mean = sqrt(A_Mean)+A_Offset2 ;
 8001c88:	4ba9      	ldr	r3, [pc, #676]	; (8001f30 <main+0x90c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbcb 	bl	8000428 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f008 fa3f 	bl	800a11c <sqrt>
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	460d      	mov	r5, r1
 8001ca2:	4ba4      	ldr	r3, [pc, #656]	; (8001f34 <main+0x910>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fbbe 	bl	8000428 <__aeabi_f2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe fa5a 	bl	800016c <__adddf3>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff02 	bl	8000ac8 <__aeabi_d2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a9c      	ldr	r2, [pc, #624]	; (8001f38 <main+0x914>)
 8001cc8:	6013      	str	r3, [r2, #0]
          FinalRMS_A = (((RMS_A_Mean /1024) *5000) /mVperAmpValue);
 8001cca:	4b9b      	ldr	r3, [pc, #620]	; (8001f38 <main+0x914>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f90a 	bl	8000eec <__aeabi_fdiv>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4998      	ldr	r1, [pc, #608]	; (8001f3c <main+0x918>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f851 	bl	8000d84 <__aeabi_fmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b96      	ldr	r3, [pc, #600]	; (8001f40 <main+0x91c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f7ff f8fd 	bl	8000eec <__aeabi_fdiv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b93      	ldr	r3, [pc, #588]	; (8001f44 <main+0x920>)
 8001cf8:	601a      	str	r2, [r3, #0]

		  ukuranstring = sprintf((char*)buff_s, "%.1f A  ",FinalRMS_A);
 8001cfa:	4b92      	ldr	r3, [pc, #584]	; (8001f44 <main+0x920>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fb92 	bl	8000428 <__aeabi_f2d>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	498f      	ldr	r1, [pc, #572]	; (8001f48 <main+0x924>)
 8001d0a:	4890      	ldr	r0, [pc, #576]	; (8001f4c <main+0x928>)
 8001d0c:	f004 fc76 	bl	80065fc <siprintf>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b8e      	ldr	r3, [pc, #568]	; (8001f50 <main+0x92c>)
 8001d16:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 8001d18:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <main+0x92c>)
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	2364      	movs	r3, #100	; 0x64
 8001d1e:	498b      	ldr	r1, [pc, #556]	; (8001f4c <main+0x928>)
 8001d20:	488c      	ldr	r0, [pc, #560]	; (8001f54 <main+0x930>)
 8001d22:	f003 fc58 	bl	80055d6 <HAL_UART_Transmit>

          A_SampleSum = 0;
 8001d26:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <main+0x934>)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
          A_SampleCount = 0;
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <main+0x938>)
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
          A_SampleSumOffset = 0;
 8001d36:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <main+0x93c>)
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
	  }


	  /*----- Offset Arus AC-------*/
	  if (A_Offset_Baca == 1){ //Run ketika tombol 5 ditekan
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <main+0x940>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d143      	bne.n	8001dce <main+0x7aa>
		  A_Offset1 = 0;
 8001d46:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <main+0x944>)
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
		  if (HAL_GetTick() >= A_OffsetLastSample + 1){
 8001d4e:	f001 fa1f 	bl	8003190 <HAL_GetTick>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ffbd 	bl	8000cd4 <__aeabi_ui2f>
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	4b83      	ldr	r3, [pc, #524]	; (8001f6c <main+0x948>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe ff05 	bl	8000b74 <__addsf3>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff f9ba 	bl	80010e8 <__aeabi_fcmpge>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d013      	beq.n	8001da2 <main+0x77e>
              A_OffsetSampleCount = A_OffsetSampleCount + 1;
 8001d7a:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <main+0x94c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fef6 	bl	8000b74 <__addsf3>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <main+0x94c>)
 8001d8e:	601a      	str	r2, [r3, #0]
              A_OffsetLastSample = HAL_GetTick();
 8001d90:	f001 f9fe 	bl	8003190 <HAL_GetTick>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe ff9c 	bl	8000cd4 <__aeabi_ui2f>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a73      	ldr	r2, [pc, #460]	; (8001f6c <main+0x948>)
 8001da0:	6013      	str	r3, [r2, #0]
		  }
		  if (A_OffsetSampleCount == 2000){
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <main+0x94c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4973      	ldr	r1, [pc, #460]	; (8001f74 <main+0x950>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f97f 	bl	80010ac <__aeabi_fcmpeq>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00c      	beq.n	8001dce <main+0x7aa>
              A_Offset1 = - offset_A_Mean;
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <main+0x954>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dbc:	4a6a      	ldr	r2, [pc, #424]	; (8001f68 <main+0x944>)
 8001dbe:	6013      	str	r3, [r2, #0]
              A_Offset_Baca = 2;
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <main+0x940>)
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]
              A_OffsetSampleCount = 0;
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <main+0x94c>)
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (A_Offset_Baca == 2){
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <main+0x940>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d143      	bne.n	8001e5e <main+0x83a>
		  A_Offset2 = 0;
 8001dd6:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <main+0x910>)
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
		  if (HAL_GetTick() >= A_OffsetLastSample + 1){
 8001dde:	f001 f9d7 	bl	8003190 <HAL_GetTick>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe ff75 	bl	8000cd4 <__aeabi_ui2f>
 8001dea:	4604      	mov	r4, r0
 8001dec:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <main+0x948>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe febd 	bl	8000b74 <__addsf3>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff f972 	bl	80010e8 <__aeabi_fcmpge>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d013      	beq.n	8001e32 <main+0x80e>
              A_OffsetSampleCount = A_OffsetSampleCount + 1;
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <main+0x94c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe feae 	bl	8000b74 <__addsf3>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <main+0x94c>)
 8001e1e:	601a      	str	r2, [r3, #0]
              A_OffsetLastSample = HAL_GetTick();
 8001e20:	f001 f9b6 	bl	8003190 <HAL_GetTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe ff54 	bl	8000cd4 <__aeabi_ui2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a4f      	ldr	r2, [pc, #316]	; (8001f6c <main+0x948>)
 8001e30:	6013      	str	r3, [r2, #0]
		  }
          if(A_OffsetSampleCount == 2000)   /* setelah 2 detik, jalan program*/
 8001e32:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <main+0x94c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	494f      	ldr	r1, [pc, #316]	; (8001f74 <main+0x950>)
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f937 	bl	80010ac <__aeabi_fcmpeq>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00c      	beq.n	8001e5e <main+0x83a>
            {
              A_Offset2 = - RMS_A_Mean;/* set nilai offset */
 8001e44:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <main+0x914>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e4c:	4a39      	ldr	r2, [pc, #228]	; (8001f34 <main+0x910>)
 8001e4e:	6013      	str	r3, [r2, #0]
              A_Offset_Baca = 0;
 8001e50:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <main+0x940>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
              A_OffsetSampleCount = 0;
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <main+0x94c>)
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
            }
	  }


	  /*----AC POWER dengan penyearah---*/
	  if (HAL_GetTick() >= powerLastSample + 1){//Run setelah 1 millis
 8001e5e:	f001 f997 	bl	8003190 <HAL_GetTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe ff35 	bl	8000cd4 <__aeabi_ui2f>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <main+0x958>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe7d 	bl	8000b74 <__addsf3>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff f932 	bl	80010e8 <__aeabi_fcmpge>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80db 	beq.w	8002042 <main+0xa1e>
			HAL_ADC_Start(&hadc2);
 8001e8c:	483c      	ldr	r0, [pc, #240]	; (8001f80 <main+0x95c>)
 8001e8e:	f001 fa85 	bl	800339c <HAL_ADC_Start>
			while (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) != SET){;}
 8001e92:	bf00      	nop
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <main+0x95c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d1f8      	bne.n	8001e94 <main+0x870>
			HAL_ADC_Stop(&hadc2);
 8001ea2:	4837      	ldr	r0, [pc, #220]	; (8001f80 <main+0x95c>)
 8001ea4:	f001 fb28 	bl	80034f8 <HAL_ADC_Stop>
	  	  	int getvalue2 = HAL_ADC_GetValue(&hadc2);
 8001ea8:	4835      	ldr	r0, [pc, #212]	; (8001f80 <main+0x95c>)
 8001eaa:	f001 fb51 	bl	8003550 <HAL_ADC_GetValue>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	60fb      	str	r3, [r7, #12]
			int CurrentAnalogInput2 = map(getvalue2, 0, 4095, 0, 1024);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	4a33      	ldr	r2, [pc, #204]	; (8001f84 <main+0x960>)
 8001eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ebc:	441a      	add	r2, r3
 8001ebe:	12d2      	asrs	r2, r2, #11
 8001ec0:	17db      	asrs	r3, r3, #31
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	60bb      	str	r3, [r7, #8]
			sample_A_1 = CurrentAnalogInput2-512 + A_Offset1;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff05 	bl	8000cdc <__aeabi_i2f>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <main+0x944>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7fe fe4a 	bl	8000b74 <__addsf3>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <main+0x964>)
 8001ee6:	601a      	str	r2, [r3, #0]
            sample_A_2 = (sample_A_1/1024)*5000;
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <main+0x964>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fffb 	bl	8000eec <__aeabi_fdiv>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4910      	ldr	r1, [pc, #64]	; (8001f3c <main+0x918>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ff42 	bl	8000d84 <__aeabi_fmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <main+0x968>)
 8001f06:	601a      	str	r2, [r3, #0]
            sample_A_3 = sample_A_2/mVperAmpValue;
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <main+0x968>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <main+0x91c>)
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe ffea 	bl	8000eec <__aeabi_fdiv>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <main+0x96c>)
 8001f1e:	601a      	str	r2, [r3, #0]

  		  HAL_ADC_Start(&hadc1);
 8001f20:	481c      	ldr	r0, [pc, #112]	; (8001f94 <main+0x970>)
 8001f22:	f001 fa3b 	bl	800339c <HAL_ADC_Start>
  		  while (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != SET){;}
 8001f26:	bf00      	nop
 8001f28:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <main+0x970>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	e034      	b.n	8001f98 <main+0x974>
 8001f2e:	bf00      	nop
 8001f30:	20000464 	.word	0x20000464
 8001f34:	20000260 	.word	0x20000260
 8001f38:	20000250 	.word	0x20000250
 8001f3c:	459c4000 	.word	0x459c4000
 8001f40:	20000004 	.word	0x20000004
 8001f44:	20000398 	.word	0x20000398
 8001f48:	0800a3c8 	.word	0x0800a3c8
 8001f4c:	200002d0 	.word	0x200002d0
 8001f50:	20000504 	.word	0x20000504
 8001f54:	20000468 	.word	0x20000468
 8001f58:	20000248 	.word	0x20000248
 8001f5c:	2000024c 	.word	0x2000024c
 8001f60:	20000264 	.word	0x20000264
 8001f64:	20000258 	.word	0x20000258
 8001f68:	2000025c 	.word	0x2000025c
 8001f6c:	2000026c 	.word	0x2000026c
 8001f70:	20000270 	.word	0x20000270
 8001f74:	44fa0000 	.word	0x44fa0000
 8001f78:	20000268 	.word	0x20000268
 8001f7c:	2000027c 	.word	0x2000027c
 8001f80:	2000039c 	.word	0x2000039c
 8001f84:	80080081 	.word	0x80080081
 8001f88:	200004b0 	.word	0x200004b0
 8001f8c:	200004fc 	.word	0x200004fc
 8001f90:	200002cc 	.word	0x200002cc
 8001f94:	2000042c 	.word	0x2000042c
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d1c2      	bne.n	8001f28 <main+0x904>
  		  HAL_ADC_Stop(&hadc1);
 8001fa2:	48a3      	ldr	r0, [pc, #652]	; (8002230 <main+0xc0c>)
 8001fa4:	f001 faa8 	bl	80034f8 <HAL_ADC_Stop>
  		  int getVAC = HAL_ADC_GetValue(&hadc1);
 8001fa8:	48a1      	ldr	r0, [pc, #644]	; (8002230 <main+0xc0c>)
 8001faa:	f001 fad1 	bl	8003550 <HAL_ADC_GetValue>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	607b      	str	r3, [r7, #4]
  		  int voltageanalogInput2 = map(getVAC, 0, 4095, 0, 1024);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	029b      	lsls	r3, r3, #10
 8001fb6:	4a9f      	ldr	r2, [pc, #636]	; (8002234 <main+0xc10>)
 8001fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001fbc:	441a      	add	r2, r3
 8001fbe:	12d2      	asrs	r2, r2, #11
 8001fc0:	17db      	asrs	r3, r3, #31
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	603b      	str	r3, [r7, #0]
  		  V_Baca = 2 * (voltageanalogInput2 - 512) + V_Offset1;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fe84 	bl	8000cdc <__aeabi_i2f>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b98      	ldr	r3, [pc, #608]	; (8002238 <main+0xc14>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f7fe fdc9 	bl	8000b74 <__addsf3>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b95      	ldr	r3, [pc, #596]	; (800223c <main+0xc18>)
 8001fe8:	601a      	str	r2, [r3, #0]

          Power_Baca = V_Baca * sample_A_3; /*sample nilai daya*/
 8001fea:	4b94      	ldr	r3, [pc, #592]	; (800223c <main+0xc18>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a94      	ldr	r2, [pc, #592]	; (8002240 <main+0xc1c>)
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fec5 	bl	8000d84 <__aeabi_fmul>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <main+0xc20>)
 8002000:	601a      	str	r2, [r3, #0]
          powerSampleSum = powerSampleSum + Power_Baca; /*perhitungan nilai sample daya*/
 8002002:	4b91      	ldr	r3, [pc, #580]	; (8002248 <main+0xc24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a8f      	ldr	r2, [pc, #572]	; (8002244 <main+0xc20>)
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fdb1 	bl	8000b74 <__addsf3>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	4b8c      	ldr	r3, [pc, #560]	; (8002248 <main+0xc24>)
 8002018:	601a      	str	r2, [r3, #0]
          powerSampleCount = powerSampleCount + 1;
 800201a:	4b8c      	ldr	r3, [pc, #560]	; (800224c <main+0xc28>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fda6 	bl	8000b74 <__addsf3>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	4b87      	ldr	r3, [pc, #540]	; (800224c <main+0xc28>)
 800202e:	601a      	str	r2, [r3, #0]
          powerLastSample = HAL_GetTick();
 8002030:	f001 f8ae 	bl	8003190 <HAL_GetTick>
 8002034:	4603      	mov	r3, r0
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fe4c 	bl	8000cd4 <__aeabi_ui2f>
 800203c:	4603      	mov	r3, r0
 800203e:	4a84      	ldr	r2, [pc, #528]	; (8002250 <main+0xc2c>)
 8002040:	6013      	str	r3, [r2, #0]
	  }

	  if (powerSampleCount == 1000){//tampilkan lcd 1 detik sekali
 8002042:	4b82      	ldr	r3, [pc, #520]	; (800224c <main+0xc28>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4983      	ldr	r1, [pc, #524]	; (8002254 <main+0xc30>)
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f82f 	bl	80010ac <__aeabi_fcmpeq>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d077      	beq.n	8002144 <main+0xb20>
		  realPower = ((powerSampleSum/powerSampleCount)+ powerOffset) ;
 8002054:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <main+0xc24>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a7c      	ldr	r2, [pc, #496]	; (800224c <main+0xc28>)
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ff44 	bl	8000eec <__aeabi_fdiv>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	4b7b      	ldr	r3, [pc, #492]	; (8002258 <main+0xc34>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f7fe fd80 	bl	8000b74 <__addsf3>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	4b78      	ldr	r3, [pc, #480]	; (800225c <main+0xc38>)
 800207a:	601a      	str	r2, [r3, #0]

		  ukuranstring = sprintf((char*)buff_s, "%.1f W  ",realPower);
 800207c:	4b77      	ldr	r3, [pc, #476]	; (800225c <main+0xc38>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f9d1 	bl	8000428 <__aeabi_f2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4975      	ldr	r1, [pc, #468]	; (8002260 <main+0xc3c>)
 800208c:	4875      	ldr	r0, [pc, #468]	; (8002264 <main+0xc40>)
 800208e:	f004 fab5 	bl	80065fc <siprintf>
 8002092:	4603      	mov	r3, r0
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b74      	ldr	r3, [pc, #464]	; (8002268 <main+0xc44>)
 8002098:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <main+0xc44>)
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	4970      	ldr	r1, [pc, #448]	; (8002264 <main+0xc40>)
 80020a2:	4872      	ldr	r0, [pc, #456]	; (800226c <main+0xc48>)
 80020a4:	f003 fa97 	bl	80055d6 <HAL_UART_Transmit>

		  apparentPower = FinalRMS_A*RMSVMean;
 80020a8:	4b71      	ldr	r3, [pc, #452]	; (8002270 <main+0xc4c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a71      	ldr	r2, [pc, #452]	; (8002274 <main+0xc50>)
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe66 	bl	8000d84 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <main+0xc54>)
 80020be:	601a      	str	r2, [r3, #0]

		  ukuranstring = sprintf((char*)buff_s, "%.1f VA  ",apparentPower);
 80020c0:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <main+0xc54>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f9af 	bl	8000428 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	496b      	ldr	r1, [pc, #428]	; (800227c <main+0xc58>)
 80020d0:	4864      	ldr	r0, [pc, #400]	; (8002264 <main+0xc40>)
 80020d2:	f004 fa93 	bl	80065fc <siprintf>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <main+0xc44>)
 80020dc:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 80020de:	4b62      	ldr	r3, [pc, #392]	; (8002268 <main+0xc44>)
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	2364      	movs	r3, #100	; 0x64
 80020e4:	495f      	ldr	r1, [pc, #380]	; (8002264 <main+0xc40>)
 80020e6:	4861      	ldr	r0, [pc, #388]	; (800226c <main+0xc48>)
 80020e8:	f003 fa75 	bl	80055d6 <HAL_UART_Transmit>

          powerFactor = realPower/apparentPower;
 80020ec:	4b5b      	ldr	r3, [pc, #364]	; (800225c <main+0xc38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a61      	ldr	r2, [pc, #388]	; (8002278 <main+0xc54>)
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fef8 	bl	8000eec <__aeabi_fdiv>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <main+0xc5c>)
 8002102:	601a      	str	r2, [r3, #0]
          if(powerFactor >1 || powerFactor<0) /* jika power Factor </> 0, maka powerfactor = 0 */
 8002104:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <main+0xc5c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fff5 	bl	80010fc <__aeabi_fcmpgt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <main+0xb08>
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <main+0xc5c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe ffcd 	bl	80010c0 <__aeabi_fcmplt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <main+0xb10>
          {
            powerFactor = 0;
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <main+0xc5c>)
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
          }
          powerSampleSum = 0;
 8002134:	4b44      	ldr	r3, [pc, #272]	; (8002248 <main+0xc24>)
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
          powerSampleCount = 0;
 800213c:	4b43      	ldr	r3, [pc, #268]	; (800224c <main+0xc28>)
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
	  }


	  /*------Offset AC Power-----*/
	  if (powerOffsetRead == 1){
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <main+0xc60>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d151      	bne.n	80021f0 <main+0xbcc>
          powerOffset = 0;
 800214c:	4b42      	ldr	r3, [pc, #264]	; (8002258 <main+0xc34>)
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
          if(HAL_GetTick()>= powerOffsetLastSample + 1)
 8002154:	f001 f81c 	bl	8003190 <HAL_GetTick>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fdba 	bl	8000cd4 <__aeabi_ui2f>
 8002160:	4604      	mov	r4, r0
 8002162:	4b49      	ldr	r3, [pc, #292]	; (8002288 <main+0xc64>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fd02 	bl	8000b74 <__addsf3>
 8002170:	4603      	mov	r3, r0
 8002172:	4619      	mov	r1, r3
 8002174:	4620      	mov	r0, r4
 8002176:	f7fe ffb7 	bl	80010e8 <__aeabi_fcmpge>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <main+0xb84>
            {
              powerOffsetSampleCount = powerOffsetSampleCount + 1;
 8002180:	4b42      	ldr	r3, [pc, #264]	; (800228c <main+0xc68>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fcf3 	bl	8000b74 <__addsf3>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <main+0xc68>)
 8002194:	601a      	str	r2, [r3, #0]
              powerOffsetLastSample = HAL_GetTick();
 8002196:	f000 fffb 	bl	8003190 <HAL_GetTick>
 800219a:	4603      	mov	r3, r0
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fd99 	bl	8000cd4 <__aeabi_ui2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a38      	ldr	r2, [pc, #224]	; (8002288 <main+0xc64>)
 80021a6:	6013      	str	r3, [r2, #0]
            }
          if(powerOffsetSampleCount == 5000) /*setelah 5 detik, program jalan*/
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <main+0xc68>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4938      	ldr	r1, [pc, #224]	; (8002290 <main+0xc6c>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe ff7c 	bl	80010ac <__aeabi_fcmpeq>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01a      	beq.n	80021f0 <main+0xbcc>
            {
              powerOffset = -realPower;
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <main+0xc38>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	4a25      	ldr	r2, [pc, #148]	; (8002258 <main+0xc34>)
 80021c4:	6013      	str	r3, [r2, #0]
              powerOffsetRead = 0;
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <main+0xc60>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
              powerOffsetSampleCount = 0;
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <main+0xc68>)
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

              exportFinalEnergyValue = 0;
 80021d4:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <main+0xc70>)
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
              importFinalEnergyValue = 0;
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <main+0xc74>)
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
              Energi_Value = 0;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <main+0xc78>)
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
              cleardata();
 80021ec:	f7ff f9e4 	bl	80015b8 <cleardata>
            }
	  }


	  /*------Akumulasi & Pengukuran Energi Harian----*/
	  if (HAL_GetTick() >= energyLastSample + 1){
 80021f0:	f000 ffce 	bl	8003190 <HAL_GetTick>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fd6c 	bl	8000cd4 <__aeabi_ui2f>
 80021fc:	4604      	mov	r4, r0
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <main+0xc7c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fcb4 	bl	8000b74 <__addsf3>
 800220c:	4603      	mov	r3, r0
 800220e:	4619      	mov	r1, r3
 8002210:	4620      	mov	r0, r4
 8002212:	f7fe ff69 	bl	80010e8 <__aeabi_fcmpge>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d050      	beq.n	80022be <main+0xc9a>
          energySampleCount = energySampleCount + 1;
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <main+0xc80>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fca5 	bl	8000b74 <__addsf3>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	e03b      	b.n	80022a8 <main+0xc84>
 8002230:	2000042c 	.word	0x2000042c
 8002234:	80080081 	.word	0x80080081
 8002238:	20000228 	.word	0x20000228
 800223c:	20000214 	.word	0x20000214
 8002240:	200002cc 	.word	0x200002cc
 8002244:	20000278 	.word	0x20000278
 8002248:	20000284 	.word	0x20000284
 800224c:	20000280 	.word	0x20000280
 8002250:	2000027c 	.word	0x2000027c
 8002254:	447a0000 	.word	0x447a0000
 8002258:	20000290 	.word	0x20000290
 800225c:	20000274 	.word	0x20000274
 8002260:	0800a3d4 	.word	0x0800a3d4
 8002264:	200002d0 	.word	0x200002d0
 8002268:	20000504 	.word	0x20000504
 800226c:	20000468 	.word	0x20000468
 8002270:	20000398 	.word	0x20000398
 8002274:	20000460 	.word	0x20000460
 8002278:	20000510 	.word	0x20000510
 800227c:	0800a3e0 	.word	0x0800a3e0
 8002280:	20000288 	.word	0x20000288
 8002284:	2000028c 	.word	0x2000028c
 8002288:	20000294 	.word	0x20000294
 800228c:	20000298 	.word	0x20000298
 8002290:	459c4000 	.word	0x459c4000
 8002294:	200002b0 	.word	0x200002b0
 8002298:	200002ac 	.word	0x200002ac
 800229c:	200002a4 	.word	0x200002a4
 80022a0:	2000029c 	.word	0x2000029c
 80022a4:	200002a0 	.word	0x200002a0
 80022a8:	4b9f      	ldr	r3, [pc, #636]	; (8002528 <main+0xf04>)
 80022aa:	601a      	str	r2, [r3, #0]
          energyLastSample = HAL_GetTick();
 80022ac:	f000 ff70 	bl	8003190 <HAL_GetTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd0e 	bl	8000cd4 <__aeabi_ui2f>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a9c      	ldr	r2, [pc, #624]	; (800252c <main+0xf08>)
 80022bc:	6013      	str	r3, [r2, #0]
	  }
	  if (energySampleCount == 1000){
 80022be:	4b9a      	ldr	r3, [pc, #616]	; (8002528 <main+0xf04>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	499b      	ldr	r1, [pc, #620]	; (8002530 <main+0xf0c>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fef1 	bl	80010ac <__aeabi_fcmpeq>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d060      	beq.n	8002392 <main+0xd6e>
		  Akumulasi_Energi = realPower/3600;
 80022d0:	4b98      	ldr	r3, [pc, #608]	; (8002534 <main+0xf10>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4998      	ldr	r1, [pc, #608]	; (8002538 <main+0xf14>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fe08 	bl	8000eec <__aeabi_fdiv>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b96      	ldr	r3, [pc, #600]	; (800253c <main+0xf18>)
 80022e2:	601a      	str	r2, [r3, #0]
          Energi_Value = Energi_Value + Akumulasi_Energi;
 80022e4:	4b96      	ldr	r3, [pc, #600]	; (8002540 <main+0xf1c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a94      	ldr	r2, [pc, #592]	; (800253c <main+0xf18>)
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fc40 	bl	8000b74 <__addsf3>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b91      	ldr	r3, [pc, #580]	; (8002540 <main+0xf1c>)
 80022fa:	601a      	str	r2, [r3, #0]

		  ukuranstring = sprintf((char*)buff_s, "%.1f kWh  \r\n",Energi_Value/1000);
 80022fc:	4b90      	ldr	r3, [pc, #576]	; (8002540 <main+0xf1c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	498b      	ldr	r1, [pc, #556]	; (8002530 <main+0xf0c>)
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fdf2 	bl	8000eec <__aeabi_fdiv>
 8002308:	4603      	mov	r3, r0
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f88c 	bl	8000428 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	498b      	ldr	r1, [pc, #556]	; (8002544 <main+0xf20>)
 8002316:	488c      	ldr	r0, [pc, #560]	; (8002548 <main+0xf24>)
 8002318:	f004 f970 	bl	80065fc <siprintf>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b8a      	ldr	r3, [pc, #552]	; (800254c <main+0xf28>)
 8002322:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 8002324:	4b89      	ldr	r3, [pc, #548]	; (800254c <main+0xf28>)
 8002326:	881a      	ldrh	r2, [r3, #0]
 8002328:	2364      	movs	r3, #100	; 0x64
 800232a:	4987      	ldr	r1, [pc, #540]	; (8002548 <main+0xf24>)
 800232c:	4888      	ldr	r0, [pc, #544]	; (8002550 <main+0xf2c>)
 800232e:	f003 f952 	bl	80055d6 <HAL_UART_Transmit>
		  /*Impor & Ekspor Akumulasi & Pengukuran Energi Harian*/
          if (Akumulasi_Energi >=0)                                                     /*Jika energinya positif, itu adalah energi import*/
 8002332:	4b82      	ldr	r3, [pc, #520]	; (800253c <main+0xf18>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fed4 	bl	80010e8 <__aeabi_fcmpge>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <main+0xd3a>
            {
              importFinalEnergyValue = importFinalEnergyValue + Akumulasi_Energi;
 8002346:	4b83      	ldr	r3, [pc, #524]	; (8002554 <main+0xf30>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7c      	ldr	r2, [pc, #496]	; (800253c <main+0xf18>)
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fc0f 	bl	8000b74 <__addsf3>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	4b7e      	ldr	r3, [pc, #504]	; (8002554 <main+0xf30>)
 800235c:	601a      	str	r2, [r3, #0]
            }

          if (Akumulasi_Energi <0)                                                      /* Jika energinya negatif, itu adalah energi ekspor*/
 800235e:	4b77      	ldr	r3, [pc, #476]	; (800253c <main+0xf18>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe feaa 	bl	80010c0 <__aeabi_fcmplt>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <main+0xd66>
            {
              exportFinalEnergyValue = exportFinalEnergyValue - Akumulasi_Energi;
 8002372:	4b79      	ldr	r3, [pc, #484]	; (8002558 <main+0xf34>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a71      	ldr	r2, [pc, #452]	; (800253c <main+0xf18>)
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fbf7 	bl	8000b70 <__aeabi_fsub>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4b74      	ldr	r3, [pc, #464]	; (8002558 <main+0xf34>)
 8002388:	601a      	str	r2, [r3, #0]
            }

      energySampleCount = 0 ;
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <main+0xf04>)
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
	  }

	  /* Perhitungan Frequensi*/
	  if (z == 1){
 8002392:	4b72      	ldr	r3, [pc, #456]	; (800255c <main+0xf38>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	f040 80fe 	bne.w	8002598 <main+0xf74>
          VanalogRead = V_Baca;
 800239c:	4b70      	ldr	r3, [pc, #448]	; (8002560 <main+0xf3c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a70      	ldr	r2, [pc, #448]	; (8002564 <main+0xf40>)
 80023a2:	6013      	str	r3, [r2, #0]
          if(VanalogRead < 0 && switch01 == 9)
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <main+0xf40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f04f 0100 	mov.w	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fe87 	bl	80010c0 <__aeabi_fcmplt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00c      	beq.n	80023d2 <main+0xdae>
 80023b8:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <main+0xf44>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	496b      	ldr	r1, [pc, #428]	; (800256c <main+0xf48>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fe74 	bl	80010ac <__aeabi_fcmpeq>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <main+0xdae>
          {
            switch01 = 8;
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <main+0xf44>)
 80023cc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80023d0:	601a      	str	r2, [r3, #0]
          }

          if(VanalogRead >= 0 && switch01 == 8)
 80023d2:	4b64      	ldr	r3, [pc, #400]	; (8002564 <main+0xf40>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fe84 	bl	80010e8 <__aeabi_fcmpge>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d011      	beq.n	800240a <main+0xde6>
 80023e6:	4b60      	ldr	r3, [pc, #384]	; (8002568 <main+0xf44>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fe5c 	bl	80010ac <__aeabi_fcmpeq>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <main+0xde6>
          {
            startMicros = micros();
 80023fa:	f7ff f8c7 	bl	800158c <micros>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <main+0xf4c>)
 8002402:	6013      	str	r3, [r2, #0]
            switch01 = 7;
 8002404:	4b58      	ldr	r3, [pc, #352]	; (8002568 <main+0xf44>)
 8002406:	4a5b      	ldr	r2, [pc, #364]	; (8002574 <main+0xf50>)
 8002408:	601a      	str	r2, [r3, #0]
          }

          if(VanalogRead < 0 && switch01 == 7)
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <main+0xf40>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fe54 	bl	80010c0 <__aeabi_fcmplt>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <main+0xe12>
 800241e:	4b52      	ldr	r3, [pc, #328]	; (8002568 <main+0xf44>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4954      	ldr	r1, [pc, #336]	; (8002574 <main+0xf50>)
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe fe41 	bl	80010ac <__aeabi_fcmpeq>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <main+0xe12>
          {
            switch01 = 6;
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <main+0xf44>)
 8002432:	4a51      	ldr	r2, [pc, #324]	; (8002578 <main+0xf54>)
 8002434:	601a      	str	r2, [r3, #0]
          }
          if(VanalogRead >=0 && switch01 == 6)
 8002436:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <main+0xf40>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fe52 	bl	80010e8 <__aeabi_fcmpge>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01b      	beq.n	8002482 <main+0xe5e>
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <main+0xf44>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	494a      	ldr	r1, [pc, #296]	; (8002578 <main+0xf54>)
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fe2b 	bl	80010ac <__aeabi_fcmpeq>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d012      	beq.n	8002482 <main+0xe5e>
          {
             A_Micros = micros();
 800245c:	f7ff f896 	bl	800158c <micros>
 8002460:	4603      	mov	r3, r0
 8002462:	4a46      	ldr	r2, [pc, #280]	; (800257c <main+0xf58>)
 8002464:	6013      	str	r3, [r2, #0]
             freq_SampleCount = freq_SampleCount +1 ;
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <main+0xf5c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fb80 	bl	8000b74 <__addsf3>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	4b41      	ldr	r3, [pc, #260]	; (8002580 <main+0xf5c>)
 800247a:	601a      	str	r2, [r3, #0]
             switch01 = 7;
 800247c:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <main+0xf44>)
 800247e:	4a3d      	ldr	r2, [pc, #244]	; (8002574 <main+0xf50>)
 8002480:	601a      	str	r2, [r3, #0]
          }

          if(freq_SampleCount == expectedFrequency)
 8002482:	4b40      	ldr	r3, [pc, #256]	; (8002584 <main+0xf60>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fc28 	bl	8000cdc <__aeabi_i2f>
 800248c:	4602      	mov	r2, r0
 800248e:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <main+0xf5c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f7fe fe09 	bl	80010ac <__aeabi_fcmpeq>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d07b      	beq.n	8002598 <main+0xf74>
            {
                a = A_Micros-startMicros;
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <main+0xf58>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b32      	ldr	r3, [pc, #200]	; (8002570 <main+0xf4c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc12 	bl	8000cd4 <__aeabi_ui2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a35      	ldr	r2, [pc, #212]	; (8002588 <main+0xf64>)
 80024b4:	6013      	str	r3, [r2, #0]
                frequency = 1/((a/1000000)/freq_SampleCount); //rata rata frequensi
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <main+0xf64>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4934      	ldr	r1, [pc, #208]	; (800258c <main+0xf68>)
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fd15 	bl	8000eec <__aeabi_fdiv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <main+0xf5c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f7fe fd0d 	bl	8000eec <__aeabi_fdiv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4619      	mov	r1, r3
 80024d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80024da:	f7fe fd07 	bl	8000eec <__aeabi_fdiv>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <main+0xf6c>)
 80024e4:	601a      	str	r2, [r3, #0]
                ukuranstring = sprintf((char*)buff_s, "%.1f Hz  \r\n",frequency);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <main+0xf6c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd ff9c 	bl	8000428 <__aeabi_f2d>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4927      	ldr	r1, [pc, #156]	; (8002594 <main+0xf70>)
 80024f6:	4814      	ldr	r0, [pc, #80]	; (8002548 <main+0xf24>)
 80024f8:	f004 f880 	bl	80065fc <siprintf>
 80024fc:	4603      	mov	r3, r0
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <main+0xf28>)
 8002502:	801a      	strh	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, buff_s, ukuranstring, 100);
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <main+0xf28>)
 8002506:	881a      	ldrh	r2, [r3, #0]
 8002508:	2364      	movs	r3, #100	; 0x64
 800250a:	490f      	ldr	r1, [pc, #60]	; (8002548 <main+0xf24>)
 800250c:	4810      	ldr	r0, [pc, #64]	; (8002550 <main+0xf2c>)
 800250e:	f003 f862 	bl	80055d6 <HAL_UART_Transmit>
                freq_SampleCount = 0;
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <main+0xf5c>)
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
                switch01 = 9;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <main+0xf44>)
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <main+0xf48>)
 800251e:	601a      	str	r2, [r3, #0]
                z = 0;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <main+0xf38>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e037      	b.n	8002598 <main+0xf74>
 8002528:	200002a0 	.word	0x200002a0
 800252c:	2000029c 	.word	0x2000029c
 8002530:	447a0000 	.word	0x447a0000
 8002534:	20000274 	.word	0x20000274
 8002538:	45610000 	.word	0x45610000
 800253c:	200002a8 	.word	0x200002a8
 8002540:	200002a4 	.word	0x200002a4
 8002544:	0800a3ec 	.word	0x0800a3ec
 8002548:	200002d0 	.word	0x200002d0
 800254c:	20000504 	.word	0x20000504
 8002550:	20000468 	.word	0x20000468
 8002554:	200002ac 	.word	0x200002ac
 8002558:	200002b0 	.word	0x200002b0
 800255c:	20000210 	.word	0x20000210
 8002560:	20000214 	.word	0x20000214
 8002564:	200002bc 	.word	0x200002bc
 8002568:	2000000c 	.word	0x2000000c
 800256c:	41100000 	.word	0x41100000
 8002570:	20000428 	.word	0x20000428
 8002574:	40e00000 	.word	0x40e00000
 8002578:	40c00000 	.word	0x40c00000
 800257c:	20000500 	.word	0x20000500
 8002580:	200002b4 	.word	0x200002b4
 8002584:	20000008 	.word	0x20000008
 8002588:	2000050c 	.word	0x2000050c
 800258c:	49742400 	.word	0x49742400
 8002590:	200002b8 	.word	0x200002b8
 8002594:	0800a3fc 	.word	0x0800a3fc
            }
	  }


	  /*=======>tampilan LCD*/
	  currentMillisLCD = HAL_GetTick();
 8002598:	f000 fdfa 	bl	8003190 <HAL_GetTick>
 800259c:	4603      	mov	r3, r0
 800259e:	4a8a      	ldr	r2, [pc, #552]	; (80027c8 <main+0x11a4>)
 80025a0:	6013      	str	r3, [r2, #0]
	  if (currentMillisLCD - mulai_MillisLCD >= periodLCD && page ==1){
 80025a2:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <main+0x11a4>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <main+0x11a8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d36c      	bcc.n	800268e <main+0x106a>
 80025b4:	4b86      	ldr	r3, [pc, #536]	; (80027d0 <main+0x11ac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d168      	bne.n	800268e <main+0x106a>
		  if(realPower >= 0){
 80025bc:	4b85      	ldr	r3, [pc, #532]	; (80027d4 <main+0x11b0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fd8f 	bl	80010e8 <__aeabi_fcmpge>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <main+0xfb4>
			  currentDisplay = FinalRMS_A;
 80025d0:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <main+0x11b4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a81      	ldr	r2, [pc, #516]	; (80027dc <main+0x11b8>)
 80025d6:	6013      	str	r3, [r2, #0]
		  }
		  if(realPower < 0){
 80025d8:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <main+0x11b0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fd6d 	bl	80010c0 <__aeabi_fcmplt>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <main+0xfd4>
			  currentDisplay = -FinalRMS_A;
 80025ec:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <main+0x11b4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025f4:	4a79      	ldr	r2, [pc, #484]	; (80027dc <main+0x11b8>)
 80025f6:	6013      	str	r3, [r2, #0]
		  }
		  lcd_send_cmd(0x80|0x14);
 80025f8:	2094      	movs	r0, #148	; 0x94
 80025fa:	f7fe fdc1 	bl	8001180 <lcd_send_cmd>
		  sprintf(buffer, "%.2fA", currentDisplay);
 80025fe:	4b77      	ldr	r3, [pc, #476]	; (80027dc <main+0x11b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ff10 	bl	8000428 <__aeabi_f2d>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4974      	ldr	r1, [pc, #464]	; (80027e0 <main+0x11bc>)
 800260e:	4875      	ldr	r0, [pc, #468]	; (80027e4 <main+0x11c0>)
 8002610:	f003 fff4 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 8002614:	4873      	ldr	r0, [pc, #460]	; (80027e4 <main+0x11c0>)
 8002616:	f7fe fe67 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x19);
 800261a:	2099      	movs	r0, #153	; 0x99
 800261c:	f7fe fdb0 	bl	8001180 <lcd_send_cmd>
		  sprintf(buffer, "%.1fV", RMSVMean);
 8002620:	4b71      	ldr	r3, [pc, #452]	; (80027e8 <main+0x11c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd feff 	bl	8000428 <__aeabi_f2d>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	496f      	ldr	r1, [pc, #444]	; (80027ec <main+0x11c8>)
 8002630:	486c      	ldr	r0, [pc, #432]	; (80027e4 <main+0x11c0>)
 8002632:	f003 ffe3 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 8002636:	486b      	ldr	r0, [pc, #428]	; (80027e4 <main+0x11c0>)
 8002638:	f7fe fe56 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x54);
 800263c:	20d4      	movs	r0, #212	; 0xd4
 800263e:	f7fe fd9f 	bl	8001180 <lcd_send_cmd>
		  sprintf(buffer, "%.1fW", realPower);
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <main+0x11b0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd feee 	bl	8000428 <__aeabi_f2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4967      	ldr	r1, [pc, #412]	; (80027f0 <main+0x11cc>)
 8002652:	4864      	ldr	r0, [pc, #400]	; (80027e4 <main+0x11c0>)
 8002654:	f003 ffd2 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 8002658:	4862      	ldr	r0, [pc, #392]	; (80027e4 <main+0x11c0>)
 800265a:	f7fe fe45 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x58);
 800265e:	20d8      	movs	r0, #216	; 0xd8
 8002660:	f7fe fd8e 	bl	8001180 <lcd_send_cmd>
		  sprintf(buffer, "%.1fVA", apparentPower);
 8002664:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <main+0x11d0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd fedd 	bl	8000428 <__aeabi_f2d>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4961      	ldr	r1, [pc, #388]	; (80027f8 <main+0x11d4>)
 8002674:	485b      	ldr	r0, [pc, #364]	; (80027e4 <main+0x11c0>)
 8002676:	f003 ffc1 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 800267a:	485a      	ldr	r0, [pc, #360]	; (80027e4 <main+0x11c0>)
 800267c:	f7fe fe34 	bl	80012e8 <lcd_send_string>
		  mulai_MillisLCD = currentMillisLCD;
 8002680:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <main+0x11a4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a51      	ldr	r2, [pc, #324]	; (80027cc <main+0x11a8>)
 8002686:	6013      	str	r3, [r2, #0]
		  z = 1;
 8002688:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <main+0x11d8>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
	  }

	  if (currentMillisLCD - mulai_MillisLCD >= periodLCD && page == 2){
 800268e:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <main+0x11a4>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <main+0x11a8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800269c:	4293      	cmp	r3, r2
 800269e:	d348      	bcc.n	8002732 <main+0x110e>
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <main+0x11ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d144      	bne.n	8002732 <main+0x110e>
		  lcd_send_cmd(0x80|0x14);
 80026a8:	2094      	movs	r0, #148	; 0x94
 80026aa:	f7fe fd69 	bl	8001180 <lcd_send_cmd>
		  lcd_send_string("PF=");
 80026ae:	4854      	ldr	r0, [pc, #336]	; (8002800 <main+0x11dc>)
 80026b0:	f7fe fe1a 	bl	80012e8 <lcd_send_string>
		  sprintf(buffer, "%.2f", powerFactor);
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <main+0x11e0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd feb5 	bl	8000428 <__aeabi_f2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4951      	ldr	r1, [pc, #324]	; (8002808 <main+0x11e4>)
 80026c4:	4847      	ldr	r0, [pc, #284]	; (80027e4 <main+0x11c0>)
 80026c6:	f003 ff99 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 80026ca:	4846      	ldr	r0, [pc, #280]	; (80027e4 <main+0x11c0>)
 80026cc:	f7fe fe0c 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x20);
 80026d0:	20a0      	movs	r0, #160	; 0xa0
 80026d2:	f7fe fd55 	bl	8001180 <lcd_send_cmd>
		  sprintf(buffer, "%.1fHz", frequency);
 80026d6:	4b4d      	ldr	r3, [pc, #308]	; (800280c <main+0x11e8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fea4 	bl	8000428 <__aeabi_f2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	494a      	ldr	r1, [pc, #296]	; (8002810 <main+0x11ec>)
 80026e6:	483f      	ldr	r0, [pc, #252]	; (80027e4 <main+0x11c0>)
 80026e8:	f003 ff88 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 80026ec:	483d      	ldr	r0, [pc, #244]	; (80027e4 <main+0x11c0>)
 80026ee:	f7fe fdfb 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x54);
 80026f2:	20d4      	movs	r0, #212	; 0xd4
 80026f4:	f7fe fd44 	bl	8001180 <lcd_send_cmd>
		  lcd_send_string("Net=");
 80026f8:	4846      	ldr	r0, [pc, #280]	; (8002814 <main+0x11f0>)
 80026fa:	f7fe fdf5 	bl	80012e8 <lcd_send_string>
		  sprintf(buffer, "%.2fkWh", Energi_Value/1000);
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <main+0x11f4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4946      	ldr	r1, [pc, #280]	; (800281c <main+0x11f8>)
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fbf1 	bl	8000eec <__aeabi_fdiv>
 800270a:	4603      	mov	r3, r0
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fe8b 	bl	8000428 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4942      	ldr	r1, [pc, #264]	; (8002820 <main+0x11fc>)
 8002718:	4832      	ldr	r0, [pc, #200]	; (80027e4 <main+0x11c0>)
 800271a:	f003 ff6f 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 800271e:	4831      	ldr	r0, [pc, #196]	; (80027e4 <main+0x11c0>)
 8002720:	f7fe fde2 	bl	80012e8 <lcd_send_string>
		  mulai_MillisLCD = currentMillisLCD;
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <main+0x11a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <main+0x11a8>)
 800272a:	6013      	str	r3, [r2, #0]
		  z = 1;
 800272c:	4b33      	ldr	r3, [pc, #204]	; (80027fc <main+0x11d8>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
	  }
	  if (currentMillisLCD - mulai_MillisLCD >= periodLCD && page == 3){
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <main+0x11a4>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b25      	ldr	r3, [pc, #148]	; (80027cc <main+0x11a8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002740:	4293      	cmp	r3, r2
 8002742:	f4fe afb5 	bcc.w	80016b0 <main+0x8c>
 8002746:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <main+0x11ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b03      	cmp	r3, #3
 800274c:	f47e afb0 	bne.w	80016b0 <main+0x8c>
		  lcd_send_cmd(0x80|0x14);
 8002750:	2094      	movs	r0, #148	; 0x94
 8002752:	f7fe fd15 	bl	8001180 <lcd_send_cmd>
		  lcd_send_string("impE=");
 8002756:	4833      	ldr	r0, [pc, #204]	; (8002824 <main+0x1200>)
 8002758:	f7fe fdc6 	bl	80012e8 <lcd_send_string>
		  sprintf(buffer, "%.2fkWh", importFinalEnergyValue/1000);
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <main+0x1204>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	492e      	ldr	r1, [pc, #184]	; (800281c <main+0x11f8>)
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fbc2 	bl	8000eec <__aeabi_fdiv>
 8002768:	4603      	mov	r3, r0
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fe5c 	bl	8000428 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	492a      	ldr	r1, [pc, #168]	; (8002820 <main+0x11fc>)
 8002776:	481b      	ldr	r0, [pc, #108]	; (80027e4 <main+0x11c0>)
 8002778:	f003 ff40 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 800277c:	4819      	ldr	r0, [pc, #100]	; (80027e4 <main+0x11c0>)
 800277e:	f7fe fdb3 	bl	80012e8 <lcd_send_string>
		  lcd_send_cmd(0x80|0x54);
 8002782:	20d4      	movs	r0, #212	; 0xd4
 8002784:	f7fe fcfc 	bl	8001180 <lcd_send_cmd>
		  lcd_send_string("expE=");
 8002788:	4828      	ldr	r0, [pc, #160]	; (800282c <main+0x1208>)
 800278a:	f7fe fdad 	bl	80012e8 <lcd_send_string>
		  sprintf(buffer, "%.2fkWh", exportFinalEnergyValue/1000);
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <main+0x120c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4922      	ldr	r1, [pc, #136]	; (800281c <main+0x11f8>)
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fba9 	bl	8000eec <__aeabi_fdiv>
 800279a:	4603      	mov	r3, r0
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fe43 	bl	8000428 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	491e      	ldr	r1, [pc, #120]	; (8002820 <main+0x11fc>)
 80027a8:	480e      	ldr	r0, [pc, #56]	; (80027e4 <main+0x11c0>)
 80027aa:	f003 ff27 	bl	80065fc <siprintf>
		  lcd_send_string(buffer);
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <main+0x11c0>)
 80027b0:	f7fe fd9a 	bl	80012e8 <lcd_send_string>
		  mulai_MillisLCD = currentMillisLCD;
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <main+0x11a4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <main+0x11a8>)
 80027ba:	6013      	str	r3, [r2, #0]
		  z = 1;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <main+0x11d8>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
	  key_val = keypad_get_key_value();
 80027c2:	f7fe bf75 	b.w	80016b0 <main+0x8c>
 80027c6:	bf00      	nop
 80027c8:	20000424 	.word	0x20000424
 80027cc:	20000508 	.word	0x20000508
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000274 	.word	0x20000274
 80027d8:	20000398 	.word	0x20000398
 80027dc:	20000254 	.word	0x20000254
 80027e0:	0800a408 	.word	0x0800a408
 80027e4:	200004a8 	.word	0x200004a8
 80027e8:	20000460 	.word	0x20000460
 80027ec:	0800a410 	.word	0x0800a410
 80027f0:	0800a418 	.word	0x0800a418
 80027f4:	20000510 	.word	0x20000510
 80027f8:	0800a420 	.word	0x0800a420
 80027fc:	20000210 	.word	0x20000210
 8002800:	0800a428 	.word	0x0800a428
 8002804:	20000288 	.word	0x20000288
 8002808:	0800a42c 	.word	0x0800a42c
 800280c:	200002b8 	.word	0x200002b8
 8002810:	0800a434 	.word	0x0800a434
 8002814:	0800a43c 	.word	0x0800a43c
 8002818:	200002a4 	.word	0x200002a4
 800281c:	447a0000 	.word	0x447a0000
 8002820:	0800a444 	.word	0x0800a444
 8002824:	0800a44c 	.word	0x0800a44c
 8002828:	200002ac 	.word	0x200002ac
 800282c:	0800a454 	.word	0x0800a454
 8002830:	200002b0 	.word	0x200002b0

08002834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b094      	sub	sp, #80	; 0x50
 8002838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800283e:	2228      	movs	r2, #40	; 0x28
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f85c 	bl	8005900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002864:	2301      	movs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800286e:	2300      	movs	r3, #0
 8002870:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002872:	2301      	movs	r3, #1
 8002874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002876:	2302      	movs	r3, #2
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800287a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002880:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002884:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288a:	4618      	mov	r0, r3
 800288c:	f001 fed2 	bl	8004634 <HAL_RCC_OscConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002896:	f000 f9c9 	bl	8002c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289a:	230f      	movs	r3, #15
 800289c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2102      	movs	r1, #2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 f93c 	bl	8004b34 <HAL_RCC_ClockConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80028c2:	f000 f9b3 	bl	8002c2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028c6:	2302      	movs	r3, #2
 80028c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 fac8 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80028de:	f000 f9a5 	bl	8002c2c <Error_Handler>
  }
}
 80028e2:	bf00      	nop
 80028e4:	3750      	adds	r7, #80	; 0x50
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <MX_ADC1_Init+0x74>)
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <MX_ADC1_Init+0x78>)
 8002900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <MX_ADC1_Init+0x74>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <MX_ADC1_Init+0x74>)
 800290a:	2201      	movs	r2, #1
 800290c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_ADC1_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_ADC1_Init+0x74>)
 8002916:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800291a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <MX_ADC1_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_ADC1_Init+0x74>)
 8002924:	2201      	movs	r2, #1
 8002926:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002928:	480d      	ldr	r0, [pc, #52]	; (8002960 <MX_ADC1_Init+0x74>)
 800292a:	f000 fc5f 	bl	80031ec <HAL_ADC_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002934:	f000 f97a 	bl	8002c2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002938:	2300      	movs	r3, #0
 800293a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800293c:	2301      	movs	r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_ADC1_Init+0x74>)
 800294a:	f000 fe0d 	bl	8003568 <HAL_ADC_ConfigChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002954:	f000 f96a 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000042c 	.word	0x2000042c
 8002964:	40012400 	.word	0x40012400

08002968 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <MX_ADC2_Init+0x74>)
 800297a:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <MX_ADC2_Init+0x78>)
 800297c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_ADC2_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <MX_ADC2_Init+0x74>)
 8002986:	2201      	movs	r2, #1
 8002988:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_ADC2_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_ADC2_Init+0x74>)
 8002992:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002996:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <MX_ADC2_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_ADC2_Init+0x74>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029a4:	480d      	ldr	r0, [pc, #52]	; (80029dc <MX_ADC2_Init+0x74>)
 80029a6:	f000 fc21 	bl	80031ec <HAL_ADC_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80029b0:	f000 f93c 	bl	8002c2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_ADC2_Init+0x74>)
 80029c6:	f000 fdcf 	bl	8003568 <HAL_ADC_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80029d0:	f000 f92c 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	2000039c 	.word	0x2000039c
 80029e0:	40012800 	.word	0x40012800

080029e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <MX_I2C1_Init+0x50>)
 80029ea:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <MX_I2C1_Init+0x54>)
 80029ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <MX_I2C1_Init+0x50>)
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <MX_I2C1_Init+0x58>)
 80029f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_I2C1_Init+0x50>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <MX_I2C1_Init+0x50>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <MX_I2C1_Init+0x50>)
 8002a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <MX_I2C1_Init+0x50>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <MX_I2C1_Init+0x50>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <MX_I2C1_Init+0x50>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <MX_I2C1_Init+0x50>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <MX_I2C1_Init+0x50>)
 8002a22:	f001 f9bd 	bl	8003da0 <HAL_I2C_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a2c:	f000 f8fe 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200003cc 	.word	0x200003cc
 8002a38:	40005400 	.word	0x40005400
 8002a3c:	000186a0 	.word	0x000186a0

08002a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	463b      	mov	r3, r7
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <MX_TIM1_Init+0x9c>)
 8002a60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a64:	2247      	movs	r2, #71	; 0x47
 8002a66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a88:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a8a:	f002 faa3 	bl	8004fd4 <HAL_TIM_Base_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002a94:	f000 f8ca 	bl	8002c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a9e:	f107 0308 	add.w	r3, r7, #8
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002aa6:	f002 fb2f 	bl	8005108 <HAL_TIM_ConfigClockSource>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002ab0:	f000 f8bc 	bl	8002c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002abc:	463b      	mov	r3, r7
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002ac2:	f002 fcdd 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002acc:	f000 f8ae 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200004b4 	.word	0x200004b4
 8002adc:	40012c00 	.word	0x40012c00

08002ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <MX_USART1_UART_Init+0x50>)
 8002ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b06:	220c      	movs	r2, #12
 8002b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b18:	f002 fd10 	bl	800553c <HAL_UART_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b22:	f000 f883 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000468 	.word	0x20000468
 8002b30:	40013800 	.word	0x40013800

08002b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a33      	ldr	r2, [pc, #204]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b4e:	f043 0310 	orr.w	r3, r3, #16
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b66:	f043 0320 	orr.w	r3, r3, #32
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b78:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <MX_GPIO_Init+0xe8>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bae:	481c      	ldr	r0, [pc, #112]	; (8002c20 <MX_GPIO_Init+0xec>)
 8002bb0:	f001 f8dd 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002bba:	481a      	ldr	r0, [pc, #104]	; (8002c24 <MX_GPIO_Init+0xf0>)
 8002bbc:	f001 f8d7 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd2:	f107 0310 	add.w	r3, r7, #16
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4811      	ldr	r0, [pc, #68]	; (8002c20 <MX_GPIO_Init+0xec>)
 8002bda:	f000 ff2d 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002bde:	2378      	movs	r3, #120	; 0x78
 8002be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 0310 	add.w	r3, r7, #16
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <MX_GPIO_Init+0xf4>)
 8002bf2:	f000 ff21 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002bf6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2302      	movs	r3, #2
 8002c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <MX_GPIO_Init+0xf0>)
 8002c10:	f000 ff12 	bl	8003a38 <HAL_GPIO_Init>

}
 8002c14:	bf00      	nop
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40010c00 	.word	0x40010c00
 8002c28:	40010800 	.word	0x40010800

08002c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
}
 8002c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <Error_Handler+0x8>
	...

08002c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6193      	str	r3, [r2, #24]
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_MspInit+0x60>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_MspInit+0x60>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000

08002c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0318 	add.w	r3, r7, #24
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <HAL_ADC_MspInit+0xbc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d122      	bne.n	8002d02 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6193      	str	r3, [r2, #24]
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f107 0318 	add.w	r3, r7, #24
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4819      	ldr	r0, [pc, #100]	; (8002d60 <HAL_ADC_MspInit+0xc4>)
 8002cfc:	f000 fe9c 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d00:	e026      	b.n	8002d50 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <HAL_ADC_MspInit+0xc8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d121      	bne.n	8002d50 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_ADC_MspInit+0xc0>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d40:	2303      	movs	r3, #3
 8002d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 0318 	add.w	r3, r7, #24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <HAL_ADC_MspInit+0xc4>)
 8002d4c:	f000 fe74 	bl	8003a38 <HAL_GPIO_Init>
}
 8002d50:	bf00      	nop
 8002d52:	3728      	adds	r7, #40	; 0x28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40012400 	.word	0x40012400
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40010800 	.word	0x40010800
 8002d64:	40012800 	.word	0x40012800

08002d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0310 	add.w	r3, r7, #16
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <HAL_I2C_MspInit+0x70>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d123      	bne.n	8002dd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <HAL_I2C_MspInit+0x74>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_I2C_MspInit+0x74>)
 8002d8e:	f043 0308 	orr.w	r3, r3, #8
 8002d92:	6193      	str	r3, [r2, #24]
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_I2C_MspInit+0x74>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da0:	23c0      	movs	r3, #192	; 0xc0
 8002da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da4:	2312      	movs	r3, #18
 8002da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	4619      	mov	r1, r3
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <HAL_I2C_MspInit+0x78>)
 8002db4:	f000 fe40 	bl	8003a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_I2C_MspInit+0x74>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <HAL_I2C_MspInit+0x74>)
 8002dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dc2:	61d3      	str	r3, [r2, #28]
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_I2C_MspInit+0x74>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40005400 	.word	0x40005400
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010c00 	.word	0x40010c00

08002de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_TIM_Base_MspInit+0x34>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10b      	bne.n	8002e0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_TIM_Base_MspInit+0x38>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_TIM_Base_MspInit+0x38>)
 8002dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e00:	6193      	str	r3, [r2, #24]
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_TIM_Base_MspInit+0x38>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	40012c00 	.word	0x40012c00
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_UART_MspInit+0x8c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d131      	bne.n	8002ea4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_UART_MspInit+0x90>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_UART_MspInit+0x90>)
 8002e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4a:	6193      	str	r3, [r2, #24]
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_UART_MspInit+0x90>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_UART_MspInit+0x90>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_UART_MspInit+0x90>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_UART_MspInit+0x90>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4619      	mov	r1, r3
 8002e84:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <HAL_UART_MspInit+0x94>)
 8002e86:	f000 fdd7 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <HAL_UART_MspInit+0x94>)
 8002ea0:	f000 fdca 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ea4:	bf00      	nop
 8002ea6:	3720      	adds	r7, #32
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010800 	.word	0x40010800

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <NMI_Handler+0x4>

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002efe:	f000 f935 	bl	800316c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
	return 1;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <_kill>:

int _kill(int pid, int sig)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f1e:	f002 fcc5 	bl	80058ac <__errno>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2216      	movs	r2, #22
 8002f26:	601a      	str	r2, [r3, #0]
	return -1;
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_exit>:

void _exit (int status)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffe7 	bl	8002f14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f46:	e7fe      	b.n	8002f46 <_exit+0x12>

08002f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e00a      	b.n	8002f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f5a:	f3af 8000 	nop.w
 8002f5e:	4601      	mov	r1, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	60ba      	str	r2, [r7, #8]
 8002f66:	b2ca      	uxtb	r2, r1
 8002f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbf0      	blt.n	8002f5a <_read+0x12>
	}

return len;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e009      	b.n	8002fa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	60ba      	str	r2, [r7, #8]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	dbf1      	blt.n	8002f94 <_write+0x12>
	}
	return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_close>:

int _close(int file)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
	return -1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fe0:	605a      	str	r2, [r3, #4]
	return 0;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <_isatty>:

int _isatty(int file)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
	return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
	...

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f002 fc2e 	bl	80058ac <__errno>
 8003050:	4603      	mov	r3, r0
 8003052:	220c      	movs	r2, #12
 8003054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20005000 	.word	0x20005000
 800307c:	00000400 	.word	0x00000400
 8003080:	200002c0 	.word	0x200002c0
 8003084:	20000530 	.word	0x20000530

08003088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003094:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003096:	e003      	b.n	80030a0 <LoopCopyDataInit>

08003098 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800309a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800309c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800309e:	3104      	adds	r1, #4

080030a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030a0:	480a      	ldr	r0, [pc, #40]	; (80030cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030a8:	d3f6      	bcc.n	8003098 <CopyDataInit>
  ldr r2, =_sbss
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030ac:	e002      	b.n	80030b4 <LoopFillZerobss>

080030ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030b0:	f842 3b04 	str.w	r3, [r2], #4

080030b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030b8:	d3f9      	bcc.n	80030ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030ba:	f7ff ffe5 	bl	8003088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030be:	f002 fbfb 	bl	80058b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030c2:	f7fe faaf 	bl	8001624 <main>
  bx lr
 80030c6:	4770      	bx	lr
  ldr r3, =_sidata
 80030c8:	0800a944 	.word	0x0800a944
  ldr r0, =_sdata
 80030cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030d0:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 80030d4:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 80030d8:	20000530 	.word	0x20000530

080030dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <ADC1_2_IRQHandler>
	...

080030e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_Init+0x28>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_Init+0x28>)
 80030ea:	f043 0310 	orr.w	r3, r3, #16
 80030ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f0:	2003      	movs	r0, #3
 80030f2:	f000 fc6d 	bl	80039d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f000 f808 	bl	800310c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030fc:	f7ff fd9c 	bl	8002c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40022000 	.word	0x40022000

0800310c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_InitTick+0x54>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_InitTick+0x58>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003122:	fbb3 f3f1 	udiv	r3, r3, r1
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fc77 	bl	8003a1e <HAL_SYSTICK_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00e      	b.n	8003158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d80a      	bhi.n	8003156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003140:	2200      	movs	r2, #0
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f000 fc4d 	bl	80039e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800314c:	4a06      	ldr	r2, [pc, #24]	; (8003168 <HAL_InitTick+0x5c>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000010 	.word	0x20000010
 8003164:	20000018 	.word	0x20000018
 8003168:	20000014 	.word	0x20000014

0800316c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_IncTick+0x1c>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_IncTick+0x20>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4413      	add	r3, r2
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <HAL_IncTick+0x20>)
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	20000018 	.word	0x20000018
 800318c:	2000051c 	.word	0x2000051c

08003190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return uwTick;
 8003194:	4b02      	ldr	r3, [pc, #8]	; (80031a0 <HAL_GetTick+0x10>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	2000051c 	.word	0x2000051c

080031a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff fff0 	bl	8003190 <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d005      	beq.n	80031ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_Delay+0x44>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ca:	bf00      	nop
 80031cc:	f7ff ffe0 	bl	8003190 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d8f7      	bhi.n	80031cc <HAL_Delay+0x28>
  {
  }
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000018 	.word	0x20000018

080031ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0be      	b.n	800338c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fd36 	bl	8002c9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fae3 	bl	80037fc <ADC_ConversionStop_Disable>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8099 	bne.w	800337a <HAL_ADC_Init+0x18e>
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 8095 	bne.w	800337a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003258:	f023 0302 	bic.w	r3, r3, #2
 800325c:	f043 0202 	orr.w	r2, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800326c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7b1b      	ldrb	r3, [r3, #12]
 8003272:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003274:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4313      	orrs	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d003      	beq.n	800328e <HAL_ADC_Init+0xa2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d102      	bne.n	8003294 <HAL_ADC_Init+0xa8>
 800328e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003292:	e000      	b.n	8003296 <HAL_ADC_Init+0xaa>
 8003294:	2300      	movs	r3, #0
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7d1b      	ldrb	r3, [r3, #20]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d119      	bne.n	80032d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7b1b      	ldrb	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	035a      	lsls	r2, r3, #13
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	e00b      	b.n	80032d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_ADC_Init+0x1a8>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	d003      	beq.n	8003312 <HAL_ADC_Init+0x126>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d104      	bne.n	800331c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	3b01      	subs	r3, #1
 8003318:	051b      	lsls	r3, r3, #20
 800331a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	430a      	orrs	r2, r1
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_ADC_Init+0x1ac>)
 8003338:	4013      	ands	r3, r2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	d10b      	bne.n	8003358 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f023 0303 	bic.w	r3, r3, #3
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003356:	e018      	b.n	800338a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f023 0312 	bic.w	r3, r3, #18
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003378:	e007      	b.n	800338a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800338a:	7dfb      	ldrb	r3, [r7, #23]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	ffe1f7fd 	.word	0xffe1f7fd
 8003398:	ff1f0efe 	.word	0xff1f0efe

0800339c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_Start+0x1a>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e098      	b.n	80034e8 <HAL_ADC_Start+0x14c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f9ca 	bl	8003758 <ADC_Enable>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 8087 	bne.w	80034de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a41      	ldr	r2, [pc, #260]	; (80034f0 <HAL_ADC_Start+0x154>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d105      	bne.n	80033fa <HAL_ADC_Start+0x5e>
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_ADC_Start+0x158>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d115      	bne.n	8003426 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d026      	beq.n	8003462 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800341c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003424:	e01d      	b.n	8003462 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <HAL_ADC_Start+0x158>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_ADC_Start+0xaa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_ADC_Start+0x154>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10d      	bne.n	8003462 <HAL_ADC_Start+0xc6>
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_ADC_Start+0x158>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800345a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d006      	beq.n	800347c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	f023 0206 	bic.w	r2, r3, #6
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c
 800347a:	e002      	b.n	8003482 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0202 	mvn.w	r2, #2
 8003492:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800349e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034a2:	d113      	bne.n	80034cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <HAL_ADC_Start+0x154>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d105      	bne.n	80034ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_ADC_Start+0x158>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	e00c      	b.n	80034e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	e003      	b.n	80034e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40012800 	.word	0x40012800
 80034f4:	40012400 	.word	0x40012400

080034f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_ADC_Stop+0x1a>
 800350e:	2302      	movs	r3, #2
 8003510:	e01a      	b.n	8003548 <HAL_ADC_Stop+0x50>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f96e 	bl	80037fc <ADC_ConversionStop_Disable>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x20>
 8003584:	2302      	movs	r3, #2
 8003586:	e0dc      	b.n	8003742 <HAL_ADC_ConfigChannel+0x1da>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d81c      	bhi.n	80035d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	3b05      	subs	r3, #5
 80035aa:	221f      	movs	r2, #31
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	4019      	ands	r1, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3b05      	subs	r3, #5
 80035c4:	fa00 f203 	lsl.w	r2, r0, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34
 80035d0:	e03c      	b.n	800364c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d81c      	bhi.n	8003614 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	3b23      	subs	r3, #35	; 0x23
 80035ec:	221f      	movs	r2, #31
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4019      	ands	r1, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	3b23      	subs	r3, #35	; 0x23
 8003606:	fa00 f203 	lsl.w	r2, r0, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
 8003612:	e01b      	b.n	800364c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3b41      	subs	r3, #65	; 0x41
 8003626:	221f      	movs	r2, #31
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	4019      	ands	r1, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b41      	subs	r3, #65	; 0x41
 8003640:	fa00 f203 	lsl.w	r2, r0, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b09      	cmp	r3, #9
 8003652:	d91c      	bls.n	800368e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68d9      	ldr	r1, [r3, #12]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	3b1e      	subs	r3, #30
 8003666:	2207      	movs	r2, #7
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	4019      	ands	r1, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6898      	ldr	r0, [r3, #8]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	3b1e      	subs	r3, #30
 8003680:	fa00 f203 	lsl.w	r2, r0, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	e019      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6919      	ldr	r1, [r3, #16]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	2207      	movs	r2, #7
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	4019      	ands	r1, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6898      	ldr	r0, [r3, #8]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	fa00 f203 	lsl.w	r2, r0, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d003      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036ce:	2b11      	cmp	r3, #17
 80036d0:	d132      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_ADC_ConfigChannel+0x1e4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d125      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d126      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036f8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d11a      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_ADC_ConfigChannel+0x1e8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_ADC_ConfigChannel+0x1ec>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	0c9a      	lsrs	r2, r3, #18
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003718:	e002      	b.n	8003720 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3b01      	subs	r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f9      	bne.n	800371a <HAL_ADC_ConfigChannel+0x1b2>
 8003726:	e007      	b.n	8003738 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40012400 	.word	0x40012400
 8003750:	20000010 	.word	0x20000010
 8003754:	431bde83 	.word	0x431bde83

08003758 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d039      	beq.n	80037ea <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <ADC_Enable+0x9c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <ADC_Enable+0xa0>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	0c9b      	lsrs	r3, r3, #18
 8003792:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003794:	e002      	b.n	800379c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	3b01      	subs	r3, #1
 800379a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f9      	bne.n	8003796 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037a2:	f7ff fcf5 	bl	8003190 <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037a8:	e018      	b.n	80037dc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037aa:	f7ff fcf1 	bl	8003190 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d911      	bls.n	80037dc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f043 0210 	orr.w	r2, r3, #16
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e007      	b.n	80037ec <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d1df      	bne.n	80037aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000010 	.word	0x20000010
 80037f8:	431bde83 	.word	0x431bde83

080037fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d127      	bne.n	8003866 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003826:	f7ff fcb3 	bl	8003190 <HAL_GetTick>
 800382a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800382c:	e014      	b.n	8003858 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800382e:	f7ff fcaf 	bl	8003190 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d90d      	bls.n	8003858 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f043 0210 	orr.w	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e007      	b.n	8003868 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d0e3      	beq.n	800382e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800389c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	60d3      	str	r3, [r2, #12]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <__NVIC_GetPriorityGrouping+0x18>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 0307 	and.w	r3, r3, #7
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	; (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	; (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	; 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800399c:	d301      	bcc.n	80039a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <SysTick_Config+0x40>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039aa:	210f      	movs	r1, #15
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7ff ff90 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <SysTick_Config+0x40>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <SysTick_Config+0x40>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff49 	bl	8003870 <__NVIC_SetPriorityGrouping>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f8:	f7ff ff5e 	bl	80038b8 <__NVIC_GetPriorityGrouping>
 80039fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff ff90 	bl	8003928 <NVIC_EncodePriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5f 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffb0 	bl	800398c <SysTick_Config>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b08b      	sub	sp, #44	; 0x2c
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4a:	e169      	b.n	8003d20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f040 8158 	bne.w	8003d1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4a9a      	ldr	r2, [pc, #616]	; (8003cd8 <HAL_GPIO_Init+0x2a0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d05e      	beq.n	8003b32 <HAL_GPIO_Init+0xfa>
 8003a74:	4a98      	ldr	r2, [pc, #608]	; (8003cd8 <HAL_GPIO_Init+0x2a0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d875      	bhi.n	8003b66 <HAL_GPIO_Init+0x12e>
 8003a7a:	4a98      	ldr	r2, [pc, #608]	; (8003cdc <HAL_GPIO_Init+0x2a4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d058      	beq.n	8003b32 <HAL_GPIO_Init+0xfa>
 8003a80:	4a96      	ldr	r2, [pc, #600]	; (8003cdc <HAL_GPIO_Init+0x2a4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d86f      	bhi.n	8003b66 <HAL_GPIO_Init+0x12e>
 8003a86:	4a96      	ldr	r2, [pc, #600]	; (8003ce0 <HAL_GPIO_Init+0x2a8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d052      	beq.n	8003b32 <HAL_GPIO_Init+0xfa>
 8003a8c:	4a94      	ldr	r2, [pc, #592]	; (8003ce0 <HAL_GPIO_Init+0x2a8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d869      	bhi.n	8003b66 <HAL_GPIO_Init+0x12e>
 8003a92:	4a94      	ldr	r2, [pc, #592]	; (8003ce4 <HAL_GPIO_Init+0x2ac>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d04c      	beq.n	8003b32 <HAL_GPIO_Init+0xfa>
 8003a98:	4a92      	ldr	r2, [pc, #584]	; (8003ce4 <HAL_GPIO_Init+0x2ac>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d863      	bhi.n	8003b66 <HAL_GPIO_Init+0x12e>
 8003a9e:	4a92      	ldr	r2, [pc, #584]	; (8003ce8 <HAL_GPIO_Init+0x2b0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d046      	beq.n	8003b32 <HAL_GPIO_Init+0xfa>
 8003aa4:	4a90      	ldr	r2, [pc, #576]	; (8003ce8 <HAL_GPIO_Init+0x2b0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d85d      	bhi.n	8003b66 <HAL_GPIO_Init+0x12e>
 8003aaa:	2b12      	cmp	r3, #18
 8003aac:	d82a      	bhi.n	8003b04 <HAL_GPIO_Init+0xcc>
 8003aae:	2b12      	cmp	r3, #18
 8003ab0:	d859      	bhi.n	8003b66 <HAL_GPIO_Init+0x12e>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <HAL_GPIO_Init+0x80>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003b33 	.word	0x08003b33
 8003abc:	08003b0d 	.word	0x08003b0d
 8003ac0:	08003b1f 	.word	0x08003b1f
 8003ac4:	08003b61 	.word	0x08003b61
 8003ac8:	08003b67 	.word	0x08003b67
 8003acc:	08003b67 	.word	0x08003b67
 8003ad0:	08003b67 	.word	0x08003b67
 8003ad4:	08003b67 	.word	0x08003b67
 8003ad8:	08003b67 	.word	0x08003b67
 8003adc:	08003b67 	.word	0x08003b67
 8003ae0:	08003b67 	.word	0x08003b67
 8003ae4:	08003b67 	.word	0x08003b67
 8003ae8:	08003b67 	.word	0x08003b67
 8003aec:	08003b67 	.word	0x08003b67
 8003af0:	08003b67 	.word	0x08003b67
 8003af4:	08003b67 	.word	0x08003b67
 8003af8:	08003b67 	.word	0x08003b67
 8003afc:	08003b15 	.word	0x08003b15
 8003b00:	08003b29 	.word	0x08003b29
 8003b04:	4a79      	ldr	r2, [pc, #484]	; (8003cec <HAL_GPIO_Init+0x2b4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b0a:	e02c      	b.n	8003b66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	623b      	str	r3, [r7, #32]
          break;
 8003b12:	e029      	b.n	8003b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	623b      	str	r3, [r7, #32]
          break;
 8003b1c:	e024      	b.n	8003b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	3308      	adds	r3, #8
 8003b24:	623b      	str	r3, [r7, #32]
          break;
 8003b26:	e01f      	b.n	8003b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	623b      	str	r3, [r7, #32]
          break;
 8003b30:	e01a      	b.n	8003b68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	623b      	str	r3, [r7, #32]
          break;
 8003b3e:	e013      	b.n	8003b68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b48:	2308      	movs	r3, #8
 8003b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	611a      	str	r2, [r3, #16]
          break;
 8003b52:	e009      	b.n	8003b68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b54:	2308      	movs	r3, #8
 8003b56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	615a      	str	r2, [r3, #20]
          break;
 8003b5e:	e003      	b.n	8003b68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b60:	2300      	movs	r3, #0
 8003b62:	623b      	str	r3, [r7, #32]
          break;
 8003b64:	e000      	b.n	8003b68 <HAL_GPIO_Init+0x130>
          break;
 8003b66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2bff      	cmp	r3, #255	; 0xff
 8003b6c:	d801      	bhi.n	8003b72 <HAL_GPIO_Init+0x13a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	e001      	b.n	8003b76 <HAL_GPIO_Init+0x13e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2bff      	cmp	r3, #255	; 0xff
 8003b7c:	d802      	bhi.n	8003b84 <HAL_GPIO_Init+0x14c>
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	e002      	b.n	8003b8a <HAL_GPIO_Init+0x152>
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	3b08      	subs	r3, #8
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	210f      	movs	r1, #15
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	fa01 f303 	lsl.w	r3, r1, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	6a39      	ldr	r1, [r7, #32]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80b1 	beq.w	8003d1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bb8:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <HAL_GPIO_Init+0x2b8>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	4a4c      	ldr	r2, [pc, #304]	; (8003cf0 <HAL_GPIO_Init+0x2b8>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6193      	str	r3, [r2, #24]
 8003bc4:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <HAL_GPIO_Init+0x2b8>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bd0:	4a48      	ldr	r2, [pc, #288]	; (8003cf4 <HAL_GPIO_Init+0x2bc>)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	220f      	movs	r2, #15
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a40      	ldr	r2, [pc, #256]	; (8003cf8 <HAL_GPIO_Init+0x2c0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_GPIO_Init+0x1ec>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a3f      	ldr	r2, [pc, #252]	; (8003cfc <HAL_GPIO_Init+0x2c4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00d      	beq.n	8003c20 <HAL_GPIO_Init+0x1e8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3e      	ldr	r2, [pc, #248]	; (8003d00 <HAL_GPIO_Init+0x2c8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <HAL_GPIO_Init+0x1e4>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3d      	ldr	r2, [pc, #244]	; (8003d04 <HAL_GPIO_Init+0x2cc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_GPIO_Init+0x1e0>
 8003c14:	2303      	movs	r3, #3
 8003c16:	e006      	b.n	8003c26 <HAL_GPIO_Init+0x1ee>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	e004      	b.n	8003c26 <HAL_GPIO_Init+0x1ee>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e002      	b.n	8003c26 <HAL_GPIO_Init+0x1ee>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <HAL_GPIO_Init+0x1ee>
 8003c24:	2300      	movs	r3, #0
 8003c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c28:	f002 0203 	and.w	r2, r2, #3
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	4093      	lsls	r3, r2
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c36:	492f      	ldr	r1, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x2bc>)
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	492c      	ldr	r1, [pc, #176]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	4928      	ldr	r1, [pc, #160]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d006      	beq.n	8003c86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c78:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	4922      	ldr	r1, [pc, #136]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
 8003c84:	e006      	b.n	8003c94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	491e      	ldr	r1, [pc, #120]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	4918      	ldr	r1, [pc, #96]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]
 8003cac:	e006      	b.n	8003cbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	4914      	ldr	r1, [pc, #80]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d021      	beq.n	8003d0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	490e      	ldr	r1, [pc, #56]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60cb      	str	r3, [r1, #12]
 8003cd4:	e021      	b.n	8003d1a <HAL_GPIO_Init+0x2e2>
 8003cd6:	bf00      	nop
 8003cd8:	10320000 	.word	0x10320000
 8003cdc:	10310000 	.word	0x10310000
 8003ce0:	10220000 	.word	0x10220000
 8003ce4:	10210000 	.word	0x10210000
 8003ce8:	10120000 	.word	0x10120000
 8003cec:	10110000 	.word	0x10110000
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40010800 	.word	0x40010800
 8003cfc:	40010c00 	.word	0x40010c00
 8003d00:	40011000 	.word	0x40011000
 8003d04:	40011400 	.word	0x40011400
 8003d08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_GPIO_Init+0x304>)
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	4909      	ldr	r1, [pc, #36]	; (8003d3c <HAL_GPIO_Init+0x304>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f47f ae8e 	bne.w	8003a4c <HAL_GPIO_Init+0x14>
  }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	372c      	adds	r7, #44	; 0x2c
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	40010400 	.word	0x40010400

08003d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	887b      	ldrh	r3, [r7, #2]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	e001      	b.n	8003d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	807b      	strh	r3, [r7, #2]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d7e:	787b      	ldrb	r3, [r7, #1]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d84:	887a      	ldrh	r2, [r7, #2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d8a:	e003      	b.n	8003d94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	041a      	lsls	r2, r3, #16
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e12b      	b.n	800400a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe ffce 	bl	8002d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e04:	f000 ffea 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4a81      	ldr	r2, [pc, #516]	; (8004014 <HAL_I2C_Init+0x274>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d807      	bhi.n	8003e24 <HAL_I2C_Init+0x84>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a80      	ldr	r2, [pc, #512]	; (8004018 <HAL_I2C_Init+0x278>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bf94      	ite	ls
 8003e1c:	2301      	movls	r3, #1
 8003e1e:	2300      	movhi	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e006      	b.n	8003e32 <HAL_I2C_Init+0x92>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a7d      	ldr	r2, [pc, #500]	; (800401c <HAL_I2C_Init+0x27c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf94      	ite	ls
 8003e2c:	2301      	movls	r3, #1
 8003e2e:	2300      	movhi	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0e7      	b.n	800400a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a78      	ldr	r2, [pc, #480]	; (8004020 <HAL_I2C_Init+0x280>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	0c9b      	lsrs	r3, r3, #18
 8003e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a6a      	ldr	r2, [pc, #424]	; (8004014 <HAL_I2C_Init+0x274>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d802      	bhi.n	8003e74 <HAL_I2C_Init+0xd4>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3301      	adds	r3, #1
 8003e72:	e009      	b.n	8003e88 <HAL_I2C_Init+0xe8>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	4a69      	ldr	r2, [pc, #420]	; (8004024 <HAL_I2C_Init+0x284>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	3301      	adds	r3, #1
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	495c      	ldr	r1, [pc, #368]	; (8004014 <HAL_I2C_Init+0x274>)
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	d819      	bhi.n	8003edc <HAL_I2C_Init+0x13c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e59      	subs	r1, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb6:	1c59      	adds	r1, r3, #1
 8003eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_I2C_Init+0x138>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1e59      	subs	r1, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed6:	e051      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e04f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <HAL_I2C_Init+0x168>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e012      	b.n	8003f2e <HAL_I2C_Init+0x18e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e58      	subs	r0, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	0099      	lsls	r1, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Init+0x196>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e022      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_I2C_Init+0x1bc>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1e58      	subs	r0, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	440b      	add	r3, r1
 8003f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5a:	e00f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	6809      	ldr	r1, [r1, #0]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6911      	ldr	r1, [r2, #16]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	000186a0 	.word	0x000186a0
 8004018:	001e847f 	.word	0x001e847f
 800401c:	003d08ff 	.word	0x003d08ff
 8004020:	431bde83 	.word	0x431bde83
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
 8004038:	4613      	mov	r3, r2
 800403a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff f8a8 	bl	8003190 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	f040 80e0 	bne.w	8004210 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2319      	movs	r3, #25
 8004056:	2201      	movs	r2, #1
 8004058:	4970      	ldr	r1, [pc, #448]	; (800421c <HAL_I2C_Master_Transmit+0x1f4>)
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f964 	bl	8004328 <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
 8004068:	e0d3      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Master_Transmit+0x50>
 8004074:	2302      	movs	r3, #2
 8004076:	e0cc      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d007      	beq.n	800409e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	; 0x21
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2210      	movs	r2, #16
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	893a      	ldrh	r2, [r7, #8]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a50      	ldr	r2, [pc, #320]	; (8004220 <HAL_I2C_Master_Transmit+0x1f8>)
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f89c 	bl	8004224 <I2C_MasterRequestWrite>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e08d      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800410c:	e066      	b.n	80041dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f9de 	bl	80044d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004134:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d11b      	bne.n	80041b0 <HAL_I2C_Master_Transmit+0x188>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	6a39      	ldr	r1, [r7, #32]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f9ce 	bl	8004556 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d107      	bne.n	80041d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e01a      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d194      	bne.n	800410e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00100002 	.word	0x00100002
 8004220:	ffff0000 	.word	0xffff0000

08004224 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	460b      	mov	r3, r1
 8004232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d006      	beq.n	800424e <I2C_MasterRequestWrite+0x2a>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d003      	beq.n	800424e <I2C_MasterRequestWrite+0x2a>
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800424c:	d108      	bne.n	8004260 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e00b      	b.n	8004278 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b12      	cmp	r3, #18
 8004266:	d107      	bne.n	8004278 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004276:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f84f 	bl	8004328 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429e:	d103      	bne.n	80042a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e035      	b.n	8004318 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b4:	d108      	bne.n	80042c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042b6:	897b      	ldrh	r3, [r7, #10]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c4:	611a      	str	r2, [r3, #16]
 80042c6:	e01b      	b.n	8004300 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042c8:	897b      	ldrh	r3, [r7, #10]
 80042ca:	11db      	asrs	r3, r3, #7
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0306 	and.w	r3, r3, #6
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f063 030f 	orn	r3, r3, #15
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	490e      	ldr	r1, [pc, #56]	; (8004320 <I2C_MasterRequestWrite+0xfc>)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f875 	bl	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e010      	b.n	8004318 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042f6:	897b      	ldrh	r3, [r7, #10]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	4907      	ldr	r1, [pc, #28]	; (8004324 <I2C_MasterRequestWrite+0x100>)
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f865 	bl	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	00010008 	.word	0x00010008
 8004324:	00010002 	.word	0x00010002

08004328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004338:	e025      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d021      	beq.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe ff25 	bl	8003190 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e023      	b.n	80043ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10d      	bne.n	80043ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	e00c      	b.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	43da      	mvns	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d0b6      	beq.n	800433a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043e4:	e051      	b.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f4:	d123      	bne.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004404:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800440e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f043 0204 	orr.w	r2, r3, #4
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e046      	b.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d021      	beq.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fe fea3 	bl	8003190 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f043 0220 	orr.w	r2, r3, #32
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e020      	b.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10c      	bne.n	80044ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	43da      	mvns	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e00b      	b.n	80044c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	43da      	mvns	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d18d      	bne.n	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e0:	e02d      	b.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f878 	bl	80045d8 <I2C_IsAcknowledgeFailed>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e02d      	b.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d021      	beq.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fe fe49 	bl	8003190 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d116      	bne.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e007      	b.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d1ca      	bne.n	80044e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004562:	e02d      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f837 	bl	80045d8 <I2C_IsAcknowledgeFailed>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e02d      	b.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d021      	beq.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	f7fe fe08 	bl	8003190 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	429a      	cmp	r2, r3
 800458a:	d302      	bcc.n	8004592 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d116      	bne.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e007      	b.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d1ca      	bne.n	8004564 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ee:	d11b      	bne.n	8004628 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f043 0204 	orr.w	r2, r3, #4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e26c      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8087 	beq.w	8004762 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004654:	4b92      	ldr	r3, [pc, #584]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b04      	cmp	r3, #4
 800465e:	d00c      	beq.n	800467a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004660:	4b8f      	ldr	r3, [pc, #572]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b08      	cmp	r3, #8
 800466a:	d112      	bne.n	8004692 <HAL_RCC_OscConfig+0x5e>
 800466c:	4b8c      	ldr	r3, [pc, #560]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004678:	d10b      	bne.n	8004692 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467a:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d06c      	beq.n	8004760 <HAL_RCC_OscConfig+0x12c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d168      	bne.n	8004760 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e246      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x76>
 800469c:	4b80      	ldr	r3, [pc, #512]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7f      	ldr	r2, [pc, #508]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e02e      	b.n	8004708 <HAL_RCC_OscConfig+0xd4>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x98>
 80046b2:	4b7b      	ldr	r3, [pc, #492]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a7a      	ldr	r2, [pc, #488]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b78      	ldr	r3, [pc, #480]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a77      	ldr	r2, [pc, #476]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e01d      	b.n	8004708 <HAL_RCC_OscConfig+0xd4>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0xbc>
 80046d6:	4b72      	ldr	r3, [pc, #456]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a71      	ldr	r2, [pc, #452]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b6f      	ldr	r3, [pc, #444]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6e      	ldr	r2, [pc, #440]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0xd4>
 80046f0:	4b6b      	ldr	r3, [pc, #428]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a6a      	ldr	r2, [pc, #424]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a67      	ldr	r2, [pc, #412]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004706:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe fd3e 	bl	8003190 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fe fd3a 	bl	8003190 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1fa      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xe4>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fe fd2a 	bl	8003190 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fe fd26 	bl	8003190 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1e6      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x10c>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d063      	beq.n	8004836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800476e:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800477a:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d11c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x18c>
 8004786:	4b46      	ldr	r3, [pc, #280]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x176>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e1ba      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4939      	ldr	r1, [pc, #228]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	e03a      	b.n	8004836 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_RCC_OscConfig+0x270>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ce:	f7fe fcdf 	bl	8003190 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fe fcdb 	bl	8003190 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e19b      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4927      	ldr	r1, [pc, #156]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
 8004808:	e015      	b.n	8004836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480a:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <HAL_RCC_OscConfig+0x270>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fe fcbe 	bl	8003190 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004818:	f7fe fcba 	bl	8003190 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e17a      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03a      	beq.n	80048b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d019      	beq.n	800487e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_RCC_OscConfig+0x274>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004850:	f7fe fc9e 	bl	8003190 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004858:	f7fe fc9a 	bl	8003190 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e15a      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <HAL_RCC_OscConfig+0x26c>)
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004876:	2001      	movs	r0, #1
 8004878:	f000 fad8 	bl	8004e2c <RCC_Delay>
 800487c:	e01c      	b.n	80048b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487e:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_RCC_OscConfig+0x274>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004884:	f7fe fc84 	bl	8003190 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488a:	e00f      	b.n	80048ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7fe fc80 	bl	8003190 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d908      	bls.n	80048ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e140      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	42420000 	.word	0x42420000
 80048a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	4b9e      	ldr	r3, [pc, #632]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e9      	bne.n	800488c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a6 	beq.w	8004a12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ca:	4b97      	ldr	r3, [pc, #604]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	4b94      	ldr	r3, [pc, #592]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4a93      	ldr	r2, [pc, #588]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	61d3      	str	r3, [r2, #28]
 80048e2:	4b91      	ldr	r3, [pc, #580]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f2:	4b8e      	ldr	r3, [pc, #568]	; (8004b2c <HAL_RCC_OscConfig+0x4f8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d118      	bne.n	8004930 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fe:	4b8b      	ldr	r3, [pc, #556]	; (8004b2c <HAL_RCC_OscConfig+0x4f8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a8a      	ldr	r2, [pc, #552]	; (8004b2c <HAL_RCC_OscConfig+0x4f8>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7fe fc41 	bl	8003190 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7fe fc3d 	bl	8003190 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b64      	cmp	r3, #100	; 0x64
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e0fd      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <HAL_RCC_OscConfig+0x4f8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x312>
 8004938:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4a7a      	ldr	r2, [pc, #488]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6213      	str	r3, [r2, #32]
 8004944:	e02d      	b.n	80049a2 <HAL_RCC_OscConfig+0x36e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x334>
 800494e:	4b76      	ldr	r3, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4a75      	ldr	r2, [pc, #468]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	6213      	str	r3, [r2, #32]
 800495a:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4a72      	ldr	r2, [pc, #456]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004960:	f023 0304 	bic.w	r3, r3, #4
 8004964:	6213      	str	r3, [r2, #32]
 8004966:	e01c      	b.n	80049a2 <HAL_RCC_OscConfig+0x36e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b05      	cmp	r3, #5
 800496e:	d10c      	bne.n	800498a <HAL_RCC_OscConfig+0x356>
 8004970:	4b6d      	ldr	r3, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	4a6c      	ldr	r2, [pc, #432]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6213      	str	r3, [r2, #32]
 800497c:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4a69      	ldr	r2, [pc, #420]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6213      	str	r3, [r2, #32]
 8004988:	e00b      	b.n	80049a2 <HAL_RCC_OscConfig+0x36e>
 800498a:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4a66      	ldr	r2, [pc, #408]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6213      	str	r3, [r2, #32]
 8004996:	4b64      	ldr	r3, [pc, #400]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a63      	ldr	r2, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d015      	beq.n	80049d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fe fbf1 	bl	8003190 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fe fbed 	bl	8003190 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0ab      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c8:	4b57      	ldr	r3, [pc, #348]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ee      	beq.n	80049b2 <HAL_RCC_OscConfig+0x37e>
 80049d4:	e014      	b.n	8004a00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fe fbdb 	bl	8003190 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049dc:	e00a      	b.n	80049f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fe fbd7 	bl	8003190 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e095      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f4:	4b4c      	ldr	r3, [pc, #304]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ee      	bne.n	80049de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a06:	4b48      	ldr	r3, [pc, #288]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8081 	beq.w	8004b1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a1c:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d061      	beq.n	8004aec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d146      	bne.n	8004abe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_OscConfig+0x4fc>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fe fbab 	bl	8003190 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3e:	f7fe fba7 	bl	8003190 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e067      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a50:	4b35      	ldr	r3, [pc, #212]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a66:	4b30      	ldr	r3, [pc, #192]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	492d      	ldr	r1, [pc, #180]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a78:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a19      	ldr	r1, [r3, #32]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	4927      	ldr	r1, [pc, #156]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_OscConfig+0x4fc>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a96:	f7fe fb7b 	bl	8003190 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9e:	f7fe fb77 	bl	8003190 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e037      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x46a>
 8004abc:	e02f      	b.n	8004b1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <HAL_RCC_OscConfig+0x4fc>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fe fb64 	bl	8003190 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fe fb60 	bl	8003190 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e020      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x498>
 8004aea:	e018      	b.n	8004b1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e013      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_OscConfig+0x4f4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42420060 	.word	0x42420060

08004b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0d0      	b.n	8004cea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b48:	4b6a      	ldr	r3, [pc, #424]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d910      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b67      	ldr	r3, [pc, #412]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 0207 	bic.w	r2, r3, #7
 8004b5e:	4965      	ldr	r1, [pc, #404]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d040      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d115      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e073      	b.n	8004cea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e06b      	b.n	8004cea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c12:	4b39      	ldr	r3, [pc, #228]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4936      	ldr	r1, [pc, #216]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c24:	f7fe fab4 	bl	8003190 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2c:	f7fe fab0 	bl	8003190 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e053      	b.n	8004cea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 020c 	and.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1eb      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c54:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d210      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 0207 	bic.w	r2, r3, #7
 8004c6a:	4922      	ldr	r1, [pc, #136]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1cc>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1d0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fa12 	bl	800310c <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40022000 	.word	0x40022000
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	0800a46c 	.word	0x0800a46c
 8004d00:	20000010 	.word	0x20000010
 8004d04:	20000014 	.word	0x20000014

08004d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	b490      	push	{r4, r7}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d0e:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d10:	1d3c      	adds	r4, r7, #4
 8004d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d18:	f240 2301 	movw	r3, #513	; 0x201
 8004d1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d002      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x40>
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_GetSysClockFreq+0x46>
 8004d46:	e02d      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d4a:	623b      	str	r3, [r7, #32]
      break;
 8004d4c:	e02d      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	0c9b      	lsrs	r3, r3, #18
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c5b      	lsrs	r3, r3, #17
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d86:	fb02 f203 	mul.w	r2, r2, r3
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	e004      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	623b      	str	r3, [r7, #32]
      break;
 8004da2:	e002      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da6:	623b      	str	r3, [r7, #32]
      break;
 8004da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004daa:	6a3b      	ldr	r3, [r7, #32]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc90      	pop	{r4, r7}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	0800a45c 	.word	0x0800a45c
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	007a1200 	.word	0x007a1200
 8004dc4:	003d0900 	.word	0x003d0900

08004dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dcc:	4b02      	ldr	r3, [pc, #8]	; (8004dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr
 8004dd8:	20000010 	.word	0x20000010

08004ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004de0:	f7ff fff2 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4903      	ldr	r1, [pc, #12]	; (8004e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	0800a47c 	.word	0x0800a47c

08004e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e08:	f7ff ffde 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	0adb      	lsrs	r3, r3, #11
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4903      	ldr	r1, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800a47c 	.word	0x0800a47c

08004e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <RCC_Delay+0x34>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <RCC_Delay+0x38>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0a5b      	lsrs	r3, r3, #9
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e48:	bf00      	nop
  }
  while (Delay --);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	60fa      	str	r2, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f9      	bne.n	8004e48 <RCC_Delay+0x1c>
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	20000010 	.word	0x20000010
 8004e64:	10624dd3 	.word	0x10624dd3

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d07d      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004e84:	2300      	movs	r3, #0
 8004e86:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e88:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e94:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	61d3      	str	r3, [r2, #28]
 8004ea0:	4b49      	ldr	r3, [pc, #292]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb0:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d118      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebc:	4b43      	ldr	r3, [pc, #268]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a42      	ldr	r2, [pc, #264]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec8:	f7fe f962 	bl	8003190 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ece:	e008      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed0:	f7fe f95e 	bl	8003190 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e06d      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eee:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d02e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d027      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f0c:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f16:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f22:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fe f92d 	bl	8003190 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f38:	e00a      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fe f929 	bl	8003190 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e036      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ee      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4917      	ldr	r1, [pc, #92]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	490b      	ldr	r1, [pc, #44]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4904      	ldr	r1, [pc, #16]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	42420440 	.word	0x42420440

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e041      	b.n	800506a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd fef2 	bl	8002de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 f93c 	bl	8005290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e032      	b.n	80050f2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_TIM_Base_Start+0x88>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_TIM_Base_Start+0x48>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d009      	beq.n	80050bc <HAL_TIM_Base_Start+0x48>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <HAL_TIM_Base_Start+0x8c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIM_Base_Start+0x48>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a13      	ldr	r2, [pc, #76]	; (8005104 <HAL_TIM_Base_Start+0x90>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d111      	bne.n	80050e0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d010      	beq.n	80050f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	e007      	b.n	80050f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800

08005108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIM_ConfigClockSource+0x18>
 800511c:	2302      	movs	r3, #2
 800511e:	e0b3      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x180>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800513e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005146:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005158:	d03e      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0xd0>
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	f200 8087 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x168>
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	f000 8085 	beq.w	8005274 <HAL_TIM_ConfigClockSource+0x16c>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d87f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
 8005170:	2b70      	cmp	r3, #112	; 0x70
 8005172:	d01a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0xa2>
 8005174:	2b70      	cmp	r3, #112	; 0x70
 8005176:	d87b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
 8005178:	2b60      	cmp	r3, #96	; 0x60
 800517a:	d050      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x116>
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d877      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
 8005180:	2b50      	cmp	r3, #80	; 0x50
 8005182:	d03c      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xf6>
 8005184:	2b50      	cmp	r3, #80	; 0x50
 8005186:	d873      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d058      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x136>
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d86f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d064      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x156>
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d86b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d060      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x156>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d867      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x156>
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d05a      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051a8:	e062      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f000 f942 	bl	8005442 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	609a      	str	r2, [r3, #8]
      break;
 80051d6:	e04e      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6899      	ldr	r1, [r3, #8]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f000 f92b 	bl	8005442 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051fa:	609a      	str	r2, [r3, #8]
      break;
 80051fc:	e03b      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	f000 f8a2 	bl	8005354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2150      	movs	r1, #80	; 0x50
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f8f9 	bl	800540e <TIM_ITRx_SetConfig>
      break;
 800521c:	e02b      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 f8c0 	bl	80053b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2160      	movs	r1, #96	; 0x60
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f8e9 	bl	800540e <TIM_ITRx_SetConfig>
      break;
 800523c:	e01b      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6859      	ldr	r1, [r3, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	461a      	mov	r2, r3
 800524c:	f000 f882 	bl	8005354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2140      	movs	r1, #64	; 0x40
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f8d9 	bl	800540e <TIM_ITRx_SetConfig>
      break;
 800525c:	e00b      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f000 f8d0 	bl	800540e <TIM_ITRx_SetConfig>
        break;
 800526e:	e002      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005270:	bf00      	nop
 8005272:	e000      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005274:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a29      	ldr	r2, [pc, #164]	; (8005348 <TIM_Base_SetConfig+0xb8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0x30>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0x30>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a26      	ldr	r2, [pc, #152]	; (800534c <TIM_Base_SetConfig+0xbc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0x30>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a25      	ldr	r2, [pc, #148]	; (8005350 <TIM_Base_SetConfig+0xc0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d108      	bne.n	80052d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <TIM_Base_SetConfig+0xb8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00b      	beq.n	80052f2 <TIM_Base_SetConfig+0x62>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d007      	beq.n	80052f2 <TIM_Base_SetConfig+0x62>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a19      	ldr	r2, [pc, #100]	; (800534c <TIM_Base_SetConfig+0xbc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_Base_SetConfig+0x62>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a18      	ldr	r2, [pc, #96]	; (8005350 <TIM_Base_SetConfig+0xc0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d108      	bne.n	8005304 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a07      	ldr	r2, [pc, #28]	; (8005348 <TIM_Base_SetConfig+0xb8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d103      	bne.n	8005338 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	615a      	str	r2, [r3, #20]
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800

08005354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0201 	bic.w	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800537e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f023 030a 	bic.w	r3, r3, #10
 8005390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f023 0210 	bic.w	r2, r3, #16
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	031b      	lsls	r3, r3, #12
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	f043 0307 	orr.w	r3, r3, #7
 8005430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	609a      	str	r2, [r3, #8]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005442:	b480      	push	{r7}
 8005444:	b087      	sub	sp, #28
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800545c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	021a      	lsls	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	431a      	orrs	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4313      	orrs	r3, r2
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	609a      	str	r2, [r3, #8]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005494:	2302      	movs	r3, #2
 8005496:	e046      	b.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a16      	ldr	r2, [pc, #88]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d009      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a10      	ldr	r2, [pc, #64]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10c      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800

0800553c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e03f      	b.n	80055ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fd fc5c 	bl	8002e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	; 0x24
 800556c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f905 	bl	8005790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08a      	sub	sp, #40	; 0x28
 80055da:	af02      	add	r7, sp, #8
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d17c      	bne.n	80056f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_UART_Transmit+0x2c>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e075      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x3e>
 8005610:	2302      	movs	r3, #2
 8005612:	e06e      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2221      	movs	r2, #33	; 0x21
 8005626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800562a:	f7fd fdb1 	bl	8003190 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d108      	bne.n	8005658 <HAL_UART_Transmit+0x82>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e003      	b.n	8005660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005668:	e02a      	b.n	80056c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f840 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e036      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e007      	b.n	80056b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1cf      	bne.n	800566a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2140      	movs	r1, #64	; 0x40
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f810 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	e02c      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d028      	beq.n	8005766 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d007      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0x30>
 800571a:	f7fd fd39 	bl	8003190 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	429a      	cmp	r2, r3
 8005728:	d21d      	bcs.n	8005766 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005738:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e00f      	b.n	8005786 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	429a      	cmp	r2, r3
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d0c3      	beq.n	800570c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057ca:	f023 030c 	bic.w	r3, r3, #12
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	430b      	orrs	r3, r1
 80057d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2c      	ldr	r2, [pc, #176]	; (80058a4 <UART_SetConfig+0x114>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d103      	bne.n	8005800 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7ff fb04 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	e002      	b.n	8005806 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005800:	f7ff faec 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8005804:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009a      	lsls	r2, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <UART_SetConfig+0x118>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	0119      	lsls	r1, r3, #4
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <UART_SetConfig+0x118>)
 800583e:	fba3 0302 	umull	r0, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2064      	movs	r0, #100	; 0x64
 8005846:	fb00 f303 	mul.w	r3, r0, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	; 0x32
 8005850:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <UART_SetConfig+0x118>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800585c:	4419      	add	r1, r3
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009a      	lsls	r2, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	fbb2 f2f3 	udiv	r2, r2, r3
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <UART_SetConfig+0x118>)
 8005876:	fba3 0302 	umull	r0, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	2064      	movs	r0, #100	; 0x64
 800587e:	fb00 f303 	mul.w	r3, r0, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	3332      	adds	r3, #50	; 0x32
 8005888:	4a07      	ldr	r2, [pc, #28]	; (80058a8 <UART_SetConfig+0x118>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	f003 020f 	and.w	r2, r3, #15
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	440a      	add	r2, r1
 800589a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40013800 	.word	0x40013800
 80058a8:	51eb851f 	.word	0x51eb851f

080058ac <__errno>:
 80058ac:	4b01      	ldr	r3, [pc, #4]	; (80058b4 <__errno+0x8>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000001c 	.word	0x2000001c

080058b8 <__libc_init_array>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	2600      	movs	r6, #0
 80058bc:	4d0c      	ldr	r5, [pc, #48]	; (80058f0 <__libc_init_array+0x38>)
 80058be:	4c0d      	ldr	r4, [pc, #52]	; (80058f4 <__libc_init_array+0x3c>)
 80058c0:	1b64      	subs	r4, r4, r5
 80058c2:	10a4      	asrs	r4, r4, #2
 80058c4:	42a6      	cmp	r6, r4
 80058c6:	d109      	bne.n	80058dc <__libc_init_array+0x24>
 80058c8:	f004 fd00 	bl	800a2cc <_init>
 80058cc:	2600      	movs	r6, #0
 80058ce:	4d0a      	ldr	r5, [pc, #40]	; (80058f8 <__libc_init_array+0x40>)
 80058d0:	4c0a      	ldr	r4, [pc, #40]	; (80058fc <__libc_init_array+0x44>)
 80058d2:	1b64      	subs	r4, r4, r5
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	42a6      	cmp	r6, r4
 80058d8:	d105      	bne.n	80058e6 <__libc_init_array+0x2e>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e0:	4798      	blx	r3
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7ee      	b.n	80058c4 <__libc_init_array+0xc>
 80058e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ea:	4798      	blx	r3
 80058ec:	3601      	adds	r6, #1
 80058ee:	e7f2      	b.n	80058d6 <__libc_init_array+0x1e>
 80058f0:	0800a93c 	.word	0x0800a93c
 80058f4:	0800a93c 	.word	0x0800a93c
 80058f8:	0800a93c 	.word	0x0800a93c
 80058fc:	0800a940 	.word	0x0800a940

08005900 <memset>:
 8005900:	4603      	mov	r3, r0
 8005902:	4402      	add	r2, r0
 8005904:	4293      	cmp	r3, r2
 8005906:	d100      	bne.n	800590a <memset+0xa>
 8005908:	4770      	bx	lr
 800590a:	f803 1b01 	strb.w	r1, [r3], #1
 800590e:	e7f9      	b.n	8005904 <memset+0x4>

08005910 <__cvt>:
 8005910:	2b00      	cmp	r3, #0
 8005912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005916:	461f      	mov	r7, r3
 8005918:	bfbb      	ittet	lt
 800591a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800591e:	461f      	movlt	r7, r3
 8005920:	2300      	movge	r3, #0
 8005922:	232d      	movlt	r3, #45	; 0x2d
 8005924:	b088      	sub	sp, #32
 8005926:	4614      	mov	r4, r2
 8005928:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800592a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800592c:	7013      	strb	r3, [r2, #0]
 800592e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005930:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005934:	f023 0820 	bic.w	r8, r3, #32
 8005938:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800593c:	d005      	beq.n	800594a <__cvt+0x3a>
 800593e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005942:	d100      	bne.n	8005946 <__cvt+0x36>
 8005944:	3501      	adds	r5, #1
 8005946:	2302      	movs	r3, #2
 8005948:	e000      	b.n	800594c <__cvt+0x3c>
 800594a:	2303      	movs	r3, #3
 800594c:	aa07      	add	r2, sp, #28
 800594e:	9204      	str	r2, [sp, #16]
 8005950:	aa06      	add	r2, sp, #24
 8005952:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005956:	e9cd 3500 	strd	r3, r5, [sp]
 800595a:	4622      	mov	r2, r4
 800595c:	463b      	mov	r3, r7
 800595e:	f001 fd9f 	bl	80074a0 <_dtoa_r>
 8005962:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005966:	4606      	mov	r6, r0
 8005968:	d102      	bne.n	8005970 <__cvt+0x60>
 800596a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800596c:	07db      	lsls	r3, r3, #31
 800596e:	d522      	bpl.n	80059b6 <__cvt+0xa6>
 8005970:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005974:	eb06 0905 	add.w	r9, r6, r5
 8005978:	d110      	bne.n	800599c <__cvt+0x8c>
 800597a:	7833      	ldrb	r3, [r6, #0]
 800597c:	2b30      	cmp	r3, #48	; 0x30
 800597e:	d10a      	bne.n	8005996 <__cvt+0x86>
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	4620      	mov	r0, r4
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f80e 	bl	80009a8 <__aeabi_dcmpeq>
 800598c:	b918      	cbnz	r0, 8005996 <__cvt+0x86>
 800598e:	f1c5 0501 	rsb	r5, r5, #1
 8005992:	f8ca 5000 	str.w	r5, [sl]
 8005996:	f8da 3000 	ldr.w	r3, [sl]
 800599a:	4499      	add	r9, r3
 800599c:	2200      	movs	r2, #0
 800599e:	2300      	movs	r3, #0
 80059a0:	4620      	mov	r0, r4
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fb f800 	bl	80009a8 <__aeabi_dcmpeq>
 80059a8:	b108      	cbz	r0, 80059ae <__cvt+0x9e>
 80059aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80059ae:	2230      	movs	r2, #48	; 0x30
 80059b0:	9b07      	ldr	r3, [sp, #28]
 80059b2:	454b      	cmp	r3, r9
 80059b4:	d307      	bcc.n	80059c6 <__cvt+0xb6>
 80059b6:	4630      	mov	r0, r6
 80059b8:	9b07      	ldr	r3, [sp, #28]
 80059ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059bc:	1b9b      	subs	r3, r3, r6
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	b008      	add	sp, #32
 80059c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c6:	1c59      	adds	r1, r3, #1
 80059c8:	9107      	str	r1, [sp, #28]
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	e7f0      	b.n	80059b0 <__cvt+0xa0>

080059ce <__exponent>:
 80059ce:	4603      	mov	r3, r0
 80059d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059d2:	2900      	cmp	r1, #0
 80059d4:	f803 2b02 	strb.w	r2, [r3], #2
 80059d8:	bfb6      	itet	lt
 80059da:	222d      	movlt	r2, #45	; 0x2d
 80059dc:	222b      	movge	r2, #43	; 0x2b
 80059de:	4249      	neglt	r1, r1
 80059e0:	2909      	cmp	r1, #9
 80059e2:	7042      	strb	r2, [r0, #1]
 80059e4:	dd2b      	ble.n	8005a3e <__exponent+0x70>
 80059e6:	f10d 0407 	add.w	r4, sp, #7
 80059ea:	46a4      	mov	ip, r4
 80059ec:	270a      	movs	r7, #10
 80059ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80059f2:	460a      	mov	r2, r1
 80059f4:	46a6      	mov	lr, r4
 80059f6:	fb07 1516 	mls	r5, r7, r6, r1
 80059fa:	2a63      	cmp	r2, #99	; 0x63
 80059fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005a00:	4631      	mov	r1, r6
 8005a02:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a0a:	dcf0      	bgt.n	80059ee <__exponent+0x20>
 8005a0c:	3130      	adds	r1, #48	; 0x30
 8005a0e:	f1ae 0502 	sub.w	r5, lr, #2
 8005a12:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a16:	4629      	mov	r1, r5
 8005a18:	1c44      	adds	r4, r0, #1
 8005a1a:	4561      	cmp	r1, ip
 8005a1c:	d30a      	bcc.n	8005a34 <__exponent+0x66>
 8005a1e:	f10d 0209 	add.w	r2, sp, #9
 8005a22:	eba2 020e 	sub.w	r2, r2, lr
 8005a26:	4565      	cmp	r5, ip
 8005a28:	bf88      	it	hi
 8005a2a:	2200      	movhi	r2, #0
 8005a2c:	4413      	add	r3, r2
 8005a2e:	1a18      	subs	r0, r3, r0
 8005a30:	b003      	add	sp, #12
 8005a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a38:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a3c:	e7ed      	b.n	8005a1a <__exponent+0x4c>
 8005a3e:	2330      	movs	r3, #48	; 0x30
 8005a40:	3130      	adds	r1, #48	; 0x30
 8005a42:	7083      	strb	r3, [r0, #2]
 8005a44:	70c1      	strb	r1, [r0, #3]
 8005a46:	1d03      	adds	r3, r0, #4
 8005a48:	e7f1      	b.n	8005a2e <__exponent+0x60>
	...

08005a4c <_printf_float>:
 8005a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	b091      	sub	sp, #68	; 0x44
 8005a52:	460c      	mov	r4, r1
 8005a54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a58:	4616      	mov	r6, r2
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	f002 fe73 	bl	8008748 <_localeconv_r>
 8005a62:	6803      	ldr	r3, [r0, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	9309      	str	r3, [sp, #36]	; 0x24
 8005a68:	f7fa fb72 	bl	8000150 <strlen>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	930e      	str	r3, [sp, #56]	; 0x38
 8005a70:	f8d8 3000 	ldr.w	r3, [r8]
 8005a74:	900a      	str	r0, [sp, #40]	; 0x28
 8005a76:	3307      	adds	r3, #7
 8005a78:	f023 0307 	bic.w	r3, r3, #7
 8005a7c:	f103 0208 	add.w	r2, r3, #8
 8005a80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a84:	f8d4 b000 	ldr.w	fp, [r4]
 8005a88:	f8c8 2000 	str.w	r2, [r8]
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a94:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a98:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	4b9c      	ldr	r3, [pc, #624]	; (8005d18 <_printf_float+0x2cc>)
 8005aa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aa8:	f7fa ffb0 	bl	8000a0c <__aeabi_dcmpun>
 8005aac:	bb70      	cbnz	r0, 8005b0c <_printf_float+0xc0>
 8005aae:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4b98      	ldr	r3, [pc, #608]	; (8005d18 <_printf_float+0x2cc>)
 8005ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ab8:	f7fa ff8a 	bl	80009d0 <__aeabi_dcmple>
 8005abc:	bb30      	cbnz	r0, 8005b0c <_printf_float+0xc0>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4651      	mov	r1, sl
 8005ac6:	f7fa ff79 	bl	80009bc <__aeabi_dcmplt>
 8005aca:	b110      	cbz	r0, 8005ad2 <_printf_float+0x86>
 8005acc:	232d      	movs	r3, #45	; 0x2d
 8005ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad2:	4b92      	ldr	r3, [pc, #584]	; (8005d1c <_printf_float+0x2d0>)
 8005ad4:	4892      	ldr	r0, [pc, #584]	; (8005d20 <_printf_float+0x2d4>)
 8005ad6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ada:	bf94      	ite	ls
 8005adc:	4698      	movls	r8, r3
 8005ade:	4680      	movhi	r8, r0
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	f04f 0a00 	mov.w	sl, #0
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	f02b 0304 	bic.w	r3, fp, #4
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	4633      	mov	r3, r6
 8005af0:	4621      	mov	r1, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	9700      	str	r7, [sp, #0]
 8005af6:	aa0f      	add	r2, sp, #60	; 0x3c
 8005af8:	f000 f9d4 	bl	8005ea4 <_printf_common>
 8005afc:	3001      	adds	r0, #1
 8005afe:	f040 8090 	bne.w	8005c22 <_printf_float+0x1d6>
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295
 8005b06:	b011      	add	sp, #68	; 0x44
 8005b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	4653      	mov	r3, sl
 8005b10:	4640      	mov	r0, r8
 8005b12:	4651      	mov	r1, sl
 8005b14:	f7fa ff7a 	bl	8000a0c <__aeabi_dcmpun>
 8005b18:	b148      	cbz	r0, 8005b2e <_printf_float+0xe2>
 8005b1a:	f1ba 0f00 	cmp.w	sl, #0
 8005b1e:	bfb8      	it	lt
 8005b20:	232d      	movlt	r3, #45	; 0x2d
 8005b22:	4880      	ldr	r0, [pc, #512]	; (8005d24 <_printf_float+0x2d8>)
 8005b24:	bfb8      	it	lt
 8005b26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b2a:	4b7f      	ldr	r3, [pc, #508]	; (8005d28 <_printf_float+0x2dc>)
 8005b2c:	e7d3      	b.n	8005ad6 <_printf_float+0x8a>
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	d142      	bne.n	8005bbe <_printf_float+0x172>
 8005b38:	2306      	movs	r3, #6
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	9206      	str	r2, [sp, #24]
 8005b40:	aa0e      	add	r2, sp, #56	; 0x38
 8005b42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005b46:	aa0d      	add	r2, sp, #52	; 0x34
 8005b48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b4c:	9203      	str	r2, [sp, #12]
 8005b4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	6863      	ldr	r3, [r4, #4]
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	4628      	mov	r0, r5
 8005b60:	4653      	mov	r3, sl
 8005b62:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b64:	f7ff fed4 	bl	8005910 <__cvt>
 8005b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	2947      	cmp	r1, #71	; 0x47
 8005b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b70:	d108      	bne.n	8005b84 <_printf_float+0x138>
 8005b72:	1cc8      	adds	r0, r1, #3
 8005b74:	db02      	blt.n	8005b7c <_printf_float+0x130>
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	dd40      	ble.n	8005bfe <_printf_float+0x1b2>
 8005b7c:	f1a9 0902 	sub.w	r9, r9, #2
 8005b80:	fa5f f989 	uxtb.w	r9, r9
 8005b84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b88:	d81f      	bhi.n	8005bca <_printf_float+0x17e>
 8005b8a:	464a      	mov	r2, r9
 8005b8c:	3901      	subs	r1, #1
 8005b8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b92:	910d      	str	r1, [sp, #52]	; 0x34
 8005b94:	f7ff ff1b 	bl	80059ce <__exponent>
 8005b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b9a:	4682      	mov	sl, r0
 8005b9c:	1813      	adds	r3, r2, r0
 8005b9e:	2a01      	cmp	r2, #1
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	dc02      	bgt.n	8005baa <_printf_float+0x15e>
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	07d2      	lsls	r2, r2, #31
 8005ba8:	d501      	bpl.n	8005bae <_printf_float+0x162>
 8005baa:	3301      	adds	r3, #1
 8005bac:	6123      	str	r3, [r4, #16]
 8005bae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d09b      	beq.n	8005aee <_printf_float+0xa2>
 8005bb6:	232d      	movs	r3, #45	; 0x2d
 8005bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bbc:	e797      	b.n	8005aee <_printf_float+0xa2>
 8005bbe:	2947      	cmp	r1, #71	; 0x47
 8005bc0:	d1bc      	bne.n	8005b3c <_printf_float+0xf0>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1ba      	bne.n	8005b3c <_printf_float+0xf0>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e7b7      	b.n	8005b3a <_printf_float+0xee>
 8005bca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005bce:	d118      	bne.n	8005c02 <_printf_float+0x1b6>
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	6863      	ldr	r3, [r4, #4]
 8005bd4:	dd0b      	ble.n	8005bee <_printf_float+0x1a2>
 8005bd6:	6121      	str	r1, [r4, #16]
 8005bd8:	b913      	cbnz	r3, 8005be0 <_printf_float+0x194>
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	07d0      	lsls	r0, r2, #31
 8005bde:	d502      	bpl.n	8005be6 <_printf_float+0x19a>
 8005be0:	3301      	adds	r3, #1
 8005be2:	440b      	add	r3, r1
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	f04f 0a00 	mov.w	sl, #0
 8005bea:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bec:	e7df      	b.n	8005bae <_printf_float+0x162>
 8005bee:	b913      	cbnz	r3, 8005bf6 <_printf_float+0x1aa>
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	07d2      	lsls	r2, r2, #31
 8005bf4:	d501      	bpl.n	8005bfa <_printf_float+0x1ae>
 8005bf6:	3302      	adds	r3, #2
 8005bf8:	e7f4      	b.n	8005be4 <_printf_float+0x198>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e7f2      	b.n	8005be4 <_printf_float+0x198>
 8005bfe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c04:	4299      	cmp	r1, r3
 8005c06:	db05      	blt.n	8005c14 <_printf_float+0x1c8>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	6121      	str	r1, [r4, #16]
 8005c0c:	07d8      	lsls	r0, r3, #31
 8005c0e:	d5ea      	bpl.n	8005be6 <_printf_float+0x19a>
 8005c10:	1c4b      	adds	r3, r1, #1
 8005c12:	e7e7      	b.n	8005be4 <_printf_float+0x198>
 8005c14:	2900      	cmp	r1, #0
 8005c16:	bfcc      	ite	gt
 8005c18:	2201      	movgt	r2, #1
 8005c1a:	f1c1 0202 	rsble	r2, r1, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	e7e0      	b.n	8005be4 <_printf_float+0x198>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	055a      	lsls	r2, r3, #21
 8005c26:	d407      	bmi.n	8005c38 <_printf_float+0x1ec>
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	d12b      	bne.n	8005c8e <_printf_float+0x242>
 8005c36:	e764      	b.n	8005b02 <_printf_float+0xb6>
 8005c38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c3c:	f240 80dd 	bls.w	8005dfa <_printf_float+0x3ae>
 8005c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c44:	2200      	movs	r2, #0
 8005c46:	2300      	movs	r3, #0
 8005c48:	f7fa feae 	bl	80009a8 <__aeabi_dcmpeq>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d033      	beq.n	8005cb8 <_printf_float+0x26c>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	4a35      	ldr	r2, [pc, #212]	; (8005d2c <_printf_float+0x2e0>)
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	f43f af51 	beq.w	8005b02 <_printf_float+0xb6>
 8005c60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c64:	429a      	cmp	r2, r3
 8005c66:	db02      	blt.n	8005c6e <_printf_float+0x222>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	07d8      	lsls	r0, r3, #31
 8005c6c:	d50f      	bpl.n	8005c8e <_printf_float+0x242>
 8005c6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f af42 	beq.w	8005b02 <_printf_float+0xb6>
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	f104 091a 	add.w	r9, r4, #26
 8005c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	4543      	cmp	r3, r8
 8005c8c:	dc09      	bgt.n	8005ca2 <_printf_float+0x256>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	079b      	lsls	r3, r3, #30
 8005c92:	f100 8102 	bmi.w	8005e9a <_printf_float+0x44e>
 8005c96:	68e0      	ldr	r0, [r4, #12]
 8005c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c9a:	4298      	cmp	r0, r3
 8005c9c:	bfb8      	it	lt
 8005c9e:	4618      	movlt	r0, r3
 8005ca0:	e731      	b.n	8005b06 <_printf_float+0xba>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	464a      	mov	r2, r9
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f af28 	beq.w	8005b02 <_printf_float+0xb6>
 8005cb2:	f108 0801 	add.w	r8, r8, #1
 8005cb6:	e7e6      	b.n	8005c86 <_printf_float+0x23a>
 8005cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	dc38      	bgt.n	8005d30 <_printf_float+0x2e4>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <_printf_float+0x2e0>)
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f af1a 	beq.w	8005b02 <_printf_float+0xb6>
 8005cce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d102      	bne.n	8005cdc <_printf_float+0x290>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	07d9      	lsls	r1, r3, #31
 8005cda:	d5d8      	bpl.n	8005c8e <_printf_float+0x242>
 8005cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f af0b 	beq.w	8005b02 <_printf_float+0xb6>
 8005cec:	f04f 0900 	mov.w	r9, #0
 8005cf0:	f104 0a1a 	add.w	sl, r4, #26
 8005cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf6:	425b      	negs	r3, r3
 8005cf8:	454b      	cmp	r3, r9
 8005cfa:	dc01      	bgt.n	8005d00 <_printf_float+0x2b4>
 8005cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cfe:	e794      	b.n	8005c2a <_printf_float+0x1de>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4652      	mov	r2, sl
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f aef9 	beq.w	8005b02 <_printf_float+0xb6>
 8005d10:	f109 0901 	add.w	r9, r9, #1
 8005d14:	e7ee      	b.n	8005cf4 <_printf_float+0x2a8>
 8005d16:	bf00      	nop
 8005d18:	7fefffff 	.word	0x7fefffff
 8005d1c:	0800a488 	.word	0x0800a488
 8005d20:	0800a48c 	.word	0x0800a48c
 8005d24:	0800a494 	.word	0x0800a494
 8005d28:	0800a490 	.word	0x0800a490
 8005d2c:	0800a498 	.word	0x0800a498
 8005d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d34:	429a      	cmp	r2, r3
 8005d36:	bfa8      	it	ge
 8005d38:	461a      	movge	r2, r3
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	4691      	mov	r9, r2
 8005d3e:	dc37      	bgt.n	8005db0 <_printf_float+0x364>
 8005d40:	f04f 0b00 	mov.w	fp, #0
 8005d44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d48:	f104 021a 	add.w	r2, r4, #26
 8005d4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d50:	ebaa 0309 	sub.w	r3, sl, r9
 8005d54:	455b      	cmp	r3, fp
 8005d56:	dc33      	bgt.n	8005dc0 <_printf_float+0x374>
 8005d58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	db3b      	blt.n	8005dd8 <_printf_float+0x38c>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07da      	lsls	r2, r3, #31
 8005d64:	d438      	bmi.n	8005dd8 <_printf_float+0x38c>
 8005d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d6a:	eba2 030a 	sub.w	r3, r2, sl
 8005d6e:	eba2 0901 	sub.w	r9, r2, r1
 8005d72:	4599      	cmp	r9, r3
 8005d74:	bfa8      	it	ge
 8005d76:	4699      	movge	r9, r3
 8005d78:	f1b9 0f00 	cmp.w	r9, #0
 8005d7c:	dc34      	bgt.n	8005de8 <_printf_float+0x39c>
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d86:	f104 0a1a 	add.w	sl, r4, #26
 8005d8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	eba3 0309 	sub.w	r3, r3, r9
 8005d94:	4543      	cmp	r3, r8
 8005d96:	f77f af7a 	ble.w	8005c8e <_printf_float+0x242>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	4652      	mov	r2, sl
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b8      	blx	r7
 8005da4:	3001      	adds	r0, #1
 8005da6:	f43f aeac 	beq.w	8005b02 <_printf_float+0xb6>
 8005daa:	f108 0801 	add.w	r8, r8, #1
 8005dae:	e7ec      	b.n	8005d8a <_printf_float+0x33e>
 8005db0:	4613      	mov	r3, r2
 8005db2:	4631      	mov	r1, r6
 8005db4:	4642      	mov	r2, r8
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d1c0      	bne.n	8005d40 <_printf_float+0x2f4>
 8005dbe:	e6a0      	b.n	8005b02 <_printf_float+0xb6>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f ae99 	beq.w	8005b02 <_printf_float+0xb6>
 8005dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dd2:	f10b 0b01 	add.w	fp, fp, #1
 8005dd6:	e7b9      	b.n	8005d4c <_printf_float+0x300>
 8005dd8:	4631      	mov	r1, r6
 8005dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	d1bf      	bne.n	8005d66 <_printf_float+0x31a>
 8005de6:	e68c      	b.n	8005b02 <_printf_float+0xb6>
 8005de8:	464b      	mov	r3, r9
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	eb08 020a 	add.w	r2, r8, sl
 8005df2:	47b8      	blx	r7
 8005df4:	3001      	adds	r0, #1
 8005df6:	d1c2      	bne.n	8005d7e <_printf_float+0x332>
 8005df8:	e683      	b.n	8005b02 <_printf_float+0xb6>
 8005dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dfc:	2a01      	cmp	r2, #1
 8005dfe:	dc01      	bgt.n	8005e04 <_printf_float+0x3b8>
 8005e00:	07db      	lsls	r3, r3, #31
 8005e02:	d537      	bpl.n	8005e74 <_printf_float+0x428>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4642      	mov	r2, r8
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f ae77 	beq.w	8005b02 <_printf_float+0xb6>
 8005e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f ae6f 	beq.w	8005b02 <_printf_float+0xb6>
 8005e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f7fa fdbc 	bl	80009a8 <__aeabi_dcmpeq>
 8005e30:	b9d8      	cbnz	r0, 8005e6a <_printf_float+0x41e>
 8005e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e34:	f108 0201 	add.w	r2, r8, #1
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	d10e      	bne.n	8005e62 <_printf_float+0x416>
 8005e44:	e65d      	b.n	8005b02 <_printf_float+0xb6>
 8005e46:	2301      	movs	r3, #1
 8005e48:	464a      	mov	r2, r9
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f ae56 	beq.w	8005b02 <_printf_float+0xb6>
 8005e56:	f108 0801 	add.w	r8, r8, #1
 8005e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	4543      	cmp	r3, r8
 8005e60:	dcf1      	bgt.n	8005e46 <_printf_float+0x3fa>
 8005e62:	4653      	mov	r3, sl
 8005e64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e68:	e6e0      	b.n	8005c2c <_printf_float+0x1e0>
 8005e6a:	f04f 0800 	mov.w	r8, #0
 8005e6e:	f104 091a 	add.w	r9, r4, #26
 8005e72:	e7f2      	b.n	8005e5a <_printf_float+0x40e>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4642      	mov	r2, r8
 8005e78:	e7df      	b.n	8005e3a <_printf_float+0x3ee>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	464a      	mov	r2, r9
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f ae3c 	beq.w	8005b02 <_printf_float+0xb6>
 8005e8a:	f108 0801 	add.w	r8, r8, #1
 8005e8e:	68e3      	ldr	r3, [r4, #12]
 8005e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e92:	1a5b      	subs	r3, r3, r1
 8005e94:	4543      	cmp	r3, r8
 8005e96:	dcf0      	bgt.n	8005e7a <_printf_float+0x42e>
 8005e98:	e6fd      	b.n	8005c96 <_printf_float+0x24a>
 8005e9a:	f04f 0800 	mov.w	r8, #0
 8005e9e:	f104 0919 	add.w	r9, r4, #25
 8005ea2:	e7f4      	b.n	8005e8e <_printf_float+0x442>

08005ea4 <_printf_common>:
 8005ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	4699      	mov	r9, r3
 8005eac:	688a      	ldr	r2, [r1, #8]
 8005eae:	690b      	ldr	r3, [r1, #16]
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	bfb8      	it	lt
 8005eb6:	4613      	movlt	r3, r2
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ec4:	b10a      	cbz	r2, 8005eca <_printf_common+0x26>
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	6033      	str	r3, [r6, #0]
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	0699      	lsls	r1, r3, #26
 8005ece:	bf42      	ittt	mi
 8005ed0:	6833      	ldrmi	r3, [r6, #0]
 8005ed2:	3302      	addmi	r3, #2
 8005ed4:	6033      	strmi	r3, [r6, #0]
 8005ed6:	6825      	ldr	r5, [r4, #0]
 8005ed8:	f015 0506 	ands.w	r5, r5, #6
 8005edc:	d106      	bne.n	8005eec <_printf_common+0x48>
 8005ede:	f104 0a19 	add.w	sl, r4, #25
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	6832      	ldr	r2, [r6, #0]
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	dc28      	bgt.n	8005f3e <_printf_common+0x9a>
 8005eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ef0:	1e13      	subs	r3, r2, #0
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	bf18      	it	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	0692      	lsls	r2, r2, #26
 8005efa:	d42d      	bmi.n	8005f58 <_printf_common+0xb4>
 8005efc:	4649      	mov	r1, r9
 8005efe:	4638      	mov	r0, r7
 8005f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f04:	47c0      	blx	r8
 8005f06:	3001      	adds	r0, #1
 8005f08:	d020      	beq.n	8005f4c <_printf_common+0xa8>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	68e5      	ldr	r5, [r4, #12]
 8005f0e:	f003 0306 	and.w	r3, r3, #6
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	bf18      	it	ne
 8005f16:	2500      	movne	r5, #0
 8005f18:	6832      	ldr	r2, [r6, #0]
 8005f1a:	f04f 0600 	mov.w	r6, #0
 8005f1e:	68a3      	ldr	r3, [r4, #8]
 8005f20:	bf08      	it	eq
 8005f22:	1aad      	subeq	r5, r5, r2
 8005f24:	6922      	ldr	r2, [r4, #16]
 8005f26:	bf08      	it	eq
 8005f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bfc4      	itt	gt
 8005f30:	1a9b      	subgt	r3, r3, r2
 8005f32:	18ed      	addgt	r5, r5, r3
 8005f34:	341a      	adds	r4, #26
 8005f36:	42b5      	cmp	r5, r6
 8005f38:	d11a      	bne.n	8005f70 <_printf_common+0xcc>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e008      	b.n	8005f50 <_printf_common+0xac>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4652      	mov	r2, sl
 8005f42:	4649      	mov	r1, r9
 8005f44:	4638      	mov	r0, r7
 8005f46:	47c0      	blx	r8
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d103      	bne.n	8005f54 <_printf_common+0xb0>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f54:	3501      	adds	r5, #1
 8005f56:	e7c4      	b.n	8005ee2 <_printf_common+0x3e>
 8005f58:	2030      	movs	r0, #48	; 0x30
 8005f5a:	18e1      	adds	r1, r4, r3
 8005f5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f66:	4422      	add	r2, r4
 8005f68:	3302      	adds	r3, #2
 8005f6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f6e:	e7c5      	b.n	8005efc <_printf_common+0x58>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4622      	mov	r2, r4
 8005f74:	4649      	mov	r1, r9
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c0      	blx	r8
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d0e6      	beq.n	8005f4c <_printf_common+0xa8>
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7d9      	b.n	8005f36 <_printf_common+0x92>
	...

08005f84 <_printf_i>:
 8005f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	460c      	mov	r4, r1
 8005f8a:	7e27      	ldrb	r7, [r4, #24]
 8005f8c:	4691      	mov	r9, r2
 8005f8e:	2f78      	cmp	r7, #120	; 0x78
 8005f90:	4680      	mov	r8, r0
 8005f92:	469a      	mov	sl, r3
 8005f94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f9a:	d807      	bhi.n	8005fac <_printf_i+0x28>
 8005f9c:	2f62      	cmp	r7, #98	; 0x62
 8005f9e:	d80a      	bhi.n	8005fb6 <_printf_i+0x32>
 8005fa0:	2f00      	cmp	r7, #0
 8005fa2:	f000 80d9 	beq.w	8006158 <_printf_i+0x1d4>
 8005fa6:	2f58      	cmp	r7, #88	; 0x58
 8005fa8:	f000 80a4 	beq.w	80060f4 <_printf_i+0x170>
 8005fac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fb4:	e03a      	b.n	800602c <_printf_i+0xa8>
 8005fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fba:	2b15      	cmp	r3, #21
 8005fbc:	d8f6      	bhi.n	8005fac <_printf_i+0x28>
 8005fbe:	a001      	add	r0, pc, #4	; (adr r0, 8005fc4 <_printf_i+0x40>)
 8005fc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08005fad 	.word	0x08005fad
 8005fd0:	08005fad 	.word	0x08005fad
 8005fd4:	08005fad 	.word	0x08005fad
 8005fd8:	08005fad 	.word	0x08005fad
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08005fad 	.word	0x08005fad
 8005fe4:	08005fad 	.word	0x08005fad
 8005fe8:	08005fad 	.word	0x08005fad
 8005fec:	08005fad 	.word	0x08005fad
 8005ff0:	0800613f 	.word	0x0800613f
 8005ff4:	08006061 	.word	0x08006061
 8005ff8:	08006121 	.word	0x08006121
 8005ffc:	08005fad 	.word	0x08005fad
 8006000:	08005fad 	.word	0x08005fad
 8006004:	08006161 	.word	0x08006161
 8006008:	08005fad 	.word	0x08005fad
 800600c:	08006061 	.word	0x08006061
 8006010:	08005fad 	.word	0x08005fad
 8006014:	08005fad 	.word	0x08005fad
 8006018:	08006129 	.word	0x08006129
 800601c:	680b      	ldr	r3, [r1, #0]
 800601e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	600a      	str	r2, [r1, #0]
 8006028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800602c:	2301      	movs	r3, #1
 800602e:	e0a4      	b.n	800617a <_printf_i+0x1f6>
 8006030:	6825      	ldr	r5, [r4, #0]
 8006032:	6808      	ldr	r0, [r1, #0]
 8006034:	062e      	lsls	r6, r5, #24
 8006036:	f100 0304 	add.w	r3, r0, #4
 800603a:	d50a      	bpl.n	8006052 <_printf_i+0xce>
 800603c:	6805      	ldr	r5, [r0, #0]
 800603e:	600b      	str	r3, [r1, #0]
 8006040:	2d00      	cmp	r5, #0
 8006042:	da03      	bge.n	800604c <_printf_i+0xc8>
 8006044:	232d      	movs	r3, #45	; 0x2d
 8006046:	426d      	negs	r5, r5
 8006048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800604c:	230a      	movs	r3, #10
 800604e:	485e      	ldr	r0, [pc, #376]	; (80061c8 <_printf_i+0x244>)
 8006050:	e019      	b.n	8006086 <_printf_i+0x102>
 8006052:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006056:	6805      	ldr	r5, [r0, #0]
 8006058:	600b      	str	r3, [r1, #0]
 800605a:	bf18      	it	ne
 800605c:	b22d      	sxthne	r5, r5
 800605e:	e7ef      	b.n	8006040 <_printf_i+0xbc>
 8006060:	680b      	ldr	r3, [r1, #0]
 8006062:	6825      	ldr	r5, [r4, #0]
 8006064:	1d18      	adds	r0, r3, #4
 8006066:	6008      	str	r0, [r1, #0]
 8006068:	0628      	lsls	r0, r5, #24
 800606a:	d501      	bpl.n	8006070 <_printf_i+0xec>
 800606c:	681d      	ldr	r5, [r3, #0]
 800606e:	e002      	b.n	8006076 <_printf_i+0xf2>
 8006070:	0669      	lsls	r1, r5, #25
 8006072:	d5fb      	bpl.n	800606c <_printf_i+0xe8>
 8006074:	881d      	ldrh	r5, [r3, #0]
 8006076:	2f6f      	cmp	r7, #111	; 0x6f
 8006078:	bf0c      	ite	eq
 800607a:	2308      	moveq	r3, #8
 800607c:	230a      	movne	r3, #10
 800607e:	4852      	ldr	r0, [pc, #328]	; (80061c8 <_printf_i+0x244>)
 8006080:	2100      	movs	r1, #0
 8006082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006086:	6866      	ldr	r6, [r4, #4]
 8006088:	2e00      	cmp	r6, #0
 800608a:	bfa8      	it	ge
 800608c:	6821      	ldrge	r1, [r4, #0]
 800608e:	60a6      	str	r6, [r4, #8]
 8006090:	bfa4      	itt	ge
 8006092:	f021 0104 	bicge.w	r1, r1, #4
 8006096:	6021      	strge	r1, [r4, #0]
 8006098:	b90d      	cbnz	r5, 800609e <_printf_i+0x11a>
 800609a:	2e00      	cmp	r6, #0
 800609c:	d04d      	beq.n	800613a <_printf_i+0x1b6>
 800609e:	4616      	mov	r6, r2
 80060a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80060a4:	fb03 5711 	mls	r7, r3, r1, r5
 80060a8:	5dc7      	ldrb	r7, [r0, r7]
 80060aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ae:	462f      	mov	r7, r5
 80060b0:	42bb      	cmp	r3, r7
 80060b2:	460d      	mov	r5, r1
 80060b4:	d9f4      	bls.n	80060a0 <_printf_i+0x11c>
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d10b      	bne.n	80060d2 <_printf_i+0x14e>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	07df      	lsls	r7, r3, #31
 80060be:	d508      	bpl.n	80060d2 <_printf_i+0x14e>
 80060c0:	6923      	ldr	r3, [r4, #16]
 80060c2:	6861      	ldr	r1, [r4, #4]
 80060c4:	4299      	cmp	r1, r3
 80060c6:	bfde      	ittt	le
 80060c8:	2330      	movle	r3, #48	; 0x30
 80060ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060d2:	1b92      	subs	r2, r2, r6
 80060d4:	6122      	str	r2, [r4, #16]
 80060d6:	464b      	mov	r3, r9
 80060d8:	4621      	mov	r1, r4
 80060da:	4640      	mov	r0, r8
 80060dc:	f8cd a000 	str.w	sl, [sp]
 80060e0:	aa03      	add	r2, sp, #12
 80060e2:	f7ff fedf 	bl	8005ea4 <_printf_common>
 80060e6:	3001      	adds	r0, #1
 80060e8:	d14c      	bne.n	8006184 <_printf_i+0x200>
 80060ea:	f04f 30ff 	mov.w	r0, #4294967295
 80060ee:	b004      	add	sp, #16
 80060f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f4:	4834      	ldr	r0, [pc, #208]	; (80061c8 <_printf_i+0x244>)
 80060f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060fa:	680e      	ldr	r6, [r1, #0]
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006102:	061f      	lsls	r7, r3, #24
 8006104:	600e      	str	r6, [r1, #0]
 8006106:	d514      	bpl.n	8006132 <_printf_i+0x1ae>
 8006108:	07d9      	lsls	r1, r3, #31
 800610a:	bf44      	itt	mi
 800610c:	f043 0320 	orrmi.w	r3, r3, #32
 8006110:	6023      	strmi	r3, [r4, #0]
 8006112:	b91d      	cbnz	r5, 800611c <_printf_i+0x198>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	f023 0320 	bic.w	r3, r3, #32
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	2310      	movs	r3, #16
 800611e:	e7af      	b.n	8006080 <_printf_i+0xfc>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	f043 0320 	orr.w	r3, r3, #32
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	2378      	movs	r3, #120	; 0x78
 800612a:	4828      	ldr	r0, [pc, #160]	; (80061cc <_printf_i+0x248>)
 800612c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006130:	e7e3      	b.n	80060fa <_printf_i+0x176>
 8006132:	065e      	lsls	r6, r3, #25
 8006134:	bf48      	it	mi
 8006136:	b2ad      	uxthmi	r5, r5
 8006138:	e7e6      	b.n	8006108 <_printf_i+0x184>
 800613a:	4616      	mov	r6, r2
 800613c:	e7bb      	b.n	80060b6 <_printf_i+0x132>
 800613e:	680b      	ldr	r3, [r1, #0]
 8006140:	6826      	ldr	r6, [r4, #0]
 8006142:	1d1d      	adds	r5, r3, #4
 8006144:	6960      	ldr	r0, [r4, #20]
 8006146:	600d      	str	r5, [r1, #0]
 8006148:	0635      	lsls	r5, r6, #24
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	d501      	bpl.n	8006152 <_printf_i+0x1ce>
 800614e:	6018      	str	r0, [r3, #0]
 8006150:	e002      	b.n	8006158 <_printf_i+0x1d4>
 8006152:	0671      	lsls	r1, r6, #25
 8006154:	d5fb      	bpl.n	800614e <_printf_i+0x1ca>
 8006156:	8018      	strh	r0, [r3, #0]
 8006158:	2300      	movs	r3, #0
 800615a:	4616      	mov	r6, r2
 800615c:	6123      	str	r3, [r4, #16]
 800615e:	e7ba      	b.n	80060d6 <_printf_i+0x152>
 8006160:	680b      	ldr	r3, [r1, #0]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	600a      	str	r2, [r1, #0]
 8006166:	681e      	ldr	r6, [r3, #0]
 8006168:	2100      	movs	r1, #0
 800616a:	4630      	mov	r0, r6
 800616c:	6862      	ldr	r2, [r4, #4]
 800616e:	f002 fb09 	bl	8008784 <memchr>
 8006172:	b108      	cbz	r0, 8006178 <_printf_i+0x1f4>
 8006174:	1b80      	subs	r0, r0, r6
 8006176:	6060      	str	r0, [r4, #4]
 8006178:	6863      	ldr	r3, [r4, #4]
 800617a:	6123      	str	r3, [r4, #16]
 800617c:	2300      	movs	r3, #0
 800617e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006182:	e7a8      	b.n	80060d6 <_printf_i+0x152>
 8006184:	4632      	mov	r2, r6
 8006186:	4649      	mov	r1, r9
 8006188:	4640      	mov	r0, r8
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	47d0      	blx	sl
 800618e:	3001      	adds	r0, #1
 8006190:	d0ab      	beq.n	80060ea <_printf_i+0x166>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	079b      	lsls	r3, r3, #30
 8006196:	d413      	bmi.n	80061c0 <_printf_i+0x23c>
 8006198:	68e0      	ldr	r0, [r4, #12]
 800619a:	9b03      	ldr	r3, [sp, #12]
 800619c:	4298      	cmp	r0, r3
 800619e:	bfb8      	it	lt
 80061a0:	4618      	movlt	r0, r3
 80061a2:	e7a4      	b.n	80060ee <_printf_i+0x16a>
 80061a4:	2301      	movs	r3, #1
 80061a6:	4632      	mov	r2, r6
 80061a8:	4649      	mov	r1, r9
 80061aa:	4640      	mov	r0, r8
 80061ac:	47d0      	blx	sl
 80061ae:	3001      	adds	r0, #1
 80061b0:	d09b      	beq.n	80060ea <_printf_i+0x166>
 80061b2:	3501      	adds	r5, #1
 80061b4:	68e3      	ldr	r3, [r4, #12]
 80061b6:	9903      	ldr	r1, [sp, #12]
 80061b8:	1a5b      	subs	r3, r3, r1
 80061ba:	42ab      	cmp	r3, r5
 80061bc:	dcf2      	bgt.n	80061a4 <_printf_i+0x220>
 80061be:	e7eb      	b.n	8006198 <_printf_i+0x214>
 80061c0:	2500      	movs	r5, #0
 80061c2:	f104 0619 	add.w	r6, r4, #25
 80061c6:	e7f5      	b.n	80061b4 <_printf_i+0x230>
 80061c8:	0800a49a 	.word	0x0800a49a
 80061cc:	0800a4ab 	.word	0x0800a4ab

080061d0 <_scanf_float>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	b087      	sub	sp, #28
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	688b      	ldr	r3, [r1, #8]
 80061da:	4617      	mov	r7, r2
 80061dc:	1e5a      	subs	r2, r3, #1
 80061de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061e2:	bf85      	ittet	hi
 80061e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061e8:	195b      	addhi	r3, r3, r5
 80061ea:	2300      	movls	r3, #0
 80061ec:	9302      	strhi	r3, [sp, #8]
 80061ee:	bf88      	it	hi
 80061f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061f4:	468b      	mov	fp, r1
 80061f6:	f04f 0500 	mov.w	r5, #0
 80061fa:	bf8c      	ite	hi
 80061fc:	608b      	strhi	r3, [r1, #8]
 80061fe:	9302      	strls	r3, [sp, #8]
 8006200:	680b      	ldr	r3, [r1, #0]
 8006202:	4680      	mov	r8, r0
 8006204:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006208:	f84b 3b1c 	str.w	r3, [fp], #28
 800620c:	460c      	mov	r4, r1
 800620e:	465e      	mov	r6, fp
 8006210:	46aa      	mov	sl, r5
 8006212:	46a9      	mov	r9, r5
 8006214:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006218:	9501      	str	r5, [sp, #4]
 800621a:	68a2      	ldr	r2, [r4, #8]
 800621c:	b152      	cbz	r2, 8006234 <_scanf_float+0x64>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b4e      	cmp	r3, #78	; 0x4e
 8006224:	d864      	bhi.n	80062f0 <_scanf_float+0x120>
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d83c      	bhi.n	80062a4 <_scanf_float+0xd4>
 800622a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800622e:	b2c8      	uxtb	r0, r1
 8006230:	280e      	cmp	r0, #14
 8006232:	d93a      	bls.n	80062aa <_scanf_float+0xda>
 8006234:	f1b9 0f00 	cmp.w	r9, #0
 8006238:	d003      	beq.n	8006242 <_scanf_float+0x72>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006246:	f1ba 0f01 	cmp.w	sl, #1
 800624a:	f200 8113 	bhi.w	8006474 <_scanf_float+0x2a4>
 800624e:	455e      	cmp	r6, fp
 8006250:	f200 8105 	bhi.w	800645e <_scanf_float+0x28e>
 8006254:	2501      	movs	r5, #1
 8006256:	4628      	mov	r0, r5
 8006258:	b007      	add	sp, #28
 800625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006262:	2a0d      	cmp	r2, #13
 8006264:	d8e6      	bhi.n	8006234 <_scanf_float+0x64>
 8006266:	a101      	add	r1, pc, #4	; (adr r1, 800626c <_scanf_float+0x9c>)
 8006268:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800626c:	080063ab 	.word	0x080063ab
 8006270:	08006235 	.word	0x08006235
 8006274:	08006235 	.word	0x08006235
 8006278:	08006235 	.word	0x08006235
 800627c:	0800640b 	.word	0x0800640b
 8006280:	080063e3 	.word	0x080063e3
 8006284:	08006235 	.word	0x08006235
 8006288:	08006235 	.word	0x08006235
 800628c:	080063b9 	.word	0x080063b9
 8006290:	08006235 	.word	0x08006235
 8006294:	08006235 	.word	0x08006235
 8006298:	08006235 	.word	0x08006235
 800629c:	08006235 	.word	0x08006235
 80062a0:	08006371 	.word	0x08006371
 80062a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80062a8:	e7db      	b.n	8006262 <_scanf_float+0x92>
 80062aa:	290e      	cmp	r1, #14
 80062ac:	d8c2      	bhi.n	8006234 <_scanf_float+0x64>
 80062ae:	a001      	add	r0, pc, #4	; (adr r0, 80062b4 <_scanf_float+0xe4>)
 80062b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80062b4:	08006363 	.word	0x08006363
 80062b8:	08006235 	.word	0x08006235
 80062bc:	08006363 	.word	0x08006363
 80062c0:	080063f7 	.word	0x080063f7
 80062c4:	08006235 	.word	0x08006235
 80062c8:	08006311 	.word	0x08006311
 80062cc:	0800634d 	.word	0x0800634d
 80062d0:	0800634d 	.word	0x0800634d
 80062d4:	0800634d 	.word	0x0800634d
 80062d8:	0800634d 	.word	0x0800634d
 80062dc:	0800634d 	.word	0x0800634d
 80062e0:	0800634d 	.word	0x0800634d
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	0800634d 	.word	0x0800634d
 80062ec:	0800634d 	.word	0x0800634d
 80062f0:	2b6e      	cmp	r3, #110	; 0x6e
 80062f2:	d809      	bhi.n	8006308 <_scanf_float+0x138>
 80062f4:	2b60      	cmp	r3, #96	; 0x60
 80062f6:	d8b2      	bhi.n	800625e <_scanf_float+0x8e>
 80062f8:	2b54      	cmp	r3, #84	; 0x54
 80062fa:	d077      	beq.n	80063ec <_scanf_float+0x21c>
 80062fc:	2b59      	cmp	r3, #89	; 0x59
 80062fe:	d199      	bne.n	8006234 <_scanf_float+0x64>
 8006300:	2d07      	cmp	r5, #7
 8006302:	d197      	bne.n	8006234 <_scanf_float+0x64>
 8006304:	2508      	movs	r5, #8
 8006306:	e029      	b.n	800635c <_scanf_float+0x18c>
 8006308:	2b74      	cmp	r3, #116	; 0x74
 800630a:	d06f      	beq.n	80063ec <_scanf_float+0x21c>
 800630c:	2b79      	cmp	r3, #121	; 0x79
 800630e:	e7f6      	b.n	80062fe <_scanf_float+0x12e>
 8006310:	6821      	ldr	r1, [r4, #0]
 8006312:	05c8      	lsls	r0, r1, #23
 8006314:	d51a      	bpl.n	800634c <_scanf_float+0x17c>
 8006316:	9b02      	ldr	r3, [sp, #8]
 8006318:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800631c:	6021      	str	r1, [r4, #0]
 800631e:	f109 0901 	add.w	r9, r9, #1
 8006322:	b11b      	cbz	r3, 800632c <_scanf_float+0x15c>
 8006324:	3b01      	subs	r3, #1
 8006326:	3201      	adds	r2, #1
 8006328:	9302      	str	r3, [sp, #8]
 800632a:	60a2      	str	r2, [r4, #8]
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	3b01      	subs	r3, #1
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	3301      	adds	r3, #1
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3b01      	subs	r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	f340 8084 	ble.w	800644c <_scanf_float+0x27c>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	603b      	str	r3, [r7, #0]
 800634a:	e766      	b.n	800621a <_scanf_float+0x4a>
 800634c:	eb1a 0f05 	cmn.w	sl, r5
 8006350:	f47f af70 	bne.w	8006234 <_scanf_float+0x64>
 8006354:	6822      	ldr	r2, [r4, #0]
 8006356:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	f806 3b01 	strb.w	r3, [r6], #1
 8006360:	e7e4      	b.n	800632c <_scanf_float+0x15c>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	0610      	lsls	r0, r2, #24
 8006366:	f57f af65 	bpl.w	8006234 <_scanf_float+0x64>
 800636a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800636e:	e7f4      	b.n	800635a <_scanf_float+0x18a>
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	d10e      	bne.n	8006394 <_scanf_float+0x1c4>
 8006376:	f1b9 0f00 	cmp.w	r9, #0
 800637a:	d10e      	bne.n	800639a <_scanf_float+0x1ca>
 800637c:	6822      	ldr	r2, [r4, #0]
 800637e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006382:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006386:	d108      	bne.n	800639a <_scanf_float+0x1ca>
 8006388:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800638c:	f04f 0a01 	mov.w	sl, #1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	e7e3      	b.n	800635c <_scanf_float+0x18c>
 8006394:	f1ba 0f02 	cmp.w	sl, #2
 8006398:	d055      	beq.n	8006446 <_scanf_float+0x276>
 800639a:	2d01      	cmp	r5, #1
 800639c:	d002      	beq.n	80063a4 <_scanf_float+0x1d4>
 800639e:	2d04      	cmp	r5, #4
 80063a0:	f47f af48 	bne.w	8006234 <_scanf_float+0x64>
 80063a4:	3501      	adds	r5, #1
 80063a6:	b2ed      	uxtb	r5, r5
 80063a8:	e7d8      	b.n	800635c <_scanf_float+0x18c>
 80063aa:	f1ba 0f01 	cmp.w	sl, #1
 80063ae:	f47f af41 	bne.w	8006234 <_scanf_float+0x64>
 80063b2:	f04f 0a02 	mov.w	sl, #2
 80063b6:	e7d1      	b.n	800635c <_scanf_float+0x18c>
 80063b8:	b97d      	cbnz	r5, 80063da <_scanf_float+0x20a>
 80063ba:	f1b9 0f00 	cmp.w	r9, #0
 80063be:	f47f af3c 	bne.w	800623a <_scanf_float+0x6a>
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80063c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80063cc:	f47f af39 	bne.w	8006242 <_scanf_float+0x72>
 80063d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063d4:	2501      	movs	r5, #1
 80063d6:	6022      	str	r2, [r4, #0]
 80063d8:	e7c0      	b.n	800635c <_scanf_float+0x18c>
 80063da:	2d03      	cmp	r5, #3
 80063dc:	d0e2      	beq.n	80063a4 <_scanf_float+0x1d4>
 80063de:	2d05      	cmp	r5, #5
 80063e0:	e7de      	b.n	80063a0 <_scanf_float+0x1d0>
 80063e2:	2d02      	cmp	r5, #2
 80063e4:	f47f af26 	bne.w	8006234 <_scanf_float+0x64>
 80063e8:	2503      	movs	r5, #3
 80063ea:	e7b7      	b.n	800635c <_scanf_float+0x18c>
 80063ec:	2d06      	cmp	r5, #6
 80063ee:	f47f af21 	bne.w	8006234 <_scanf_float+0x64>
 80063f2:	2507      	movs	r5, #7
 80063f4:	e7b2      	b.n	800635c <_scanf_float+0x18c>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	0591      	lsls	r1, r2, #22
 80063fa:	f57f af1b 	bpl.w	8006234 <_scanf_float+0x64>
 80063fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006402:	6022      	str	r2, [r4, #0]
 8006404:	f8cd 9004 	str.w	r9, [sp, #4]
 8006408:	e7a8      	b.n	800635c <_scanf_float+0x18c>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006410:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006414:	d006      	beq.n	8006424 <_scanf_float+0x254>
 8006416:	0550      	lsls	r0, r2, #21
 8006418:	f57f af0c 	bpl.w	8006234 <_scanf_float+0x64>
 800641c:	f1b9 0f00 	cmp.w	r9, #0
 8006420:	f43f af0f 	beq.w	8006242 <_scanf_float+0x72>
 8006424:	0591      	lsls	r1, r2, #22
 8006426:	bf58      	it	pl
 8006428:	9901      	ldrpl	r1, [sp, #4]
 800642a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800642e:	bf58      	it	pl
 8006430:	eba9 0101 	subpl.w	r1, r9, r1
 8006434:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006438:	f04f 0900 	mov.w	r9, #0
 800643c:	bf58      	it	pl
 800643e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006442:	6022      	str	r2, [r4, #0]
 8006444:	e78a      	b.n	800635c <_scanf_float+0x18c>
 8006446:	f04f 0a03 	mov.w	sl, #3
 800644a:	e787      	b.n	800635c <_scanf_float+0x18c>
 800644c:	4639      	mov	r1, r7
 800644e:	4640      	mov	r0, r8
 8006450:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006454:	4798      	blx	r3
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f aedf 	beq.w	800621a <_scanf_float+0x4a>
 800645c:	e6ea      	b.n	8006234 <_scanf_float+0x64>
 800645e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006462:	463a      	mov	r2, r7
 8006464:	4640      	mov	r0, r8
 8006466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800646a:	4798      	blx	r3
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	3b01      	subs	r3, #1
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	e6ec      	b.n	800624e <_scanf_float+0x7e>
 8006474:	1e6b      	subs	r3, r5, #1
 8006476:	2b06      	cmp	r3, #6
 8006478:	d825      	bhi.n	80064c6 <_scanf_float+0x2f6>
 800647a:	2d02      	cmp	r5, #2
 800647c:	d836      	bhi.n	80064ec <_scanf_float+0x31c>
 800647e:	455e      	cmp	r6, fp
 8006480:	f67f aee8 	bls.w	8006254 <_scanf_float+0x84>
 8006484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006488:	463a      	mov	r2, r7
 800648a:	4640      	mov	r0, r8
 800648c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006490:	4798      	blx	r3
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	3b01      	subs	r3, #1
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	e7f1      	b.n	800647e <_scanf_float+0x2ae>
 800649a:	9802      	ldr	r0, [sp, #8]
 800649c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80064a4:	463a      	mov	r2, r7
 80064a6:	9002      	str	r0, [sp, #8]
 80064a8:	4640      	mov	r0, r8
 80064aa:	4798      	blx	r3
 80064ac:	6923      	ldr	r3, [r4, #16]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	6123      	str	r3, [r4, #16]
 80064b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064b6:	fa5f fa8a 	uxtb.w	sl, sl
 80064ba:	f1ba 0f02 	cmp.w	sl, #2
 80064be:	d1ec      	bne.n	800649a <_scanf_float+0x2ca>
 80064c0:	3d03      	subs	r5, #3
 80064c2:	b2ed      	uxtb	r5, r5
 80064c4:	1b76      	subs	r6, r6, r5
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	05da      	lsls	r2, r3, #23
 80064ca:	d52f      	bpl.n	800652c <_scanf_float+0x35c>
 80064cc:	055b      	lsls	r3, r3, #21
 80064ce:	d510      	bpl.n	80064f2 <_scanf_float+0x322>
 80064d0:	455e      	cmp	r6, fp
 80064d2:	f67f aebf 	bls.w	8006254 <_scanf_float+0x84>
 80064d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064da:	463a      	mov	r2, r7
 80064dc:	4640      	mov	r0, r8
 80064de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064e2:	4798      	blx	r3
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	e7f1      	b.n	80064d0 <_scanf_float+0x300>
 80064ec:	46aa      	mov	sl, r5
 80064ee:	9602      	str	r6, [sp, #8]
 80064f0:	e7df      	b.n	80064b2 <_scanf_float+0x2e2>
 80064f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	2965      	cmp	r1, #101	; 0x65
 80064fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80064fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	d00c      	beq.n	8006520 <_scanf_float+0x350>
 8006506:	2945      	cmp	r1, #69	; 0x45
 8006508:	d00a      	beq.n	8006520 <_scanf_float+0x350>
 800650a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800650e:	463a      	mov	r2, r7
 8006510:	4640      	mov	r0, r8
 8006512:	4798      	blx	r3
 8006514:	6923      	ldr	r3, [r4, #16]
 8006516:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800651a:	3b01      	subs	r3, #1
 800651c:	1eb5      	subs	r5, r6, #2
 800651e:	6123      	str	r3, [r4, #16]
 8006520:	463a      	mov	r2, r7
 8006522:	4640      	mov	r0, r8
 8006524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006528:	4798      	blx	r3
 800652a:	462e      	mov	r6, r5
 800652c:	6825      	ldr	r5, [r4, #0]
 800652e:	f015 0510 	ands.w	r5, r5, #16
 8006532:	d159      	bne.n	80065e8 <_scanf_float+0x418>
 8006534:	7035      	strb	r5, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006540:	d11c      	bne.n	800657c <_scanf_float+0x3ac>
 8006542:	9b01      	ldr	r3, [sp, #4]
 8006544:	454b      	cmp	r3, r9
 8006546:	eba3 0209 	sub.w	r2, r3, r9
 800654a:	d124      	bne.n	8006596 <_scanf_float+0x3c6>
 800654c:	2200      	movs	r2, #0
 800654e:	4659      	mov	r1, fp
 8006550:	4640      	mov	r0, r8
 8006552:	f000 fe89 	bl	8007268 <_strtod_r>
 8006556:	f8d4 c000 	ldr.w	ip, [r4]
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	f01c 0f02 	tst.w	ip, #2
 8006560:	4606      	mov	r6, r0
 8006562:	460f      	mov	r7, r1
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	d021      	beq.n	80065ac <_scanf_float+0x3dc>
 8006568:	9903      	ldr	r1, [sp, #12]
 800656a:	1d1a      	adds	r2, r3, #4
 800656c:	600a      	str	r2, [r1, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	e9c3 6700 	strd	r6, r7, [r3]
 8006574:	68e3      	ldr	r3, [r4, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60e3      	str	r3, [r4, #12]
 800657a:	e66c      	b.n	8006256 <_scanf_float+0x86>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0e4      	beq.n	800654c <_scanf_float+0x37c>
 8006582:	9905      	ldr	r1, [sp, #20]
 8006584:	230a      	movs	r3, #10
 8006586:	462a      	mov	r2, r5
 8006588:	4640      	mov	r0, r8
 800658a:	3101      	adds	r1, #1
 800658c:	f000 fef8 	bl	8007380 <_strtol_r>
 8006590:	9b04      	ldr	r3, [sp, #16]
 8006592:	9e05      	ldr	r6, [sp, #20]
 8006594:	1ac2      	subs	r2, r0, r3
 8006596:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800659a:	429e      	cmp	r6, r3
 800659c:	bf28      	it	cs
 800659e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80065a2:	4630      	mov	r0, r6
 80065a4:	4911      	ldr	r1, [pc, #68]	; (80065ec <_scanf_float+0x41c>)
 80065a6:	f000 f829 	bl	80065fc <siprintf>
 80065aa:	e7cf      	b.n	800654c <_scanf_float+0x37c>
 80065ac:	f01c 0f04 	tst.w	ip, #4
 80065b0:	f103 0e04 	add.w	lr, r3, #4
 80065b4:	d003      	beq.n	80065be <_scanf_float+0x3ee>
 80065b6:	9903      	ldr	r1, [sp, #12]
 80065b8:	f8c1 e000 	str.w	lr, [r1]
 80065bc:	e7d7      	b.n	800656e <_scanf_float+0x39e>
 80065be:	9a03      	ldr	r2, [sp, #12]
 80065c0:	f8c2 e000 	str.w	lr, [r2]
 80065c4:	f8d3 8000 	ldr.w	r8, [r3]
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	f7fa fa1e 	bl	8000a0c <__aeabi_dcmpun>
 80065d0:	b128      	cbz	r0, 80065de <_scanf_float+0x40e>
 80065d2:	4807      	ldr	r0, [pc, #28]	; (80065f0 <_scanf_float+0x420>)
 80065d4:	f000 f80e 	bl	80065f4 <nanf>
 80065d8:	f8c8 0000 	str.w	r0, [r8]
 80065dc:	e7ca      	b.n	8006574 <_scanf_float+0x3a4>
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7fa fa71 	bl	8000ac8 <__aeabi_d2f>
 80065e6:	e7f7      	b.n	80065d8 <_scanf_float+0x408>
 80065e8:	2500      	movs	r5, #0
 80065ea:	e634      	b.n	8006256 <_scanf_float+0x86>
 80065ec:	0800a4bc 	.word	0x0800a4bc
 80065f0:	0800a8d8 	.word	0x0800a8d8

080065f4 <nanf>:
 80065f4:	4800      	ldr	r0, [pc, #0]	; (80065f8 <nanf+0x4>)
 80065f6:	4770      	bx	lr
 80065f8:	7fc00000 	.word	0x7fc00000

080065fc <siprintf>:
 80065fc:	b40e      	push	{r1, r2, r3}
 80065fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006602:	b500      	push	{lr}
 8006604:	b09c      	sub	sp, #112	; 0x70
 8006606:	ab1d      	add	r3, sp, #116	; 0x74
 8006608:	9002      	str	r0, [sp, #8]
 800660a:	9006      	str	r0, [sp, #24]
 800660c:	9107      	str	r1, [sp, #28]
 800660e:	9104      	str	r1, [sp, #16]
 8006610:	4808      	ldr	r0, [pc, #32]	; (8006634 <siprintf+0x38>)
 8006612:	4909      	ldr	r1, [pc, #36]	; (8006638 <siprintf+0x3c>)
 8006614:	f853 2b04 	ldr.w	r2, [r3], #4
 8006618:	9105      	str	r1, [sp, #20]
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	a902      	add	r1, sp, #8
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	f002 fe94 	bl	800934c <_svfiprintf_r>
 8006624:	2200      	movs	r2, #0
 8006626:	9b02      	ldr	r3, [sp, #8]
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	b01c      	add	sp, #112	; 0x70
 800662c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006630:	b003      	add	sp, #12
 8006632:	4770      	bx	lr
 8006634:	2000001c 	.word	0x2000001c
 8006638:	ffff0208 	.word	0xffff0208

0800663c <sulp>:
 800663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006640:	460f      	mov	r7, r1
 8006642:	4690      	mov	r8, r2
 8006644:	f002 fc2a 	bl	8008e9c <__ulp>
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	f1b8 0f00 	cmp.w	r8, #0
 8006650:	d011      	beq.n	8006676 <sulp+0x3a>
 8006652:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006656:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800665a:	2b00      	cmp	r3, #0
 800665c:	dd0b      	ble.n	8006676 <sulp+0x3a>
 800665e:	2400      	movs	r4, #0
 8006660:	051b      	lsls	r3, r3, #20
 8006662:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006666:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800666a:	4622      	mov	r2, r4
 800666c:	462b      	mov	r3, r5
 800666e:	f7f9 ff33 	bl	80004d8 <__aeabi_dmul>
 8006672:	4604      	mov	r4, r0
 8006674:	460d      	mov	r5, r1
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006680 <_strtod_l>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	469b      	mov	fp, r3
 8006686:	2300      	movs	r3, #0
 8006688:	b0a1      	sub	sp, #132	; 0x84
 800668a:	931c      	str	r3, [sp, #112]	; 0x70
 800668c:	4ba1      	ldr	r3, [pc, #644]	; (8006914 <_strtod_l+0x294>)
 800668e:	4682      	mov	sl, r0
 8006690:	681f      	ldr	r7, [r3, #0]
 8006692:	460e      	mov	r6, r1
 8006694:	4638      	mov	r0, r7
 8006696:	9217      	str	r2, [sp, #92]	; 0x5c
 8006698:	f7f9 fd5a 	bl	8000150 <strlen>
 800669c:	f04f 0800 	mov.w	r8, #0
 80066a0:	4604      	mov	r4, r0
 80066a2:	f04f 0900 	mov.w	r9, #0
 80066a6:	961b      	str	r6, [sp, #108]	; 0x6c
 80066a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	2a2b      	cmp	r2, #43	; 0x2b
 80066ae:	d04c      	beq.n	800674a <_strtod_l+0xca>
 80066b0:	d83a      	bhi.n	8006728 <_strtod_l+0xa8>
 80066b2:	2a0d      	cmp	r2, #13
 80066b4:	d833      	bhi.n	800671e <_strtod_l+0x9e>
 80066b6:	2a08      	cmp	r2, #8
 80066b8:	d833      	bhi.n	8006722 <_strtod_l+0xa2>
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	d03d      	beq.n	800673a <_strtod_l+0xba>
 80066be:	2300      	movs	r3, #0
 80066c0:	930c      	str	r3, [sp, #48]	; 0x30
 80066c2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80066c4:	782b      	ldrb	r3, [r5, #0]
 80066c6:	2b30      	cmp	r3, #48	; 0x30
 80066c8:	f040 80af 	bne.w	800682a <_strtod_l+0x1aa>
 80066cc:	786b      	ldrb	r3, [r5, #1]
 80066ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80066d2:	2b58      	cmp	r3, #88	; 0x58
 80066d4:	d16c      	bne.n	80067b0 <_strtod_l+0x130>
 80066d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066d8:	4650      	mov	r0, sl
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	ab1c      	add	r3, sp, #112	; 0x70
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4a8d      	ldr	r2, [pc, #564]	; (8006918 <_strtod_l+0x298>)
 80066e2:	f8cd b008 	str.w	fp, [sp, #8]
 80066e6:	ab1d      	add	r3, sp, #116	; 0x74
 80066e8:	a91b      	add	r1, sp, #108	; 0x6c
 80066ea:	f001 fd2f 	bl	800814c <__gethex>
 80066ee:	f010 0607 	ands.w	r6, r0, #7
 80066f2:	4604      	mov	r4, r0
 80066f4:	d005      	beq.n	8006702 <_strtod_l+0x82>
 80066f6:	2e06      	cmp	r6, #6
 80066f8:	d129      	bne.n	800674e <_strtod_l+0xce>
 80066fa:	2300      	movs	r3, #0
 80066fc:	3501      	adds	r5, #1
 80066fe:	951b      	str	r5, [sp, #108]	; 0x6c
 8006700:	930c      	str	r3, [sp, #48]	; 0x30
 8006702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8596 	bne.w	8007236 <_strtod_l+0xbb6>
 800670a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800670c:	b1d3      	cbz	r3, 8006744 <_strtod_l+0xc4>
 800670e:	4642      	mov	r2, r8
 8006710:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006714:	4610      	mov	r0, r2
 8006716:	4619      	mov	r1, r3
 8006718:	b021      	add	sp, #132	; 0x84
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	2a20      	cmp	r2, #32
 8006720:	d1cd      	bne.n	80066be <_strtod_l+0x3e>
 8006722:	3301      	adds	r3, #1
 8006724:	931b      	str	r3, [sp, #108]	; 0x6c
 8006726:	e7bf      	b.n	80066a8 <_strtod_l+0x28>
 8006728:	2a2d      	cmp	r2, #45	; 0x2d
 800672a:	d1c8      	bne.n	80066be <_strtod_l+0x3e>
 800672c:	2201      	movs	r2, #1
 800672e:	920c      	str	r2, [sp, #48]	; 0x30
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	921b      	str	r2, [sp, #108]	; 0x6c
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1c3      	bne.n	80066c2 <_strtod_l+0x42>
 800673a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800673c:	961b      	str	r6, [sp, #108]	; 0x6c
 800673e:	2b00      	cmp	r3, #0
 8006740:	f040 8577 	bne.w	8007232 <_strtod_l+0xbb2>
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	e7e4      	b.n	8006714 <_strtod_l+0x94>
 800674a:	2200      	movs	r2, #0
 800674c:	e7ef      	b.n	800672e <_strtod_l+0xae>
 800674e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006750:	b13a      	cbz	r2, 8006762 <_strtod_l+0xe2>
 8006752:	2135      	movs	r1, #53	; 0x35
 8006754:	a81e      	add	r0, sp, #120	; 0x78
 8006756:	f002 fca5 	bl	80090a4 <__copybits>
 800675a:	4650      	mov	r0, sl
 800675c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800675e:	f002 f86d 	bl	800883c <_Bfree>
 8006762:	3e01      	subs	r6, #1
 8006764:	2e05      	cmp	r6, #5
 8006766:	d807      	bhi.n	8006778 <_strtod_l+0xf8>
 8006768:	e8df f006 	tbb	[pc, r6]
 800676c:	1d180b0e 	.word	0x1d180b0e
 8006770:	030e      	.short	0x030e
 8006772:	f04f 0900 	mov.w	r9, #0
 8006776:	46c8      	mov	r8, r9
 8006778:	0721      	lsls	r1, r4, #28
 800677a:	d5c2      	bpl.n	8006702 <_strtod_l+0x82>
 800677c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006780:	e7bf      	b.n	8006702 <_strtod_l+0x82>
 8006782:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006786:	e7f7      	b.n	8006778 <_strtod_l+0xf8>
 8006788:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800678a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800678e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006796:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800679a:	e7ed      	b.n	8006778 <_strtod_l+0xf8>
 800679c:	f04f 0800 	mov.w	r8, #0
 80067a0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800691c <_strtod_l+0x29c>
 80067a4:	e7e8      	b.n	8006778 <_strtod_l+0xf8>
 80067a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80067aa:	f04f 38ff 	mov.w	r8, #4294967295
 80067ae:	e7e3      	b.n	8006778 <_strtod_l+0xf8>
 80067b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	921b      	str	r2, [sp, #108]	; 0x6c
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b30      	cmp	r3, #48	; 0x30
 80067ba:	d0f9      	beq.n	80067b0 <_strtod_l+0x130>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0a0      	beq.n	8006702 <_strtod_l+0x82>
 80067c0:	2301      	movs	r3, #1
 80067c2:	9307      	str	r3, [sp, #28]
 80067c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067c6:	220a      	movs	r2, #10
 80067c8:	9308      	str	r3, [sp, #32]
 80067ca:	2300      	movs	r3, #0
 80067cc:	469b      	mov	fp, r3
 80067ce:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80067d2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80067d4:	7805      	ldrb	r5, [r0, #0]
 80067d6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80067da:	b2d9      	uxtb	r1, r3
 80067dc:	2909      	cmp	r1, #9
 80067de:	d926      	bls.n	800682e <_strtod_l+0x1ae>
 80067e0:	4622      	mov	r2, r4
 80067e2:	4639      	mov	r1, r7
 80067e4:	f002 fec8 	bl	8009578 <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d032      	beq.n	8006852 <_strtod_l+0x1d2>
 80067ec:	2000      	movs	r0, #0
 80067ee:	462b      	mov	r3, r5
 80067f0:	465c      	mov	r4, fp
 80067f2:	4602      	mov	r2, r0
 80067f4:	9004      	str	r0, [sp, #16]
 80067f6:	2b65      	cmp	r3, #101	; 0x65
 80067f8:	d001      	beq.n	80067fe <_strtod_l+0x17e>
 80067fa:	2b45      	cmp	r3, #69	; 0x45
 80067fc:	d113      	bne.n	8006826 <_strtod_l+0x1a6>
 80067fe:	b91c      	cbnz	r4, 8006808 <_strtod_l+0x188>
 8006800:	9b07      	ldr	r3, [sp, #28]
 8006802:	4303      	orrs	r3, r0
 8006804:	d099      	beq.n	800673a <_strtod_l+0xba>
 8006806:	2400      	movs	r4, #0
 8006808:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800680a:	1c73      	adds	r3, r6, #1
 800680c:	931b      	str	r3, [sp, #108]	; 0x6c
 800680e:	7873      	ldrb	r3, [r6, #1]
 8006810:	2b2b      	cmp	r3, #43	; 0x2b
 8006812:	d078      	beq.n	8006906 <_strtod_l+0x286>
 8006814:	2b2d      	cmp	r3, #45	; 0x2d
 8006816:	d07b      	beq.n	8006910 <_strtod_l+0x290>
 8006818:	2700      	movs	r7, #0
 800681a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800681e:	2909      	cmp	r1, #9
 8006820:	f240 8082 	bls.w	8006928 <_strtod_l+0x2a8>
 8006824:	961b      	str	r6, [sp, #108]	; 0x6c
 8006826:	2500      	movs	r5, #0
 8006828:	e09e      	b.n	8006968 <_strtod_l+0x2e8>
 800682a:	2300      	movs	r3, #0
 800682c:	e7c9      	b.n	80067c2 <_strtod_l+0x142>
 800682e:	f1bb 0f08 	cmp.w	fp, #8
 8006832:	bfd5      	itete	le
 8006834:	9906      	ldrle	r1, [sp, #24]
 8006836:	9905      	ldrgt	r1, [sp, #20]
 8006838:	fb02 3301 	mlale	r3, r2, r1, r3
 800683c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006840:	f100 0001 	add.w	r0, r0, #1
 8006844:	bfd4      	ite	le
 8006846:	9306      	strle	r3, [sp, #24]
 8006848:	9305      	strgt	r3, [sp, #20]
 800684a:	f10b 0b01 	add.w	fp, fp, #1
 800684e:	901b      	str	r0, [sp, #108]	; 0x6c
 8006850:	e7bf      	b.n	80067d2 <_strtod_l+0x152>
 8006852:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006854:	191a      	adds	r2, r3, r4
 8006856:	921b      	str	r2, [sp, #108]	; 0x6c
 8006858:	5d1b      	ldrb	r3, [r3, r4]
 800685a:	f1bb 0f00 	cmp.w	fp, #0
 800685e:	d036      	beq.n	80068ce <_strtod_l+0x24e>
 8006860:	465c      	mov	r4, fp
 8006862:	9004      	str	r0, [sp, #16]
 8006864:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006868:	2a09      	cmp	r2, #9
 800686a:	d912      	bls.n	8006892 <_strtod_l+0x212>
 800686c:	2201      	movs	r2, #1
 800686e:	e7c2      	b.n	80067f6 <_strtod_l+0x176>
 8006870:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006872:	3001      	adds	r0, #1
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	921b      	str	r2, [sp, #108]	; 0x6c
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b30      	cmp	r3, #48	; 0x30
 800687c:	d0f8      	beq.n	8006870 <_strtod_l+0x1f0>
 800687e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006882:	2a08      	cmp	r2, #8
 8006884:	f200 84dc 	bhi.w	8007240 <_strtod_l+0xbc0>
 8006888:	9004      	str	r0, [sp, #16]
 800688a:	2000      	movs	r0, #0
 800688c:	4604      	mov	r4, r0
 800688e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006890:	9208      	str	r2, [sp, #32]
 8006892:	3b30      	subs	r3, #48	; 0x30
 8006894:	f100 0201 	add.w	r2, r0, #1
 8006898:	d013      	beq.n	80068c2 <_strtod_l+0x242>
 800689a:	9904      	ldr	r1, [sp, #16]
 800689c:	1905      	adds	r5, r0, r4
 800689e:	4411      	add	r1, r2
 80068a0:	9104      	str	r1, [sp, #16]
 80068a2:	4622      	mov	r2, r4
 80068a4:	210a      	movs	r1, #10
 80068a6:	42aa      	cmp	r2, r5
 80068a8:	d113      	bne.n	80068d2 <_strtod_l+0x252>
 80068aa:	1822      	adds	r2, r4, r0
 80068ac:	2a08      	cmp	r2, #8
 80068ae:	f104 0401 	add.w	r4, r4, #1
 80068b2:	4404      	add	r4, r0
 80068b4:	dc1b      	bgt.n	80068ee <_strtod_l+0x26e>
 80068b6:	220a      	movs	r2, #10
 80068b8:	9906      	ldr	r1, [sp, #24]
 80068ba:	fb02 3301 	mla	r3, r2, r1, r3
 80068be:	9306      	str	r3, [sp, #24]
 80068c0:	2200      	movs	r2, #0
 80068c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068c4:	4610      	mov	r0, r2
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	911b      	str	r1, [sp, #108]	; 0x6c
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	e7ca      	b.n	8006864 <_strtod_l+0x1e4>
 80068ce:	4658      	mov	r0, fp
 80068d0:	e7d3      	b.n	800687a <_strtod_l+0x1fa>
 80068d2:	2a08      	cmp	r2, #8
 80068d4:	dc04      	bgt.n	80068e0 <_strtod_l+0x260>
 80068d6:	9f06      	ldr	r7, [sp, #24]
 80068d8:	434f      	muls	r7, r1
 80068da:	9706      	str	r7, [sp, #24]
 80068dc:	3201      	adds	r2, #1
 80068de:	e7e2      	b.n	80068a6 <_strtod_l+0x226>
 80068e0:	1c57      	adds	r7, r2, #1
 80068e2:	2f10      	cmp	r7, #16
 80068e4:	bfde      	ittt	le
 80068e6:	9f05      	ldrle	r7, [sp, #20]
 80068e8:	434f      	mulle	r7, r1
 80068ea:	9705      	strle	r7, [sp, #20]
 80068ec:	e7f6      	b.n	80068dc <_strtod_l+0x25c>
 80068ee:	2c10      	cmp	r4, #16
 80068f0:	bfdf      	itttt	le
 80068f2:	220a      	movle	r2, #10
 80068f4:	9905      	ldrle	r1, [sp, #20]
 80068f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80068fa:	9305      	strle	r3, [sp, #20]
 80068fc:	e7e0      	b.n	80068c0 <_strtod_l+0x240>
 80068fe:	2300      	movs	r3, #0
 8006900:	2201      	movs	r2, #1
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	e77c      	b.n	8006800 <_strtod_l+0x180>
 8006906:	2700      	movs	r7, #0
 8006908:	1cb3      	adds	r3, r6, #2
 800690a:	931b      	str	r3, [sp, #108]	; 0x6c
 800690c:	78b3      	ldrb	r3, [r6, #2]
 800690e:	e784      	b.n	800681a <_strtod_l+0x19a>
 8006910:	2701      	movs	r7, #1
 8006912:	e7f9      	b.n	8006908 <_strtod_l+0x288>
 8006914:	0800a718 	.word	0x0800a718
 8006918:	0800a4c4 	.word	0x0800a4c4
 800691c:	7ff00000 	.word	0x7ff00000
 8006920:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006922:	1c59      	adds	r1, r3, #1
 8006924:	911b      	str	r1, [sp, #108]	; 0x6c
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b30      	cmp	r3, #48	; 0x30
 800692a:	d0f9      	beq.n	8006920 <_strtod_l+0x2a0>
 800692c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006930:	2908      	cmp	r1, #8
 8006932:	f63f af78 	bhi.w	8006826 <_strtod_l+0x1a6>
 8006936:	f04f 0e0a 	mov.w	lr, #10
 800693a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800693e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006944:	1c59      	adds	r1, r3, #1
 8006946:	911b      	str	r1, [sp, #108]	; 0x6c
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800694e:	2d09      	cmp	r5, #9
 8006950:	d935      	bls.n	80069be <_strtod_l+0x33e>
 8006952:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006954:	1b49      	subs	r1, r1, r5
 8006956:	2908      	cmp	r1, #8
 8006958:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800695c:	dc02      	bgt.n	8006964 <_strtod_l+0x2e4>
 800695e:	4565      	cmp	r5, ip
 8006960:	bfa8      	it	ge
 8006962:	4665      	movge	r5, ip
 8006964:	b107      	cbz	r7, 8006968 <_strtod_l+0x2e8>
 8006966:	426d      	negs	r5, r5
 8006968:	2c00      	cmp	r4, #0
 800696a:	d14c      	bne.n	8006a06 <_strtod_l+0x386>
 800696c:	9907      	ldr	r1, [sp, #28]
 800696e:	4301      	orrs	r1, r0
 8006970:	f47f aec7 	bne.w	8006702 <_strtod_l+0x82>
 8006974:	2a00      	cmp	r2, #0
 8006976:	f47f aee0 	bne.w	800673a <_strtod_l+0xba>
 800697a:	2b69      	cmp	r3, #105	; 0x69
 800697c:	d026      	beq.n	80069cc <_strtod_l+0x34c>
 800697e:	dc23      	bgt.n	80069c8 <_strtod_l+0x348>
 8006980:	2b49      	cmp	r3, #73	; 0x49
 8006982:	d023      	beq.n	80069cc <_strtod_l+0x34c>
 8006984:	2b4e      	cmp	r3, #78	; 0x4e
 8006986:	f47f aed8 	bne.w	800673a <_strtod_l+0xba>
 800698a:	499c      	ldr	r1, [pc, #624]	; (8006bfc <_strtod_l+0x57c>)
 800698c:	a81b      	add	r0, sp, #108	; 0x6c
 800698e:	f001 fe2b 	bl	80085e8 <__match>
 8006992:	2800      	cmp	r0, #0
 8006994:	f43f aed1 	beq.w	800673a <_strtod_l+0xba>
 8006998:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b28      	cmp	r3, #40	; 0x28
 800699e:	d12c      	bne.n	80069fa <_strtod_l+0x37a>
 80069a0:	4997      	ldr	r1, [pc, #604]	; (8006c00 <_strtod_l+0x580>)
 80069a2:	aa1e      	add	r2, sp, #120	; 0x78
 80069a4:	a81b      	add	r0, sp, #108	; 0x6c
 80069a6:	f001 fe33 	bl	8008610 <__hexnan>
 80069aa:	2805      	cmp	r0, #5
 80069ac:	d125      	bne.n	80069fa <_strtod_l+0x37a>
 80069ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069b0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80069b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80069b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80069bc:	e6a1      	b.n	8006702 <_strtod_l+0x82>
 80069be:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80069c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80069c6:	e7bc      	b.n	8006942 <_strtod_l+0x2c2>
 80069c8:	2b6e      	cmp	r3, #110	; 0x6e
 80069ca:	e7dc      	b.n	8006986 <_strtod_l+0x306>
 80069cc:	498d      	ldr	r1, [pc, #564]	; (8006c04 <_strtod_l+0x584>)
 80069ce:	a81b      	add	r0, sp, #108	; 0x6c
 80069d0:	f001 fe0a 	bl	80085e8 <__match>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f43f aeb0 	beq.w	800673a <_strtod_l+0xba>
 80069da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069dc:	498a      	ldr	r1, [pc, #552]	; (8006c08 <_strtod_l+0x588>)
 80069de:	3b01      	subs	r3, #1
 80069e0:	a81b      	add	r0, sp, #108	; 0x6c
 80069e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80069e4:	f001 fe00 	bl	80085e8 <__match>
 80069e8:	b910      	cbnz	r0, 80069f0 <_strtod_l+0x370>
 80069ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ec:	3301      	adds	r3, #1
 80069ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80069f0:	f04f 0800 	mov.w	r8, #0
 80069f4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006c18 <_strtod_l+0x598>
 80069f8:	e683      	b.n	8006702 <_strtod_l+0x82>
 80069fa:	4884      	ldr	r0, [pc, #528]	; (8006c0c <_strtod_l+0x58c>)
 80069fc:	f002 fda6 	bl	800954c <nan>
 8006a00:	4680      	mov	r8, r0
 8006a02:	4689      	mov	r9, r1
 8006a04:	e67d      	b.n	8006702 <_strtod_l+0x82>
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	f1bb 0f00 	cmp.w	fp, #0
 8006a0c:	bf08      	it	eq
 8006a0e:	46a3      	moveq	fp, r4
 8006a10:	1aeb      	subs	r3, r5, r3
 8006a12:	2c10      	cmp	r4, #16
 8006a14:	9806      	ldr	r0, [sp, #24]
 8006a16:	4626      	mov	r6, r4
 8006a18:	9307      	str	r3, [sp, #28]
 8006a1a:	bfa8      	it	ge
 8006a1c:	2610      	movge	r6, #16
 8006a1e:	f7f9 fce1 	bl	80003e4 <__aeabi_ui2d>
 8006a22:	2c09      	cmp	r4, #9
 8006a24:	4680      	mov	r8, r0
 8006a26:	4689      	mov	r9, r1
 8006a28:	dd13      	ble.n	8006a52 <_strtod_l+0x3d2>
 8006a2a:	4b79      	ldr	r3, [pc, #484]	; (8006c10 <_strtod_l+0x590>)
 8006a2c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a30:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a34:	f7f9 fd50 	bl	80004d8 <__aeabi_dmul>
 8006a38:	4680      	mov	r8, r0
 8006a3a:	9805      	ldr	r0, [sp, #20]
 8006a3c:	4689      	mov	r9, r1
 8006a3e:	f7f9 fcd1 	bl	80003e4 <__aeabi_ui2d>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7f9 fb8f 	bl	800016c <__adddf3>
 8006a4e:	4680      	mov	r8, r0
 8006a50:	4689      	mov	r9, r1
 8006a52:	2c0f      	cmp	r4, #15
 8006a54:	dc36      	bgt.n	8006ac4 <_strtod_l+0x444>
 8006a56:	9b07      	ldr	r3, [sp, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f43f ae52 	beq.w	8006702 <_strtod_l+0x82>
 8006a5e:	dd22      	ble.n	8006aa6 <_strtod_l+0x426>
 8006a60:	2b16      	cmp	r3, #22
 8006a62:	dc09      	bgt.n	8006a78 <_strtod_l+0x3f8>
 8006a64:	4c6a      	ldr	r4, [pc, #424]	; (8006c10 <_strtod_l+0x590>)
 8006a66:	4642      	mov	r2, r8
 8006a68:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006a72:	f7f9 fd31 	bl	80004d8 <__aeabi_dmul>
 8006a76:	e7c3      	b.n	8006a00 <_strtod_l+0x380>
 8006a78:	9a07      	ldr	r2, [sp, #28]
 8006a7a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	db20      	blt.n	8006ac4 <_strtod_l+0x444>
 8006a82:	4d63      	ldr	r5, [pc, #396]	; (8006c10 <_strtod_l+0x590>)
 8006a84:	f1c4 040f 	rsb	r4, r4, #15
 8006a88:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a92:	464b      	mov	r3, r9
 8006a94:	f7f9 fd20 	bl	80004d8 <__aeabi_dmul>
 8006a98:	9b07      	ldr	r3, [sp, #28]
 8006a9a:	1b1c      	subs	r4, r3, r4
 8006a9c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006aa4:	e7e5      	b.n	8006a72 <_strtod_l+0x3f2>
 8006aa6:	9b07      	ldr	r3, [sp, #28]
 8006aa8:	3316      	adds	r3, #22
 8006aaa:	db0b      	blt.n	8006ac4 <_strtod_l+0x444>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	4a58      	ldr	r2, [pc, #352]	; (8006c10 <_strtod_l+0x590>)
 8006ab0:	1b5d      	subs	r5, r3, r5
 8006ab2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006abc:	4649      	mov	r1, r9
 8006abe:	f7f9 fe35 	bl	800072c <__aeabi_ddiv>
 8006ac2:	e79d      	b.n	8006a00 <_strtod_l+0x380>
 8006ac4:	9b07      	ldr	r3, [sp, #28]
 8006ac6:	1ba6      	subs	r6, r4, r6
 8006ac8:	441e      	add	r6, r3
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	dd71      	ble.n	8006bb2 <_strtod_l+0x532>
 8006ace:	f016 030f 	ands.w	r3, r6, #15
 8006ad2:	d00a      	beq.n	8006aea <_strtod_l+0x46a>
 8006ad4:	494e      	ldr	r1, [pc, #312]	; (8006c10 <_strtod_l+0x590>)
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	f7f9 fcf9 	bl	80004d8 <__aeabi_dmul>
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	4689      	mov	r9, r1
 8006aea:	f036 060f 	bics.w	r6, r6, #15
 8006aee:	d050      	beq.n	8006b92 <_strtod_l+0x512>
 8006af0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006af4:	dd27      	ble.n	8006b46 <_strtod_l+0x4c6>
 8006af6:	f04f 0b00 	mov.w	fp, #0
 8006afa:	f8cd b010 	str.w	fp, [sp, #16]
 8006afe:	f8cd b020 	str.w	fp, [sp, #32]
 8006b02:	f8cd b018 	str.w	fp, [sp, #24]
 8006b06:	2322      	movs	r3, #34	; 0x22
 8006b08:	f04f 0800 	mov.w	r8, #0
 8006b0c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006c18 <_strtod_l+0x598>
 8006b10:	f8ca 3000 	str.w	r3, [sl]
 8006b14:	9b08      	ldr	r3, [sp, #32]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f43f adf3 	beq.w	8006702 <_strtod_l+0x82>
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b20:	f001 fe8c 	bl	800883c <_Bfree>
 8006b24:	4650      	mov	r0, sl
 8006b26:	9906      	ldr	r1, [sp, #24]
 8006b28:	f001 fe88 	bl	800883c <_Bfree>
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	9904      	ldr	r1, [sp, #16]
 8006b30:	f001 fe84 	bl	800883c <_Bfree>
 8006b34:	4650      	mov	r0, sl
 8006b36:	9908      	ldr	r1, [sp, #32]
 8006b38:	f001 fe80 	bl	800883c <_Bfree>
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	4650      	mov	r0, sl
 8006b40:	f001 fe7c 	bl	800883c <_Bfree>
 8006b44:	e5dd      	b.n	8006702 <_strtod_l+0x82>
 8006b46:	2300      	movs	r3, #0
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	461f      	mov	r7, r3
 8006b4e:	1136      	asrs	r6, r6, #4
 8006b50:	2e01      	cmp	r6, #1
 8006b52:	dc21      	bgt.n	8006b98 <_strtod_l+0x518>
 8006b54:	b10b      	cbz	r3, 8006b5a <_strtod_l+0x4da>
 8006b56:	4680      	mov	r8, r0
 8006b58:	4689      	mov	r9, r1
 8006b5a:	4b2e      	ldr	r3, [pc, #184]	; (8006c14 <_strtod_l+0x594>)
 8006b5c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006b60:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b64:	4642      	mov	r2, r8
 8006b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	f7f9 fcb4 	bl	80004d8 <__aeabi_dmul>
 8006b70:	4b29      	ldr	r3, [pc, #164]	; (8006c18 <_strtod_l+0x598>)
 8006b72:	460a      	mov	r2, r1
 8006b74:	400b      	ands	r3, r1
 8006b76:	4929      	ldr	r1, [pc, #164]	; (8006c1c <_strtod_l+0x59c>)
 8006b78:	4680      	mov	r8, r0
 8006b7a:	428b      	cmp	r3, r1
 8006b7c:	d8bb      	bhi.n	8006af6 <_strtod_l+0x476>
 8006b7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b82:	428b      	cmp	r3, r1
 8006b84:	bf86      	itte	hi
 8006b86:	f04f 38ff 	movhi.w	r8, #4294967295
 8006b8a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006c20 <_strtod_l+0x5a0>
 8006b8e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006b92:	2300      	movs	r3, #0
 8006b94:	9305      	str	r3, [sp, #20]
 8006b96:	e07e      	b.n	8006c96 <_strtod_l+0x616>
 8006b98:	07f2      	lsls	r2, r6, #31
 8006b9a:	d507      	bpl.n	8006bac <_strtod_l+0x52c>
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <_strtod_l+0x594>)
 8006b9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f7f9 fc97 	bl	80004d8 <__aeabi_dmul>
 8006baa:	2301      	movs	r3, #1
 8006bac:	3701      	adds	r7, #1
 8006bae:	1076      	asrs	r6, r6, #1
 8006bb0:	e7ce      	b.n	8006b50 <_strtod_l+0x4d0>
 8006bb2:	d0ee      	beq.n	8006b92 <_strtod_l+0x512>
 8006bb4:	4276      	negs	r6, r6
 8006bb6:	f016 020f 	ands.w	r2, r6, #15
 8006bba:	d00a      	beq.n	8006bd2 <_strtod_l+0x552>
 8006bbc:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <_strtod_l+0x590>)
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7f9 fdaf 	bl	800072c <__aeabi_ddiv>
 8006bce:	4680      	mov	r8, r0
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	1136      	asrs	r6, r6, #4
 8006bd4:	d0dd      	beq.n	8006b92 <_strtod_l+0x512>
 8006bd6:	2e1f      	cmp	r6, #31
 8006bd8:	dd24      	ble.n	8006c24 <_strtod_l+0x5a4>
 8006bda:	f04f 0b00 	mov.w	fp, #0
 8006bde:	f8cd b010 	str.w	fp, [sp, #16]
 8006be2:	f8cd b020 	str.w	fp, [sp, #32]
 8006be6:	f8cd b018 	str.w	fp, [sp, #24]
 8006bea:	2322      	movs	r3, #34	; 0x22
 8006bec:	f04f 0800 	mov.w	r8, #0
 8006bf0:	f04f 0900 	mov.w	r9, #0
 8006bf4:	f8ca 3000 	str.w	r3, [sl]
 8006bf8:	e78c      	b.n	8006b14 <_strtod_l+0x494>
 8006bfa:	bf00      	nop
 8006bfc:	0800a495 	.word	0x0800a495
 8006c00:	0800a4d8 	.word	0x0800a4d8
 8006c04:	0800a48d 	.word	0x0800a48d
 8006c08:	0800a61c 	.word	0x0800a61c
 8006c0c:	0800a8d8 	.word	0x0800a8d8
 8006c10:	0800a7b8 	.word	0x0800a7b8
 8006c14:	0800a790 	.word	0x0800a790
 8006c18:	7ff00000 	.word	0x7ff00000
 8006c1c:	7ca00000 	.word	0x7ca00000
 8006c20:	7fefffff 	.word	0x7fefffff
 8006c24:	f016 0310 	ands.w	r3, r6, #16
 8006c28:	bf18      	it	ne
 8006c2a:	236a      	movne	r3, #106	; 0x6a
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	9305      	str	r3, [sp, #20]
 8006c30:	4649      	mov	r1, r9
 8006c32:	2300      	movs	r3, #0
 8006c34:	4fb2      	ldr	r7, [pc, #712]	; (8006f00 <_strtod_l+0x880>)
 8006c36:	07f2      	lsls	r2, r6, #31
 8006c38:	d504      	bpl.n	8006c44 <_strtod_l+0x5c4>
 8006c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3e:	f7f9 fc4b 	bl	80004d8 <__aeabi_dmul>
 8006c42:	2301      	movs	r3, #1
 8006c44:	1076      	asrs	r6, r6, #1
 8006c46:	f107 0708 	add.w	r7, r7, #8
 8006c4a:	d1f4      	bne.n	8006c36 <_strtod_l+0x5b6>
 8006c4c:	b10b      	cbz	r3, 8006c52 <_strtod_l+0x5d2>
 8006c4e:	4680      	mov	r8, r0
 8006c50:	4689      	mov	r9, r1
 8006c52:	9b05      	ldr	r3, [sp, #20]
 8006c54:	b1bb      	cbz	r3, 8006c86 <_strtod_l+0x606>
 8006c56:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006c5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	4649      	mov	r1, r9
 8006c62:	dd10      	ble.n	8006c86 <_strtod_l+0x606>
 8006c64:	2b1f      	cmp	r3, #31
 8006c66:	f340 812b 	ble.w	8006ec0 <_strtod_l+0x840>
 8006c6a:	2b34      	cmp	r3, #52	; 0x34
 8006c6c:	bfd8      	it	le
 8006c6e:	f04f 32ff 	movle.w	r2, #4294967295
 8006c72:	f04f 0800 	mov.w	r8, #0
 8006c76:	bfcf      	iteee	gt
 8006c78:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006c7c:	3b20      	suble	r3, #32
 8006c7e:	fa02 f303 	lslle.w	r3, r2, r3
 8006c82:	ea03 0901 	andle.w	r9, r3, r1
 8006c86:	2200      	movs	r2, #0
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	f7f9 fe8b 	bl	80009a8 <__aeabi_dcmpeq>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d1a1      	bne.n	8006bda <_strtod_l+0x55a>
 8006c96:	9b06      	ldr	r3, [sp, #24]
 8006c98:	465a      	mov	r2, fp
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	9908      	ldr	r1, [sp, #32]
 8006ca2:	f001 fe37 	bl	8008914 <__s2b>
 8006ca6:	9008      	str	r0, [sp, #32]
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f43f af24 	beq.w	8006af6 <_strtod_l+0x476>
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	f04f 0b00 	mov.w	fp, #0
 8006cb4:	1b5d      	subs	r5, r3, r5
 8006cb6:	9b07      	ldr	r3, [sp, #28]
 8006cb8:	f8cd b010 	str.w	fp, [sp, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bfb4      	ite	lt
 8006cc0:	462b      	movlt	r3, r5
 8006cc2:	2300      	movge	r3, #0
 8006cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8006cc6:	9b07      	ldr	r3, [sp, #28]
 8006cc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ccc:	9316      	str	r3, [sp, #88]	; 0x58
 8006cce:	9b08      	ldr	r3, [sp, #32]
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	f001 fd72 	bl	80087bc <_Balloc>
 8006cd8:	9006      	str	r0, [sp, #24]
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f43f af13 	beq.w	8006b06 <_strtod_l+0x486>
 8006ce0:	9b08      	ldr	r3, [sp, #32]
 8006ce2:	300c      	adds	r0, #12
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	f103 010c 	add.w	r1, r3, #12
 8006cea:	3202      	adds	r2, #2
 8006cec:	0092      	lsls	r2, r2, #2
 8006cee:	f001 fd57 	bl	80087a0 <memcpy>
 8006cf2:	ab1e      	add	r3, sp, #120	; 0x78
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4650      	mov	r0, sl
 8006d00:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006d04:	f002 f944 	bl	8008f90 <__d2b>
 8006d08:	901c      	str	r0, [sp, #112]	; 0x70
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f aefb 	beq.w	8006b06 <_strtod_l+0x486>
 8006d10:	2101      	movs	r1, #1
 8006d12:	4650      	mov	r0, sl
 8006d14:	f001 fe96 	bl	8008a44 <__i2b>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	9004      	str	r0, [sp, #16]
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f43f aef2 	beq.w	8006b06 <_strtod_l+0x486>
 8006d22:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006d24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	bfab      	itete	ge
 8006d2a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006d2c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006d2e:	18ee      	addge	r6, r5, r3
 8006d30:	1b5c      	sublt	r4, r3, r5
 8006d32:	9b05      	ldr	r3, [sp, #20]
 8006d34:	bfa8      	it	ge
 8006d36:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006d38:	eba5 0503 	sub.w	r5, r5, r3
 8006d3c:	4415      	add	r5, r2
 8006d3e:	4b71      	ldr	r3, [pc, #452]	; (8006f04 <_strtod_l+0x884>)
 8006d40:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d44:	bfb8      	it	lt
 8006d46:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006d48:	429d      	cmp	r5, r3
 8006d4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d4e:	f280 80c9 	bge.w	8006ee4 <_strtod_l+0x864>
 8006d52:	1b5b      	subs	r3, r3, r5
 8006d54:	2b1f      	cmp	r3, #31
 8006d56:	f04f 0701 	mov.w	r7, #1
 8006d5a:	eba2 0203 	sub.w	r2, r2, r3
 8006d5e:	f300 80b6 	bgt.w	8006ece <_strtod_l+0x84e>
 8006d62:	2500      	movs	r5, #0
 8006d64:	fa07 f303 	lsl.w	r3, r7, r3
 8006d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d6a:	18b7      	adds	r7, r6, r2
 8006d6c:	9b05      	ldr	r3, [sp, #20]
 8006d6e:	42be      	cmp	r6, r7
 8006d70:	4414      	add	r4, r2
 8006d72:	441c      	add	r4, r3
 8006d74:	4633      	mov	r3, r6
 8006d76:	bfa8      	it	ge
 8006d78:	463b      	movge	r3, r7
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	bfa8      	it	ge
 8006d7e:	4623      	movge	r3, r4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfc2      	ittt	gt
 8006d84:	1aff      	subgt	r7, r7, r3
 8006d86:	1ae4      	subgt	r4, r4, r3
 8006d88:	1af6      	subgt	r6, r6, r3
 8006d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dd17      	ble.n	8006dc0 <_strtod_l+0x740>
 8006d90:	461a      	mov	r2, r3
 8006d92:	4650      	mov	r0, sl
 8006d94:	9904      	ldr	r1, [sp, #16]
 8006d96:	f001 ff0f 	bl	8008bb8 <__pow5mult>
 8006d9a:	9004      	str	r0, [sp, #16]
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f43f aeb2 	beq.w	8006b06 <_strtod_l+0x486>
 8006da2:	4601      	mov	r1, r0
 8006da4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006da6:	4650      	mov	r0, sl
 8006da8:	f001 fe62 	bl	8008a70 <__multiply>
 8006dac:	9009      	str	r0, [sp, #36]	; 0x24
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f43f aea9 	beq.w	8006b06 <_strtod_l+0x486>
 8006db4:	4650      	mov	r0, sl
 8006db6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006db8:	f001 fd40 	bl	800883c <_Bfree>
 8006dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dbe:	931c      	str	r3, [sp, #112]	; 0x70
 8006dc0:	2f00      	cmp	r7, #0
 8006dc2:	f300 8093 	bgt.w	8006eec <_strtod_l+0x86c>
 8006dc6:	9b07      	ldr	r3, [sp, #28]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dd08      	ble.n	8006dde <_strtod_l+0x75e>
 8006dcc:	4650      	mov	r0, sl
 8006dce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006dd0:	9906      	ldr	r1, [sp, #24]
 8006dd2:	f001 fef1 	bl	8008bb8 <__pow5mult>
 8006dd6:	9006      	str	r0, [sp, #24]
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	f43f ae94 	beq.w	8006b06 <_strtod_l+0x486>
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	dd08      	ble.n	8006df4 <_strtod_l+0x774>
 8006de2:	4622      	mov	r2, r4
 8006de4:	4650      	mov	r0, sl
 8006de6:	9906      	ldr	r1, [sp, #24]
 8006de8:	f001 ff40 	bl	8008c6c <__lshift>
 8006dec:	9006      	str	r0, [sp, #24]
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f43f ae89 	beq.w	8006b06 <_strtod_l+0x486>
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	dd08      	ble.n	8006e0a <_strtod_l+0x78a>
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	9904      	ldr	r1, [sp, #16]
 8006dfe:	f001 ff35 	bl	8008c6c <__lshift>
 8006e02:	9004      	str	r0, [sp, #16]
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f43f ae7e 	beq.w	8006b06 <_strtod_l+0x486>
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	9a06      	ldr	r2, [sp, #24]
 8006e0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e10:	f001 ffb4 	bl	8008d7c <__mdiff>
 8006e14:	4683      	mov	fp, r0
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f43f ae75 	beq.w	8006b06 <_strtod_l+0x486>
 8006e1c:	2400      	movs	r4, #0
 8006e1e:	68c3      	ldr	r3, [r0, #12]
 8006e20:	9904      	ldr	r1, [sp, #16]
 8006e22:	60c4      	str	r4, [r0, #12]
 8006e24:	930d      	str	r3, [sp, #52]	; 0x34
 8006e26:	f001 ff8d 	bl	8008d44 <__mcmp>
 8006e2a:	42a0      	cmp	r0, r4
 8006e2c:	da70      	bge.n	8006f10 <_strtod_l+0x890>
 8006e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e30:	ea53 0308 	orrs.w	r3, r3, r8
 8006e34:	f040 8096 	bne.w	8006f64 <_strtod_l+0x8e4>
 8006e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 8091 	bne.w	8006f64 <_strtod_l+0x8e4>
 8006e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e46:	0d1b      	lsrs	r3, r3, #20
 8006e48:	051b      	lsls	r3, r3, #20
 8006e4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e4e:	f240 8089 	bls.w	8006f64 <_strtod_l+0x8e4>
 8006e52:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006e56:	b923      	cbnz	r3, 8006e62 <_strtod_l+0x7e2>
 8006e58:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f340 8081 	ble.w	8006f64 <_strtod_l+0x8e4>
 8006e62:	4659      	mov	r1, fp
 8006e64:	2201      	movs	r2, #1
 8006e66:	4650      	mov	r0, sl
 8006e68:	f001 ff00 	bl	8008c6c <__lshift>
 8006e6c:	9904      	ldr	r1, [sp, #16]
 8006e6e:	4683      	mov	fp, r0
 8006e70:	f001 ff68 	bl	8008d44 <__mcmp>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	dd75      	ble.n	8006f64 <_strtod_l+0x8e4>
 8006e78:	9905      	ldr	r1, [sp, #20]
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <_strtod_l+0x888>)
 8006e7e:	2900      	cmp	r1, #0
 8006e80:	f000 8091 	beq.w	8006fa6 <_strtod_l+0x926>
 8006e84:	ea02 0109 	and.w	r1, r2, r9
 8006e88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e8c:	f300 808b 	bgt.w	8006fa6 <_strtod_l+0x926>
 8006e90:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e94:	f77f aea9 	ble.w	8006bea <_strtod_l+0x56a>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <_strtod_l+0x88c>)
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ea8:	f7f9 fb16 	bl	80004d8 <__aeabi_dmul>
 8006eac:	460b      	mov	r3, r1
 8006eae:	4303      	orrs	r3, r0
 8006eb0:	bf08      	it	eq
 8006eb2:	2322      	moveq	r3, #34	; 0x22
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	bf08      	it	eq
 8006eba:	f8ca 3000 	streq.w	r3, [sl]
 8006ebe:	e62d      	b.n	8006b1c <_strtod_l+0x49c>
 8006ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	ea03 0808 	and.w	r8, r3, r8
 8006ecc:	e6db      	b.n	8006c86 <_strtod_l+0x606>
 8006ece:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006ed2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006ed6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006eda:	35e2      	adds	r5, #226	; 0xe2
 8006edc:	fa07 f505 	lsl.w	r5, r7, r5
 8006ee0:	970f      	str	r7, [sp, #60]	; 0x3c
 8006ee2:	e742      	b.n	8006d6a <_strtod_l+0x6ea>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	2500      	movs	r5, #0
 8006ee8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eea:	e73e      	b.n	8006d6a <_strtod_l+0x6ea>
 8006eec:	463a      	mov	r2, r7
 8006eee:	4650      	mov	r0, sl
 8006ef0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ef2:	f001 febb 	bl	8008c6c <__lshift>
 8006ef6:	901c      	str	r0, [sp, #112]	; 0x70
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	f47f af64 	bne.w	8006dc6 <_strtod_l+0x746>
 8006efe:	e602      	b.n	8006b06 <_strtod_l+0x486>
 8006f00:	0800a4f0 	.word	0x0800a4f0
 8006f04:	fffffc02 	.word	0xfffffc02
 8006f08:	7ff00000 	.word	0x7ff00000
 8006f0c:	39500000 	.word	0x39500000
 8006f10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f14:	d166      	bne.n	8006fe4 <_strtod_l+0x964>
 8006f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f1c:	b35a      	cbz	r2, 8006f76 <_strtod_l+0x8f6>
 8006f1e:	4a9c      	ldr	r2, [pc, #624]	; (8007190 <_strtod_l+0xb10>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d12c      	bne.n	8006f7e <_strtod_l+0x8fe>
 8006f24:	9b05      	ldr	r3, [sp, #20]
 8006f26:	4640      	mov	r0, r8
 8006f28:	b303      	cbz	r3, 8006f6c <_strtod_l+0x8ec>
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	4a99      	ldr	r2, [pc, #612]	; (8007194 <_strtod_l+0xb14>)
 8006f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f32:	401a      	ands	r2, r3
 8006f34:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006f38:	d81b      	bhi.n	8006f72 <_strtod_l+0x8f2>
 8006f3a:	0d12      	lsrs	r2, r2, #20
 8006f3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006f40:	fa01 f303 	lsl.w	r3, r1, r3
 8006f44:	4298      	cmp	r0, r3
 8006f46:	d11a      	bne.n	8006f7e <_strtod_l+0x8fe>
 8006f48:	4b93      	ldr	r3, [pc, #588]	; (8007198 <_strtod_l+0xb18>)
 8006f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d102      	bne.n	8006f56 <_strtod_l+0x8d6>
 8006f50:	3001      	adds	r0, #1
 8006f52:	f43f add8 	beq.w	8006b06 <_strtod_l+0x486>
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	4b8e      	ldr	r3, [pc, #568]	; (8007194 <_strtod_l+0xb14>)
 8006f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f5e:	401a      	ands	r2, r3
 8006f60:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006f64:	9b05      	ldr	r3, [sp, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d196      	bne.n	8006e98 <_strtod_l+0x818>
 8006f6a:	e5d7      	b.n	8006b1c <_strtod_l+0x49c>
 8006f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f70:	e7e8      	b.n	8006f44 <_strtod_l+0x8c4>
 8006f72:	460b      	mov	r3, r1
 8006f74:	e7e6      	b.n	8006f44 <_strtod_l+0x8c4>
 8006f76:	ea53 0308 	orrs.w	r3, r3, r8
 8006f7a:	f43f af7d 	beq.w	8006e78 <_strtod_l+0x7f8>
 8006f7e:	b1e5      	cbz	r5, 8006fba <_strtod_l+0x93a>
 8006f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f82:	421d      	tst	r5, r3
 8006f84:	d0ee      	beq.n	8006f64 <_strtod_l+0x8e4>
 8006f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	9a05      	ldr	r2, [sp, #20]
 8006f8e:	b1c3      	cbz	r3, 8006fc2 <_strtod_l+0x942>
 8006f90:	f7ff fb54 	bl	800663c <sulp>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f9c:	f7f9 f8e6 	bl	800016c <__adddf3>
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	4689      	mov	r9, r1
 8006fa4:	e7de      	b.n	8006f64 <_strtod_l+0x8e4>
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006fac:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006fb0:	f04f 38ff 	mov.w	r8, #4294967295
 8006fb4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006fb8:	e7d4      	b.n	8006f64 <_strtod_l+0x8e4>
 8006fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fbc:	ea13 0f08 	tst.w	r3, r8
 8006fc0:	e7e0      	b.n	8006f84 <_strtod_l+0x904>
 8006fc2:	f7ff fb3b 	bl	800663c <sulp>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fce:	f7f9 f8cb 	bl	8000168 <__aeabi_dsub>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	4689      	mov	r9, r1
 8006fda:	f7f9 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d0c0      	beq.n	8006f64 <_strtod_l+0x8e4>
 8006fe2:	e602      	b.n	8006bea <_strtod_l+0x56a>
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	9904      	ldr	r1, [sp, #16]
 8006fe8:	f002 f82e 	bl	8009048 <__ratio>
 8006fec:	2200      	movs	r2, #0
 8006fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460f      	mov	r7, r1
 8006ff6:	f7f9 fceb 	bl	80009d0 <__aeabi_dcmple>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d075      	beq.n	80070ea <_strtod_l+0xa6a>
 8006ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007000:	2b00      	cmp	r3, #0
 8007002:	d047      	beq.n	8007094 <_strtod_l+0xa14>
 8007004:	2600      	movs	r6, #0
 8007006:	4f65      	ldr	r7, [pc, #404]	; (800719c <_strtod_l+0xb1c>)
 8007008:	4d64      	ldr	r5, [pc, #400]	; (800719c <_strtod_l+0xb1c>)
 800700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007010:	0d1b      	lsrs	r3, r3, #20
 8007012:	051b      	lsls	r3, r3, #20
 8007014:	930f      	str	r3, [sp, #60]	; 0x3c
 8007016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007018:	4b61      	ldr	r3, [pc, #388]	; (80071a0 <_strtod_l+0xb20>)
 800701a:	429a      	cmp	r2, r3
 800701c:	f040 80c8 	bne.w	80071b0 <_strtod_l+0xb30>
 8007020:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007024:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702a:	4640      	mov	r0, r8
 800702c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007030:	4649      	mov	r1, r9
 8007032:	f001 ff33 	bl	8008e9c <__ulp>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4630      	mov	r0, r6
 800703c:	4639      	mov	r1, r7
 800703e:	f7f9 fa4b 	bl	80004d8 <__aeabi_dmul>
 8007042:	4642      	mov	r2, r8
 8007044:	464b      	mov	r3, r9
 8007046:	f7f9 f891 	bl	800016c <__adddf3>
 800704a:	460b      	mov	r3, r1
 800704c:	4951      	ldr	r1, [pc, #324]	; (8007194 <_strtod_l+0xb14>)
 800704e:	4a55      	ldr	r2, [pc, #340]	; (80071a4 <_strtod_l+0xb24>)
 8007050:	4019      	ands	r1, r3
 8007052:	4291      	cmp	r1, r2
 8007054:	4680      	mov	r8, r0
 8007056:	d95e      	bls.n	8007116 <_strtod_l+0xa96>
 8007058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800705e:	4293      	cmp	r3, r2
 8007060:	d103      	bne.n	800706a <_strtod_l+0x9ea>
 8007062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007064:	3301      	adds	r3, #1
 8007066:	f43f ad4e 	beq.w	8006b06 <_strtod_l+0x486>
 800706a:	f04f 38ff 	mov.w	r8, #4294967295
 800706e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007198 <_strtod_l+0xb18>
 8007072:	4650      	mov	r0, sl
 8007074:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007076:	f001 fbe1 	bl	800883c <_Bfree>
 800707a:	4650      	mov	r0, sl
 800707c:	9906      	ldr	r1, [sp, #24]
 800707e:	f001 fbdd 	bl	800883c <_Bfree>
 8007082:	4650      	mov	r0, sl
 8007084:	9904      	ldr	r1, [sp, #16]
 8007086:	f001 fbd9 	bl	800883c <_Bfree>
 800708a:	4659      	mov	r1, fp
 800708c:	4650      	mov	r0, sl
 800708e:	f001 fbd5 	bl	800883c <_Bfree>
 8007092:	e61c      	b.n	8006cce <_strtod_l+0x64e>
 8007094:	f1b8 0f00 	cmp.w	r8, #0
 8007098:	d119      	bne.n	80070ce <_strtod_l+0xa4e>
 800709a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a0:	b9e3      	cbnz	r3, 80070dc <_strtod_l+0xa5c>
 80070a2:	2200      	movs	r2, #0
 80070a4:	4630      	mov	r0, r6
 80070a6:	4639      	mov	r1, r7
 80070a8:	4b3c      	ldr	r3, [pc, #240]	; (800719c <_strtod_l+0xb1c>)
 80070aa:	f7f9 fc87 	bl	80009bc <__aeabi_dcmplt>
 80070ae:	b9c8      	cbnz	r0, 80070e4 <_strtod_l+0xa64>
 80070b0:	2200      	movs	r2, #0
 80070b2:	4630      	mov	r0, r6
 80070b4:	4639      	mov	r1, r7
 80070b6:	4b3c      	ldr	r3, [pc, #240]	; (80071a8 <_strtod_l+0xb28>)
 80070b8:	f7f9 fa0e 	bl	80004d8 <__aeabi_dmul>
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80070c4:	9418      	str	r4, [sp, #96]	; 0x60
 80070c6:	9319      	str	r3, [sp, #100]	; 0x64
 80070c8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80070cc:	e79d      	b.n	800700a <_strtod_l+0x98a>
 80070ce:	f1b8 0f01 	cmp.w	r8, #1
 80070d2:	d103      	bne.n	80070dc <_strtod_l+0xa5c>
 80070d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f43f ad87 	beq.w	8006bea <_strtod_l+0x56a>
 80070dc:	2600      	movs	r6, #0
 80070de:	2400      	movs	r4, #0
 80070e0:	4f32      	ldr	r7, [pc, #200]	; (80071ac <_strtod_l+0xb2c>)
 80070e2:	e791      	b.n	8007008 <_strtod_l+0x988>
 80070e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80070e6:	4d30      	ldr	r5, [pc, #192]	; (80071a8 <_strtod_l+0xb28>)
 80070e8:	e7ea      	b.n	80070c0 <_strtod_l+0xa40>
 80070ea:	4b2f      	ldr	r3, [pc, #188]	; (80071a8 <_strtod_l+0xb28>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	4630      	mov	r0, r6
 80070f0:	4639      	mov	r1, r7
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f8:	4604      	mov	r4, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	b933      	cbnz	r3, 800710c <_strtod_l+0xa8c>
 80070fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007102:	9010      	str	r0, [sp, #64]	; 0x40
 8007104:	9311      	str	r3, [sp, #68]	; 0x44
 8007106:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800710a:	e77e      	b.n	800700a <_strtod_l+0x98a>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007114:	e7f7      	b.n	8007106 <_strtod_l+0xa86>
 8007116:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800711a:	9b05      	ldr	r3, [sp, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1a8      	bne.n	8007072 <_strtod_l+0x9f2>
 8007120:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007124:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007126:	0d1b      	lsrs	r3, r3, #20
 8007128:	051b      	lsls	r3, r3, #20
 800712a:	429a      	cmp	r2, r3
 800712c:	d1a1      	bne.n	8007072 <_strtod_l+0x9f2>
 800712e:	4620      	mov	r0, r4
 8007130:	4629      	mov	r1, r5
 8007132:	f7f9 ffed 	bl	8001110 <__aeabi_d2lz>
 8007136:	f7f9 f9a1 	bl	800047c <__aeabi_l2d>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 f811 	bl	8000168 <__aeabi_dsub>
 8007146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800714c:	ea43 0308 	orr.w	r3, r3, r8
 8007150:	4313      	orrs	r3, r2
 8007152:	4604      	mov	r4, r0
 8007154:	460d      	mov	r5, r1
 8007156:	d066      	beq.n	8007226 <_strtod_l+0xba6>
 8007158:	a309      	add	r3, pc, #36	; (adr r3, 8007180 <_strtod_l+0xb00>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 fc2d 	bl	80009bc <__aeabi_dcmplt>
 8007162:	2800      	cmp	r0, #0
 8007164:	f47f acda 	bne.w	8006b1c <_strtod_l+0x49c>
 8007168:	a307      	add	r3, pc, #28	; (adr r3, 8007188 <_strtod_l+0xb08>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	4620      	mov	r0, r4
 8007170:	4629      	mov	r1, r5
 8007172:	f7f9 fc41 	bl	80009f8 <__aeabi_dcmpgt>
 8007176:	2800      	cmp	r0, #0
 8007178:	f43f af7b 	beq.w	8007072 <_strtod_l+0x9f2>
 800717c:	e4ce      	b.n	8006b1c <_strtod_l+0x49c>
 800717e:	bf00      	nop
 8007180:	94a03595 	.word	0x94a03595
 8007184:	3fdfffff 	.word	0x3fdfffff
 8007188:	35afe535 	.word	0x35afe535
 800718c:	3fe00000 	.word	0x3fe00000
 8007190:	000fffff 	.word	0x000fffff
 8007194:	7ff00000 	.word	0x7ff00000
 8007198:	7fefffff 	.word	0x7fefffff
 800719c:	3ff00000 	.word	0x3ff00000
 80071a0:	7fe00000 	.word	0x7fe00000
 80071a4:	7c9fffff 	.word	0x7c9fffff
 80071a8:	3fe00000 	.word	0x3fe00000
 80071ac:	bff00000 	.word	0xbff00000
 80071b0:	9b05      	ldr	r3, [sp, #20]
 80071b2:	b313      	cbz	r3, 80071fa <_strtod_l+0xb7a>
 80071b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071ba:	d81e      	bhi.n	80071fa <_strtod_l+0xb7a>
 80071bc:	a326      	add	r3, pc, #152	; (adr r3, 8007258 <_strtod_l+0xbd8>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 fc03 	bl	80009d0 <__aeabi_dcmple>
 80071ca:	b190      	cbz	r0, 80071f2 <_strtod_l+0xb72>
 80071cc:	4629      	mov	r1, r5
 80071ce:	4620      	mov	r0, r4
 80071d0:	f7f9 fc5a 	bl	8000a88 <__aeabi_d2uiz>
 80071d4:	2801      	cmp	r0, #1
 80071d6:	bf38      	it	cc
 80071d8:	2001      	movcc	r0, #1
 80071da:	f7f9 f903 	bl	80003e4 <__aeabi_ui2d>
 80071de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	b9d3      	cbnz	r3, 800721c <_strtod_l+0xb9c>
 80071e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ea:	9012      	str	r0, [sp, #72]	; 0x48
 80071ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80071ee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80071f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071f4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80071f8:	1a9f      	subs	r7, r3, r2
 80071fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071fe:	f001 fe4d 	bl	8008e9c <__ulp>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007212:	f7f8 ffab 	bl	800016c <__adddf3>
 8007216:	4680      	mov	r8, r0
 8007218:	4689      	mov	r9, r1
 800721a:	e77e      	b.n	800711a <_strtod_l+0xa9a>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007224:	e7e3      	b.n	80071ee <_strtod_l+0xb6e>
 8007226:	a30e      	add	r3, pc, #56	; (adr r3, 8007260 <_strtod_l+0xbe0>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 fbc6 	bl	80009bc <__aeabi_dcmplt>
 8007230:	e7a1      	b.n	8007176 <_strtod_l+0xaf6>
 8007232:	2300      	movs	r3, #0
 8007234:	930c      	str	r3, [sp, #48]	; 0x30
 8007236:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007238:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	f7ff ba65 	b.w	800670a <_strtod_l+0x8a>
 8007240:	2b65      	cmp	r3, #101	; 0x65
 8007242:	f43f ab5c 	beq.w	80068fe <_strtod_l+0x27e>
 8007246:	2b45      	cmp	r3, #69	; 0x45
 8007248:	f43f ab59 	beq.w	80068fe <_strtod_l+0x27e>
 800724c:	2201      	movs	r2, #1
 800724e:	f7ff bb8d 	b.w	800696c <_strtod_l+0x2ec>
 8007252:	bf00      	nop
 8007254:	f3af 8000 	nop.w
 8007258:	ffc00000 	.word	0xffc00000
 800725c:	41dfffff 	.word	0x41dfffff
 8007260:	94a03595 	.word	0x94a03595
 8007264:	3fcfffff 	.word	0x3fcfffff

08007268 <_strtod_r>:
 8007268:	4b01      	ldr	r3, [pc, #4]	; (8007270 <_strtod_r+0x8>)
 800726a:	f7ff ba09 	b.w	8006680 <_strtod_l>
 800726e:	bf00      	nop
 8007270:	20000084 	.word	0x20000084

08007274 <_strtol_l.isra.0>:
 8007274:	2b01      	cmp	r3, #1
 8007276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727a:	4686      	mov	lr, r0
 800727c:	d001      	beq.n	8007282 <_strtol_l.isra.0+0xe>
 800727e:	2b24      	cmp	r3, #36	; 0x24
 8007280:	d906      	bls.n	8007290 <_strtol_l.isra.0+0x1c>
 8007282:	f7fe fb13 	bl	80058ac <__errno>
 8007286:	2316      	movs	r3, #22
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	2000      	movs	r0, #0
 800728c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007290:	468c      	mov	ip, r1
 8007292:	4e3a      	ldr	r6, [pc, #232]	; (800737c <_strtol_l.isra.0+0x108>)
 8007294:	4660      	mov	r0, ip
 8007296:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800729a:	5da5      	ldrb	r5, [r4, r6]
 800729c:	f015 0508 	ands.w	r5, r5, #8
 80072a0:	d1f8      	bne.n	8007294 <_strtol_l.isra.0+0x20>
 80072a2:	2c2d      	cmp	r4, #45	; 0x2d
 80072a4:	d133      	bne.n	800730e <_strtol_l.isra.0+0x9a>
 80072a6:	f04f 0801 	mov.w	r8, #1
 80072aa:	f89c 4000 	ldrb.w	r4, [ip]
 80072ae:	f100 0c02 	add.w	ip, r0, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d05d      	beq.n	8007372 <_strtol_l.isra.0+0xfe>
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d10c      	bne.n	80072d4 <_strtol_l.isra.0+0x60>
 80072ba:	2c30      	cmp	r4, #48	; 0x30
 80072bc:	d10a      	bne.n	80072d4 <_strtol_l.isra.0+0x60>
 80072be:	f89c 0000 	ldrb.w	r0, [ip]
 80072c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072c6:	2858      	cmp	r0, #88	; 0x58
 80072c8:	d14e      	bne.n	8007368 <_strtol_l.isra.0+0xf4>
 80072ca:	2310      	movs	r3, #16
 80072cc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80072d0:	f10c 0c02 	add.w	ip, ip, #2
 80072d4:	2500      	movs	r5, #0
 80072d6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80072da:	3f01      	subs	r7, #1
 80072dc:	fbb7 f9f3 	udiv	r9, r7, r3
 80072e0:	4628      	mov	r0, r5
 80072e2:	fb03 7a19 	mls	sl, r3, r9, r7
 80072e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80072ea:	2e09      	cmp	r6, #9
 80072ec:	d818      	bhi.n	8007320 <_strtol_l.isra.0+0xac>
 80072ee:	4634      	mov	r4, r6
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	dd24      	ble.n	800733e <_strtol_l.isra.0+0xca>
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	db1f      	blt.n	8007338 <_strtol_l.isra.0+0xc4>
 80072f8:	4581      	cmp	r9, r0
 80072fa:	d31d      	bcc.n	8007338 <_strtol_l.isra.0+0xc4>
 80072fc:	d101      	bne.n	8007302 <_strtol_l.isra.0+0x8e>
 80072fe:	45a2      	cmp	sl, r4
 8007300:	db1a      	blt.n	8007338 <_strtol_l.isra.0+0xc4>
 8007302:	2501      	movs	r5, #1
 8007304:	fb00 4003 	mla	r0, r0, r3, r4
 8007308:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800730c:	e7eb      	b.n	80072e6 <_strtol_l.isra.0+0x72>
 800730e:	2c2b      	cmp	r4, #43	; 0x2b
 8007310:	bf08      	it	eq
 8007312:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007316:	46a8      	mov	r8, r5
 8007318:	bf08      	it	eq
 800731a:	f100 0c02 	addeq.w	ip, r0, #2
 800731e:	e7c8      	b.n	80072b2 <_strtol_l.isra.0+0x3e>
 8007320:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007324:	2e19      	cmp	r6, #25
 8007326:	d801      	bhi.n	800732c <_strtol_l.isra.0+0xb8>
 8007328:	3c37      	subs	r4, #55	; 0x37
 800732a:	e7e1      	b.n	80072f0 <_strtol_l.isra.0+0x7c>
 800732c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007330:	2e19      	cmp	r6, #25
 8007332:	d804      	bhi.n	800733e <_strtol_l.isra.0+0xca>
 8007334:	3c57      	subs	r4, #87	; 0x57
 8007336:	e7db      	b.n	80072f0 <_strtol_l.isra.0+0x7c>
 8007338:	f04f 35ff 	mov.w	r5, #4294967295
 800733c:	e7e4      	b.n	8007308 <_strtol_l.isra.0+0x94>
 800733e:	2d00      	cmp	r5, #0
 8007340:	da08      	bge.n	8007354 <_strtol_l.isra.0+0xe0>
 8007342:	2322      	movs	r3, #34	; 0x22
 8007344:	4638      	mov	r0, r7
 8007346:	f8ce 3000 	str.w	r3, [lr]
 800734a:	2a00      	cmp	r2, #0
 800734c:	d09e      	beq.n	800728c <_strtol_l.isra.0+0x18>
 800734e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007352:	e007      	b.n	8007364 <_strtol_l.isra.0+0xf0>
 8007354:	f1b8 0f00 	cmp.w	r8, #0
 8007358:	d000      	beq.n	800735c <_strtol_l.isra.0+0xe8>
 800735a:	4240      	negs	r0, r0
 800735c:	2a00      	cmp	r2, #0
 800735e:	d095      	beq.n	800728c <_strtol_l.isra.0+0x18>
 8007360:	2d00      	cmp	r5, #0
 8007362:	d1f4      	bne.n	800734e <_strtol_l.isra.0+0xda>
 8007364:	6011      	str	r1, [r2, #0]
 8007366:	e791      	b.n	800728c <_strtol_l.isra.0+0x18>
 8007368:	2430      	movs	r4, #48	; 0x30
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1b2      	bne.n	80072d4 <_strtol_l.isra.0+0x60>
 800736e:	2308      	movs	r3, #8
 8007370:	e7b0      	b.n	80072d4 <_strtol_l.isra.0+0x60>
 8007372:	2c30      	cmp	r4, #48	; 0x30
 8007374:	d0a3      	beq.n	80072be <_strtol_l.isra.0+0x4a>
 8007376:	230a      	movs	r3, #10
 8007378:	e7ac      	b.n	80072d4 <_strtol_l.isra.0+0x60>
 800737a:	bf00      	nop
 800737c:	0800a519 	.word	0x0800a519

08007380 <_strtol_r>:
 8007380:	f7ff bf78 	b.w	8007274 <_strtol_l.isra.0>

08007384 <quorem>:
 8007384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	6903      	ldr	r3, [r0, #16]
 800738a:	690c      	ldr	r4, [r1, #16]
 800738c:	4607      	mov	r7, r0
 800738e:	42a3      	cmp	r3, r4
 8007390:	f2c0 8083 	blt.w	800749a <quorem+0x116>
 8007394:	3c01      	subs	r4, #1
 8007396:	f100 0514 	add.w	r5, r0, #20
 800739a:	f101 0814 	add.w	r8, r1, #20
 800739e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073ac:	3301      	adds	r3, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80073b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073bc:	d332      	bcc.n	8007424 <quorem+0xa0>
 80073be:	f04f 0e00 	mov.w	lr, #0
 80073c2:	4640      	mov	r0, r8
 80073c4:	46ac      	mov	ip, r5
 80073c6:	46f2      	mov	sl, lr
 80073c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80073cc:	b293      	uxth	r3, r2
 80073ce:	fb06 e303 	mla	r3, r6, r3, lr
 80073d2:	0c12      	lsrs	r2, r2, #16
 80073d4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073d8:	fb06 e202 	mla	r2, r6, r2, lr
 80073dc:	b29b      	uxth	r3, r3
 80073de:	ebaa 0303 	sub.w	r3, sl, r3
 80073e2:	f8dc a000 	ldr.w	sl, [ip]
 80073e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073ea:	fa1f fa8a 	uxth.w	sl, sl
 80073ee:	4453      	add	r3, sl
 80073f0:	fa1f fa82 	uxth.w	sl, r2
 80073f4:	f8dc 2000 	ldr.w	r2, [ip]
 80073f8:	4581      	cmp	r9, r0
 80073fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80073fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007402:	b29b      	uxth	r3, r3
 8007404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007408:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800740c:	f84c 3b04 	str.w	r3, [ip], #4
 8007410:	d2da      	bcs.n	80073c8 <quorem+0x44>
 8007412:	f855 300b 	ldr.w	r3, [r5, fp]
 8007416:	b92b      	cbnz	r3, 8007424 <quorem+0xa0>
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	3b04      	subs	r3, #4
 800741c:	429d      	cmp	r5, r3
 800741e:	461a      	mov	r2, r3
 8007420:	d32f      	bcc.n	8007482 <quorem+0xfe>
 8007422:	613c      	str	r4, [r7, #16]
 8007424:	4638      	mov	r0, r7
 8007426:	f001 fc8d 	bl	8008d44 <__mcmp>
 800742a:	2800      	cmp	r0, #0
 800742c:	db25      	blt.n	800747a <quorem+0xf6>
 800742e:	4628      	mov	r0, r5
 8007430:	f04f 0c00 	mov.w	ip, #0
 8007434:	3601      	adds	r6, #1
 8007436:	f858 1b04 	ldr.w	r1, [r8], #4
 800743a:	f8d0 e000 	ldr.w	lr, [r0]
 800743e:	b28b      	uxth	r3, r1
 8007440:	ebac 0303 	sub.w	r3, ip, r3
 8007444:	fa1f f28e 	uxth.w	r2, lr
 8007448:	4413      	add	r3, r2
 800744a:	0c0a      	lsrs	r2, r1, #16
 800744c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800745a:	45c1      	cmp	r9, r8
 800745c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007460:	f840 3b04 	str.w	r3, [r0], #4
 8007464:	d2e7      	bcs.n	8007436 <quorem+0xb2>
 8007466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800746a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800746e:	b922      	cbnz	r2, 800747a <quorem+0xf6>
 8007470:	3b04      	subs	r3, #4
 8007472:	429d      	cmp	r5, r3
 8007474:	461a      	mov	r2, r3
 8007476:	d30a      	bcc.n	800748e <quorem+0x10a>
 8007478:	613c      	str	r4, [r7, #16]
 800747a:	4630      	mov	r0, r6
 800747c:	b003      	add	sp, #12
 800747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	3b04      	subs	r3, #4
 8007486:	2a00      	cmp	r2, #0
 8007488:	d1cb      	bne.n	8007422 <quorem+0x9e>
 800748a:	3c01      	subs	r4, #1
 800748c:	e7c6      	b.n	800741c <quorem+0x98>
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	3b04      	subs	r3, #4
 8007492:	2a00      	cmp	r2, #0
 8007494:	d1f0      	bne.n	8007478 <quorem+0xf4>
 8007496:	3c01      	subs	r4, #1
 8007498:	e7eb      	b.n	8007472 <quorem+0xee>
 800749a:	2000      	movs	r0, #0
 800749c:	e7ee      	b.n	800747c <quorem+0xf8>
	...

080074a0 <_dtoa_r>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	4616      	mov	r6, r2
 80074a6:	461f      	mov	r7, r3
 80074a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80074aa:	b099      	sub	sp, #100	; 0x64
 80074ac:	4605      	mov	r5, r0
 80074ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80074b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80074b6:	b974      	cbnz	r4, 80074d6 <_dtoa_r+0x36>
 80074b8:	2010      	movs	r0, #16
 80074ba:	f001 f949 	bl	8008750 <malloc>
 80074be:	4602      	mov	r2, r0
 80074c0:	6268      	str	r0, [r5, #36]	; 0x24
 80074c2:	b920      	cbnz	r0, 80074ce <_dtoa_r+0x2e>
 80074c4:	21ea      	movs	r1, #234	; 0xea
 80074c6:	4bae      	ldr	r3, [pc, #696]	; (8007780 <_dtoa_r+0x2e0>)
 80074c8:	48ae      	ldr	r0, [pc, #696]	; (8007784 <_dtoa_r+0x2e4>)
 80074ca:	f002 f875 	bl	80095b8 <__assert_func>
 80074ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074d2:	6004      	str	r4, [r0, #0]
 80074d4:	60c4      	str	r4, [r0, #12]
 80074d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	b151      	cbz	r1, 80074f2 <_dtoa_r+0x52>
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	2301      	movs	r3, #1
 80074e0:	4093      	lsls	r3, r2
 80074e2:	604a      	str	r2, [r1, #4]
 80074e4:	608b      	str	r3, [r1, #8]
 80074e6:	4628      	mov	r0, r5
 80074e8:	f001 f9a8 	bl	800883c <_Bfree>
 80074ec:	2200      	movs	r2, #0
 80074ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	1e3b      	subs	r3, r7, #0
 80074f4:	bfaf      	iteee	ge
 80074f6:	2300      	movge	r3, #0
 80074f8:	2201      	movlt	r2, #1
 80074fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074fe:	9305      	strlt	r3, [sp, #20]
 8007500:	bfa8      	it	ge
 8007502:	f8c8 3000 	strge.w	r3, [r8]
 8007506:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800750a:	4b9f      	ldr	r3, [pc, #636]	; (8007788 <_dtoa_r+0x2e8>)
 800750c:	bfb8      	it	lt
 800750e:	f8c8 2000 	strlt.w	r2, [r8]
 8007512:	ea33 0309 	bics.w	r3, r3, r9
 8007516:	d119      	bne.n	800754c <_dtoa_r+0xac>
 8007518:	f242 730f 	movw	r3, #9999	; 0x270f
 800751c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007524:	4333      	orrs	r3, r6
 8007526:	f000 8580 	beq.w	800802a <_dtoa_r+0xb8a>
 800752a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800752c:	b953      	cbnz	r3, 8007544 <_dtoa_r+0xa4>
 800752e:	4b97      	ldr	r3, [pc, #604]	; (800778c <_dtoa_r+0x2ec>)
 8007530:	e022      	b.n	8007578 <_dtoa_r+0xd8>
 8007532:	4b97      	ldr	r3, [pc, #604]	; (8007790 <_dtoa_r+0x2f0>)
 8007534:	9308      	str	r3, [sp, #32]
 8007536:	3308      	adds	r3, #8
 8007538:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	9808      	ldr	r0, [sp, #32]
 800753e:	b019      	add	sp, #100	; 0x64
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	4b91      	ldr	r3, [pc, #580]	; (800778c <_dtoa_r+0x2ec>)
 8007546:	9308      	str	r3, [sp, #32]
 8007548:	3303      	adds	r3, #3
 800754a:	e7f5      	b.n	8007538 <_dtoa_r+0x98>
 800754c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007550:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007558:	2200      	movs	r2, #0
 800755a:	2300      	movs	r3, #0
 800755c:	f7f9 fa24 	bl	80009a8 <__aeabi_dcmpeq>
 8007560:	4680      	mov	r8, r0
 8007562:	b158      	cbz	r0, 800757c <_dtoa_r+0xdc>
 8007564:	2301      	movs	r3, #1
 8007566:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8559 	beq.w	8008024 <_dtoa_r+0xb84>
 8007572:	4888      	ldr	r0, [pc, #544]	; (8007794 <_dtoa_r+0x2f4>)
 8007574:	6018      	str	r0, [r3, #0]
 8007576:	1e43      	subs	r3, r0, #1
 8007578:	9308      	str	r3, [sp, #32]
 800757a:	e7df      	b.n	800753c <_dtoa_r+0x9c>
 800757c:	ab16      	add	r3, sp, #88	; 0x58
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	ab17      	add	r3, sp, #92	; 0x5c
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4628      	mov	r0, r5
 8007586:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800758a:	f001 fd01 	bl	8008f90 <__d2b>
 800758e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007592:	4682      	mov	sl, r0
 8007594:	2c00      	cmp	r4, #0
 8007596:	d07e      	beq.n	8007696 <_dtoa_r+0x1f6>
 8007598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800759c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800759e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80075a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80075aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80075ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80075b2:	2200      	movs	r2, #0
 80075b4:	4b78      	ldr	r3, [pc, #480]	; (8007798 <_dtoa_r+0x2f8>)
 80075b6:	f7f8 fdd7 	bl	8000168 <__aeabi_dsub>
 80075ba:	a36b      	add	r3, pc, #428	; (adr r3, 8007768 <_dtoa_r+0x2c8>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	f7f8 ff8a 	bl	80004d8 <__aeabi_dmul>
 80075c4:	a36a      	add	r3, pc, #424	; (adr r3, 8007770 <_dtoa_r+0x2d0>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f8 fdcf 	bl	800016c <__adddf3>
 80075ce:	4606      	mov	r6, r0
 80075d0:	4620      	mov	r0, r4
 80075d2:	460f      	mov	r7, r1
 80075d4:	f7f8 ff16 	bl	8000404 <__aeabi_i2d>
 80075d8:	a367      	add	r3, pc, #412	; (adr r3, 8007778 <_dtoa_r+0x2d8>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f8 ff7b 	bl	80004d8 <__aeabi_dmul>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4630      	mov	r0, r6
 80075e8:	4639      	mov	r1, r7
 80075ea:	f7f8 fdbf 	bl	800016c <__adddf3>
 80075ee:	4606      	mov	r6, r0
 80075f0:	460f      	mov	r7, r1
 80075f2:	f7f9 fa21 	bl	8000a38 <__aeabi_d2iz>
 80075f6:	2200      	movs	r2, #0
 80075f8:	4681      	mov	r9, r0
 80075fa:	2300      	movs	r3, #0
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f9 f9dc 	bl	80009bc <__aeabi_dcmplt>
 8007604:	b148      	cbz	r0, 800761a <_dtoa_r+0x17a>
 8007606:	4648      	mov	r0, r9
 8007608:	f7f8 fefc 	bl	8000404 <__aeabi_i2d>
 800760c:	4632      	mov	r2, r6
 800760e:	463b      	mov	r3, r7
 8007610:	f7f9 f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8007614:	b908      	cbnz	r0, 800761a <_dtoa_r+0x17a>
 8007616:	f109 39ff 	add.w	r9, r9, #4294967295
 800761a:	f1b9 0f16 	cmp.w	r9, #22
 800761e:	d857      	bhi.n	80076d0 <_dtoa_r+0x230>
 8007620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007624:	4b5d      	ldr	r3, [pc, #372]	; (800779c <_dtoa_r+0x2fc>)
 8007626:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f9 f9c5 	bl	80009bc <__aeabi_dcmplt>
 8007632:	2800      	cmp	r0, #0
 8007634:	d04e      	beq.n	80076d4 <_dtoa_r+0x234>
 8007636:	2300      	movs	r3, #0
 8007638:	f109 39ff 	add.w	r9, r9, #4294967295
 800763c:	930f      	str	r3, [sp, #60]	; 0x3c
 800763e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007640:	1b1c      	subs	r4, r3, r4
 8007642:	1e63      	subs	r3, r4, #1
 8007644:	9309      	str	r3, [sp, #36]	; 0x24
 8007646:	bf49      	itett	mi
 8007648:	f1c4 0301 	rsbmi	r3, r4, #1
 800764c:	2300      	movpl	r3, #0
 800764e:	9306      	strmi	r3, [sp, #24]
 8007650:	2300      	movmi	r3, #0
 8007652:	bf54      	ite	pl
 8007654:	9306      	strpl	r3, [sp, #24]
 8007656:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007658:	f1b9 0f00 	cmp.w	r9, #0
 800765c:	db3c      	blt.n	80076d8 <_dtoa_r+0x238>
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007664:	444b      	add	r3, r9
 8007666:	9309      	str	r3, [sp, #36]	; 0x24
 8007668:	2300      	movs	r3, #0
 800766a:	930a      	str	r3, [sp, #40]	; 0x28
 800766c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800766e:	2b09      	cmp	r3, #9
 8007670:	d86c      	bhi.n	800774c <_dtoa_r+0x2ac>
 8007672:	2b05      	cmp	r3, #5
 8007674:	bfc4      	itt	gt
 8007676:	3b04      	subgt	r3, #4
 8007678:	9322      	strgt	r3, [sp, #136]	; 0x88
 800767a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800767c:	bfc8      	it	gt
 800767e:	2400      	movgt	r4, #0
 8007680:	f1a3 0302 	sub.w	r3, r3, #2
 8007684:	bfd8      	it	le
 8007686:	2401      	movle	r4, #1
 8007688:	2b03      	cmp	r3, #3
 800768a:	f200 808b 	bhi.w	80077a4 <_dtoa_r+0x304>
 800768e:	e8df f003 	tbb	[pc, r3]
 8007692:	4f2d      	.short	0x4f2d
 8007694:	5b4d      	.short	0x5b4d
 8007696:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800769a:	441c      	add	r4, r3
 800769c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	bfc3      	ittte	gt
 80076a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076a8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80076ac:	fa09 f303 	lslgt.w	r3, r9, r3
 80076b0:	f1c3 0320 	rsble	r3, r3, #32
 80076b4:	bfc6      	itte	gt
 80076b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076ba:	4318      	orrgt	r0, r3
 80076bc:	fa06 f003 	lslle.w	r0, r6, r3
 80076c0:	f7f8 fe90 	bl	80003e4 <__aeabi_ui2d>
 80076c4:	2301      	movs	r3, #1
 80076c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80076ca:	3c01      	subs	r4, #1
 80076cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80076ce:	e770      	b.n	80075b2 <_dtoa_r+0x112>
 80076d0:	2301      	movs	r3, #1
 80076d2:	e7b3      	b.n	800763c <_dtoa_r+0x19c>
 80076d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80076d6:	e7b2      	b.n	800763e <_dtoa_r+0x19e>
 80076d8:	9b06      	ldr	r3, [sp, #24]
 80076da:	eba3 0309 	sub.w	r3, r3, r9
 80076de:	9306      	str	r3, [sp, #24]
 80076e0:	f1c9 0300 	rsb	r3, r9, #0
 80076e4:	930a      	str	r3, [sp, #40]	; 0x28
 80076e6:	2300      	movs	r3, #0
 80076e8:	930e      	str	r3, [sp, #56]	; 0x38
 80076ea:	e7bf      	b.n	800766c <_dtoa_r+0x1cc>
 80076ec:	2300      	movs	r3, #0
 80076ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80076f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dc59      	bgt.n	80077aa <_dtoa_r+0x30a>
 80076f6:	f04f 0b01 	mov.w	fp, #1
 80076fa:	465b      	mov	r3, fp
 80076fc:	f8cd b008 	str.w	fp, [sp, #8]
 8007700:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007704:	2200      	movs	r2, #0
 8007706:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007708:	6042      	str	r2, [r0, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	f102 0614 	add.w	r6, r2, #20
 8007710:	429e      	cmp	r6, r3
 8007712:	6841      	ldr	r1, [r0, #4]
 8007714:	d94f      	bls.n	80077b6 <_dtoa_r+0x316>
 8007716:	4628      	mov	r0, r5
 8007718:	f001 f850 	bl	80087bc <_Balloc>
 800771c:	9008      	str	r0, [sp, #32]
 800771e:	2800      	cmp	r0, #0
 8007720:	d14d      	bne.n	80077be <_dtoa_r+0x31e>
 8007722:	4602      	mov	r2, r0
 8007724:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007728:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <_dtoa_r+0x300>)
 800772a:	e6cd      	b.n	80074c8 <_dtoa_r+0x28>
 800772c:	2301      	movs	r3, #1
 800772e:	e7de      	b.n	80076ee <_dtoa_r+0x24e>
 8007730:	2300      	movs	r3, #0
 8007732:	930b      	str	r3, [sp, #44]	; 0x2c
 8007734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007736:	eb09 0b03 	add.w	fp, r9, r3
 800773a:	f10b 0301 	add.w	r3, fp, #1
 800773e:	2b01      	cmp	r3, #1
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	bfb8      	it	lt
 8007744:	2301      	movlt	r3, #1
 8007746:	e7dd      	b.n	8007704 <_dtoa_r+0x264>
 8007748:	2301      	movs	r3, #1
 800774a:	e7f2      	b.n	8007732 <_dtoa_r+0x292>
 800774c:	2401      	movs	r4, #1
 800774e:	2300      	movs	r3, #0
 8007750:	940b      	str	r4, [sp, #44]	; 0x2c
 8007752:	9322      	str	r3, [sp, #136]	; 0x88
 8007754:	f04f 3bff 	mov.w	fp, #4294967295
 8007758:	2200      	movs	r2, #0
 800775a:	2312      	movs	r3, #18
 800775c:	f8cd b008 	str.w	fp, [sp, #8]
 8007760:	9223      	str	r2, [sp, #140]	; 0x8c
 8007762:	e7cf      	b.n	8007704 <_dtoa_r+0x264>
 8007764:	f3af 8000 	nop.w
 8007768:	636f4361 	.word	0x636f4361
 800776c:	3fd287a7 	.word	0x3fd287a7
 8007770:	8b60c8b3 	.word	0x8b60c8b3
 8007774:	3fc68a28 	.word	0x3fc68a28
 8007778:	509f79fb 	.word	0x509f79fb
 800777c:	3fd34413 	.word	0x3fd34413
 8007780:	0800a626 	.word	0x0800a626
 8007784:	0800a63d 	.word	0x0800a63d
 8007788:	7ff00000 	.word	0x7ff00000
 800778c:	0800a622 	.word	0x0800a622
 8007790:	0800a619 	.word	0x0800a619
 8007794:	0800a499 	.word	0x0800a499
 8007798:	3ff80000 	.word	0x3ff80000
 800779c:	0800a7b8 	.word	0x0800a7b8
 80077a0:	0800a69c 	.word	0x0800a69c
 80077a4:	2301      	movs	r3, #1
 80077a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a8:	e7d4      	b.n	8007754 <_dtoa_r+0x2b4>
 80077aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80077ae:	465b      	mov	r3, fp
 80077b0:	f8cd b008 	str.w	fp, [sp, #8]
 80077b4:	e7a6      	b.n	8007704 <_dtoa_r+0x264>
 80077b6:	3101      	adds	r1, #1
 80077b8:	6041      	str	r1, [r0, #4]
 80077ba:	0052      	lsls	r2, r2, #1
 80077bc:	e7a6      	b.n	800770c <_dtoa_r+0x26c>
 80077be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077c0:	9a08      	ldr	r2, [sp, #32]
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	9b02      	ldr	r3, [sp, #8]
 80077c6:	2b0e      	cmp	r3, #14
 80077c8:	f200 80a8 	bhi.w	800791c <_dtoa_r+0x47c>
 80077cc:	2c00      	cmp	r4, #0
 80077ce:	f000 80a5 	beq.w	800791c <_dtoa_r+0x47c>
 80077d2:	f1b9 0f00 	cmp.w	r9, #0
 80077d6:	dd34      	ble.n	8007842 <_dtoa_r+0x3a2>
 80077d8:	4a9a      	ldr	r2, [pc, #616]	; (8007a44 <_dtoa_r+0x5a4>)
 80077da:	f009 030f 	and.w	r3, r9, #15
 80077de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077e2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80077e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80077ee:	ea4f 1429 	mov.w	r4, r9, asr #4
 80077f2:	d016      	beq.n	8007822 <_dtoa_r+0x382>
 80077f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077f8:	4b93      	ldr	r3, [pc, #588]	; (8007a48 <_dtoa_r+0x5a8>)
 80077fa:	2703      	movs	r7, #3
 80077fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007800:	f7f8 ff94 	bl	800072c <__aeabi_ddiv>
 8007804:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007808:	f004 040f 	and.w	r4, r4, #15
 800780c:	4e8e      	ldr	r6, [pc, #568]	; (8007a48 <_dtoa_r+0x5a8>)
 800780e:	b954      	cbnz	r4, 8007826 <_dtoa_r+0x386>
 8007810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007818:	f7f8 ff88 	bl	800072c <__aeabi_ddiv>
 800781c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007820:	e029      	b.n	8007876 <_dtoa_r+0x3d6>
 8007822:	2702      	movs	r7, #2
 8007824:	e7f2      	b.n	800780c <_dtoa_r+0x36c>
 8007826:	07e1      	lsls	r1, r4, #31
 8007828:	d508      	bpl.n	800783c <_dtoa_r+0x39c>
 800782a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800782e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007832:	f7f8 fe51 	bl	80004d8 <__aeabi_dmul>
 8007836:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800783a:	3701      	adds	r7, #1
 800783c:	1064      	asrs	r4, r4, #1
 800783e:	3608      	adds	r6, #8
 8007840:	e7e5      	b.n	800780e <_dtoa_r+0x36e>
 8007842:	f000 80a5 	beq.w	8007990 <_dtoa_r+0x4f0>
 8007846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800784a:	f1c9 0400 	rsb	r4, r9, #0
 800784e:	4b7d      	ldr	r3, [pc, #500]	; (8007a44 <_dtoa_r+0x5a4>)
 8007850:	f004 020f 	and.w	r2, r4, #15
 8007854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f7f8 fe3c 	bl	80004d8 <__aeabi_dmul>
 8007860:	2702      	movs	r7, #2
 8007862:	2300      	movs	r3, #0
 8007864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007868:	4e77      	ldr	r6, [pc, #476]	; (8007a48 <_dtoa_r+0x5a8>)
 800786a:	1124      	asrs	r4, r4, #4
 800786c:	2c00      	cmp	r4, #0
 800786e:	f040 8084 	bne.w	800797a <_dtoa_r+0x4da>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1d2      	bne.n	800781c <_dtoa_r+0x37c>
 8007876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 808b 	beq.w	8007994 <_dtoa_r+0x4f4>
 800787e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007882:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007886:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800788a:	2200      	movs	r2, #0
 800788c:	4b6f      	ldr	r3, [pc, #444]	; (8007a4c <_dtoa_r+0x5ac>)
 800788e:	f7f9 f895 	bl	80009bc <__aeabi_dcmplt>
 8007892:	2800      	cmp	r0, #0
 8007894:	d07e      	beq.n	8007994 <_dtoa_r+0x4f4>
 8007896:	9b02      	ldr	r3, [sp, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d07b      	beq.n	8007994 <_dtoa_r+0x4f4>
 800789c:	f1bb 0f00 	cmp.w	fp, #0
 80078a0:	dd38      	ble.n	8007914 <_dtoa_r+0x474>
 80078a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078a6:	2200      	movs	r2, #0
 80078a8:	4b69      	ldr	r3, [pc, #420]	; (8007a50 <_dtoa_r+0x5b0>)
 80078aa:	f7f8 fe15 	bl	80004d8 <__aeabi_dmul>
 80078ae:	465c      	mov	r4, fp
 80078b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078b4:	f109 38ff 	add.w	r8, r9, #4294967295
 80078b8:	3701      	adds	r7, #1
 80078ba:	4638      	mov	r0, r7
 80078bc:	f7f8 fda2 	bl	8000404 <__aeabi_i2d>
 80078c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c4:	f7f8 fe08 	bl	80004d8 <__aeabi_dmul>
 80078c8:	2200      	movs	r2, #0
 80078ca:	4b62      	ldr	r3, [pc, #392]	; (8007a54 <_dtoa_r+0x5b4>)
 80078cc:	f7f8 fc4e 	bl	800016c <__adddf3>
 80078d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078d8:	9611      	str	r6, [sp, #68]	; 0x44
 80078da:	2c00      	cmp	r4, #0
 80078dc:	d15d      	bne.n	800799a <_dtoa_r+0x4fa>
 80078de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078e2:	2200      	movs	r2, #0
 80078e4:	4b5c      	ldr	r3, [pc, #368]	; (8007a58 <_dtoa_r+0x5b8>)
 80078e6:	f7f8 fc3f 	bl	8000168 <__aeabi_dsub>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078f2:	4633      	mov	r3, r6
 80078f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078f6:	f7f9 f87f 	bl	80009f8 <__aeabi_dcmpgt>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f040 829e 	bne.w	8007e3c <_dtoa_r+0x99c>
 8007900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007906:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800790a:	f7f9 f857 	bl	80009bc <__aeabi_dcmplt>
 800790e:	2800      	cmp	r0, #0
 8007910:	f040 8292 	bne.w	8007e38 <_dtoa_r+0x998>
 8007914:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007918:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800791c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800791e:	2b00      	cmp	r3, #0
 8007920:	f2c0 8153 	blt.w	8007bca <_dtoa_r+0x72a>
 8007924:	f1b9 0f0e 	cmp.w	r9, #14
 8007928:	f300 814f 	bgt.w	8007bca <_dtoa_r+0x72a>
 800792c:	4b45      	ldr	r3, [pc, #276]	; (8007a44 <_dtoa_r+0x5a4>)
 800792e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007932:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007936:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800793a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800793c:	2b00      	cmp	r3, #0
 800793e:	f280 80db 	bge.w	8007af8 <_dtoa_r+0x658>
 8007942:	9b02      	ldr	r3, [sp, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	f300 80d7 	bgt.w	8007af8 <_dtoa_r+0x658>
 800794a:	f040 8274 	bne.w	8007e36 <_dtoa_r+0x996>
 800794e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007952:	2200      	movs	r2, #0
 8007954:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <_dtoa_r+0x5b8>)
 8007956:	f7f8 fdbf 	bl	80004d8 <__aeabi_dmul>
 800795a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800795e:	f7f9 f841 	bl	80009e4 <__aeabi_dcmpge>
 8007962:	9c02      	ldr	r4, [sp, #8]
 8007964:	4626      	mov	r6, r4
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 824a 	bne.w	8007e00 <_dtoa_r+0x960>
 800796c:	2331      	movs	r3, #49	; 0x31
 800796e:	9f08      	ldr	r7, [sp, #32]
 8007970:	f109 0901 	add.w	r9, r9, #1
 8007974:	f807 3b01 	strb.w	r3, [r7], #1
 8007978:	e246      	b.n	8007e08 <_dtoa_r+0x968>
 800797a:	07e2      	lsls	r2, r4, #31
 800797c:	d505      	bpl.n	800798a <_dtoa_r+0x4ea>
 800797e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007982:	f7f8 fda9 	bl	80004d8 <__aeabi_dmul>
 8007986:	2301      	movs	r3, #1
 8007988:	3701      	adds	r7, #1
 800798a:	1064      	asrs	r4, r4, #1
 800798c:	3608      	adds	r6, #8
 800798e:	e76d      	b.n	800786c <_dtoa_r+0x3cc>
 8007990:	2702      	movs	r7, #2
 8007992:	e770      	b.n	8007876 <_dtoa_r+0x3d6>
 8007994:	46c8      	mov	r8, r9
 8007996:	9c02      	ldr	r4, [sp, #8]
 8007998:	e78f      	b.n	80078ba <_dtoa_r+0x41a>
 800799a:	9908      	ldr	r1, [sp, #32]
 800799c:	4b29      	ldr	r3, [pc, #164]	; (8007a44 <_dtoa_r+0x5a4>)
 800799e:	4421      	add	r1, r4
 80079a0:	9112      	str	r1, [sp, #72]	; 0x48
 80079a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80079ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079b0:	2900      	cmp	r1, #0
 80079b2:	d055      	beq.n	8007a60 <_dtoa_r+0x5c0>
 80079b4:	2000      	movs	r0, #0
 80079b6:	4929      	ldr	r1, [pc, #164]	; (8007a5c <_dtoa_r+0x5bc>)
 80079b8:	f7f8 feb8 	bl	800072c <__aeabi_ddiv>
 80079bc:	463b      	mov	r3, r7
 80079be:	4632      	mov	r2, r6
 80079c0:	f7f8 fbd2 	bl	8000168 <__aeabi_dsub>
 80079c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079c8:	9f08      	ldr	r7, [sp, #32]
 80079ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ce:	f7f9 f833 	bl	8000a38 <__aeabi_d2iz>
 80079d2:	4604      	mov	r4, r0
 80079d4:	f7f8 fd16 	bl	8000404 <__aeabi_i2d>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e0:	f7f8 fbc2 	bl	8000168 <__aeabi_dsub>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	3430      	adds	r4, #48	; 0x30
 80079ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079f2:	f807 4b01 	strb.w	r4, [r7], #1
 80079f6:	f7f8 ffe1 	bl	80009bc <__aeabi_dcmplt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d174      	bne.n	8007ae8 <_dtoa_r+0x648>
 80079fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a02:	2000      	movs	r0, #0
 8007a04:	4911      	ldr	r1, [pc, #68]	; (8007a4c <_dtoa_r+0x5ac>)
 8007a06:	f7f8 fbaf 	bl	8000168 <__aeabi_dsub>
 8007a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a0e:	f7f8 ffd5 	bl	80009bc <__aeabi_dcmplt>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	f040 80b6 	bne.w	8007b84 <_dtoa_r+0x6e4>
 8007a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a1a:	429f      	cmp	r7, r3
 8007a1c:	f43f af7a 	beq.w	8007914 <_dtoa_r+0x474>
 8007a20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a24:	2200      	movs	r2, #0
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <_dtoa_r+0x5b0>)
 8007a28:	f7f8 fd56 	bl	80004d8 <__aeabi_dmul>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a36:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <_dtoa_r+0x5b0>)
 8007a38:	f7f8 fd4e 	bl	80004d8 <__aeabi_dmul>
 8007a3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a40:	e7c3      	b.n	80079ca <_dtoa_r+0x52a>
 8007a42:	bf00      	nop
 8007a44:	0800a7b8 	.word	0x0800a7b8
 8007a48:	0800a790 	.word	0x0800a790
 8007a4c:	3ff00000 	.word	0x3ff00000
 8007a50:	40240000 	.word	0x40240000
 8007a54:	401c0000 	.word	0x401c0000
 8007a58:	40140000 	.word	0x40140000
 8007a5c:	3fe00000 	.word	0x3fe00000
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 fd38 	bl	80004d8 <__aeabi_dmul>
 8007a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a6e:	9c08      	ldr	r4, [sp, #32]
 8007a70:	9314      	str	r3, [sp, #80]	; 0x50
 8007a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a76:	f7f8 ffdf 	bl	8000a38 <__aeabi_d2iz>
 8007a7a:	9015      	str	r0, [sp, #84]	; 0x54
 8007a7c:	f7f8 fcc2 	bl	8000404 <__aeabi_i2d>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a88:	f7f8 fb6e 	bl	8000168 <__aeabi_dsub>
 8007a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a8e:	4606      	mov	r6, r0
 8007a90:	3330      	adds	r3, #48	; 0x30
 8007a92:	f804 3b01 	strb.w	r3, [r4], #1
 8007a96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a98:	460f      	mov	r7, r1
 8007a9a:	429c      	cmp	r4, r3
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	d124      	bne.n	8007aec <_dtoa_r+0x64c>
 8007aa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aa6:	4bb3      	ldr	r3, [pc, #716]	; (8007d74 <_dtoa_r+0x8d4>)
 8007aa8:	f7f8 fb60 	bl	800016c <__adddf3>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	4639      	mov	r1, r7
 8007ab4:	f7f8 ffa0 	bl	80009f8 <__aeabi_dcmpgt>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d162      	bne.n	8007b82 <_dtoa_r+0x6e2>
 8007abc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	49ac      	ldr	r1, [pc, #688]	; (8007d74 <_dtoa_r+0x8d4>)
 8007ac4:	f7f8 fb50 	bl	8000168 <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f8 ff74 	bl	80009bc <__aeabi_dcmplt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f43f af1d 	beq.w	8007914 <_dtoa_r+0x474>
 8007ada:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007adc:	1e7b      	subs	r3, r7, #1
 8007ade:	9314      	str	r3, [sp, #80]	; 0x50
 8007ae0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007ae4:	2b30      	cmp	r3, #48	; 0x30
 8007ae6:	d0f8      	beq.n	8007ada <_dtoa_r+0x63a>
 8007ae8:	46c1      	mov	r9, r8
 8007aea:	e03a      	b.n	8007b62 <_dtoa_r+0x6c2>
 8007aec:	4ba2      	ldr	r3, [pc, #648]	; (8007d78 <_dtoa_r+0x8d8>)
 8007aee:	f7f8 fcf3 	bl	80004d8 <__aeabi_dmul>
 8007af2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007af6:	e7bc      	b.n	8007a72 <_dtoa_r+0x5d2>
 8007af8:	9f08      	ldr	r7, [sp, #32]
 8007afa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007afe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b02:	f7f8 fe13 	bl	800072c <__aeabi_ddiv>
 8007b06:	f7f8 ff97 	bl	8000a38 <__aeabi_d2iz>
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	f7f8 fc7a 	bl	8000404 <__aeabi_i2d>
 8007b10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b14:	f7f8 fce0 	bl	80004d8 <__aeabi_dmul>
 8007b18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4602      	mov	r2, r0
 8007b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b24:	f7f8 fb20 	bl	8000168 <__aeabi_dsub>
 8007b28:	f807 6b01 	strb.w	r6, [r7], #1
 8007b2c:	9e08      	ldr	r6, [sp, #32]
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	1bbe      	subs	r6, r7, r6
 8007b32:	42b3      	cmp	r3, r6
 8007b34:	d13a      	bne.n	8007bac <_dtoa_r+0x70c>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	f7f8 fb17 	bl	800016c <__adddf3>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b4a:	f7f8 ff55 	bl	80009f8 <__aeabi_dcmpgt>
 8007b4e:	bb58      	cbnz	r0, 8007ba8 <_dtoa_r+0x708>
 8007b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b58:	f7f8 ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8007b5c:	b108      	cbz	r0, 8007b62 <_dtoa_r+0x6c2>
 8007b5e:	07e1      	lsls	r1, r4, #31
 8007b60:	d422      	bmi.n	8007ba8 <_dtoa_r+0x708>
 8007b62:	4628      	mov	r0, r5
 8007b64:	4651      	mov	r1, sl
 8007b66:	f000 fe69 	bl	800883c <_Bfree>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	703b      	strb	r3, [r7, #0]
 8007b6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b70:	f109 0001 	add.w	r0, r9, #1
 8007b74:	6018      	str	r0, [r3, #0]
 8007b76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f43f acdf 	beq.w	800753c <_dtoa_r+0x9c>
 8007b7e:	601f      	str	r7, [r3, #0]
 8007b80:	e4dc      	b.n	800753c <_dtoa_r+0x9c>
 8007b82:	4627      	mov	r7, r4
 8007b84:	463b      	mov	r3, r7
 8007b86:	461f      	mov	r7, r3
 8007b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b8c:	2a39      	cmp	r2, #57	; 0x39
 8007b8e:	d107      	bne.n	8007ba0 <_dtoa_r+0x700>
 8007b90:	9a08      	ldr	r2, [sp, #32]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d1f7      	bne.n	8007b86 <_dtoa_r+0x6e6>
 8007b96:	2230      	movs	r2, #48	; 0x30
 8007b98:	9908      	ldr	r1, [sp, #32]
 8007b9a:	f108 0801 	add.w	r8, r8, #1
 8007b9e:	700a      	strb	r2, [r1, #0]
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e79f      	b.n	8007ae8 <_dtoa_r+0x648>
 8007ba8:	46c8      	mov	r8, r9
 8007baa:	e7eb      	b.n	8007b84 <_dtoa_r+0x6e4>
 8007bac:	2200      	movs	r2, #0
 8007bae:	4b72      	ldr	r3, [pc, #456]	; (8007d78 <_dtoa_r+0x8d8>)
 8007bb0:	f7f8 fc92 	bl	80004d8 <__aeabi_dmul>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f7f8 fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d098      	beq.n	8007afa <_dtoa_r+0x65a>
 8007bc8:	e7cb      	b.n	8007b62 <_dtoa_r+0x6c2>
 8007bca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bcc:	2a00      	cmp	r2, #0
 8007bce:	f000 80cd 	beq.w	8007d6c <_dtoa_r+0x8cc>
 8007bd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007bd4:	2a01      	cmp	r2, #1
 8007bd6:	f300 80af 	bgt.w	8007d38 <_dtoa_r+0x898>
 8007bda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	f000 80a7 	beq.w	8007d30 <_dtoa_r+0x890>
 8007be2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007be6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007be8:	9f06      	ldr	r7, [sp, #24]
 8007bea:	9a06      	ldr	r2, [sp, #24]
 8007bec:	2101      	movs	r1, #1
 8007bee:	441a      	add	r2, r3
 8007bf0:	9206      	str	r2, [sp, #24]
 8007bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	441a      	add	r2, r3
 8007bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8007bfa:	f000 ff23 	bl	8008a44 <__i2b>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	2f00      	cmp	r7, #0
 8007c02:	dd0c      	ble.n	8007c1e <_dtoa_r+0x77e>
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dd09      	ble.n	8007c1e <_dtoa_r+0x77e>
 8007c0a:	42bb      	cmp	r3, r7
 8007c0c:	bfa8      	it	ge
 8007c0e:	463b      	movge	r3, r7
 8007c10:	9a06      	ldr	r2, [sp, #24]
 8007c12:	1aff      	subs	r7, r7, r3
 8007c14:	1ad2      	subs	r2, r2, r3
 8007c16:	9206      	str	r2, [sp, #24]
 8007c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c20:	b1f3      	cbz	r3, 8007c60 <_dtoa_r+0x7c0>
 8007c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80a9 	beq.w	8007d7c <_dtoa_r+0x8dc>
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	dd10      	ble.n	8007c50 <_dtoa_r+0x7b0>
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4622      	mov	r2, r4
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 ffc0 	bl	8008bb8 <__pow5mult>
 8007c38:	4652      	mov	r2, sl
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 ff16 	bl	8008a70 <__multiply>
 8007c44:	4680      	mov	r8, r0
 8007c46:	4651      	mov	r1, sl
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f000 fdf7 	bl	800883c <_Bfree>
 8007c4e:	46c2      	mov	sl, r8
 8007c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c52:	1b1a      	subs	r2, r3, r4
 8007c54:	d004      	beq.n	8007c60 <_dtoa_r+0x7c0>
 8007c56:	4651      	mov	r1, sl
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 ffad 	bl	8008bb8 <__pow5mult>
 8007c5e:	4682      	mov	sl, r0
 8007c60:	2101      	movs	r1, #1
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 feee 	bl	8008a44 <__i2b>
 8007c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f340 8087 	ble.w	8007d80 <_dtoa_r+0x8e0>
 8007c72:	461a      	mov	r2, r3
 8007c74:	4601      	mov	r1, r0
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 ff9e 	bl	8008bb8 <__pow5mult>
 8007c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c7e:	4604      	mov	r4, r0
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	f340 8080 	ble.w	8007d86 <_dtoa_r+0x8e6>
 8007c86:	f04f 0800 	mov.w	r8, #0
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c90:	6918      	ldr	r0, [r3, #16]
 8007c92:	f000 fe89 	bl	80089a8 <__hi0bits>
 8007c96:	f1c0 0020 	rsb	r0, r0, #32
 8007c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9c:	4418      	add	r0, r3
 8007c9e:	f010 001f 	ands.w	r0, r0, #31
 8007ca2:	f000 8092 	beq.w	8007dca <_dtoa_r+0x92a>
 8007ca6:	f1c0 0320 	rsb	r3, r0, #32
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	f340 808a 	ble.w	8007dc4 <_dtoa_r+0x924>
 8007cb0:	f1c0 001c 	rsb	r0, r0, #28
 8007cb4:	9b06      	ldr	r3, [sp, #24]
 8007cb6:	4407      	add	r7, r0
 8007cb8:	4403      	add	r3, r0
 8007cba:	9306      	str	r3, [sp, #24]
 8007cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbe:	4403      	add	r3, r0
 8007cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dd05      	ble.n	8007cd4 <_dtoa_r+0x834>
 8007cc8:	4651      	mov	r1, sl
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 ffcd 	bl	8008c6c <__lshift>
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	dd05      	ble.n	8007ce6 <_dtoa_r+0x846>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 ffc4 	bl	8008c6c <__lshift>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d070      	beq.n	8007dce <_dtoa_r+0x92e>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f001 f828 	bl	8008d44 <__mcmp>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	da6a      	bge.n	8007dce <_dtoa_r+0x92e>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 fdbe 	bl	8008880 <__multadd>
 8007d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d06:	4682      	mov	sl, r0
 8007d08:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8193 	beq.w	8008038 <_dtoa_r+0xb98>
 8007d12:	4631      	mov	r1, r6
 8007d14:	2300      	movs	r3, #0
 8007d16:	220a      	movs	r2, #10
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 fdb1 	bl	8008880 <__multadd>
 8007d1e:	f1bb 0f00 	cmp.w	fp, #0
 8007d22:	4606      	mov	r6, r0
 8007d24:	f300 8093 	bgt.w	8007e4e <_dtoa_r+0x9ae>
 8007d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	dc57      	bgt.n	8007dde <_dtoa_r+0x93e>
 8007d2e:	e08e      	b.n	8007e4e <_dtoa_r+0x9ae>
 8007d30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d36:	e756      	b.n	8007be6 <_dtoa_r+0x746>
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	1e5c      	subs	r4, r3, #1
 8007d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	bfb7      	itett	lt
 8007d42:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d44:	1b1c      	subge	r4, r3, r4
 8007d46:	1ae2      	sublt	r2, r4, r3
 8007d48:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007d4a:	bfbe      	ittt	lt
 8007d4c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007d4e:	189b      	addlt	r3, r3, r2
 8007d50:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007d52:	9b02      	ldr	r3, [sp, #8]
 8007d54:	bfb8      	it	lt
 8007d56:	2400      	movlt	r4, #0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfbb      	ittet	lt
 8007d5c:	9b06      	ldrlt	r3, [sp, #24]
 8007d5e:	9a02      	ldrlt	r2, [sp, #8]
 8007d60:	9f06      	ldrge	r7, [sp, #24]
 8007d62:	1a9f      	sublt	r7, r3, r2
 8007d64:	bfac      	ite	ge
 8007d66:	9b02      	ldrge	r3, [sp, #8]
 8007d68:	2300      	movlt	r3, #0
 8007d6a:	e73e      	b.n	8007bea <_dtoa_r+0x74a>
 8007d6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d6e:	9f06      	ldr	r7, [sp, #24]
 8007d70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007d72:	e745      	b.n	8007c00 <_dtoa_r+0x760>
 8007d74:	3fe00000 	.word	0x3fe00000
 8007d78:	40240000 	.word	0x40240000
 8007d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7e:	e76a      	b.n	8007c56 <_dtoa_r+0x7b6>
 8007d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	dc19      	bgt.n	8007dba <_dtoa_r+0x91a>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	b9bb      	cbnz	r3, 8007dba <_dtoa_r+0x91a>
 8007d8a:	9b05      	ldr	r3, [sp, #20]
 8007d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d90:	b99b      	cbnz	r3, 8007dba <_dtoa_r+0x91a>
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d98:	0d1b      	lsrs	r3, r3, #20
 8007d9a:	051b      	lsls	r3, r3, #20
 8007d9c:	b183      	cbz	r3, 8007dc0 <_dtoa_r+0x920>
 8007d9e:	f04f 0801 	mov.w	r8, #1
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	3301      	adds	r3, #1
 8007da6:	9306      	str	r3, [sp, #24]
 8007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007daa:	3301      	adds	r3, #1
 8007dac:	9309      	str	r3, [sp, #36]	; 0x24
 8007dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f af6a 	bne.w	8007c8a <_dtoa_r+0x7ea>
 8007db6:	2001      	movs	r0, #1
 8007db8:	e76f      	b.n	8007c9a <_dtoa_r+0x7fa>
 8007dba:	f04f 0800 	mov.w	r8, #0
 8007dbe:	e7f6      	b.n	8007dae <_dtoa_r+0x90e>
 8007dc0:	4698      	mov	r8, r3
 8007dc2:	e7f4      	b.n	8007dae <_dtoa_r+0x90e>
 8007dc4:	f43f af7d 	beq.w	8007cc2 <_dtoa_r+0x822>
 8007dc8:	4618      	mov	r0, r3
 8007dca:	301c      	adds	r0, #28
 8007dcc:	e772      	b.n	8007cb4 <_dtoa_r+0x814>
 8007dce:	9b02      	ldr	r3, [sp, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dc36      	bgt.n	8007e42 <_dtoa_r+0x9a2>
 8007dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	dd33      	ble.n	8007e42 <_dtoa_r+0x9a2>
 8007dda:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007dde:	f1bb 0f00 	cmp.w	fp, #0
 8007de2:	d10d      	bne.n	8007e00 <_dtoa_r+0x960>
 8007de4:	4621      	mov	r1, r4
 8007de6:	465b      	mov	r3, fp
 8007de8:	2205      	movs	r2, #5
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 fd48 	bl	8008880 <__multadd>
 8007df0:	4601      	mov	r1, r0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4650      	mov	r0, sl
 8007df6:	f000 ffa5 	bl	8008d44 <__mcmp>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f73f adb6 	bgt.w	800796c <_dtoa_r+0x4cc>
 8007e00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e02:	9f08      	ldr	r7, [sp, #32]
 8007e04:	ea6f 0903 	mvn.w	r9, r3
 8007e08:	f04f 0800 	mov.w	r8, #0
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 fd14 	bl	800883c <_Bfree>
 8007e14:	2e00      	cmp	r6, #0
 8007e16:	f43f aea4 	beq.w	8007b62 <_dtoa_r+0x6c2>
 8007e1a:	f1b8 0f00 	cmp.w	r8, #0
 8007e1e:	d005      	beq.n	8007e2c <_dtoa_r+0x98c>
 8007e20:	45b0      	cmp	r8, r6
 8007e22:	d003      	beq.n	8007e2c <_dtoa_r+0x98c>
 8007e24:	4641      	mov	r1, r8
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fd08 	bl	800883c <_Bfree>
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fd04 	bl	800883c <_Bfree>
 8007e34:	e695      	b.n	8007b62 <_dtoa_r+0x6c2>
 8007e36:	2400      	movs	r4, #0
 8007e38:	4626      	mov	r6, r4
 8007e3a:	e7e1      	b.n	8007e00 <_dtoa_r+0x960>
 8007e3c:	46c1      	mov	r9, r8
 8007e3e:	4626      	mov	r6, r4
 8007e40:	e594      	b.n	800796c <_dtoa_r+0x4cc>
 8007e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e44:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80fc 	beq.w	8008046 <_dtoa_r+0xba6>
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	dd05      	ble.n	8007e5e <_dtoa_r+0x9be>
 8007e52:	4631      	mov	r1, r6
 8007e54:	463a      	mov	r2, r7
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 ff08 	bl	8008c6c <__lshift>
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	f1b8 0f00 	cmp.w	r8, #0
 8007e62:	d05c      	beq.n	8007f1e <_dtoa_r+0xa7e>
 8007e64:	4628      	mov	r0, r5
 8007e66:	6871      	ldr	r1, [r6, #4]
 8007e68:	f000 fca8 	bl	80087bc <_Balloc>
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	b928      	cbnz	r0, 8007e7c <_dtoa_r+0x9dc>
 8007e70:	4602      	mov	r2, r0
 8007e72:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e76:	4b7e      	ldr	r3, [pc, #504]	; (8008070 <_dtoa_r+0xbd0>)
 8007e78:	f7ff bb26 	b.w	80074c8 <_dtoa_r+0x28>
 8007e7c:	6932      	ldr	r2, [r6, #16]
 8007e7e:	f106 010c 	add.w	r1, r6, #12
 8007e82:	3202      	adds	r2, #2
 8007e84:	0092      	lsls	r2, r2, #2
 8007e86:	300c      	adds	r0, #12
 8007e88:	f000 fc8a 	bl	80087a0 <memcpy>
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	4639      	mov	r1, r7
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 feeb 	bl	8008c6c <__lshift>
 8007e96:	46b0      	mov	r8, r6
 8007e98:	4606      	mov	r6, r0
 8007e9a:	9b08      	ldr	r3, [sp, #32]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	445b      	add	r3, fp
 8007ea4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	9309      	str	r3, [sp, #36]	; 0x24
 8007eae:	9b02      	ldr	r3, [sp, #8]
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	f103 3bff 	add.w	fp, r3, #4294967295
 8007eb8:	f7ff fa64 	bl	8007384 <quorem>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	3330      	adds	r3, #48	; 0x30
 8007ec2:	9004      	str	r0, [sp, #16]
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ec8:	f000 ff3c 	bl	8008d44 <__mcmp>
 8007ecc:	4632      	mov	r2, r6
 8007ece:	9006      	str	r0, [sp, #24]
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 ff52 	bl	8008d7c <__mdiff>
 8007ed8:	68c2      	ldr	r2, [r0, #12]
 8007eda:	4607      	mov	r7, r0
 8007edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ede:	bb02      	cbnz	r2, 8007f22 <_dtoa_r+0xa82>
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f000 ff2e 	bl	8008d44 <__mcmp>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eec:	4639      	mov	r1, r7
 8007eee:	4628      	mov	r0, r5
 8007ef0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007ef4:	f000 fca2 	bl	800883c <_Bfree>
 8007ef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007efc:	9f02      	ldr	r7, [sp, #8]
 8007efe:	ea43 0102 	orr.w	r1, r3, r2
 8007f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f04:	430b      	orrs	r3, r1
 8007f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f08:	d10d      	bne.n	8007f26 <_dtoa_r+0xa86>
 8007f0a:	2b39      	cmp	r3, #57	; 0x39
 8007f0c:	d027      	beq.n	8007f5e <_dtoa_r+0xabe>
 8007f0e:	9a06      	ldr	r2, [sp, #24]
 8007f10:	2a00      	cmp	r2, #0
 8007f12:	dd01      	ble.n	8007f18 <_dtoa_r+0xa78>
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	3331      	adds	r3, #49	; 0x31
 8007f18:	f88b 3000 	strb.w	r3, [fp]
 8007f1c:	e776      	b.n	8007e0c <_dtoa_r+0x96c>
 8007f1e:	4630      	mov	r0, r6
 8007f20:	e7b9      	b.n	8007e96 <_dtoa_r+0x9f6>
 8007f22:	2201      	movs	r2, #1
 8007f24:	e7e2      	b.n	8007eec <_dtoa_r+0xa4c>
 8007f26:	9906      	ldr	r1, [sp, #24]
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	db04      	blt.n	8007f36 <_dtoa_r+0xa96>
 8007f2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007f2e:	4301      	orrs	r1, r0
 8007f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f32:	4301      	orrs	r1, r0
 8007f34:	d120      	bne.n	8007f78 <_dtoa_r+0xad8>
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	ddee      	ble.n	8007f18 <_dtoa_r+0xa78>
 8007f3a:	4651      	mov	r1, sl
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4628      	mov	r0, r5
 8007f40:	9302      	str	r3, [sp, #8]
 8007f42:	f000 fe93 	bl	8008c6c <__lshift>
 8007f46:	4621      	mov	r1, r4
 8007f48:	4682      	mov	sl, r0
 8007f4a:	f000 fefb 	bl	8008d44 <__mcmp>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	9b02      	ldr	r3, [sp, #8]
 8007f52:	dc02      	bgt.n	8007f5a <_dtoa_r+0xaba>
 8007f54:	d1e0      	bne.n	8007f18 <_dtoa_r+0xa78>
 8007f56:	07da      	lsls	r2, r3, #31
 8007f58:	d5de      	bpl.n	8007f18 <_dtoa_r+0xa78>
 8007f5a:	2b39      	cmp	r3, #57	; 0x39
 8007f5c:	d1da      	bne.n	8007f14 <_dtoa_r+0xa74>
 8007f5e:	2339      	movs	r3, #57	; 0x39
 8007f60:	f88b 3000 	strb.w	r3, [fp]
 8007f64:	463b      	mov	r3, r7
 8007f66:	461f      	mov	r7, r3
 8007f68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	2a39      	cmp	r2, #57	; 0x39
 8007f70:	d050      	beq.n	8008014 <_dtoa_r+0xb74>
 8007f72:	3201      	adds	r2, #1
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e749      	b.n	8007e0c <_dtoa_r+0x96c>
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	dd03      	ble.n	8007f84 <_dtoa_r+0xae4>
 8007f7c:	2b39      	cmp	r3, #57	; 0x39
 8007f7e:	d0ee      	beq.n	8007f5e <_dtoa_r+0xabe>
 8007f80:	3301      	adds	r3, #1
 8007f82:	e7c9      	b.n	8007f18 <_dtoa_r+0xa78>
 8007f84:	9a02      	ldr	r2, [sp, #8]
 8007f86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f8c:	428a      	cmp	r2, r1
 8007f8e:	d02a      	beq.n	8007fe6 <_dtoa_r+0xb46>
 8007f90:	4651      	mov	r1, sl
 8007f92:	2300      	movs	r3, #0
 8007f94:	220a      	movs	r2, #10
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 fc72 	bl	8008880 <__multadd>
 8007f9c:	45b0      	cmp	r8, r6
 8007f9e:	4682      	mov	sl, r0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	f04f 020a 	mov.w	r2, #10
 8007fa8:	4641      	mov	r1, r8
 8007faa:	4628      	mov	r0, r5
 8007fac:	d107      	bne.n	8007fbe <_dtoa_r+0xb1e>
 8007fae:	f000 fc67 	bl	8008880 <__multadd>
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	e777      	b.n	8007eae <_dtoa_r+0xa0e>
 8007fbe:	f000 fc5f 	bl	8008880 <__multadd>
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	220a      	movs	r2, #10
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 fc58 	bl	8008880 <__multadd>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	e7f0      	b.n	8007fb6 <_dtoa_r+0xb16>
 8007fd4:	f1bb 0f00 	cmp.w	fp, #0
 8007fd8:	bfcc      	ite	gt
 8007fda:	465f      	movgt	r7, fp
 8007fdc:	2701      	movle	r7, #1
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	9a08      	ldr	r2, [sp, #32]
 8007fe4:	4417      	add	r7, r2
 8007fe6:	4651      	mov	r1, sl
 8007fe8:	2201      	movs	r2, #1
 8007fea:	4628      	mov	r0, r5
 8007fec:	9302      	str	r3, [sp, #8]
 8007fee:	f000 fe3d 	bl	8008c6c <__lshift>
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	f000 fea5 	bl	8008d44 <__mcmp>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	dcb2      	bgt.n	8007f64 <_dtoa_r+0xac4>
 8007ffe:	d102      	bne.n	8008006 <_dtoa_r+0xb66>
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	07db      	lsls	r3, r3, #31
 8008004:	d4ae      	bmi.n	8007f64 <_dtoa_r+0xac4>
 8008006:	463b      	mov	r3, r7
 8008008:	461f      	mov	r7, r3
 800800a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800800e:	2a30      	cmp	r2, #48	; 0x30
 8008010:	d0fa      	beq.n	8008008 <_dtoa_r+0xb68>
 8008012:	e6fb      	b.n	8007e0c <_dtoa_r+0x96c>
 8008014:	9a08      	ldr	r2, [sp, #32]
 8008016:	429a      	cmp	r2, r3
 8008018:	d1a5      	bne.n	8007f66 <_dtoa_r+0xac6>
 800801a:	2331      	movs	r3, #49	; 0x31
 800801c:	f109 0901 	add.w	r9, r9, #1
 8008020:	7013      	strb	r3, [r2, #0]
 8008022:	e6f3      	b.n	8007e0c <_dtoa_r+0x96c>
 8008024:	4b13      	ldr	r3, [pc, #76]	; (8008074 <_dtoa_r+0xbd4>)
 8008026:	f7ff baa7 	b.w	8007578 <_dtoa_r+0xd8>
 800802a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f aa80 	bne.w	8007532 <_dtoa_r+0x92>
 8008032:	4b11      	ldr	r3, [pc, #68]	; (8008078 <_dtoa_r+0xbd8>)
 8008034:	f7ff baa0 	b.w	8007578 <_dtoa_r+0xd8>
 8008038:	f1bb 0f00 	cmp.w	fp, #0
 800803c:	dc03      	bgt.n	8008046 <_dtoa_r+0xba6>
 800803e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008040:	2b02      	cmp	r3, #2
 8008042:	f73f aecc 	bgt.w	8007dde <_dtoa_r+0x93e>
 8008046:	9f08      	ldr	r7, [sp, #32]
 8008048:	4621      	mov	r1, r4
 800804a:	4650      	mov	r0, sl
 800804c:	f7ff f99a 	bl	8007384 <quorem>
 8008050:	9a08      	ldr	r2, [sp, #32]
 8008052:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008056:	f807 3b01 	strb.w	r3, [r7], #1
 800805a:	1aba      	subs	r2, r7, r2
 800805c:	4593      	cmp	fp, r2
 800805e:	ddb9      	ble.n	8007fd4 <_dtoa_r+0xb34>
 8008060:	4651      	mov	r1, sl
 8008062:	2300      	movs	r3, #0
 8008064:	220a      	movs	r2, #10
 8008066:	4628      	mov	r0, r5
 8008068:	f000 fc0a 	bl	8008880 <__multadd>
 800806c:	4682      	mov	sl, r0
 800806e:	e7eb      	b.n	8008048 <_dtoa_r+0xba8>
 8008070:	0800a69c 	.word	0x0800a69c
 8008074:	0800a498 	.word	0x0800a498
 8008078:	0800a619 	.word	0x0800a619

0800807c <rshift>:
 800807c:	6903      	ldr	r3, [r0, #16]
 800807e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008082:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008086:	f100 0414 	add.w	r4, r0, #20
 800808a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800808e:	dd46      	ble.n	800811e <rshift+0xa2>
 8008090:	f011 011f 	ands.w	r1, r1, #31
 8008094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800809c:	d10c      	bne.n	80080b8 <rshift+0x3c>
 800809e:	4629      	mov	r1, r5
 80080a0:	f100 0710 	add.w	r7, r0, #16
 80080a4:	42b1      	cmp	r1, r6
 80080a6:	d335      	bcc.n	8008114 <rshift+0x98>
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	1eea      	subs	r2, r5, #3
 80080ae:	4296      	cmp	r6, r2
 80080b0:	bf38      	it	cc
 80080b2:	2300      	movcc	r3, #0
 80080b4:	4423      	add	r3, r4
 80080b6:	e015      	b.n	80080e4 <rshift+0x68>
 80080b8:	46a1      	mov	r9, r4
 80080ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80080be:	f1c1 0820 	rsb	r8, r1, #32
 80080c2:	40cf      	lsrs	r7, r1
 80080c4:	f105 0e04 	add.w	lr, r5, #4
 80080c8:	4576      	cmp	r6, lr
 80080ca:	46f4      	mov	ip, lr
 80080cc:	d816      	bhi.n	80080fc <rshift+0x80>
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	009a      	lsls	r2, r3, #2
 80080d2:	3a04      	subs	r2, #4
 80080d4:	3501      	adds	r5, #1
 80080d6:	42ae      	cmp	r6, r5
 80080d8:	bf38      	it	cc
 80080da:	2200      	movcc	r2, #0
 80080dc:	18a3      	adds	r3, r4, r2
 80080de:	50a7      	str	r7, [r4, r2]
 80080e0:	b107      	cbz	r7, 80080e4 <rshift+0x68>
 80080e2:	3304      	adds	r3, #4
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	eba3 0204 	sub.w	r2, r3, r4
 80080ea:	bf08      	it	eq
 80080ec:	2300      	moveq	r3, #0
 80080ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080f2:	6102      	str	r2, [r0, #16]
 80080f4:	bf08      	it	eq
 80080f6:	6143      	streq	r3, [r0, #20]
 80080f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080fc:	f8dc c000 	ldr.w	ip, [ip]
 8008100:	fa0c fc08 	lsl.w	ip, ip, r8
 8008104:	ea4c 0707 	orr.w	r7, ip, r7
 8008108:	f849 7b04 	str.w	r7, [r9], #4
 800810c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008110:	40cf      	lsrs	r7, r1
 8008112:	e7d9      	b.n	80080c8 <rshift+0x4c>
 8008114:	f851 cb04 	ldr.w	ip, [r1], #4
 8008118:	f847 cf04 	str.w	ip, [r7, #4]!
 800811c:	e7c2      	b.n	80080a4 <rshift+0x28>
 800811e:	4623      	mov	r3, r4
 8008120:	e7e0      	b.n	80080e4 <rshift+0x68>

08008122 <__hexdig_fun>:
 8008122:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008126:	2b09      	cmp	r3, #9
 8008128:	d802      	bhi.n	8008130 <__hexdig_fun+0xe>
 800812a:	3820      	subs	r0, #32
 800812c:	b2c0      	uxtb	r0, r0
 800812e:	4770      	bx	lr
 8008130:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008134:	2b05      	cmp	r3, #5
 8008136:	d801      	bhi.n	800813c <__hexdig_fun+0x1a>
 8008138:	3847      	subs	r0, #71	; 0x47
 800813a:	e7f7      	b.n	800812c <__hexdig_fun+0xa>
 800813c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008140:	2b05      	cmp	r3, #5
 8008142:	d801      	bhi.n	8008148 <__hexdig_fun+0x26>
 8008144:	3827      	subs	r0, #39	; 0x27
 8008146:	e7f1      	b.n	800812c <__hexdig_fun+0xa>
 8008148:	2000      	movs	r0, #0
 800814a:	4770      	bx	lr

0800814c <__gethex>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	b08b      	sub	sp, #44	; 0x2c
 8008152:	9306      	str	r3, [sp, #24]
 8008154:	4bb9      	ldr	r3, [pc, #740]	; (800843c <__gethex+0x2f0>)
 8008156:	9002      	str	r0, [sp, #8]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	468b      	mov	fp, r1
 800815c:	4618      	mov	r0, r3
 800815e:	4690      	mov	r8, r2
 8008160:	9303      	str	r3, [sp, #12]
 8008162:	f7f7 fff5 	bl	8000150 <strlen>
 8008166:	4682      	mov	sl, r0
 8008168:	9b03      	ldr	r3, [sp, #12]
 800816a:	f8db 2000 	ldr.w	r2, [fp]
 800816e:	4403      	add	r3, r0
 8008170:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008174:	9307      	str	r3, [sp, #28]
 8008176:	1c93      	adds	r3, r2, #2
 8008178:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800817c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008180:	32fe      	adds	r2, #254	; 0xfe
 8008182:	18d1      	adds	r1, r2, r3
 8008184:	461f      	mov	r7, r3
 8008186:	f813 0b01 	ldrb.w	r0, [r3], #1
 800818a:	9101      	str	r1, [sp, #4]
 800818c:	2830      	cmp	r0, #48	; 0x30
 800818e:	d0f8      	beq.n	8008182 <__gethex+0x36>
 8008190:	f7ff ffc7 	bl	8008122 <__hexdig_fun>
 8008194:	4604      	mov	r4, r0
 8008196:	2800      	cmp	r0, #0
 8008198:	d13a      	bne.n	8008210 <__gethex+0xc4>
 800819a:	4652      	mov	r2, sl
 800819c:	4638      	mov	r0, r7
 800819e:	9903      	ldr	r1, [sp, #12]
 80081a0:	f001 f9ea 	bl	8009578 <strncmp>
 80081a4:	4605      	mov	r5, r0
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d166      	bne.n	8008278 <__gethex+0x12c>
 80081aa:	f817 000a 	ldrb.w	r0, [r7, sl]
 80081ae:	eb07 060a 	add.w	r6, r7, sl
 80081b2:	f7ff ffb6 	bl	8008122 <__hexdig_fun>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d060      	beq.n	800827c <__gethex+0x130>
 80081ba:	4633      	mov	r3, r6
 80081bc:	7818      	ldrb	r0, [r3, #0]
 80081be:	461f      	mov	r7, r3
 80081c0:	2830      	cmp	r0, #48	; 0x30
 80081c2:	f103 0301 	add.w	r3, r3, #1
 80081c6:	d0f9      	beq.n	80081bc <__gethex+0x70>
 80081c8:	f7ff ffab 	bl	8008122 <__hexdig_fun>
 80081cc:	2301      	movs	r3, #1
 80081ce:	fab0 f480 	clz	r4, r0
 80081d2:	4635      	mov	r5, r6
 80081d4:	0964      	lsrs	r4, r4, #5
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	463a      	mov	r2, r7
 80081da:	4616      	mov	r6, r2
 80081dc:	7830      	ldrb	r0, [r6, #0]
 80081de:	3201      	adds	r2, #1
 80081e0:	f7ff ff9f 	bl	8008122 <__hexdig_fun>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d1f8      	bne.n	80081da <__gethex+0x8e>
 80081e8:	4652      	mov	r2, sl
 80081ea:	4630      	mov	r0, r6
 80081ec:	9903      	ldr	r1, [sp, #12]
 80081ee:	f001 f9c3 	bl	8009578 <strncmp>
 80081f2:	b980      	cbnz	r0, 8008216 <__gethex+0xca>
 80081f4:	b94d      	cbnz	r5, 800820a <__gethex+0xbe>
 80081f6:	eb06 050a 	add.w	r5, r6, sl
 80081fa:	462a      	mov	r2, r5
 80081fc:	4616      	mov	r6, r2
 80081fe:	7830      	ldrb	r0, [r6, #0]
 8008200:	3201      	adds	r2, #1
 8008202:	f7ff ff8e 	bl	8008122 <__hexdig_fun>
 8008206:	2800      	cmp	r0, #0
 8008208:	d1f8      	bne.n	80081fc <__gethex+0xb0>
 800820a:	1bad      	subs	r5, r5, r6
 800820c:	00ad      	lsls	r5, r5, #2
 800820e:	e004      	b.n	800821a <__gethex+0xce>
 8008210:	2400      	movs	r4, #0
 8008212:	4625      	mov	r5, r4
 8008214:	e7e0      	b.n	80081d8 <__gethex+0x8c>
 8008216:	2d00      	cmp	r5, #0
 8008218:	d1f7      	bne.n	800820a <__gethex+0xbe>
 800821a:	7833      	ldrb	r3, [r6, #0]
 800821c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008220:	2b50      	cmp	r3, #80	; 0x50
 8008222:	d139      	bne.n	8008298 <__gethex+0x14c>
 8008224:	7873      	ldrb	r3, [r6, #1]
 8008226:	2b2b      	cmp	r3, #43	; 0x2b
 8008228:	d02a      	beq.n	8008280 <__gethex+0x134>
 800822a:	2b2d      	cmp	r3, #45	; 0x2d
 800822c:	d02c      	beq.n	8008288 <__gethex+0x13c>
 800822e:	f04f 0900 	mov.w	r9, #0
 8008232:	1c71      	adds	r1, r6, #1
 8008234:	7808      	ldrb	r0, [r1, #0]
 8008236:	f7ff ff74 	bl	8008122 <__hexdig_fun>
 800823a:	1e43      	subs	r3, r0, #1
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b18      	cmp	r3, #24
 8008240:	d82a      	bhi.n	8008298 <__gethex+0x14c>
 8008242:	f1a0 0210 	sub.w	r2, r0, #16
 8008246:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800824a:	f7ff ff6a 	bl	8008122 <__hexdig_fun>
 800824e:	1e43      	subs	r3, r0, #1
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b18      	cmp	r3, #24
 8008254:	d91b      	bls.n	800828e <__gethex+0x142>
 8008256:	f1b9 0f00 	cmp.w	r9, #0
 800825a:	d000      	beq.n	800825e <__gethex+0x112>
 800825c:	4252      	negs	r2, r2
 800825e:	4415      	add	r5, r2
 8008260:	f8cb 1000 	str.w	r1, [fp]
 8008264:	b1d4      	cbz	r4, 800829c <__gethex+0x150>
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	bf14      	ite	ne
 800826c:	2700      	movne	r7, #0
 800826e:	2706      	moveq	r7, #6
 8008270:	4638      	mov	r0, r7
 8008272:	b00b      	add	sp, #44	; 0x2c
 8008274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008278:	463e      	mov	r6, r7
 800827a:	4625      	mov	r5, r4
 800827c:	2401      	movs	r4, #1
 800827e:	e7cc      	b.n	800821a <__gethex+0xce>
 8008280:	f04f 0900 	mov.w	r9, #0
 8008284:	1cb1      	adds	r1, r6, #2
 8008286:	e7d5      	b.n	8008234 <__gethex+0xe8>
 8008288:	f04f 0901 	mov.w	r9, #1
 800828c:	e7fa      	b.n	8008284 <__gethex+0x138>
 800828e:	230a      	movs	r3, #10
 8008290:	fb03 0202 	mla	r2, r3, r2, r0
 8008294:	3a10      	subs	r2, #16
 8008296:	e7d6      	b.n	8008246 <__gethex+0xfa>
 8008298:	4631      	mov	r1, r6
 800829a:	e7e1      	b.n	8008260 <__gethex+0x114>
 800829c:	4621      	mov	r1, r4
 800829e:	1bf3      	subs	r3, r6, r7
 80082a0:	3b01      	subs	r3, #1
 80082a2:	2b07      	cmp	r3, #7
 80082a4:	dc0a      	bgt.n	80082bc <__gethex+0x170>
 80082a6:	9802      	ldr	r0, [sp, #8]
 80082a8:	f000 fa88 	bl	80087bc <_Balloc>
 80082ac:	4604      	mov	r4, r0
 80082ae:	b940      	cbnz	r0, 80082c2 <__gethex+0x176>
 80082b0:	4602      	mov	r2, r0
 80082b2:	21de      	movs	r1, #222	; 0xde
 80082b4:	4b62      	ldr	r3, [pc, #392]	; (8008440 <__gethex+0x2f4>)
 80082b6:	4863      	ldr	r0, [pc, #396]	; (8008444 <__gethex+0x2f8>)
 80082b8:	f001 f97e 	bl	80095b8 <__assert_func>
 80082bc:	3101      	adds	r1, #1
 80082be:	105b      	asrs	r3, r3, #1
 80082c0:	e7ef      	b.n	80082a2 <__gethex+0x156>
 80082c2:	f04f 0b00 	mov.w	fp, #0
 80082c6:	f100 0914 	add.w	r9, r0, #20
 80082ca:	f1ca 0301 	rsb	r3, sl, #1
 80082ce:	f8cd 9010 	str.w	r9, [sp, #16]
 80082d2:	f8cd b004 	str.w	fp, [sp, #4]
 80082d6:	9308      	str	r3, [sp, #32]
 80082d8:	42b7      	cmp	r7, r6
 80082da:	d33f      	bcc.n	800835c <__gethex+0x210>
 80082dc:	9f04      	ldr	r7, [sp, #16]
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	f847 3b04 	str.w	r3, [r7], #4
 80082e4:	eba7 0709 	sub.w	r7, r7, r9
 80082e8:	10bf      	asrs	r7, r7, #2
 80082ea:	6127      	str	r7, [r4, #16]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fb5b 	bl	80089a8 <__hi0bits>
 80082f2:	017f      	lsls	r7, r7, #5
 80082f4:	f8d8 6000 	ldr.w	r6, [r8]
 80082f8:	1a3f      	subs	r7, r7, r0
 80082fa:	42b7      	cmp	r7, r6
 80082fc:	dd62      	ble.n	80083c4 <__gethex+0x278>
 80082fe:	1bbf      	subs	r7, r7, r6
 8008300:	4639      	mov	r1, r7
 8008302:	4620      	mov	r0, r4
 8008304:	f000 fef1 	bl	80090ea <__any_on>
 8008308:	4682      	mov	sl, r0
 800830a:	b1a8      	cbz	r0, 8008338 <__gethex+0x1ec>
 800830c:	f04f 0a01 	mov.w	sl, #1
 8008310:	1e7b      	subs	r3, r7, #1
 8008312:	1159      	asrs	r1, r3, #5
 8008314:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008318:	f003 021f 	and.w	r2, r3, #31
 800831c:	fa0a f202 	lsl.w	r2, sl, r2
 8008320:	420a      	tst	r2, r1
 8008322:	d009      	beq.n	8008338 <__gethex+0x1ec>
 8008324:	4553      	cmp	r3, sl
 8008326:	dd05      	ble.n	8008334 <__gethex+0x1e8>
 8008328:	4620      	mov	r0, r4
 800832a:	1eb9      	subs	r1, r7, #2
 800832c:	f000 fedd 	bl	80090ea <__any_on>
 8008330:	2800      	cmp	r0, #0
 8008332:	d144      	bne.n	80083be <__gethex+0x272>
 8008334:	f04f 0a02 	mov.w	sl, #2
 8008338:	4639      	mov	r1, r7
 800833a:	4620      	mov	r0, r4
 800833c:	f7ff fe9e 	bl	800807c <rshift>
 8008340:	443d      	add	r5, r7
 8008342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008346:	42ab      	cmp	r3, r5
 8008348:	da4a      	bge.n	80083e0 <__gethex+0x294>
 800834a:	4621      	mov	r1, r4
 800834c:	9802      	ldr	r0, [sp, #8]
 800834e:	f000 fa75 	bl	800883c <_Bfree>
 8008352:	2300      	movs	r3, #0
 8008354:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008356:	27a3      	movs	r7, #163	; 0xa3
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	e789      	b.n	8008270 <__gethex+0x124>
 800835c:	1e73      	subs	r3, r6, #1
 800835e:	9a07      	ldr	r2, [sp, #28]
 8008360:	9305      	str	r3, [sp, #20]
 8008362:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008366:	4293      	cmp	r3, r2
 8008368:	d019      	beq.n	800839e <__gethex+0x252>
 800836a:	f1bb 0f20 	cmp.w	fp, #32
 800836e:	d107      	bne.n	8008380 <__gethex+0x234>
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	9a01      	ldr	r2, [sp, #4]
 8008374:	f843 2b04 	str.w	r2, [r3], #4
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	2300      	movs	r3, #0
 800837c:	469b      	mov	fp, r3
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008384:	f7ff fecd 	bl	8008122 <__hexdig_fun>
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	f000 000f 	and.w	r0, r0, #15
 800838e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008392:	4303      	orrs	r3, r0
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	f10b 0b04 	add.w	fp, fp, #4
 800839a:	9b05      	ldr	r3, [sp, #20]
 800839c:	e00d      	b.n	80083ba <__gethex+0x26e>
 800839e:	9b05      	ldr	r3, [sp, #20]
 80083a0:	9a08      	ldr	r2, [sp, #32]
 80083a2:	4413      	add	r3, r2
 80083a4:	42bb      	cmp	r3, r7
 80083a6:	d3e0      	bcc.n	800836a <__gethex+0x21e>
 80083a8:	4618      	mov	r0, r3
 80083aa:	4652      	mov	r2, sl
 80083ac:	9903      	ldr	r1, [sp, #12]
 80083ae:	9309      	str	r3, [sp, #36]	; 0x24
 80083b0:	f001 f8e2 	bl	8009578 <strncmp>
 80083b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d1d7      	bne.n	800836a <__gethex+0x21e>
 80083ba:	461e      	mov	r6, r3
 80083bc:	e78c      	b.n	80082d8 <__gethex+0x18c>
 80083be:	f04f 0a03 	mov.w	sl, #3
 80083c2:	e7b9      	b.n	8008338 <__gethex+0x1ec>
 80083c4:	da09      	bge.n	80083da <__gethex+0x28e>
 80083c6:	1bf7      	subs	r7, r6, r7
 80083c8:	4621      	mov	r1, r4
 80083ca:	463a      	mov	r2, r7
 80083cc:	9802      	ldr	r0, [sp, #8]
 80083ce:	f000 fc4d 	bl	8008c6c <__lshift>
 80083d2:	4604      	mov	r4, r0
 80083d4:	1bed      	subs	r5, r5, r7
 80083d6:	f100 0914 	add.w	r9, r0, #20
 80083da:	f04f 0a00 	mov.w	sl, #0
 80083de:	e7b0      	b.n	8008342 <__gethex+0x1f6>
 80083e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80083e4:	42a8      	cmp	r0, r5
 80083e6:	dd71      	ble.n	80084cc <__gethex+0x380>
 80083e8:	1b45      	subs	r5, r0, r5
 80083ea:	42ae      	cmp	r6, r5
 80083ec:	dc34      	bgt.n	8008458 <__gethex+0x30c>
 80083ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d028      	beq.n	8008448 <__gethex+0x2fc>
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d02a      	beq.n	8008450 <__gethex+0x304>
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d115      	bne.n	800842a <__gethex+0x2de>
 80083fe:	42ae      	cmp	r6, r5
 8008400:	d113      	bne.n	800842a <__gethex+0x2de>
 8008402:	2e01      	cmp	r6, #1
 8008404:	d10b      	bne.n	800841e <__gethex+0x2d2>
 8008406:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800840a:	9a06      	ldr	r2, [sp, #24]
 800840c:	2762      	movs	r7, #98	; 0x62
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	2301      	movs	r3, #1
 8008412:	6123      	str	r3, [r4, #16]
 8008414:	f8c9 3000 	str.w	r3, [r9]
 8008418:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800841a:	601c      	str	r4, [r3, #0]
 800841c:	e728      	b.n	8008270 <__gethex+0x124>
 800841e:	4620      	mov	r0, r4
 8008420:	1e71      	subs	r1, r6, #1
 8008422:	f000 fe62 	bl	80090ea <__any_on>
 8008426:	2800      	cmp	r0, #0
 8008428:	d1ed      	bne.n	8008406 <__gethex+0x2ba>
 800842a:	4621      	mov	r1, r4
 800842c:	9802      	ldr	r0, [sp, #8]
 800842e:	f000 fa05 	bl	800883c <_Bfree>
 8008432:	2300      	movs	r3, #0
 8008434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008436:	2750      	movs	r7, #80	; 0x50
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	e719      	b.n	8008270 <__gethex+0x124>
 800843c:	0800a718 	.word	0x0800a718
 8008440:	0800a69c 	.word	0x0800a69c
 8008444:	0800a6ad 	.word	0x0800a6ad
 8008448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1ed      	bne.n	800842a <__gethex+0x2de>
 800844e:	e7da      	b.n	8008406 <__gethex+0x2ba>
 8008450:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1d7      	bne.n	8008406 <__gethex+0x2ba>
 8008456:	e7e8      	b.n	800842a <__gethex+0x2de>
 8008458:	1e6f      	subs	r7, r5, #1
 800845a:	f1ba 0f00 	cmp.w	sl, #0
 800845e:	d132      	bne.n	80084c6 <__gethex+0x37a>
 8008460:	b127      	cbz	r7, 800846c <__gethex+0x320>
 8008462:	4639      	mov	r1, r7
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fe40 	bl	80090ea <__any_on>
 800846a:	4682      	mov	sl, r0
 800846c:	2101      	movs	r1, #1
 800846e:	117b      	asrs	r3, r7, #5
 8008470:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008474:	f007 071f 	and.w	r7, r7, #31
 8008478:	fa01 f707 	lsl.w	r7, r1, r7
 800847c:	421f      	tst	r7, r3
 800847e:	f04f 0702 	mov.w	r7, #2
 8008482:	4629      	mov	r1, r5
 8008484:	4620      	mov	r0, r4
 8008486:	bf18      	it	ne
 8008488:	f04a 0a02 	orrne.w	sl, sl, #2
 800848c:	1b76      	subs	r6, r6, r5
 800848e:	f7ff fdf5 	bl	800807c <rshift>
 8008492:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008496:	f1ba 0f00 	cmp.w	sl, #0
 800849a:	d048      	beq.n	800852e <__gethex+0x3e2>
 800849c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d015      	beq.n	80084d0 <__gethex+0x384>
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d017      	beq.n	80084d8 <__gethex+0x38c>
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d109      	bne.n	80084c0 <__gethex+0x374>
 80084ac:	f01a 0f02 	tst.w	sl, #2
 80084b0:	d006      	beq.n	80084c0 <__gethex+0x374>
 80084b2:	f8d9 0000 	ldr.w	r0, [r9]
 80084b6:	ea4a 0a00 	orr.w	sl, sl, r0
 80084ba:	f01a 0f01 	tst.w	sl, #1
 80084be:	d10e      	bne.n	80084de <__gethex+0x392>
 80084c0:	f047 0710 	orr.w	r7, r7, #16
 80084c4:	e033      	b.n	800852e <__gethex+0x3e2>
 80084c6:	f04f 0a01 	mov.w	sl, #1
 80084ca:	e7cf      	b.n	800846c <__gethex+0x320>
 80084cc:	2701      	movs	r7, #1
 80084ce:	e7e2      	b.n	8008496 <__gethex+0x34a>
 80084d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084d2:	f1c3 0301 	rsb	r3, r3, #1
 80084d6:	9315      	str	r3, [sp, #84]	; 0x54
 80084d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0f0      	beq.n	80084c0 <__gethex+0x374>
 80084de:	f04f 0c00 	mov.w	ip, #0
 80084e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80084e6:	f104 0314 	add.w	r3, r4, #20
 80084ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80084ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80084fc:	d01c      	beq.n	8008538 <__gethex+0x3ec>
 80084fe:	3201      	adds	r2, #1
 8008500:	6002      	str	r2, [r0, #0]
 8008502:	2f02      	cmp	r7, #2
 8008504:	f104 0314 	add.w	r3, r4, #20
 8008508:	d13d      	bne.n	8008586 <__gethex+0x43a>
 800850a:	f8d8 2000 	ldr.w	r2, [r8]
 800850e:	3a01      	subs	r2, #1
 8008510:	42b2      	cmp	r2, r6
 8008512:	d10a      	bne.n	800852a <__gethex+0x3de>
 8008514:	2201      	movs	r2, #1
 8008516:	1171      	asrs	r1, r6, #5
 8008518:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800851c:	f006 061f 	and.w	r6, r6, #31
 8008520:	fa02 f606 	lsl.w	r6, r2, r6
 8008524:	421e      	tst	r6, r3
 8008526:	bf18      	it	ne
 8008528:	4617      	movne	r7, r2
 800852a:	f047 0720 	orr.w	r7, r7, #32
 800852e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008530:	601c      	str	r4, [r3, #0]
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	601d      	str	r5, [r3, #0]
 8008536:	e69b      	b.n	8008270 <__gethex+0x124>
 8008538:	4299      	cmp	r1, r3
 800853a:	f843 cc04 	str.w	ip, [r3, #-4]
 800853e:	d8d8      	bhi.n	80084f2 <__gethex+0x3a6>
 8008540:	68a3      	ldr	r3, [r4, #8]
 8008542:	459b      	cmp	fp, r3
 8008544:	db17      	blt.n	8008576 <__gethex+0x42a>
 8008546:	6861      	ldr	r1, [r4, #4]
 8008548:	9802      	ldr	r0, [sp, #8]
 800854a:	3101      	adds	r1, #1
 800854c:	f000 f936 	bl	80087bc <_Balloc>
 8008550:	4681      	mov	r9, r0
 8008552:	b918      	cbnz	r0, 800855c <__gethex+0x410>
 8008554:	4602      	mov	r2, r0
 8008556:	2184      	movs	r1, #132	; 0x84
 8008558:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <__gethex+0x474>)
 800855a:	e6ac      	b.n	80082b6 <__gethex+0x16a>
 800855c:	6922      	ldr	r2, [r4, #16]
 800855e:	f104 010c 	add.w	r1, r4, #12
 8008562:	3202      	adds	r2, #2
 8008564:	0092      	lsls	r2, r2, #2
 8008566:	300c      	adds	r0, #12
 8008568:	f000 f91a 	bl	80087a0 <memcpy>
 800856c:	4621      	mov	r1, r4
 800856e:	9802      	ldr	r0, [sp, #8]
 8008570:	f000 f964 	bl	800883c <_Bfree>
 8008574:	464c      	mov	r4, r9
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	6122      	str	r2, [r4, #16]
 800857c:	2201      	movs	r2, #1
 800857e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008582:	615a      	str	r2, [r3, #20]
 8008584:	e7bd      	b.n	8008502 <__gethex+0x3b6>
 8008586:	6922      	ldr	r2, [r4, #16]
 8008588:	455a      	cmp	r2, fp
 800858a:	dd0b      	ble.n	80085a4 <__gethex+0x458>
 800858c:	2101      	movs	r1, #1
 800858e:	4620      	mov	r0, r4
 8008590:	f7ff fd74 	bl	800807c <rshift>
 8008594:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008598:	3501      	adds	r5, #1
 800859a:	42ab      	cmp	r3, r5
 800859c:	f6ff aed5 	blt.w	800834a <__gethex+0x1fe>
 80085a0:	2701      	movs	r7, #1
 80085a2:	e7c2      	b.n	800852a <__gethex+0x3de>
 80085a4:	f016 061f 	ands.w	r6, r6, #31
 80085a8:	d0fa      	beq.n	80085a0 <__gethex+0x454>
 80085aa:	449a      	add	sl, r3
 80085ac:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80085b0:	f000 f9fa 	bl	80089a8 <__hi0bits>
 80085b4:	f1c6 0620 	rsb	r6, r6, #32
 80085b8:	42b0      	cmp	r0, r6
 80085ba:	dbe7      	blt.n	800858c <__gethex+0x440>
 80085bc:	e7f0      	b.n	80085a0 <__gethex+0x454>
 80085be:	bf00      	nop
 80085c0:	0800a69c 	.word	0x0800a69c

080085c4 <L_shift>:
 80085c4:	f1c2 0208 	rsb	r2, r2, #8
 80085c8:	0092      	lsls	r2, r2, #2
 80085ca:	b570      	push	{r4, r5, r6, lr}
 80085cc:	f1c2 0620 	rsb	r6, r2, #32
 80085d0:	6843      	ldr	r3, [r0, #4]
 80085d2:	6804      	ldr	r4, [r0, #0]
 80085d4:	fa03 f506 	lsl.w	r5, r3, r6
 80085d8:	432c      	orrs	r4, r5
 80085da:	40d3      	lsrs	r3, r2
 80085dc:	6004      	str	r4, [r0, #0]
 80085de:	f840 3f04 	str.w	r3, [r0, #4]!
 80085e2:	4288      	cmp	r0, r1
 80085e4:	d3f4      	bcc.n	80085d0 <L_shift+0xc>
 80085e6:	bd70      	pop	{r4, r5, r6, pc}

080085e8 <__match>:
 80085e8:	b530      	push	{r4, r5, lr}
 80085ea:	6803      	ldr	r3, [r0, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f2:	b914      	cbnz	r4, 80085fa <__match+0x12>
 80085f4:	6003      	str	r3, [r0, #0]
 80085f6:	2001      	movs	r0, #1
 80085f8:	bd30      	pop	{r4, r5, pc}
 80085fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008602:	2d19      	cmp	r5, #25
 8008604:	bf98      	it	ls
 8008606:	3220      	addls	r2, #32
 8008608:	42a2      	cmp	r2, r4
 800860a:	d0f0      	beq.n	80085ee <__match+0x6>
 800860c:	2000      	movs	r0, #0
 800860e:	e7f3      	b.n	80085f8 <__match+0x10>

08008610 <__hexnan>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	2500      	movs	r5, #0
 8008616:	680b      	ldr	r3, [r1, #0]
 8008618:	4682      	mov	sl, r0
 800861a:	115e      	asrs	r6, r3, #5
 800861c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008620:	f013 031f 	ands.w	r3, r3, #31
 8008624:	bf18      	it	ne
 8008626:	3604      	addne	r6, #4
 8008628:	1f37      	subs	r7, r6, #4
 800862a:	4690      	mov	r8, r2
 800862c:	46b9      	mov	r9, r7
 800862e:	463c      	mov	r4, r7
 8008630:	46ab      	mov	fp, r5
 8008632:	b087      	sub	sp, #28
 8008634:	6801      	ldr	r1, [r0, #0]
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	f846 5c04 	str.w	r5, [r6, #-4]
 800863c:	9502      	str	r5, [sp, #8]
 800863e:	784a      	ldrb	r2, [r1, #1]
 8008640:	1c4b      	adds	r3, r1, #1
 8008642:	9303      	str	r3, [sp, #12]
 8008644:	b342      	cbz	r2, 8008698 <__hexnan+0x88>
 8008646:	4610      	mov	r0, r2
 8008648:	9105      	str	r1, [sp, #20]
 800864a:	9204      	str	r2, [sp, #16]
 800864c:	f7ff fd69 	bl	8008122 <__hexdig_fun>
 8008650:	2800      	cmp	r0, #0
 8008652:	d14f      	bne.n	80086f4 <__hexnan+0xe4>
 8008654:	9a04      	ldr	r2, [sp, #16]
 8008656:	9905      	ldr	r1, [sp, #20]
 8008658:	2a20      	cmp	r2, #32
 800865a:	d818      	bhi.n	800868e <__hexnan+0x7e>
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	459b      	cmp	fp, r3
 8008660:	dd13      	ble.n	800868a <__hexnan+0x7a>
 8008662:	454c      	cmp	r4, r9
 8008664:	d206      	bcs.n	8008674 <__hexnan+0x64>
 8008666:	2d07      	cmp	r5, #7
 8008668:	dc04      	bgt.n	8008674 <__hexnan+0x64>
 800866a:	462a      	mov	r2, r5
 800866c:	4649      	mov	r1, r9
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff ffa8 	bl	80085c4 <L_shift>
 8008674:	4544      	cmp	r4, r8
 8008676:	d950      	bls.n	800871a <__hexnan+0x10a>
 8008678:	2300      	movs	r3, #0
 800867a:	f1a4 0904 	sub.w	r9, r4, #4
 800867e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008682:	461d      	mov	r5, r3
 8008684:	464c      	mov	r4, r9
 8008686:	f8cd b008 	str.w	fp, [sp, #8]
 800868a:	9903      	ldr	r1, [sp, #12]
 800868c:	e7d7      	b.n	800863e <__hexnan+0x2e>
 800868e:	2a29      	cmp	r2, #41	; 0x29
 8008690:	d156      	bne.n	8008740 <__hexnan+0x130>
 8008692:	3102      	adds	r1, #2
 8008694:	f8ca 1000 	str.w	r1, [sl]
 8008698:	f1bb 0f00 	cmp.w	fp, #0
 800869c:	d050      	beq.n	8008740 <__hexnan+0x130>
 800869e:	454c      	cmp	r4, r9
 80086a0:	d206      	bcs.n	80086b0 <__hexnan+0xa0>
 80086a2:	2d07      	cmp	r5, #7
 80086a4:	dc04      	bgt.n	80086b0 <__hexnan+0xa0>
 80086a6:	462a      	mov	r2, r5
 80086a8:	4649      	mov	r1, r9
 80086aa:	4620      	mov	r0, r4
 80086ac:	f7ff ff8a 	bl	80085c4 <L_shift>
 80086b0:	4544      	cmp	r4, r8
 80086b2:	d934      	bls.n	800871e <__hexnan+0x10e>
 80086b4:	4623      	mov	r3, r4
 80086b6:	f1a8 0204 	sub.w	r2, r8, #4
 80086ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80086be:	429f      	cmp	r7, r3
 80086c0:	f842 1f04 	str.w	r1, [r2, #4]!
 80086c4:	d2f9      	bcs.n	80086ba <__hexnan+0xaa>
 80086c6:	1b3b      	subs	r3, r7, r4
 80086c8:	f023 0303 	bic.w	r3, r3, #3
 80086cc:	3304      	adds	r3, #4
 80086ce:	3401      	adds	r4, #1
 80086d0:	3e03      	subs	r6, #3
 80086d2:	42b4      	cmp	r4, r6
 80086d4:	bf88      	it	hi
 80086d6:	2304      	movhi	r3, #4
 80086d8:	2200      	movs	r2, #0
 80086da:	4443      	add	r3, r8
 80086dc:	f843 2b04 	str.w	r2, [r3], #4
 80086e0:	429f      	cmp	r7, r3
 80086e2:	d2fb      	bcs.n	80086dc <__hexnan+0xcc>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	b91b      	cbnz	r3, 80086f0 <__hexnan+0xe0>
 80086e8:	4547      	cmp	r7, r8
 80086ea:	d127      	bne.n	800873c <__hexnan+0x12c>
 80086ec:	2301      	movs	r3, #1
 80086ee:	603b      	str	r3, [r7, #0]
 80086f0:	2005      	movs	r0, #5
 80086f2:	e026      	b.n	8008742 <__hexnan+0x132>
 80086f4:	3501      	adds	r5, #1
 80086f6:	2d08      	cmp	r5, #8
 80086f8:	f10b 0b01 	add.w	fp, fp, #1
 80086fc:	dd06      	ble.n	800870c <__hexnan+0xfc>
 80086fe:	4544      	cmp	r4, r8
 8008700:	d9c3      	bls.n	800868a <__hexnan+0x7a>
 8008702:	2300      	movs	r3, #0
 8008704:	2501      	movs	r5, #1
 8008706:	f844 3c04 	str.w	r3, [r4, #-4]
 800870a:	3c04      	subs	r4, #4
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	f000 000f 	and.w	r0, r0, #15
 8008712:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008716:	6022      	str	r2, [r4, #0]
 8008718:	e7b7      	b.n	800868a <__hexnan+0x7a>
 800871a:	2508      	movs	r5, #8
 800871c:	e7b5      	b.n	800868a <__hexnan+0x7a>
 800871e:	9b01      	ldr	r3, [sp, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0df      	beq.n	80086e4 <__hexnan+0xd4>
 8008724:	f04f 32ff 	mov.w	r2, #4294967295
 8008728:	f1c3 0320 	rsb	r3, r3, #32
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
 8008730:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008734:	401a      	ands	r2, r3
 8008736:	f846 2c04 	str.w	r2, [r6, #-4]
 800873a:	e7d3      	b.n	80086e4 <__hexnan+0xd4>
 800873c:	3f04      	subs	r7, #4
 800873e:	e7d1      	b.n	80086e4 <__hexnan+0xd4>
 8008740:	2004      	movs	r0, #4
 8008742:	b007      	add	sp, #28
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008748 <_localeconv_r>:
 8008748:	4800      	ldr	r0, [pc, #0]	; (800874c <_localeconv_r+0x4>)
 800874a:	4770      	bx	lr
 800874c:	20000174 	.word	0x20000174

08008750 <malloc>:
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <malloc+0xc>)
 8008752:	4601      	mov	r1, r0
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	f000 bd43 	b.w	80091e0 <_malloc_r>
 800875a:	bf00      	nop
 800875c:	2000001c 	.word	0x2000001c

08008760 <__ascii_mbtowc>:
 8008760:	b082      	sub	sp, #8
 8008762:	b901      	cbnz	r1, 8008766 <__ascii_mbtowc+0x6>
 8008764:	a901      	add	r1, sp, #4
 8008766:	b142      	cbz	r2, 800877a <__ascii_mbtowc+0x1a>
 8008768:	b14b      	cbz	r3, 800877e <__ascii_mbtowc+0x1e>
 800876a:	7813      	ldrb	r3, [r2, #0]
 800876c:	600b      	str	r3, [r1, #0]
 800876e:	7812      	ldrb	r2, [r2, #0]
 8008770:	1e10      	subs	r0, r2, #0
 8008772:	bf18      	it	ne
 8008774:	2001      	movne	r0, #1
 8008776:	b002      	add	sp, #8
 8008778:	4770      	bx	lr
 800877a:	4610      	mov	r0, r2
 800877c:	e7fb      	b.n	8008776 <__ascii_mbtowc+0x16>
 800877e:	f06f 0001 	mvn.w	r0, #1
 8008782:	e7f8      	b.n	8008776 <__ascii_mbtowc+0x16>

08008784 <memchr>:
 8008784:	4603      	mov	r3, r0
 8008786:	b510      	push	{r4, lr}
 8008788:	b2c9      	uxtb	r1, r1
 800878a:	4402      	add	r2, r0
 800878c:	4293      	cmp	r3, r2
 800878e:	4618      	mov	r0, r3
 8008790:	d101      	bne.n	8008796 <memchr+0x12>
 8008792:	2000      	movs	r0, #0
 8008794:	e003      	b.n	800879e <memchr+0x1a>
 8008796:	7804      	ldrb	r4, [r0, #0]
 8008798:	3301      	adds	r3, #1
 800879a:	428c      	cmp	r4, r1
 800879c:	d1f6      	bne.n	800878c <memchr+0x8>
 800879e:	bd10      	pop	{r4, pc}

080087a0 <memcpy>:
 80087a0:	440a      	add	r2, r1
 80087a2:	4291      	cmp	r1, r2
 80087a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087a8:	d100      	bne.n	80087ac <memcpy+0xc>
 80087aa:	4770      	bx	lr
 80087ac:	b510      	push	{r4, lr}
 80087ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087b2:	4291      	cmp	r1, r2
 80087b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087b8:	d1f9      	bne.n	80087ae <memcpy+0xe>
 80087ba:	bd10      	pop	{r4, pc}

080087bc <_Balloc>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087c0:	4604      	mov	r4, r0
 80087c2:	460d      	mov	r5, r1
 80087c4:	b976      	cbnz	r6, 80087e4 <_Balloc+0x28>
 80087c6:	2010      	movs	r0, #16
 80087c8:	f7ff ffc2 	bl	8008750 <malloc>
 80087cc:	4602      	mov	r2, r0
 80087ce:	6260      	str	r0, [r4, #36]	; 0x24
 80087d0:	b920      	cbnz	r0, 80087dc <_Balloc+0x20>
 80087d2:	2166      	movs	r1, #102	; 0x66
 80087d4:	4b17      	ldr	r3, [pc, #92]	; (8008834 <_Balloc+0x78>)
 80087d6:	4818      	ldr	r0, [pc, #96]	; (8008838 <_Balloc+0x7c>)
 80087d8:	f000 feee 	bl	80095b8 <__assert_func>
 80087dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e0:	6006      	str	r6, [r0, #0]
 80087e2:	60c6      	str	r6, [r0, #12]
 80087e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087e6:	68f3      	ldr	r3, [r6, #12]
 80087e8:	b183      	cbz	r3, 800880c <_Balloc+0x50>
 80087ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087f2:	b9b8      	cbnz	r0, 8008824 <_Balloc+0x68>
 80087f4:	2101      	movs	r1, #1
 80087f6:	fa01 f605 	lsl.w	r6, r1, r5
 80087fa:	1d72      	adds	r2, r6, #5
 80087fc:	4620      	mov	r0, r4
 80087fe:	0092      	lsls	r2, r2, #2
 8008800:	f000 fc94 	bl	800912c <_calloc_r>
 8008804:	b160      	cbz	r0, 8008820 <_Balloc+0x64>
 8008806:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800880a:	e00e      	b.n	800882a <_Balloc+0x6e>
 800880c:	2221      	movs	r2, #33	; 0x21
 800880e:	2104      	movs	r1, #4
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fc8b 	bl	800912c <_calloc_r>
 8008816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008818:	60f0      	str	r0, [r6, #12]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e4      	bne.n	80087ea <_Balloc+0x2e>
 8008820:	2000      	movs	r0, #0
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	6802      	ldr	r2, [r0, #0]
 8008826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800882a:	2300      	movs	r3, #0
 800882c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008830:	e7f7      	b.n	8008822 <_Balloc+0x66>
 8008832:	bf00      	nop
 8008834:	0800a626 	.word	0x0800a626
 8008838:	0800a72c 	.word	0x0800a72c

0800883c <_Bfree>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008840:	4605      	mov	r5, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b976      	cbnz	r6, 8008864 <_Bfree+0x28>
 8008846:	2010      	movs	r0, #16
 8008848:	f7ff ff82 	bl	8008750 <malloc>
 800884c:	4602      	mov	r2, r0
 800884e:	6268      	str	r0, [r5, #36]	; 0x24
 8008850:	b920      	cbnz	r0, 800885c <_Bfree+0x20>
 8008852:	218a      	movs	r1, #138	; 0x8a
 8008854:	4b08      	ldr	r3, [pc, #32]	; (8008878 <_Bfree+0x3c>)
 8008856:	4809      	ldr	r0, [pc, #36]	; (800887c <_Bfree+0x40>)
 8008858:	f000 feae 	bl	80095b8 <__assert_func>
 800885c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008860:	6006      	str	r6, [r0, #0]
 8008862:	60c6      	str	r6, [r0, #12]
 8008864:	b13c      	cbz	r4, 8008876 <_Bfree+0x3a>
 8008866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008868:	6862      	ldr	r2, [r4, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008870:	6021      	str	r1, [r4, #0]
 8008872:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	0800a626 	.word	0x0800a626
 800887c:	0800a72c 	.word	0x0800a72c

08008880 <__multadd>:
 8008880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008884:	4698      	mov	r8, r3
 8008886:	460c      	mov	r4, r1
 8008888:	2300      	movs	r3, #0
 800888a:	690e      	ldr	r6, [r1, #16]
 800888c:	4607      	mov	r7, r0
 800888e:	f101 0014 	add.w	r0, r1, #20
 8008892:	6805      	ldr	r5, [r0, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	b2a9      	uxth	r1, r5
 8008898:	fb02 8101 	mla	r1, r2, r1, r8
 800889c:	0c2d      	lsrs	r5, r5, #16
 800889e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80088a2:	fb02 c505 	mla	r5, r2, r5, ip
 80088a6:	b289      	uxth	r1, r1
 80088a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80088ac:	429e      	cmp	r6, r3
 80088ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80088b2:	f840 1b04 	str.w	r1, [r0], #4
 80088b6:	dcec      	bgt.n	8008892 <__multadd+0x12>
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	d022      	beq.n	8008904 <__multadd+0x84>
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	42b3      	cmp	r3, r6
 80088c2:	dc19      	bgt.n	80088f8 <__multadd+0x78>
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	4638      	mov	r0, r7
 80088c8:	3101      	adds	r1, #1
 80088ca:	f7ff ff77 	bl	80087bc <_Balloc>
 80088ce:	4605      	mov	r5, r0
 80088d0:	b928      	cbnz	r0, 80088de <__multadd+0x5e>
 80088d2:	4602      	mov	r2, r0
 80088d4:	21b5      	movs	r1, #181	; 0xb5
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <__multadd+0x8c>)
 80088d8:	480d      	ldr	r0, [pc, #52]	; (8008910 <__multadd+0x90>)
 80088da:	f000 fe6d 	bl	80095b8 <__assert_func>
 80088de:	6922      	ldr	r2, [r4, #16]
 80088e0:	f104 010c 	add.w	r1, r4, #12
 80088e4:	3202      	adds	r2, #2
 80088e6:	0092      	lsls	r2, r2, #2
 80088e8:	300c      	adds	r0, #12
 80088ea:	f7ff ff59 	bl	80087a0 <memcpy>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7ff ffa3 	bl	800883c <_Bfree>
 80088f6:	462c      	mov	r4, r5
 80088f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80088fc:	3601      	adds	r6, #1
 80088fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8008902:	6126      	str	r6, [r4, #16]
 8008904:	4620      	mov	r0, r4
 8008906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890a:	bf00      	nop
 800890c:	0800a69c 	.word	0x0800a69c
 8008910:	0800a72c 	.word	0x0800a72c

08008914 <__s2b>:
 8008914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008918:	4615      	mov	r5, r2
 800891a:	2209      	movs	r2, #9
 800891c:	461f      	mov	r7, r3
 800891e:	3308      	adds	r3, #8
 8008920:	460c      	mov	r4, r1
 8008922:	fb93 f3f2 	sdiv	r3, r3, r2
 8008926:	4606      	mov	r6, r0
 8008928:	2201      	movs	r2, #1
 800892a:	2100      	movs	r1, #0
 800892c:	429a      	cmp	r2, r3
 800892e:	db09      	blt.n	8008944 <__s2b+0x30>
 8008930:	4630      	mov	r0, r6
 8008932:	f7ff ff43 	bl	80087bc <_Balloc>
 8008936:	b940      	cbnz	r0, 800894a <__s2b+0x36>
 8008938:	4602      	mov	r2, r0
 800893a:	21ce      	movs	r1, #206	; 0xce
 800893c:	4b18      	ldr	r3, [pc, #96]	; (80089a0 <__s2b+0x8c>)
 800893e:	4819      	ldr	r0, [pc, #100]	; (80089a4 <__s2b+0x90>)
 8008940:	f000 fe3a 	bl	80095b8 <__assert_func>
 8008944:	0052      	lsls	r2, r2, #1
 8008946:	3101      	adds	r1, #1
 8008948:	e7f0      	b.n	800892c <__s2b+0x18>
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	2d09      	cmp	r5, #9
 800894e:	6143      	str	r3, [r0, #20]
 8008950:	f04f 0301 	mov.w	r3, #1
 8008954:	6103      	str	r3, [r0, #16]
 8008956:	dd16      	ble.n	8008986 <__s2b+0x72>
 8008958:	f104 0909 	add.w	r9, r4, #9
 800895c:	46c8      	mov	r8, r9
 800895e:	442c      	add	r4, r5
 8008960:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008964:	4601      	mov	r1, r0
 8008966:	220a      	movs	r2, #10
 8008968:	4630      	mov	r0, r6
 800896a:	3b30      	subs	r3, #48	; 0x30
 800896c:	f7ff ff88 	bl	8008880 <__multadd>
 8008970:	45a0      	cmp	r8, r4
 8008972:	d1f5      	bne.n	8008960 <__s2b+0x4c>
 8008974:	f1a5 0408 	sub.w	r4, r5, #8
 8008978:	444c      	add	r4, r9
 800897a:	1b2d      	subs	r5, r5, r4
 800897c:	1963      	adds	r3, r4, r5
 800897e:	42bb      	cmp	r3, r7
 8008980:	db04      	blt.n	800898c <__s2b+0x78>
 8008982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008986:	2509      	movs	r5, #9
 8008988:	340a      	adds	r4, #10
 800898a:	e7f6      	b.n	800897a <__s2b+0x66>
 800898c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008990:	4601      	mov	r1, r0
 8008992:	220a      	movs	r2, #10
 8008994:	4630      	mov	r0, r6
 8008996:	3b30      	subs	r3, #48	; 0x30
 8008998:	f7ff ff72 	bl	8008880 <__multadd>
 800899c:	e7ee      	b.n	800897c <__s2b+0x68>
 800899e:	bf00      	nop
 80089a0:	0800a69c 	.word	0x0800a69c
 80089a4:	0800a72c 	.word	0x0800a72c

080089a8 <__hi0bits>:
 80089a8:	0c02      	lsrs	r2, r0, #16
 80089aa:	0412      	lsls	r2, r2, #16
 80089ac:	4603      	mov	r3, r0
 80089ae:	b9ca      	cbnz	r2, 80089e4 <__hi0bits+0x3c>
 80089b0:	0403      	lsls	r3, r0, #16
 80089b2:	2010      	movs	r0, #16
 80089b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80089b8:	bf04      	itt	eq
 80089ba:	021b      	lsleq	r3, r3, #8
 80089bc:	3008      	addeq	r0, #8
 80089be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80089c2:	bf04      	itt	eq
 80089c4:	011b      	lsleq	r3, r3, #4
 80089c6:	3004      	addeq	r0, #4
 80089c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80089cc:	bf04      	itt	eq
 80089ce:	009b      	lsleq	r3, r3, #2
 80089d0:	3002      	addeq	r0, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	db05      	blt.n	80089e2 <__hi0bits+0x3a>
 80089d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80089da:	f100 0001 	add.w	r0, r0, #1
 80089de:	bf08      	it	eq
 80089e0:	2020      	moveq	r0, #32
 80089e2:	4770      	bx	lr
 80089e4:	2000      	movs	r0, #0
 80089e6:	e7e5      	b.n	80089b4 <__hi0bits+0xc>

080089e8 <__lo0bits>:
 80089e8:	6803      	ldr	r3, [r0, #0]
 80089ea:	4602      	mov	r2, r0
 80089ec:	f013 0007 	ands.w	r0, r3, #7
 80089f0:	d00b      	beq.n	8008a0a <__lo0bits+0x22>
 80089f2:	07d9      	lsls	r1, r3, #31
 80089f4:	d422      	bmi.n	8008a3c <__lo0bits+0x54>
 80089f6:	0798      	lsls	r0, r3, #30
 80089f8:	bf49      	itett	mi
 80089fa:	085b      	lsrmi	r3, r3, #1
 80089fc:	089b      	lsrpl	r3, r3, #2
 80089fe:	2001      	movmi	r0, #1
 8008a00:	6013      	strmi	r3, [r2, #0]
 8008a02:	bf5c      	itt	pl
 8008a04:	2002      	movpl	r0, #2
 8008a06:	6013      	strpl	r3, [r2, #0]
 8008a08:	4770      	bx	lr
 8008a0a:	b299      	uxth	r1, r3
 8008a0c:	b909      	cbnz	r1, 8008a12 <__lo0bits+0x2a>
 8008a0e:	2010      	movs	r0, #16
 8008a10:	0c1b      	lsrs	r3, r3, #16
 8008a12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a16:	bf04      	itt	eq
 8008a18:	0a1b      	lsreq	r3, r3, #8
 8008a1a:	3008      	addeq	r0, #8
 8008a1c:	0719      	lsls	r1, r3, #28
 8008a1e:	bf04      	itt	eq
 8008a20:	091b      	lsreq	r3, r3, #4
 8008a22:	3004      	addeq	r0, #4
 8008a24:	0799      	lsls	r1, r3, #30
 8008a26:	bf04      	itt	eq
 8008a28:	089b      	lsreq	r3, r3, #2
 8008a2a:	3002      	addeq	r0, #2
 8008a2c:	07d9      	lsls	r1, r3, #31
 8008a2e:	d403      	bmi.n	8008a38 <__lo0bits+0x50>
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	f100 0001 	add.w	r0, r0, #1
 8008a36:	d003      	beq.n	8008a40 <__lo0bits+0x58>
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	4770      	bx	lr
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4770      	bx	lr
 8008a40:	2020      	movs	r0, #32
 8008a42:	4770      	bx	lr

08008a44 <__i2b>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	460c      	mov	r4, r1
 8008a48:	2101      	movs	r1, #1
 8008a4a:	f7ff feb7 	bl	80087bc <_Balloc>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	b928      	cbnz	r0, 8008a5e <__i2b+0x1a>
 8008a52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a56:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <__i2b+0x24>)
 8008a58:	4804      	ldr	r0, [pc, #16]	; (8008a6c <__i2b+0x28>)
 8008a5a:	f000 fdad 	bl	80095b8 <__assert_func>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	6144      	str	r4, [r0, #20]
 8008a62:	6103      	str	r3, [r0, #16]
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	0800a69c 	.word	0x0800a69c
 8008a6c:	0800a72c 	.word	0x0800a72c

08008a70 <__multiply>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	4614      	mov	r4, r2
 8008a76:	690a      	ldr	r2, [r1, #16]
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	bfbe      	ittt	lt
 8008a80:	460b      	movlt	r3, r1
 8008a82:	4625      	movlt	r5, r4
 8008a84:	461c      	movlt	r4, r3
 8008a86:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008a8a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a8e:	68ab      	ldr	r3, [r5, #8]
 8008a90:	6869      	ldr	r1, [r5, #4]
 8008a92:	eb0a 0709 	add.w	r7, sl, r9
 8008a96:	42bb      	cmp	r3, r7
 8008a98:	b085      	sub	sp, #20
 8008a9a:	bfb8      	it	lt
 8008a9c:	3101      	addlt	r1, #1
 8008a9e:	f7ff fe8d 	bl	80087bc <_Balloc>
 8008aa2:	b930      	cbnz	r0, 8008ab2 <__multiply+0x42>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	f240 115d 	movw	r1, #349	; 0x15d
 8008aaa:	4b41      	ldr	r3, [pc, #260]	; (8008bb0 <__multiply+0x140>)
 8008aac:	4841      	ldr	r0, [pc, #260]	; (8008bb4 <__multiply+0x144>)
 8008aae:	f000 fd83 	bl	80095b8 <__assert_func>
 8008ab2:	f100 0614 	add.w	r6, r0, #20
 8008ab6:	4633      	mov	r3, r6
 8008ab8:	2200      	movs	r2, #0
 8008aba:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008abe:	4543      	cmp	r3, r8
 8008ac0:	d31e      	bcc.n	8008b00 <__multiply+0x90>
 8008ac2:	f105 0c14 	add.w	ip, r5, #20
 8008ac6:	f104 0314 	add.w	r3, r4, #20
 8008aca:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008ace:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ad2:	9202      	str	r2, [sp, #8]
 8008ad4:	ebac 0205 	sub.w	r2, ip, r5
 8008ad8:	3a15      	subs	r2, #21
 8008ada:	f022 0203 	bic.w	r2, r2, #3
 8008ade:	3204      	adds	r2, #4
 8008ae0:	f105 0115 	add.w	r1, r5, #21
 8008ae4:	458c      	cmp	ip, r1
 8008ae6:	bf38      	it	cc
 8008ae8:	2204      	movcc	r2, #4
 8008aea:	9201      	str	r2, [sp, #4]
 8008aec:	9a02      	ldr	r2, [sp, #8]
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d808      	bhi.n	8008b06 <__multiply+0x96>
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	dc55      	bgt.n	8008ba4 <__multiply+0x134>
 8008af8:	6107      	str	r7, [r0, #16]
 8008afa:	b005      	add	sp, #20
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	f843 2b04 	str.w	r2, [r3], #4
 8008b04:	e7db      	b.n	8008abe <__multiply+0x4e>
 8008b06:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b0a:	f1ba 0f00 	cmp.w	sl, #0
 8008b0e:	d020      	beq.n	8008b52 <__multiply+0xe2>
 8008b10:	46b1      	mov	r9, r6
 8008b12:	2200      	movs	r2, #0
 8008b14:	f105 0e14 	add.w	lr, r5, #20
 8008b18:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b1c:	f8d9 b000 	ldr.w	fp, [r9]
 8008b20:	b2a1      	uxth	r1, r4
 8008b22:	fa1f fb8b 	uxth.w	fp, fp
 8008b26:	fb0a b101 	mla	r1, sl, r1, fp
 8008b2a:	4411      	add	r1, r2
 8008b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b30:	0c24      	lsrs	r4, r4, #16
 8008b32:	0c12      	lsrs	r2, r2, #16
 8008b34:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b38:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b3c:	b289      	uxth	r1, r1
 8008b3e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b42:	45f4      	cmp	ip, lr
 8008b44:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b48:	f849 1b04 	str.w	r1, [r9], #4
 8008b4c:	d8e4      	bhi.n	8008b18 <__multiply+0xa8>
 8008b4e:	9901      	ldr	r1, [sp, #4]
 8008b50:	5072      	str	r2, [r6, r1]
 8008b52:	9a03      	ldr	r2, [sp, #12]
 8008b54:	3304      	adds	r3, #4
 8008b56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b5a:	f1b9 0f00 	cmp.w	r9, #0
 8008b5e:	d01f      	beq.n	8008ba0 <__multiply+0x130>
 8008b60:	46b6      	mov	lr, r6
 8008b62:	f04f 0a00 	mov.w	sl, #0
 8008b66:	6834      	ldr	r4, [r6, #0]
 8008b68:	f105 0114 	add.w	r1, r5, #20
 8008b6c:	880a      	ldrh	r2, [r1, #0]
 8008b6e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b72:	b2a4      	uxth	r4, r4
 8008b74:	fb09 b202 	mla	r2, r9, r2, fp
 8008b78:	4492      	add	sl, r2
 8008b7a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008b7e:	f84e 4b04 	str.w	r4, [lr], #4
 8008b82:	f851 4b04 	ldr.w	r4, [r1], #4
 8008b86:	f8be 2000 	ldrh.w	r2, [lr]
 8008b8a:	0c24      	lsrs	r4, r4, #16
 8008b8c:	fb09 2404 	mla	r4, r9, r4, r2
 8008b90:	458c      	cmp	ip, r1
 8008b92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008b96:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b9a:	d8e7      	bhi.n	8008b6c <__multiply+0xfc>
 8008b9c:	9a01      	ldr	r2, [sp, #4]
 8008b9e:	50b4      	str	r4, [r6, r2]
 8008ba0:	3604      	adds	r6, #4
 8008ba2:	e7a3      	b.n	8008aec <__multiply+0x7c>
 8008ba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1a5      	bne.n	8008af8 <__multiply+0x88>
 8008bac:	3f01      	subs	r7, #1
 8008bae:	e7a1      	b.n	8008af4 <__multiply+0x84>
 8008bb0:	0800a69c 	.word	0x0800a69c
 8008bb4:	0800a72c 	.word	0x0800a72c

08008bb8 <__pow5mult>:
 8008bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	4615      	mov	r5, r2
 8008bbe:	f012 0203 	ands.w	r2, r2, #3
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	460f      	mov	r7, r1
 8008bc6:	d007      	beq.n	8008bd8 <__pow5mult+0x20>
 8008bc8:	4c25      	ldr	r4, [pc, #148]	; (8008c60 <__pow5mult+0xa8>)
 8008bca:	3a01      	subs	r2, #1
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bd2:	f7ff fe55 	bl	8008880 <__multadd>
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	10ad      	asrs	r5, r5, #2
 8008bda:	d03d      	beq.n	8008c58 <__pow5mult+0xa0>
 8008bdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bde:	b97c      	cbnz	r4, 8008c00 <__pow5mult+0x48>
 8008be0:	2010      	movs	r0, #16
 8008be2:	f7ff fdb5 	bl	8008750 <malloc>
 8008be6:	4602      	mov	r2, r0
 8008be8:	6270      	str	r0, [r6, #36]	; 0x24
 8008bea:	b928      	cbnz	r0, 8008bf8 <__pow5mult+0x40>
 8008bec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bf0:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <__pow5mult+0xac>)
 8008bf2:	481d      	ldr	r0, [pc, #116]	; (8008c68 <__pow5mult+0xb0>)
 8008bf4:	f000 fce0 	bl	80095b8 <__assert_func>
 8008bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bfc:	6004      	str	r4, [r0, #0]
 8008bfe:	60c4      	str	r4, [r0, #12]
 8008c00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c08:	b94c      	cbnz	r4, 8008c1e <__pow5mult+0x66>
 8008c0a:	f240 2171 	movw	r1, #625	; 0x271
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7ff ff18 	bl	8008a44 <__i2b>
 8008c14:	2300      	movs	r3, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c1c:	6003      	str	r3, [r0, #0]
 8008c1e:	f04f 0900 	mov.w	r9, #0
 8008c22:	07eb      	lsls	r3, r5, #31
 8008c24:	d50a      	bpl.n	8008c3c <__pow5mult+0x84>
 8008c26:	4639      	mov	r1, r7
 8008c28:	4622      	mov	r2, r4
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7ff ff20 	bl	8008a70 <__multiply>
 8008c30:	4680      	mov	r8, r0
 8008c32:	4639      	mov	r1, r7
 8008c34:	4630      	mov	r0, r6
 8008c36:	f7ff fe01 	bl	800883c <_Bfree>
 8008c3a:	4647      	mov	r7, r8
 8008c3c:	106d      	asrs	r5, r5, #1
 8008c3e:	d00b      	beq.n	8008c58 <__pow5mult+0xa0>
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	b938      	cbnz	r0, 8008c54 <__pow5mult+0x9c>
 8008c44:	4622      	mov	r2, r4
 8008c46:	4621      	mov	r1, r4
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff ff11 	bl	8008a70 <__multiply>
 8008c4e:	6020      	str	r0, [r4, #0]
 8008c50:	f8c0 9000 	str.w	r9, [r0]
 8008c54:	4604      	mov	r4, r0
 8008c56:	e7e4      	b.n	8008c22 <__pow5mult+0x6a>
 8008c58:	4638      	mov	r0, r7
 8008c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c5e:	bf00      	nop
 8008c60:	0800a880 	.word	0x0800a880
 8008c64:	0800a626 	.word	0x0800a626
 8008c68:	0800a72c 	.word	0x0800a72c

08008c6c <__lshift>:
 8008c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c70:	460c      	mov	r4, r1
 8008c72:	4607      	mov	r7, r0
 8008c74:	4691      	mov	r9, r2
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	6849      	ldr	r1, [r1, #4]
 8008c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c84:	f108 0601 	add.w	r6, r8, #1
 8008c88:	42b3      	cmp	r3, r6
 8008c8a:	db0b      	blt.n	8008ca4 <__lshift+0x38>
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	f7ff fd95 	bl	80087bc <_Balloc>
 8008c92:	4605      	mov	r5, r0
 8008c94:	b948      	cbnz	r0, 8008caa <__lshift+0x3e>
 8008c96:	4602      	mov	r2, r0
 8008c98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c9c:	4b27      	ldr	r3, [pc, #156]	; (8008d3c <__lshift+0xd0>)
 8008c9e:	4828      	ldr	r0, [pc, #160]	; (8008d40 <__lshift+0xd4>)
 8008ca0:	f000 fc8a 	bl	80095b8 <__assert_func>
 8008ca4:	3101      	adds	r1, #1
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	e7ee      	b.n	8008c88 <__lshift+0x1c>
 8008caa:	2300      	movs	r3, #0
 8008cac:	f100 0114 	add.w	r1, r0, #20
 8008cb0:	f100 0210 	add.w	r2, r0, #16
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	4553      	cmp	r3, sl
 8008cb8:	db33      	blt.n	8008d22 <__lshift+0xb6>
 8008cba:	6920      	ldr	r0, [r4, #16]
 8008cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cc0:	f104 0314 	add.w	r3, r4, #20
 8008cc4:	f019 091f 	ands.w	r9, r9, #31
 8008cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cd0:	d02b      	beq.n	8008d2a <__lshift+0xbe>
 8008cd2:	468a      	mov	sl, r1
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	fa00 f009 	lsl.w	r0, r0, r9
 8008ce0:	4302      	orrs	r2, r0
 8008ce2:	f84a 2b04 	str.w	r2, [sl], #4
 8008ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cea:	459c      	cmp	ip, r3
 8008cec:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cf0:	d8f3      	bhi.n	8008cda <__lshift+0x6e>
 8008cf2:	ebac 0304 	sub.w	r3, ip, r4
 8008cf6:	3b15      	subs	r3, #21
 8008cf8:	f023 0303 	bic.w	r3, r3, #3
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	f104 0015 	add.w	r0, r4, #21
 8008d02:	4584      	cmp	ip, r0
 8008d04:	bf38      	it	cc
 8008d06:	2304      	movcc	r3, #4
 8008d08:	50ca      	str	r2, [r1, r3]
 8008d0a:	b10a      	cbz	r2, 8008d10 <__lshift+0xa4>
 8008d0c:	f108 0602 	add.w	r6, r8, #2
 8008d10:	3e01      	subs	r6, #1
 8008d12:	4638      	mov	r0, r7
 8008d14:	4621      	mov	r1, r4
 8008d16:	612e      	str	r6, [r5, #16]
 8008d18:	f7ff fd90 	bl	800883c <_Bfree>
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d26:	3301      	adds	r3, #1
 8008d28:	e7c5      	b.n	8008cb6 <__lshift+0x4a>
 8008d2a:	3904      	subs	r1, #4
 8008d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d30:	459c      	cmp	ip, r3
 8008d32:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d36:	d8f9      	bhi.n	8008d2c <__lshift+0xc0>
 8008d38:	e7ea      	b.n	8008d10 <__lshift+0xa4>
 8008d3a:	bf00      	nop
 8008d3c:	0800a69c 	.word	0x0800a69c
 8008d40:	0800a72c 	.word	0x0800a72c

08008d44 <__mcmp>:
 8008d44:	4603      	mov	r3, r0
 8008d46:	690a      	ldr	r2, [r1, #16]
 8008d48:	6900      	ldr	r0, [r0, #16]
 8008d4a:	b530      	push	{r4, r5, lr}
 8008d4c:	1a80      	subs	r0, r0, r2
 8008d4e:	d10d      	bne.n	8008d6c <__mcmp+0x28>
 8008d50:	3314      	adds	r3, #20
 8008d52:	3114      	adds	r1, #20
 8008d54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d64:	4295      	cmp	r5, r2
 8008d66:	d002      	beq.n	8008d6e <__mcmp+0x2a>
 8008d68:	d304      	bcc.n	8008d74 <__mcmp+0x30>
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	bd30      	pop	{r4, r5, pc}
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	d3f4      	bcc.n	8008d5c <__mcmp+0x18>
 8008d72:	e7fb      	b.n	8008d6c <__mcmp+0x28>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	e7f8      	b.n	8008d6c <__mcmp+0x28>
	...

08008d7c <__mdiff>:
 8008d7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	460c      	mov	r4, r1
 8008d82:	4606      	mov	r6, r0
 8008d84:	4611      	mov	r1, r2
 8008d86:	4620      	mov	r0, r4
 8008d88:	4692      	mov	sl, r2
 8008d8a:	f7ff ffdb 	bl	8008d44 <__mcmp>
 8008d8e:	1e05      	subs	r5, r0, #0
 8008d90:	d111      	bne.n	8008db6 <__mdiff+0x3a>
 8008d92:	4629      	mov	r1, r5
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff fd11 	bl	80087bc <_Balloc>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	b928      	cbnz	r0, 8008daa <__mdiff+0x2e>
 8008d9e:	f240 2132 	movw	r1, #562	; 0x232
 8008da2:	4b3c      	ldr	r3, [pc, #240]	; (8008e94 <__mdiff+0x118>)
 8008da4:	483c      	ldr	r0, [pc, #240]	; (8008e98 <__mdiff+0x11c>)
 8008da6:	f000 fc07 	bl	80095b8 <__assert_func>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008db0:	4610      	mov	r0, r2
 8008db2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db6:	bfa4      	itt	ge
 8008db8:	4653      	movge	r3, sl
 8008dba:	46a2      	movge	sl, r4
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008dc2:	bfa6      	itte	ge
 8008dc4:	461c      	movge	r4, r3
 8008dc6:	2500      	movge	r5, #0
 8008dc8:	2501      	movlt	r5, #1
 8008dca:	f7ff fcf7 	bl	80087bc <_Balloc>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	b918      	cbnz	r0, 8008dda <__mdiff+0x5e>
 8008dd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dd6:	4b2f      	ldr	r3, [pc, #188]	; (8008e94 <__mdiff+0x118>)
 8008dd8:	e7e4      	b.n	8008da4 <__mdiff+0x28>
 8008dda:	f100 0814 	add.w	r8, r0, #20
 8008dde:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008de2:	60c5      	str	r5, [r0, #12]
 8008de4:	f04f 0c00 	mov.w	ip, #0
 8008de8:	f10a 0514 	add.w	r5, sl, #20
 8008dec:	f10a 0010 	add.w	r0, sl, #16
 8008df0:	46c2      	mov	sl, r8
 8008df2:	6926      	ldr	r6, [r4, #16]
 8008df4:	f104 0914 	add.w	r9, r4, #20
 8008df8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008dfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e00:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008e04:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e08:	fa1f f18b 	uxth.w	r1, fp
 8008e0c:	4461      	add	r1, ip
 8008e0e:	fa1f fc83 	uxth.w	ip, r3
 8008e12:	0c1b      	lsrs	r3, r3, #16
 8008e14:	eba1 010c 	sub.w	r1, r1, ip
 8008e18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e1c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e20:	b289      	uxth	r1, r1
 8008e22:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008e26:	454e      	cmp	r6, r9
 8008e28:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e2c:	f84a 3b04 	str.w	r3, [sl], #4
 8008e30:	d8e6      	bhi.n	8008e00 <__mdiff+0x84>
 8008e32:	1b33      	subs	r3, r6, r4
 8008e34:	3b15      	subs	r3, #21
 8008e36:	f023 0303 	bic.w	r3, r3, #3
 8008e3a:	3415      	adds	r4, #21
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	42a6      	cmp	r6, r4
 8008e40:	bf38      	it	cc
 8008e42:	2304      	movcc	r3, #4
 8008e44:	441d      	add	r5, r3
 8008e46:	4443      	add	r3, r8
 8008e48:	461e      	mov	r6, r3
 8008e4a:	462c      	mov	r4, r5
 8008e4c:	4574      	cmp	r4, lr
 8008e4e:	d30e      	bcc.n	8008e6e <__mdiff+0xf2>
 8008e50:	f10e 0103 	add.w	r1, lr, #3
 8008e54:	1b49      	subs	r1, r1, r5
 8008e56:	f021 0103 	bic.w	r1, r1, #3
 8008e5a:	3d03      	subs	r5, #3
 8008e5c:	45ae      	cmp	lr, r5
 8008e5e:	bf38      	it	cc
 8008e60:	2100      	movcc	r1, #0
 8008e62:	4419      	add	r1, r3
 8008e64:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008e68:	b18b      	cbz	r3, 8008e8e <__mdiff+0x112>
 8008e6a:	6117      	str	r7, [r2, #16]
 8008e6c:	e7a0      	b.n	8008db0 <__mdiff+0x34>
 8008e6e:	f854 8b04 	ldr.w	r8, [r4], #4
 8008e72:	fa1f f188 	uxth.w	r1, r8
 8008e76:	4461      	add	r1, ip
 8008e78:	1408      	asrs	r0, r1, #16
 8008e7a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008e7e:	b289      	uxth	r1, r1
 8008e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e88:	f846 1b04 	str.w	r1, [r6], #4
 8008e8c:	e7de      	b.n	8008e4c <__mdiff+0xd0>
 8008e8e:	3f01      	subs	r7, #1
 8008e90:	e7e8      	b.n	8008e64 <__mdiff+0xe8>
 8008e92:	bf00      	nop
 8008e94:	0800a69c 	.word	0x0800a69c
 8008e98:	0800a72c 	.word	0x0800a72c

08008e9c <__ulp>:
 8008e9c:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <__ulp+0x48>)
 8008e9e:	400b      	ands	r3, r1
 8008ea0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	dd02      	ble.n	8008eae <__ulp+0x12>
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4770      	bx	lr
 8008eae:	425b      	negs	r3, r3
 8008eb0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008eb4:	f04f 0000 	mov.w	r0, #0
 8008eb8:	f04f 0100 	mov.w	r1, #0
 8008ebc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ec0:	da04      	bge.n	8008ecc <__ulp+0x30>
 8008ec2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ec6:	fa43 f102 	asr.w	r1, r3, r2
 8008eca:	4770      	bx	lr
 8008ecc:	f1a2 0314 	sub.w	r3, r2, #20
 8008ed0:	2b1e      	cmp	r3, #30
 8008ed2:	bfd6      	itet	le
 8008ed4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008ed8:	2301      	movgt	r3, #1
 8008eda:	fa22 f303 	lsrle.w	r3, r2, r3
 8008ede:	4618      	mov	r0, r3
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	7ff00000 	.word	0x7ff00000

08008ee8 <__b2d>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	6907      	ldr	r7, [r0, #16]
 8008eee:	f100 0914 	add.w	r9, r0, #20
 8008ef2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008ef6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008efa:	f1a7 0804 	sub.w	r8, r7, #4
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff fd52 	bl	80089a8 <__hi0bits>
 8008f04:	f1c0 0320 	rsb	r3, r0, #32
 8008f08:	280a      	cmp	r0, #10
 8008f0a:	600b      	str	r3, [r1, #0]
 8008f0c:	491f      	ldr	r1, [pc, #124]	; (8008f8c <__b2d+0xa4>)
 8008f0e:	dc17      	bgt.n	8008f40 <__b2d+0x58>
 8008f10:	45c1      	cmp	r9, r8
 8008f12:	bf28      	it	cs
 8008f14:	2200      	movcs	r2, #0
 8008f16:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f1a:	fa26 f30c 	lsr.w	r3, r6, ip
 8008f1e:	bf38      	it	cc
 8008f20:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008f24:	ea43 0501 	orr.w	r5, r3, r1
 8008f28:	f100 0315 	add.w	r3, r0, #21
 8008f2c:	fa06 f303 	lsl.w	r3, r6, r3
 8008f30:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f34:	ea43 0402 	orr.w	r4, r3, r2
 8008f38:	4620      	mov	r0, r4
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f40:	45c1      	cmp	r9, r8
 8008f42:	bf2e      	itee	cs
 8008f44:	2200      	movcs	r2, #0
 8008f46:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008f4a:	f1a7 0808 	subcc.w	r8, r7, #8
 8008f4e:	f1b0 030b 	subs.w	r3, r0, #11
 8008f52:	d016      	beq.n	8008f82 <__b2d+0x9a>
 8008f54:	f1c3 0720 	rsb	r7, r3, #32
 8008f58:	fa22 f107 	lsr.w	r1, r2, r7
 8008f5c:	45c8      	cmp	r8, r9
 8008f5e:	fa06 f603 	lsl.w	r6, r6, r3
 8008f62:	ea46 0601 	orr.w	r6, r6, r1
 8008f66:	bf94      	ite	ls
 8008f68:	2100      	movls	r1, #0
 8008f6a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008f6e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008f72:	fa02 f003 	lsl.w	r0, r2, r3
 8008f76:	40f9      	lsrs	r1, r7
 8008f78:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f7c:	ea40 0401 	orr.w	r4, r0, r1
 8008f80:	e7da      	b.n	8008f38 <__b2d+0x50>
 8008f82:	4614      	mov	r4, r2
 8008f84:	ea46 0501 	orr.w	r5, r6, r1
 8008f88:	e7d6      	b.n	8008f38 <__b2d+0x50>
 8008f8a:	bf00      	nop
 8008f8c:	3ff00000 	.word	0x3ff00000

08008f90 <__d2b>:
 8008f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008f94:	2101      	movs	r1, #1
 8008f96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008f9a:	4690      	mov	r8, r2
 8008f9c:	461d      	mov	r5, r3
 8008f9e:	f7ff fc0d 	bl	80087bc <_Balloc>
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	b930      	cbnz	r0, 8008fb4 <__d2b+0x24>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8008fac:	4b24      	ldr	r3, [pc, #144]	; (8009040 <__d2b+0xb0>)
 8008fae:	4825      	ldr	r0, [pc, #148]	; (8009044 <__d2b+0xb4>)
 8008fb0:	f000 fb02 	bl	80095b8 <__assert_func>
 8008fb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008fb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008fbc:	bb2d      	cbnz	r5, 800900a <__d2b+0x7a>
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	f1b8 0300 	subs.w	r3, r8, #0
 8008fc4:	d026      	beq.n	8009014 <__d2b+0x84>
 8008fc6:	4668      	mov	r0, sp
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	f7ff fd0d 	bl	80089e8 <__lo0bits>
 8008fce:	9900      	ldr	r1, [sp, #0]
 8008fd0:	b1f0      	cbz	r0, 8009010 <__d2b+0x80>
 8008fd2:	9a01      	ldr	r2, [sp, #4]
 8008fd4:	f1c0 0320 	rsb	r3, r0, #32
 8008fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	40c2      	lsrs	r2, r0
 8008fe0:	6163      	str	r3, [r4, #20]
 8008fe2:	9201      	str	r2, [sp, #4]
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bf14      	ite	ne
 8008fea:	2102      	movne	r1, #2
 8008fec:	2101      	moveq	r1, #1
 8008fee:	61a3      	str	r3, [r4, #24]
 8008ff0:	6121      	str	r1, [r4, #16]
 8008ff2:	b1c5      	cbz	r5, 8009026 <__d2b+0x96>
 8008ff4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ff8:	4405      	add	r5, r0
 8008ffa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ffe:	603d      	str	r5, [r7, #0]
 8009000:	6030      	str	r0, [r6, #0]
 8009002:	4620      	mov	r0, r4
 8009004:	b002      	add	sp, #8
 8009006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800900e:	e7d6      	b.n	8008fbe <__d2b+0x2e>
 8009010:	6161      	str	r1, [r4, #20]
 8009012:	e7e7      	b.n	8008fe4 <__d2b+0x54>
 8009014:	a801      	add	r0, sp, #4
 8009016:	f7ff fce7 	bl	80089e8 <__lo0bits>
 800901a:	2101      	movs	r1, #1
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	6121      	str	r1, [r4, #16]
 8009020:	6163      	str	r3, [r4, #20]
 8009022:	3020      	adds	r0, #32
 8009024:	e7e5      	b.n	8008ff2 <__d2b+0x62>
 8009026:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800902a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800902e:	6038      	str	r0, [r7, #0]
 8009030:	6918      	ldr	r0, [r3, #16]
 8009032:	f7ff fcb9 	bl	80089a8 <__hi0bits>
 8009036:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800903a:	6031      	str	r1, [r6, #0]
 800903c:	e7e1      	b.n	8009002 <__d2b+0x72>
 800903e:	bf00      	nop
 8009040:	0800a69c 	.word	0x0800a69c
 8009044:	0800a72c 	.word	0x0800a72c

08009048 <__ratio>:
 8009048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	4688      	mov	r8, r1
 800904e:	4669      	mov	r1, sp
 8009050:	4681      	mov	r9, r0
 8009052:	f7ff ff49 	bl	8008ee8 <__b2d>
 8009056:	460f      	mov	r7, r1
 8009058:	4604      	mov	r4, r0
 800905a:	460d      	mov	r5, r1
 800905c:	4640      	mov	r0, r8
 800905e:	a901      	add	r1, sp, #4
 8009060:	f7ff ff42 	bl	8008ee8 <__b2d>
 8009064:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009068:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800906c:	468b      	mov	fp, r1
 800906e:	eba3 0c02 	sub.w	ip, r3, r2
 8009072:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009076:	1a9b      	subs	r3, r3, r2
 8009078:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800907c:	2b00      	cmp	r3, #0
 800907e:	bfd5      	itete	le
 8009080:	460a      	movle	r2, r1
 8009082:	462a      	movgt	r2, r5
 8009084:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009088:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800908c:	bfd8      	it	le
 800908e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009092:	465b      	mov	r3, fp
 8009094:	4602      	mov	r2, r0
 8009096:	4639      	mov	r1, r7
 8009098:	4620      	mov	r0, r4
 800909a:	f7f7 fb47 	bl	800072c <__aeabi_ddiv>
 800909e:	b003      	add	sp, #12
 80090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090a4 <__copybits>:
 80090a4:	3901      	subs	r1, #1
 80090a6:	b570      	push	{r4, r5, r6, lr}
 80090a8:	1149      	asrs	r1, r1, #5
 80090aa:	6914      	ldr	r4, [r2, #16]
 80090ac:	3101      	adds	r1, #1
 80090ae:	f102 0314 	add.w	r3, r2, #20
 80090b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090ba:	1f05      	subs	r5, r0, #4
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d30c      	bcc.n	80090da <__copybits+0x36>
 80090c0:	1aa3      	subs	r3, r4, r2
 80090c2:	3b11      	subs	r3, #17
 80090c4:	f023 0303 	bic.w	r3, r3, #3
 80090c8:	3211      	adds	r2, #17
 80090ca:	42a2      	cmp	r2, r4
 80090cc:	bf88      	it	hi
 80090ce:	2300      	movhi	r3, #0
 80090d0:	4418      	add	r0, r3
 80090d2:	2300      	movs	r3, #0
 80090d4:	4288      	cmp	r0, r1
 80090d6:	d305      	bcc.n	80090e4 <__copybits+0x40>
 80090d8:	bd70      	pop	{r4, r5, r6, pc}
 80090da:	f853 6b04 	ldr.w	r6, [r3], #4
 80090de:	f845 6f04 	str.w	r6, [r5, #4]!
 80090e2:	e7eb      	b.n	80090bc <__copybits+0x18>
 80090e4:	f840 3b04 	str.w	r3, [r0], #4
 80090e8:	e7f4      	b.n	80090d4 <__copybits+0x30>

080090ea <__any_on>:
 80090ea:	f100 0214 	add.w	r2, r0, #20
 80090ee:	6900      	ldr	r0, [r0, #16]
 80090f0:	114b      	asrs	r3, r1, #5
 80090f2:	4298      	cmp	r0, r3
 80090f4:	b510      	push	{r4, lr}
 80090f6:	db11      	blt.n	800911c <__any_on+0x32>
 80090f8:	dd0a      	ble.n	8009110 <__any_on+0x26>
 80090fa:	f011 011f 	ands.w	r1, r1, #31
 80090fe:	d007      	beq.n	8009110 <__any_on+0x26>
 8009100:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009104:	fa24 f001 	lsr.w	r0, r4, r1
 8009108:	fa00 f101 	lsl.w	r1, r0, r1
 800910c:	428c      	cmp	r4, r1
 800910e:	d10b      	bne.n	8009128 <__any_on+0x3e>
 8009110:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009114:	4293      	cmp	r3, r2
 8009116:	d803      	bhi.n	8009120 <__any_on+0x36>
 8009118:	2000      	movs	r0, #0
 800911a:	bd10      	pop	{r4, pc}
 800911c:	4603      	mov	r3, r0
 800911e:	e7f7      	b.n	8009110 <__any_on+0x26>
 8009120:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009124:	2900      	cmp	r1, #0
 8009126:	d0f5      	beq.n	8009114 <__any_on+0x2a>
 8009128:	2001      	movs	r0, #1
 800912a:	e7f6      	b.n	800911a <__any_on+0x30>

0800912c <_calloc_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	fb02 f501 	mul.w	r5, r2, r1
 8009132:	4629      	mov	r1, r5
 8009134:	f000 f854 	bl	80091e0 <_malloc_r>
 8009138:	4604      	mov	r4, r0
 800913a:	b118      	cbz	r0, 8009144 <_calloc_r+0x18>
 800913c:	462a      	mov	r2, r5
 800913e:	2100      	movs	r1, #0
 8009140:	f7fc fbde 	bl	8005900 <memset>
 8009144:	4620      	mov	r0, r4
 8009146:	bd38      	pop	{r3, r4, r5, pc}

08009148 <_free_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4605      	mov	r5, r0
 800914c:	2900      	cmp	r1, #0
 800914e:	d043      	beq.n	80091d8 <_free_r+0x90>
 8009150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009154:	1f0c      	subs	r4, r1, #4
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfb8      	it	lt
 800915a:	18e4      	addlt	r4, r4, r3
 800915c:	f000 fa76 	bl	800964c <__malloc_lock>
 8009160:	4a1e      	ldr	r2, [pc, #120]	; (80091dc <_free_r+0x94>)
 8009162:	6813      	ldr	r3, [r2, #0]
 8009164:	4610      	mov	r0, r2
 8009166:	b933      	cbnz	r3, 8009176 <_free_r+0x2e>
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	6014      	str	r4, [r2, #0]
 800916c:	4628      	mov	r0, r5
 800916e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009172:	f000 ba71 	b.w	8009658 <__malloc_unlock>
 8009176:	42a3      	cmp	r3, r4
 8009178:	d90a      	bls.n	8009190 <_free_r+0x48>
 800917a:	6821      	ldr	r1, [r4, #0]
 800917c:	1862      	adds	r2, r4, r1
 800917e:	4293      	cmp	r3, r2
 8009180:	bf01      	itttt	eq
 8009182:	681a      	ldreq	r2, [r3, #0]
 8009184:	685b      	ldreq	r3, [r3, #4]
 8009186:	1852      	addeq	r2, r2, r1
 8009188:	6022      	streq	r2, [r4, #0]
 800918a:	6063      	str	r3, [r4, #4]
 800918c:	6004      	str	r4, [r0, #0]
 800918e:	e7ed      	b.n	800916c <_free_r+0x24>
 8009190:	461a      	mov	r2, r3
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	b10b      	cbz	r3, 800919a <_free_r+0x52>
 8009196:	42a3      	cmp	r3, r4
 8009198:	d9fa      	bls.n	8009190 <_free_r+0x48>
 800919a:	6811      	ldr	r1, [r2, #0]
 800919c:	1850      	adds	r0, r2, r1
 800919e:	42a0      	cmp	r0, r4
 80091a0:	d10b      	bne.n	80091ba <_free_r+0x72>
 80091a2:	6820      	ldr	r0, [r4, #0]
 80091a4:	4401      	add	r1, r0
 80091a6:	1850      	adds	r0, r2, r1
 80091a8:	4283      	cmp	r3, r0
 80091aa:	6011      	str	r1, [r2, #0]
 80091ac:	d1de      	bne.n	800916c <_free_r+0x24>
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	4401      	add	r1, r0
 80091b4:	6011      	str	r1, [r2, #0]
 80091b6:	6053      	str	r3, [r2, #4]
 80091b8:	e7d8      	b.n	800916c <_free_r+0x24>
 80091ba:	d902      	bls.n	80091c2 <_free_r+0x7a>
 80091bc:	230c      	movs	r3, #12
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	e7d4      	b.n	800916c <_free_r+0x24>
 80091c2:	6820      	ldr	r0, [r4, #0]
 80091c4:	1821      	adds	r1, r4, r0
 80091c6:	428b      	cmp	r3, r1
 80091c8:	bf01      	itttt	eq
 80091ca:	6819      	ldreq	r1, [r3, #0]
 80091cc:	685b      	ldreq	r3, [r3, #4]
 80091ce:	1809      	addeq	r1, r1, r0
 80091d0:	6021      	streq	r1, [r4, #0]
 80091d2:	6063      	str	r3, [r4, #4]
 80091d4:	6054      	str	r4, [r2, #4]
 80091d6:	e7c9      	b.n	800916c <_free_r+0x24>
 80091d8:	bd38      	pop	{r3, r4, r5, pc}
 80091da:	bf00      	nop
 80091dc:	200002c4 	.word	0x200002c4

080091e0 <_malloc_r>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	1ccd      	adds	r5, r1, #3
 80091e4:	f025 0503 	bic.w	r5, r5, #3
 80091e8:	3508      	adds	r5, #8
 80091ea:	2d0c      	cmp	r5, #12
 80091ec:	bf38      	it	cc
 80091ee:	250c      	movcc	r5, #12
 80091f0:	2d00      	cmp	r5, #0
 80091f2:	4606      	mov	r6, r0
 80091f4:	db01      	blt.n	80091fa <_malloc_r+0x1a>
 80091f6:	42a9      	cmp	r1, r5
 80091f8:	d903      	bls.n	8009202 <_malloc_r+0x22>
 80091fa:	230c      	movs	r3, #12
 80091fc:	6033      	str	r3, [r6, #0]
 80091fe:	2000      	movs	r0, #0
 8009200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009202:	f000 fa23 	bl	800964c <__malloc_lock>
 8009206:	4921      	ldr	r1, [pc, #132]	; (800928c <_malloc_r+0xac>)
 8009208:	680a      	ldr	r2, [r1, #0]
 800920a:	4614      	mov	r4, r2
 800920c:	b99c      	cbnz	r4, 8009236 <_malloc_r+0x56>
 800920e:	4f20      	ldr	r7, [pc, #128]	; (8009290 <_malloc_r+0xb0>)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	b923      	cbnz	r3, 800921e <_malloc_r+0x3e>
 8009214:	4621      	mov	r1, r4
 8009216:	4630      	mov	r0, r6
 8009218:	f000 f99e 	bl	8009558 <_sbrk_r>
 800921c:	6038      	str	r0, [r7, #0]
 800921e:	4629      	mov	r1, r5
 8009220:	4630      	mov	r0, r6
 8009222:	f000 f999 	bl	8009558 <_sbrk_r>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	d123      	bne.n	8009272 <_malloc_r+0x92>
 800922a:	230c      	movs	r3, #12
 800922c:	4630      	mov	r0, r6
 800922e:	6033      	str	r3, [r6, #0]
 8009230:	f000 fa12 	bl	8009658 <__malloc_unlock>
 8009234:	e7e3      	b.n	80091fe <_malloc_r+0x1e>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	1b5b      	subs	r3, r3, r5
 800923a:	d417      	bmi.n	800926c <_malloc_r+0x8c>
 800923c:	2b0b      	cmp	r3, #11
 800923e:	d903      	bls.n	8009248 <_malloc_r+0x68>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	441c      	add	r4, r3
 8009244:	6025      	str	r5, [r4, #0]
 8009246:	e004      	b.n	8009252 <_malloc_r+0x72>
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	42a2      	cmp	r2, r4
 800924c:	bf0c      	ite	eq
 800924e:	600b      	streq	r3, [r1, #0]
 8009250:	6053      	strne	r3, [r2, #4]
 8009252:	4630      	mov	r0, r6
 8009254:	f000 fa00 	bl	8009658 <__malloc_unlock>
 8009258:	f104 000b 	add.w	r0, r4, #11
 800925c:	1d23      	adds	r3, r4, #4
 800925e:	f020 0007 	bic.w	r0, r0, #7
 8009262:	1ac2      	subs	r2, r0, r3
 8009264:	d0cc      	beq.n	8009200 <_malloc_r+0x20>
 8009266:	1a1b      	subs	r3, r3, r0
 8009268:	50a3      	str	r3, [r4, r2]
 800926a:	e7c9      	b.n	8009200 <_malloc_r+0x20>
 800926c:	4622      	mov	r2, r4
 800926e:	6864      	ldr	r4, [r4, #4]
 8009270:	e7cc      	b.n	800920c <_malloc_r+0x2c>
 8009272:	1cc4      	adds	r4, r0, #3
 8009274:	f024 0403 	bic.w	r4, r4, #3
 8009278:	42a0      	cmp	r0, r4
 800927a:	d0e3      	beq.n	8009244 <_malloc_r+0x64>
 800927c:	1a21      	subs	r1, r4, r0
 800927e:	4630      	mov	r0, r6
 8009280:	f000 f96a 	bl	8009558 <_sbrk_r>
 8009284:	3001      	adds	r0, #1
 8009286:	d1dd      	bne.n	8009244 <_malloc_r+0x64>
 8009288:	e7cf      	b.n	800922a <_malloc_r+0x4a>
 800928a:	bf00      	nop
 800928c:	200002c4 	.word	0x200002c4
 8009290:	200002c8 	.word	0x200002c8

08009294 <__ssputs_r>:
 8009294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009298:	688e      	ldr	r6, [r1, #8]
 800929a:	4682      	mov	sl, r0
 800929c:	429e      	cmp	r6, r3
 800929e:	460c      	mov	r4, r1
 80092a0:	4690      	mov	r8, r2
 80092a2:	461f      	mov	r7, r3
 80092a4:	d838      	bhi.n	8009318 <__ssputs_r+0x84>
 80092a6:	898a      	ldrh	r2, [r1, #12]
 80092a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092ac:	d032      	beq.n	8009314 <__ssputs_r+0x80>
 80092ae:	6825      	ldr	r5, [r4, #0]
 80092b0:	6909      	ldr	r1, [r1, #16]
 80092b2:	3301      	adds	r3, #1
 80092b4:	eba5 0901 	sub.w	r9, r5, r1
 80092b8:	6965      	ldr	r5, [r4, #20]
 80092ba:	444b      	add	r3, r9
 80092bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092c4:	106d      	asrs	r5, r5, #1
 80092c6:	429d      	cmp	r5, r3
 80092c8:	bf38      	it	cc
 80092ca:	461d      	movcc	r5, r3
 80092cc:	0553      	lsls	r3, r2, #21
 80092ce:	d531      	bpl.n	8009334 <__ssputs_r+0xa0>
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7ff ff85 	bl	80091e0 <_malloc_r>
 80092d6:	4606      	mov	r6, r0
 80092d8:	b950      	cbnz	r0, 80092f0 <__ssputs_r+0x5c>
 80092da:	230c      	movs	r3, #12
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	f8ca 3000 	str.w	r3, [sl]
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f0:	464a      	mov	r2, r9
 80092f2:	6921      	ldr	r1, [r4, #16]
 80092f4:	f7ff fa54 	bl	80087a0 <memcpy>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	6126      	str	r6, [r4, #16]
 8009306:	444e      	add	r6, r9
 8009308:	6026      	str	r6, [r4, #0]
 800930a:	463e      	mov	r6, r7
 800930c:	6165      	str	r5, [r4, #20]
 800930e:	eba5 0509 	sub.w	r5, r5, r9
 8009312:	60a5      	str	r5, [r4, #8]
 8009314:	42be      	cmp	r6, r7
 8009316:	d900      	bls.n	800931a <__ssputs_r+0x86>
 8009318:	463e      	mov	r6, r7
 800931a:	4632      	mov	r2, r6
 800931c:	4641      	mov	r1, r8
 800931e:	6820      	ldr	r0, [r4, #0]
 8009320:	f000 f97a 	bl	8009618 <memmove>
 8009324:	68a3      	ldr	r3, [r4, #8]
 8009326:	6822      	ldr	r2, [r4, #0]
 8009328:	1b9b      	subs	r3, r3, r6
 800932a:	4432      	add	r2, r6
 800932c:	2000      	movs	r0, #0
 800932e:	60a3      	str	r3, [r4, #8]
 8009330:	6022      	str	r2, [r4, #0]
 8009332:	e7db      	b.n	80092ec <__ssputs_r+0x58>
 8009334:	462a      	mov	r2, r5
 8009336:	f000 f995 	bl	8009664 <_realloc_r>
 800933a:	4606      	mov	r6, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	d1e1      	bne.n	8009304 <__ssputs_r+0x70>
 8009340:	4650      	mov	r0, sl
 8009342:	6921      	ldr	r1, [r4, #16]
 8009344:	f7ff ff00 	bl	8009148 <_free_r>
 8009348:	e7c7      	b.n	80092da <__ssputs_r+0x46>
	...

0800934c <_svfiprintf_r>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	4698      	mov	r8, r3
 8009352:	898b      	ldrh	r3, [r1, #12]
 8009354:	4607      	mov	r7, r0
 8009356:	061b      	lsls	r3, r3, #24
 8009358:	460d      	mov	r5, r1
 800935a:	4614      	mov	r4, r2
 800935c:	b09d      	sub	sp, #116	; 0x74
 800935e:	d50e      	bpl.n	800937e <_svfiprintf_r+0x32>
 8009360:	690b      	ldr	r3, [r1, #16]
 8009362:	b963      	cbnz	r3, 800937e <_svfiprintf_r+0x32>
 8009364:	2140      	movs	r1, #64	; 0x40
 8009366:	f7ff ff3b 	bl	80091e0 <_malloc_r>
 800936a:	6028      	str	r0, [r5, #0]
 800936c:	6128      	str	r0, [r5, #16]
 800936e:	b920      	cbnz	r0, 800937a <_svfiprintf_r+0x2e>
 8009370:	230c      	movs	r3, #12
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	e0d1      	b.n	800951e <_svfiprintf_r+0x1d2>
 800937a:	2340      	movs	r3, #64	; 0x40
 800937c:	616b      	str	r3, [r5, #20]
 800937e:	2300      	movs	r3, #0
 8009380:	9309      	str	r3, [sp, #36]	; 0x24
 8009382:	2320      	movs	r3, #32
 8009384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009388:	2330      	movs	r3, #48	; 0x30
 800938a:	f04f 0901 	mov.w	r9, #1
 800938e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009392:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009538 <_svfiprintf_r+0x1ec>
 8009396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939a:	4623      	mov	r3, r4
 800939c:	469a      	mov	sl, r3
 800939e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a2:	b10a      	cbz	r2, 80093a8 <_svfiprintf_r+0x5c>
 80093a4:	2a25      	cmp	r2, #37	; 0x25
 80093a6:	d1f9      	bne.n	800939c <_svfiprintf_r+0x50>
 80093a8:	ebba 0b04 	subs.w	fp, sl, r4
 80093ac:	d00b      	beq.n	80093c6 <_svfiprintf_r+0x7a>
 80093ae:	465b      	mov	r3, fp
 80093b0:	4622      	mov	r2, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	4638      	mov	r0, r7
 80093b6:	f7ff ff6d 	bl	8009294 <__ssputs_r>
 80093ba:	3001      	adds	r0, #1
 80093bc:	f000 80aa 	beq.w	8009514 <_svfiprintf_r+0x1c8>
 80093c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c2:	445a      	add	r2, fp
 80093c4:	9209      	str	r2, [sp, #36]	; 0x24
 80093c6:	f89a 3000 	ldrb.w	r3, [sl]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 80a2 	beq.w	8009514 <_svfiprintf_r+0x1c8>
 80093d0:	2300      	movs	r3, #0
 80093d2:	f04f 32ff 	mov.w	r2, #4294967295
 80093d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093da:	f10a 0a01 	add.w	sl, sl, #1
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	9307      	str	r3, [sp, #28]
 80093e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093e6:	931a      	str	r3, [sp, #104]	; 0x68
 80093e8:	4654      	mov	r4, sl
 80093ea:	2205      	movs	r2, #5
 80093ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f0:	4851      	ldr	r0, [pc, #324]	; (8009538 <_svfiprintf_r+0x1ec>)
 80093f2:	f7ff f9c7 	bl	8008784 <memchr>
 80093f6:	9a04      	ldr	r2, [sp, #16]
 80093f8:	b9d8      	cbnz	r0, 8009432 <_svfiprintf_r+0xe6>
 80093fa:	06d0      	lsls	r0, r2, #27
 80093fc:	bf44      	itt	mi
 80093fe:	2320      	movmi	r3, #32
 8009400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009404:	0711      	lsls	r1, r2, #28
 8009406:	bf44      	itt	mi
 8009408:	232b      	movmi	r3, #43	; 0x2b
 800940a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800940e:	f89a 3000 	ldrb.w	r3, [sl]
 8009412:	2b2a      	cmp	r3, #42	; 0x2a
 8009414:	d015      	beq.n	8009442 <_svfiprintf_r+0xf6>
 8009416:	4654      	mov	r4, sl
 8009418:	2000      	movs	r0, #0
 800941a:	f04f 0c0a 	mov.w	ip, #10
 800941e:	9a07      	ldr	r2, [sp, #28]
 8009420:	4621      	mov	r1, r4
 8009422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009426:	3b30      	subs	r3, #48	; 0x30
 8009428:	2b09      	cmp	r3, #9
 800942a:	d94e      	bls.n	80094ca <_svfiprintf_r+0x17e>
 800942c:	b1b0      	cbz	r0, 800945c <_svfiprintf_r+0x110>
 800942e:	9207      	str	r2, [sp, #28]
 8009430:	e014      	b.n	800945c <_svfiprintf_r+0x110>
 8009432:	eba0 0308 	sub.w	r3, r0, r8
 8009436:	fa09 f303 	lsl.w	r3, r9, r3
 800943a:	4313      	orrs	r3, r2
 800943c:	46a2      	mov	sl, r4
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	e7d2      	b.n	80093e8 <_svfiprintf_r+0x9c>
 8009442:	9b03      	ldr	r3, [sp, #12]
 8009444:	1d19      	adds	r1, r3, #4
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	9103      	str	r1, [sp, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	bfbb      	ittet	lt
 800944e:	425b      	neglt	r3, r3
 8009450:	f042 0202 	orrlt.w	r2, r2, #2
 8009454:	9307      	strge	r3, [sp, #28]
 8009456:	9307      	strlt	r3, [sp, #28]
 8009458:	bfb8      	it	lt
 800945a:	9204      	strlt	r2, [sp, #16]
 800945c:	7823      	ldrb	r3, [r4, #0]
 800945e:	2b2e      	cmp	r3, #46	; 0x2e
 8009460:	d10c      	bne.n	800947c <_svfiprintf_r+0x130>
 8009462:	7863      	ldrb	r3, [r4, #1]
 8009464:	2b2a      	cmp	r3, #42	; 0x2a
 8009466:	d135      	bne.n	80094d4 <_svfiprintf_r+0x188>
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	3402      	adds	r4, #2
 800946c:	1d1a      	adds	r2, r3, #4
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	9203      	str	r2, [sp, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	bfb8      	it	lt
 8009476:	f04f 33ff 	movlt.w	r3, #4294967295
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009548 <_svfiprintf_r+0x1fc>
 8009480:	2203      	movs	r2, #3
 8009482:	4650      	mov	r0, sl
 8009484:	7821      	ldrb	r1, [r4, #0]
 8009486:	f7ff f97d 	bl	8008784 <memchr>
 800948a:	b140      	cbz	r0, 800949e <_svfiprintf_r+0x152>
 800948c:	2340      	movs	r3, #64	; 0x40
 800948e:	eba0 000a 	sub.w	r0, r0, sl
 8009492:	fa03 f000 	lsl.w	r0, r3, r0
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	3401      	adds	r4, #1
 800949a:	4303      	orrs	r3, r0
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a2:	2206      	movs	r2, #6
 80094a4:	4825      	ldr	r0, [pc, #148]	; (800953c <_svfiprintf_r+0x1f0>)
 80094a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094aa:	f7ff f96b 	bl	8008784 <memchr>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d038      	beq.n	8009524 <_svfiprintf_r+0x1d8>
 80094b2:	4b23      	ldr	r3, [pc, #140]	; (8009540 <_svfiprintf_r+0x1f4>)
 80094b4:	bb1b      	cbnz	r3, 80094fe <_svfiprintf_r+0x1b2>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	3307      	adds	r3, #7
 80094ba:	f023 0307 	bic.w	r3, r3, #7
 80094be:	3308      	adds	r3, #8
 80094c0:	9303      	str	r3, [sp, #12]
 80094c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c4:	4433      	add	r3, r6
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
 80094c8:	e767      	b.n	800939a <_svfiprintf_r+0x4e>
 80094ca:	460c      	mov	r4, r1
 80094cc:	2001      	movs	r0, #1
 80094ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d2:	e7a5      	b.n	8009420 <_svfiprintf_r+0xd4>
 80094d4:	2300      	movs	r3, #0
 80094d6:	f04f 0c0a 	mov.w	ip, #10
 80094da:	4619      	mov	r1, r3
 80094dc:	3401      	adds	r4, #1
 80094de:	9305      	str	r3, [sp, #20]
 80094e0:	4620      	mov	r0, r4
 80094e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094e6:	3a30      	subs	r2, #48	; 0x30
 80094e8:	2a09      	cmp	r2, #9
 80094ea:	d903      	bls.n	80094f4 <_svfiprintf_r+0x1a8>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0c5      	beq.n	800947c <_svfiprintf_r+0x130>
 80094f0:	9105      	str	r1, [sp, #20]
 80094f2:	e7c3      	b.n	800947c <_svfiprintf_r+0x130>
 80094f4:	4604      	mov	r4, r0
 80094f6:	2301      	movs	r3, #1
 80094f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094fc:	e7f0      	b.n	80094e0 <_svfiprintf_r+0x194>
 80094fe:	ab03      	add	r3, sp, #12
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	462a      	mov	r2, r5
 8009504:	4638      	mov	r0, r7
 8009506:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <_svfiprintf_r+0x1f8>)
 8009508:	a904      	add	r1, sp, #16
 800950a:	f7fc fa9f 	bl	8005a4c <_printf_float>
 800950e:	1c42      	adds	r2, r0, #1
 8009510:	4606      	mov	r6, r0
 8009512:	d1d6      	bne.n	80094c2 <_svfiprintf_r+0x176>
 8009514:	89ab      	ldrh	r3, [r5, #12]
 8009516:	065b      	lsls	r3, r3, #25
 8009518:	f53f af2c 	bmi.w	8009374 <_svfiprintf_r+0x28>
 800951c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800951e:	b01d      	add	sp, #116	; 0x74
 8009520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009524:	ab03      	add	r3, sp, #12
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	462a      	mov	r2, r5
 800952a:	4638      	mov	r0, r7
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <_svfiprintf_r+0x1f8>)
 800952e:	a904      	add	r1, sp, #16
 8009530:	f7fc fd28 	bl	8005f84 <_printf_i>
 8009534:	e7eb      	b.n	800950e <_svfiprintf_r+0x1c2>
 8009536:	bf00      	nop
 8009538:	0800a88c 	.word	0x0800a88c
 800953c:	0800a896 	.word	0x0800a896
 8009540:	08005a4d 	.word	0x08005a4d
 8009544:	08009295 	.word	0x08009295
 8009548:	0800a892 	.word	0x0800a892

0800954c <nan>:
 800954c:	2000      	movs	r0, #0
 800954e:	4901      	ldr	r1, [pc, #4]	; (8009554 <nan+0x8>)
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	7ff80000 	.word	0x7ff80000

08009558 <_sbrk_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	2300      	movs	r3, #0
 800955c:	4d05      	ldr	r5, [pc, #20]	; (8009574 <_sbrk_r+0x1c>)
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	602b      	str	r3, [r5, #0]
 8009564:	f7f9 fd5a 	bl	800301c <_sbrk>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_sbrk_r+0x1a>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_sbrk_r+0x1a>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20000520 	.word	0x20000520

08009578 <strncmp>:
 8009578:	b510      	push	{r4, lr}
 800957a:	b16a      	cbz	r2, 8009598 <strncmp+0x20>
 800957c:	3901      	subs	r1, #1
 800957e:	1884      	adds	r4, r0, r2
 8009580:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009584:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009588:	4293      	cmp	r3, r2
 800958a:	d103      	bne.n	8009594 <strncmp+0x1c>
 800958c:	42a0      	cmp	r0, r4
 800958e:	d001      	beq.n	8009594 <strncmp+0x1c>
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f5      	bne.n	8009580 <strncmp+0x8>
 8009594:	1a98      	subs	r0, r3, r2
 8009596:	bd10      	pop	{r4, pc}
 8009598:	4610      	mov	r0, r2
 800959a:	e7fc      	b.n	8009596 <strncmp+0x1e>

0800959c <__ascii_wctomb>:
 800959c:	4603      	mov	r3, r0
 800959e:	4608      	mov	r0, r1
 80095a0:	b141      	cbz	r1, 80095b4 <__ascii_wctomb+0x18>
 80095a2:	2aff      	cmp	r2, #255	; 0xff
 80095a4:	d904      	bls.n	80095b0 <__ascii_wctomb+0x14>
 80095a6:	228a      	movs	r2, #138	; 0x8a
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	4770      	bx	lr
 80095b0:	2001      	movs	r0, #1
 80095b2:	700a      	strb	r2, [r1, #0]
 80095b4:	4770      	bx	lr
	...

080095b8 <__assert_func>:
 80095b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ba:	4614      	mov	r4, r2
 80095bc:	461a      	mov	r2, r3
 80095be:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <__assert_func+0x2c>)
 80095c0:	4605      	mov	r5, r0
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68d8      	ldr	r0, [r3, #12]
 80095c6:	b14c      	cbz	r4, 80095dc <__assert_func+0x24>
 80095c8:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <__assert_func+0x30>)
 80095ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ce:	9100      	str	r1, [sp, #0]
 80095d0:	462b      	mov	r3, r5
 80095d2:	4906      	ldr	r1, [pc, #24]	; (80095ec <__assert_func+0x34>)
 80095d4:	f000 f80e 	bl	80095f4 <fiprintf>
 80095d8:	f000 fa82 	bl	8009ae0 <abort>
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <__assert_func+0x38>)
 80095de:	461c      	mov	r4, r3
 80095e0:	e7f3      	b.n	80095ca <__assert_func+0x12>
 80095e2:	bf00      	nop
 80095e4:	2000001c 	.word	0x2000001c
 80095e8:	0800a89d 	.word	0x0800a89d
 80095ec:	0800a8aa 	.word	0x0800a8aa
 80095f0:	0800a8d8 	.word	0x0800a8d8

080095f4 <fiprintf>:
 80095f4:	b40e      	push	{r1, r2, r3}
 80095f6:	b503      	push	{r0, r1, lr}
 80095f8:	4601      	mov	r1, r0
 80095fa:	ab03      	add	r3, sp, #12
 80095fc:	4805      	ldr	r0, [pc, #20]	; (8009614 <fiprintf+0x20>)
 80095fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009602:	6800      	ldr	r0, [r0, #0]
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	f000 f87b 	bl	8009700 <_vfiprintf_r>
 800960a:	b002      	add	sp, #8
 800960c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009610:	b003      	add	sp, #12
 8009612:	4770      	bx	lr
 8009614:	2000001c 	.word	0x2000001c

08009618 <memmove>:
 8009618:	4288      	cmp	r0, r1
 800961a:	b510      	push	{r4, lr}
 800961c:	eb01 0402 	add.w	r4, r1, r2
 8009620:	d902      	bls.n	8009628 <memmove+0x10>
 8009622:	4284      	cmp	r4, r0
 8009624:	4623      	mov	r3, r4
 8009626:	d807      	bhi.n	8009638 <memmove+0x20>
 8009628:	1e43      	subs	r3, r0, #1
 800962a:	42a1      	cmp	r1, r4
 800962c:	d008      	beq.n	8009640 <memmove+0x28>
 800962e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009636:	e7f8      	b.n	800962a <memmove+0x12>
 8009638:	4601      	mov	r1, r0
 800963a:	4402      	add	r2, r0
 800963c:	428a      	cmp	r2, r1
 800963e:	d100      	bne.n	8009642 <memmove+0x2a>
 8009640:	bd10      	pop	{r4, pc}
 8009642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800964a:	e7f7      	b.n	800963c <memmove+0x24>

0800964c <__malloc_lock>:
 800964c:	4801      	ldr	r0, [pc, #4]	; (8009654 <__malloc_lock+0x8>)
 800964e:	f000 bc07 	b.w	8009e60 <__retarget_lock_acquire_recursive>
 8009652:	bf00      	nop
 8009654:	20000528 	.word	0x20000528

08009658 <__malloc_unlock>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__malloc_unlock+0x8>)
 800965a:	f000 bc02 	b.w	8009e62 <__retarget_lock_release_recursive>
 800965e:	bf00      	nop
 8009660:	20000528 	.word	0x20000528

08009664 <_realloc_r>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	4607      	mov	r7, r0
 8009668:	4614      	mov	r4, r2
 800966a:	460e      	mov	r6, r1
 800966c:	b921      	cbnz	r1, 8009678 <_realloc_r+0x14>
 800966e:	4611      	mov	r1, r2
 8009670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009674:	f7ff bdb4 	b.w	80091e0 <_malloc_r>
 8009678:	b922      	cbnz	r2, 8009684 <_realloc_r+0x20>
 800967a:	f7ff fd65 	bl	8009148 <_free_r>
 800967e:	4625      	mov	r5, r4
 8009680:	4628      	mov	r0, r5
 8009682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009684:	f000 fc52 	bl	8009f2c <_malloc_usable_size_r>
 8009688:	42a0      	cmp	r0, r4
 800968a:	d20f      	bcs.n	80096ac <_realloc_r+0x48>
 800968c:	4621      	mov	r1, r4
 800968e:	4638      	mov	r0, r7
 8009690:	f7ff fda6 	bl	80091e0 <_malloc_r>
 8009694:	4605      	mov	r5, r0
 8009696:	2800      	cmp	r0, #0
 8009698:	d0f2      	beq.n	8009680 <_realloc_r+0x1c>
 800969a:	4631      	mov	r1, r6
 800969c:	4622      	mov	r2, r4
 800969e:	f7ff f87f 	bl	80087a0 <memcpy>
 80096a2:	4631      	mov	r1, r6
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff fd4f 	bl	8009148 <_free_r>
 80096aa:	e7e9      	b.n	8009680 <_realloc_r+0x1c>
 80096ac:	4635      	mov	r5, r6
 80096ae:	e7e7      	b.n	8009680 <_realloc_r+0x1c>

080096b0 <__sfputc_r>:
 80096b0:	6893      	ldr	r3, [r2, #8]
 80096b2:	b410      	push	{r4}
 80096b4:	3b01      	subs	r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	6093      	str	r3, [r2, #8]
 80096ba:	da07      	bge.n	80096cc <__sfputc_r+0x1c>
 80096bc:	6994      	ldr	r4, [r2, #24]
 80096be:	42a3      	cmp	r3, r4
 80096c0:	db01      	blt.n	80096c6 <__sfputc_r+0x16>
 80096c2:	290a      	cmp	r1, #10
 80096c4:	d102      	bne.n	80096cc <__sfputc_r+0x1c>
 80096c6:	bc10      	pop	{r4}
 80096c8:	f000 b94a 	b.w	8009960 <__swbuf_r>
 80096cc:	6813      	ldr	r3, [r2, #0]
 80096ce:	1c58      	adds	r0, r3, #1
 80096d0:	6010      	str	r0, [r2, #0]
 80096d2:	7019      	strb	r1, [r3, #0]
 80096d4:	4608      	mov	r0, r1
 80096d6:	bc10      	pop	{r4}
 80096d8:	4770      	bx	lr

080096da <__sfputs_r>:
 80096da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096dc:	4606      	mov	r6, r0
 80096de:	460f      	mov	r7, r1
 80096e0:	4614      	mov	r4, r2
 80096e2:	18d5      	adds	r5, r2, r3
 80096e4:	42ac      	cmp	r4, r5
 80096e6:	d101      	bne.n	80096ec <__sfputs_r+0x12>
 80096e8:	2000      	movs	r0, #0
 80096ea:	e007      	b.n	80096fc <__sfputs_r+0x22>
 80096ec:	463a      	mov	r2, r7
 80096ee:	4630      	mov	r0, r6
 80096f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f4:	f7ff ffdc 	bl	80096b0 <__sfputc_r>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d1f3      	bne.n	80096e4 <__sfputs_r+0xa>
 80096fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009700 <_vfiprintf_r>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	460d      	mov	r5, r1
 8009706:	4614      	mov	r4, r2
 8009708:	4698      	mov	r8, r3
 800970a:	4606      	mov	r6, r0
 800970c:	b09d      	sub	sp, #116	; 0x74
 800970e:	b118      	cbz	r0, 8009718 <_vfiprintf_r+0x18>
 8009710:	6983      	ldr	r3, [r0, #24]
 8009712:	b90b      	cbnz	r3, 8009718 <_vfiprintf_r+0x18>
 8009714:	f000 fb06 	bl	8009d24 <__sinit>
 8009718:	4b89      	ldr	r3, [pc, #548]	; (8009940 <_vfiprintf_r+0x240>)
 800971a:	429d      	cmp	r5, r3
 800971c:	d11b      	bne.n	8009756 <_vfiprintf_r+0x56>
 800971e:	6875      	ldr	r5, [r6, #4]
 8009720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009722:	07d9      	lsls	r1, r3, #31
 8009724:	d405      	bmi.n	8009732 <_vfiprintf_r+0x32>
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	059a      	lsls	r2, r3, #22
 800972a:	d402      	bmi.n	8009732 <_vfiprintf_r+0x32>
 800972c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800972e:	f000 fb97 	bl	8009e60 <__retarget_lock_acquire_recursive>
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	071b      	lsls	r3, r3, #28
 8009736:	d501      	bpl.n	800973c <_vfiprintf_r+0x3c>
 8009738:	692b      	ldr	r3, [r5, #16]
 800973a:	b9eb      	cbnz	r3, 8009778 <_vfiprintf_r+0x78>
 800973c:	4629      	mov	r1, r5
 800973e:	4630      	mov	r0, r6
 8009740:	f000 f960 	bl	8009a04 <__swsetup_r>
 8009744:	b1c0      	cbz	r0, 8009778 <_vfiprintf_r+0x78>
 8009746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009748:	07dc      	lsls	r4, r3, #31
 800974a:	d50e      	bpl.n	800976a <_vfiprintf_r+0x6a>
 800974c:	f04f 30ff 	mov.w	r0, #4294967295
 8009750:	b01d      	add	sp, #116	; 0x74
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	4b7b      	ldr	r3, [pc, #492]	; (8009944 <_vfiprintf_r+0x244>)
 8009758:	429d      	cmp	r5, r3
 800975a:	d101      	bne.n	8009760 <_vfiprintf_r+0x60>
 800975c:	68b5      	ldr	r5, [r6, #8]
 800975e:	e7df      	b.n	8009720 <_vfiprintf_r+0x20>
 8009760:	4b79      	ldr	r3, [pc, #484]	; (8009948 <_vfiprintf_r+0x248>)
 8009762:	429d      	cmp	r5, r3
 8009764:	bf08      	it	eq
 8009766:	68f5      	ldreq	r5, [r6, #12]
 8009768:	e7da      	b.n	8009720 <_vfiprintf_r+0x20>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	0598      	lsls	r0, r3, #22
 800976e:	d4ed      	bmi.n	800974c <_vfiprintf_r+0x4c>
 8009770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009772:	f000 fb76 	bl	8009e62 <__retarget_lock_release_recursive>
 8009776:	e7e9      	b.n	800974c <_vfiprintf_r+0x4c>
 8009778:	2300      	movs	r3, #0
 800977a:	9309      	str	r3, [sp, #36]	; 0x24
 800977c:	2320      	movs	r3, #32
 800977e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009782:	2330      	movs	r3, #48	; 0x30
 8009784:	f04f 0901 	mov.w	r9, #1
 8009788:	f8cd 800c 	str.w	r8, [sp, #12]
 800978c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800994c <_vfiprintf_r+0x24c>
 8009790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009794:	4623      	mov	r3, r4
 8009796:	469a      	mov	sl, r3
 8009798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800979c:	b10a      	cbz	r2, 80097a2 <_vfiprintf_r+0xa2>
 800979e:	2a25      	cmp	r2, #37	; 0x25
 80097a0:	d1f9      	bne.n	8009796 <_vfiprintf_r+0x96>
 80097a2:	ebba 0b04 	subs.w	fp, sl, r4
 80097a6:	d00b      	beq.n	80097c0 <_vfiprintf_r+0xc0>
 80097a8:	465b      	mov	r3, fp
 80097aa:	4622      	mov	r2, r4
 80097ac:	4629      	mov	r1, r5
 80097ae:	4630      	mov	r0, r6
 80097b0:	f7ff ff93 	bl	80096da <__sfputs_r>
 80097b4:	3001      	adds	r0, #1
 80097b6:	f000 80aa 	beq.w	800990e <_vfiprintf_r+0x20e>
 80097ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097bc:	445a      	add	r2, fp
 80097be:	9209      	str	r2, [sp, #36]	; 0x24
 80097c0:	f89a 3000 	ldrb.w	r3, [sl]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 80a2 	beq.w	800990e <_vfiprintf_r+0x20e>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f04f 32ff 	mov.w	r2, #4294967295
 80097d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097d4:	f10a 0a01 	add.w	sl, sl, #1
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	9307      	str	r3, [sp, #28]
 80097dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097e0:	931a      	str	r3, [sp, #104]	; 0x68
 80097e2:	4654      	mov	r4, sl
 80097e4:	2205      	movs	r2, #5
 80097e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ea:	4858      	ldr	r0, [pc, #352]	; (800994c <_vfiprintf_r+0x24c>)
 80097ec:	f7fe ffca 	bl	8008784 <memchr>
 80097f0:	9a04      	ldr	r2, [sp, #16]
 80097f2:	b9d8      	cbnz	r0, 800982c <_vfiprintf_r+0x12c>
 80097f4:	06d1      	lsls	r1, r2, #27
 80097f6:	bf44      	itt	mi
 80097f8:	2320      	movmi	r3, #32
 80097fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097fe:	0713      	lsls	r3, r2, #28
 8009800:	bf44      	itt	mi
 8009802:	232b      	movmi	r3, #43	; 0x2b
 8009804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009808:	f89a 3000 	ldrb.w	r3, [sl]
 800980c:	2b2a      	cmp	r3, #42	; 0x2a
 800980e:	d015      	beq.n	800983c <_vfiprintf_r+0x13c>
 8009810:	4654      	mov	r4, sl
 8009812:	2000      	movs	r0, #0
 8009814:	f04f 0c0a 	mov.w	ip, #10
 8009818:	9a07      	ldr	r2, [sp, #28]
 800981a:	4621      	mov	r1, r4
 800981c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009820:	3b30      	subs	r3, #48	; 0x30
 8009822:	2b09      	cmp	r3, #9
 8009824:	d94e      	bls.n	80098c4 <_vfiprintf_r+0x1c4>
 8009826:	b1b0      	cbz	r0, 8009856 <_vfiprintf_r+0x156>
 8009828:	9207      	str	r2, [sp, #28]
 800982a:	e014      	b.n	8009856 <_vfiprintf_r+0x156>
 800982c:	eba0 0308 	sub.w	r3, r0, r8
 8009830:	fa09 f303 	lsl.w	r3, r9, r3
 8009834:	4313      	orrs	r3, r2
 8009836:	46a2      	mov	sl, r4
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	e7d2      	b.n	80097e2 <_vfiprintf_r+0xe2>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	1d19      	adds	r1, r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	9103      	str	r1, [sp, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfbb      	ittet	lt
 8009848:	425b      	neglt	r3, r3
 800984a:	f042 0202 	orrlt.w	r2, r2, #2
 800984e:	9307      	strge	r3, [sp, #28]
 8009850:	9307      	strlt	r3, [sp, #28]
 8009852:	bfb8      	it	lt
 8009854:	9204      	strlt	r2, [sp, #16]
 8009856:	7823      	ldrb	r3, [r4, #0]
 8009858:	2b2e      	cmp	r3, #46	; 0x2e
 800985a:	d10c      	bne.n	8009876 <_vfiprintf_r+0x176>
 800985c:	7863      	ldrb	r3, [r4, #1]
 800985e:	2b2a      	cmp	r3, #42	; 0x2a
 8009860:	d135      	bne.n	80098ce <_vfiprintf_r+0x1ce>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	3402      	adds	r4, #2
 8009866:	1d1a      	adds	r2, r3, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	9203      	str	r2, [sp, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	bfb8      	it	lt
 8009870:	f04f 33ff 	movlt.w	r3, #4294967295
 8009874:	9305      	str	r3, [sp, #20]
 8009876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800995c <_vfiprintf_r+0x25c>
 800987a:	2203      	movs	r2, #3
 800987c:	4650      	mov	r0, sl
 800987e:	7821      	ldrb	r1, [r4, #0]
 8009880:	f7fe ff80 	bl	8008784 <memchr>
 8009884:	b140      	cbz	r0, 8009898 <_vfiprintf_r+0x198>
 8009886:	2340      	movs	r3, #64	; 0x40
 8009888:	eba0 000a 	sub.w	r0, r0, sl
 800988c:	fa03 f000 	lsl.w	r0, r3, r0
 8009890:	9b04      	ldr	r3, [sp, #16]
 8009892:	3401      	adds	r4, #1
 8009894:	4303      	orrs	r3, r0
 8009896:	9304      	str	r3, [sp, #16]
 8009898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989c:	2206      	movs	r2, #6
 800989e:	482c      	ldr	r0, [pc, #176]	; (8009950 <_vfiprintf_r+0x250>)
 80098a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098a4:	f7fe ff6e 	bl	8008784 <memchr>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d03f      	beq.n	800992c <_vfiprintf_r+0x22c>
 80098ac:	4b29      	ldr	r3, [pc, #164]	; (8009954 <_vfiprintf_r+0x254>)
 80098ae:	bb1b      	cbnz	r3, 80098f8 <_vfiprintf_r+0x1f8>
 80098b0:	9b03      	ldr	r3, [sp, #12]
 80098b2:	3307      	adds	r3, #7
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	3308      	adds	r3, #8
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098be:	443b      	add	r3, r7
 80098c0:	9309      	str	r3, [sp, #36]	; 0x24
 80098c2:	e767      	b.n	8009794 <_vfiprintf_r+0x94>
 80098c4:	460c      	mov	r4, r1
 80098c6:	2001      	movs	r0, #1
 80098c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098cc:	e7a5      	b.n	800981a <_vfiprintf_r+0x11a>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4619      	mov	r1, r3
 80098d6:	3401      	adds	r4, #1
 80098d8:	9305      	str	r3, [sp, #20]
 80098da:	4620      	mov	r0, r4
 80098dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098e0:	3a30      	subs	r2, #48	; 0x30
 80098e2:	2a09      	cmp	r2, #9
 80098e4:	d903      	bls.n	80098ee <_vfiprintf_r+0x1ee>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0c5      	beq.n	8009876 <_vfiprintf_r+0x176>
 80098ea:	9105      	str	r1, [sp, #20]
 80098ec:	e7c3      	b.n	8009876 <_vfiprintf_r+0x176>
 80098ee:	4604      	mov	r4, r0
 80098f0:	2301      	movs	r3, #1
 80098f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098f6:	e7f0      	b.n	80098da <_vfiprintf_r+0x1da>
 80098f8:	ab03      	add	r3, sp, #12
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	462a      	mov	r2, r5
 80098fe:	4630      	mov	r0, r6
 8009900:	4b15      	ldr	r3, [pc, #84]	; (8009958 <_vfiprintf_r+0x258>)
 8009902:	a904      	add	r1, sp, #16
 8009904:	f7fc f8a2 	bl	8005a4c <_printf_float>
 8009908:	4607      	mov	r7, r0
 800990a:	1c78      	adds	r0, r7, #1
 800990c:	d1d6      	bne.n	80098bc <_vfiprintf_r+0x1bc>
 800990e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009910:	07d9      	lsls	r1, r3, #31
 8009912:	d405      	bmi.n	8009920 <_vfiprintf_r+0x220>
 8009914:	89ab      	ldrh	r3, [r5, #12]
 8009916:	059a      	lsls	r2, r3, #22
 8009918:	d402      	bmi.n	8009920 <_vfiprintf_r+0x220>
 800991a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800991c:	f000 faa1 	bl	8009e62 <__retarget_lock_release_recursive>
 8009920:	89ab      	ldrh	r3, [r5, #12]
 8009922:	065b      	lsls	r3, r3, #25
 8009924:	f53f af12 	bmi.w	800974c <_vfiprintf_r+0x4c>
 8009928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800992a:	e711      	b.n	8009750 <_vfiprintf_r+0x50>
 800992c:	ab03      	add	r3, sp, #12
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	462a      	mov	r2, r5
 8009932:	4630      	mov	r0, r6
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <_vfiprintf_r+0x258>)
 8009936:	a904      	add	r1, sp, #16
 8009938:	f7fc fb24 	bl	8005f84 <_printf_i>
 800993c:	e7e4      	b.n	8009908 <_vfiprintf_r+0x208>
 800993e:	bf00      	nop
 8009940:	0800a8fc 	.word	0x0800a8fc
 8009944:	0800a91c 	.word	0x0800a91c
 8009948:	0800a8dc 	.word	0x0800a8dc
 800994c:	0800a88c 	.word	0x0800a88c
 8009950:	0800a896 	.word	0x0800a896
 8009954:	08005a4d 	.word	0x08005a4d
 8009958:	080096db 	.word	0x080096db
 800995c:	0800a892 	.word	0x0800a892

08009960 <__swbuf_r>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	460e      	mov	r6, r1
 8009964:	4614      	mov	r4, r2
 8009966:	4605      	mov	r5, r0
 8009968:	b118      	cbz	r0, 8009972 <__swbuf_r+0x12>
 800996a:	6983      	ldr	r3, [r0, #24]
 800996c:	b90b      	cbnz	r3, 8009972 <__swbuf_r+0x12>
 800996e:	f000 f9d9 	bl	8009d24 <__sinit>
 8009972:	4b21      	ldr	r3, [pc, #132]	; (80099f8 <__swbuf_r+0x98>)
 8009974:	429c      	cmp	r4, r3
 8009976:	d12b      	bne.n	80099d0 <__swbuf_r+0x70>
 8009978:	686c      	ldr	r4, [r5, #4]
 800997a:	69a3      	ldr	r3, [r4, #24]
 800997c:	60a3      	str	r3, [r4, #8]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	071a      	lsls	r2, r3, #28
 8009982:	d52f      	bpl.n	80099e4 <__swbuf_r+0x84>
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	b36b      	cbz	r3, 80099e4 <__swbuf_r+0x84>
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	b2f6      	uxtb	r6, r6
 800998e:	1ac0      	subs	r0, r0, r3
 8009990:	6963      	ldr	r3, [r4, #20]
 8009992:	4637      	mov	r7, r6
 8009994:	4283      	cmp	r3, r0
 8009996:	dc04      	bgt.n	80099a2 <__swbuf_r+0x42>
 8009998:	4621      	mov	r1, r4
 800999a:	4628      	mov	r0, r5
 800999c:	f000 f92e 	bl	8009bfc <_fflush_r>
 80099a0:	bb30      	cbnz	r0, 80099f0 <__swbuf_r+0x90>
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	3001      	adds	r0, #1
 80099a6:	3b01      	subs	r3, #1
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	6022      	str	r2, [r4, #0]
 80099b0:	701e      	strb	r6, [r3, #0]
 80099b2:	6963      	ldr	r3, [r4, #20]
 80099b4:	4283      	cmp	r3, r0
 80099b6:	d004      	beq.n	80099c2 <__swbuf_r+0x62>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	07db      	lsls	r3, r3, #31
 80099bc:	d506      	bpl.n	80099cc <__swbuf_r+0x6c>
 80099be:	2e0a      	cmp	r6, #10
 80099c0:	d104      	bne.n	80099cc <__swbuf_r+0x6c>
 80099c2:	4621      	mov	r1, r4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f000 f919 	bl	8009bfc <_fflush_r>
 80099ca:	b988      	cbnz	r0, 80099f0 <__swbuf_r+0x90>
 80099cc:	4638      	mov	r0, r7
 80099ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d0:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <__swbuf_r+0x9c>)
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d101      	bne.n	80099da <__swbuf_r+0x7a>
 80099d6:	68ac      	ldr	r4, [r5, #8]
 80099d8:	e7cf      	b.n	800997a <__swbuf_r+0x1a>
 80099da:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <__swbuf_r+0xa0>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	bf08      	it	eq
 80099e0:	68ec      	ldreq	r4, [r5, #12]
 80099e2:	e7ca      	b.n	800997a <__swbuf_r+0x1a>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f80c 	bl	8009a04 <__swsetup_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d0cb      	beq.n	8009988 <__swbuf_r+0x28>
 80099f0:	f04f 37ff 	mov.w	r7, #4294967295
 80099f4:	e7ea      	b.n	80099cc <__swbuf_r+0x6c>
 80099f6:	bf00      	nop
 80099f8:	0800a8fc 	.word	0x0800a8fc
 80099fc:	0800a91c 	.word	0x0800a91c
 8009a00:	0800a8dc 	.word	0x0800a8dc

08009a04 <__swsetup_r>:
 8009a04:	4b32      	ldr	r3, [pc, #200]	; (8009ad0 <__swsetup_r+0xcc>)
 8009a06:	b570      	push	{r4, r5, r6, lr}
 8009a08:	681d      	ldr	r5, [r3, #0]
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	b125      	cbz	r5, 8009a1a <__swsetup_r+0x16>
 8009a10:	69ab      	ldr	r3, [r5, #24]
 8009a12:	b913      	cbnz	r3, 8009a1a <__swsetup_r+0x16>
 8009a14:	4628      	mov	r0, r5
 8009a16:	f000 f985 	bl	8009d24 <__sinit>
 8009a1a:	4b2e      	ldr	r3, [pc, #184]	; (8009ad4 <__swsetup_r+0xd0>)
 8009a1c:	429c      	cmp	r4, r3
 8009a1e:	d10f      	bne.n	8009a40 <__swsetup_r+0x3c>
 8009a20:	686c      	ldr	r4, [r5, #4]
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a28:	0719      	lsls	r1, r3, #28
 8009a2a:	d42c      	bmi.n	8009a86 <__swsetup_r+0x82>
 8009a2c:	06dd      	lsls	r5, r3, #27
 8009a2e:	d411      	bmi.n	8009a54 <__swsetup_r+0x50>
 8009a30:	2309      	movs	r3, #9
 8009a32:	6033      	str	r3, [r6, #0]
 8009a34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	e03e      	b.n	8009abe <__swsetup_r+0xba>
 8009a40:	4b25      	ldr	r3, [pc, #148]	; (8009ad8 <__swsetup_r+0xd4>)
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d101      	bne.n	8009a4a <__swsetup_r+0x46>
 8009a46:	68ac      	ldr	r4, [r5, #8]
 8009a48:	e7eb      	b.n	8009a22 <__swsetup_r+0x1e>
 8009a4a:	4b24      	ldr	r3, [pc, #144]	; (8009adc <__swsetup_r+0xd8>)
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	bf08      	it	eq
 8009a50:	68ec      	ldreq	r4, [r5, #12]
 8009a52:	e7e6      	b.n	8009a22 <__swsetup_r+0x1e>
 8009a54:	0758      	lsls	r0, r3, #29
 8009a56:	d512      	bpl.n	8009a7e <__swsetup_r+0x7a>
 8009a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a5a:	b141      	cbz	r1, 8009a6e <__swsetup_r+0x6a>
 8009a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a60:	4299      	cmp	r1, r3
 8009a62:	d002      	beq.n	8009a6a <__swsetup_r+0x66>
 8009a64:	4630      	mov	r0, r6
 8009a66:	f7ff fb6f 	bl	8009148 <_free_r>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	2300      	movs	r3, #0
 8009a78:	6063      	str	r3, [r4, #4]
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f043 0308 	orr.w	r3, r3, #8
 8009a84:	81a3      	strh	r3, [r4, #12]
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	b94b      	cbnz	r3, 8009a9e <__swsetup_r+0x9a>
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a94:	d003      	beq.n	8009a9e <__swsetup_r+0x9a>
 8009a96:	4621      	mov	r1, r4
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f000 fa07 	bl	8009eac <__smakebuf_r>
 8009a9e:	89a0      	ldrh	r0, [r4, #12]
 8009aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aa4:	f010 0301 	ands.w	r3, r0, #1
 8009aa8:	d00a      	beq.n	8009ac0 <__swsetup_r+0xbc>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60a3      	str	r3, [r4, #8]
 8009aae:	6963      	ldr	r3, [r4, #20]
 8009ab0:	425b      	negs	r3, r3
 8009ab2:	61a3      	str	r3, [r4, #24]
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	b943      	cbnz	r3, 8009aca <__swsetup_r+0xc6>
 8009ab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009abc:	d1ba      	bne.n	8009a34 <__swsetup_r+0x30>
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
 8009ac0:	0781      	lsls	r1, r0, #30
 8009ac2:	bf58      	it	pl
 8009ac4:	6963      	ldrpl	r3, [r4, #20]
 8009ac6:	60a3      	str	r3, [r4, #8]
 8009ac8:	e7f4      	b.n	8009ab4 <__swsetup_r+0xb0>
 8009aca:	2000      	movs	r0, #0
 8009acc:	e7f7      	b.n	8009abe <__swsetup_r+0xba>
 8009ace:	bf00      	nop
 8009ad0:	2000001c 	.word	0x2000001c
 8009ad4:	0800a8fc 	.word	0x0800a8fc
 8009ad8:	0800a91c 	.word	0x0800a91c
 8009adc:	0800a8dc 	.word	0x0800a8dc

08009ae0 <abort>:
 8009ae0:	2006      	movs	r0, #6
 8009ae2:	b508      	push	{r3, lr}
 8009ae4:	f000 fa52 	bl	8009f8c <raise>
 8009ae8:	2001      	movs	r0, #1
 8009aea:	f7f9 fa23 	bl	8002f34 <_exit>
	...

08009af0 <__sflush_r>:
 8009af0:	898a      	ldrh	r2, [r1, #12]
 8009af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af6:	4605      	mov	r5, r0
 8009af8:	0710      	lsls	r0, r2, #28
 8009afa:	460c      	mov	r4, r1
 8009afc:	d458      	bmi.n	8009bb0 <__sflush_r+0xc0>
 8009afe:	684b      	ldr	r3, [r1, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dc05      	bgt.n	8009b10 <__sflush_r+0x20>
 8009b04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dc02      	bgt.n	8009b10 <__sflush_r+0x20>
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	d0f9      	beq.n	8009b0a <__sflush_r+0x1a>
 8009b16:	2300      	movs	r3, #0
 8009b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b1c:	682f      	ldr	r7, [r5, #0]
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	d032      	beq.n	8009b88 <__sflush_r+0x98>
 8009b22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	075a      	lsls	r2, r3, #29
 8009b28:	d505      	bpl.n	8009b36 <__sflush_r+0x46>
 8009b2a:	6863      	ldr	r3, [r4, #4]
 8009b2c:	1ac0      	subs	r0, r0, r3
 8009b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b30:	b10b      	cbz	r3, 8009b36 <__sflush_r+0x46>
 8009b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b34:	1ac0      	subs	r0, r0, r3
 8009b36:	2300      	movs	r3, #0
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	6a21      	ldr	r1, [r4, #32]
 8009b40:	47b0      	blx	r6
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	d106      	bne.n	8009b56 <__sflush_r+0x66>
 8009b48:	6829      	ldr	r1, [r5, #0]
 8009b4a:	291d      	cmp	r1, #29
 8009b4c:	d82c      	bhi.n	8009ba8 <__sflush_r+0xb8>
 8009b4e:	4a2a      	ldr	r2, [pc, #168]	; (8009bf8 <__sflush_r+0x108>)
 8009b50:	40ca      	lsrs	r2, r1
 8009b52:	07d6      	lsls	r6, r2, #31
 8009b54:	d528      	bpl.n	8009ba8 <__sflush_r+0xb8>
 8009b56:	2200      	movs	r2, #0
 8009b58:	6062      	str	r2, [r4, #4]
 8009b5a:	6922      	ldr	r2, [r4, #16]
 8009b5c:	04d9      	lsls	r1, r3, #19
 8009b5e:	6022      	str	r2, [r4, #0]
 8009b60:	d504      	bpl.n	8009b6c <__sflush_r+0x7c>
 8009b62:	1c42      	adds	r2, r0, #1
 8009b64:	d101      	bne.n	8009b6a <__sflush_r+0x7a>
 8009b66:	682b      	ldr	r3, [r5, #0]
 8009b68:	b903      	cbnz	r3, 8009b6c <__sflush_r+0x7c>
 8009b6a:	6560      	str	r0, [r4, #84]	; 0x54
 8009b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b6e:	602f      	str	r7, [r5, #0]
 8009b70:	2900      	cmp	r1, #0
 8009b72:	d0ca      	beq.n	8009b0a <__sflush_r+0x1a>
 8009b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	d002      	beq.n	8009b82 <__sflush_r+0x92>
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f7ff fae3 	bl	8009148 <_free_r>
 8009b82:	2000      	movs	r0, #0
 8009b84:	6360      	str	r0, [r4, #52]	; 0x34
 8009b86:	e7c1      	b.n	8009b0c <__sflush_r+0x1c>
 8009b88:	6a21      	ldr	r1, [r4, #32]
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b0      	blx	r6
 8009b90:	1c41      	adds	r1, r0, #1
 8009b92:	d1c7      	bne.n	8009b24 <__sflush_r+0x34>
 8009b94:	682b      	ldr	r3, [r5, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0c4      	beq.n	8009b24 <__sflush_r+0x34>
 8009b9a:	2b1d      	cmp	r3, #29
 8009b9c:	d001      	beq.n	8009ba2 <__sflush_r+0xb2>
 8009b9e:	2b16      	cmp	r3, #22
 8009ba0:	d101      	bne.n	8009ba6 <__sflush_r+0xb6>
 8009ba2:	602f      	str	r7, [r5, #0]
 8009ba4:	e7b1      	b.n	8009b0a <__sflush_r+0x1a>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	e7ad      	b.n	8009b0c <__sflush_r+0x1c>
 8009bb0:	690f      	ldr	r7, [r1, #16]
 8009bb2:	2f00      	cmp	r7, #0
 8009bb4:	d0a9      	beq.n	8009b0a <__sflush_r+0x1a>
 8009bb6:	0793      	lsls	r3, r2, #30
 8009bb8:	bf18      	it	ne
 8009bba:	2300      	movne	r3, #0
 8009bbc:	680e      	ldr	r6, [r1, #0]
 8009bbe:	bf08      	it	eq
 8009bc0:	694b      	ldreq	r3, [r1, #20]
 8009bc2:	eba6 0807 	sub.w	r8, r6, r7
 8009bc6:	600f      	str	r7, [r1, #0]
 8009bc8:	608b      	str	r3, [r1, #8]
 8009bca:	f1b8 0f00 	cmp.w	r8, #0
 8009bce:	dd9c      	ble.n	8009b0a <__sflush_r+0x1a>
 8009bd0:	4643      	mov	r3, r8
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	6a21      	ldr	r1, [r4, #32]
 8009bd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bda:	47b0      	blx	r6
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	dc06      	bgt.n	8009bee <__sflush_r+0xfe>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295
 8009be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	e78e      	b.n	8009b0c <__sflush_r+0x1c>
 8009bee:	4407      	add	r7, r0
 8009bf0:	eba8 0800 	sub.w	r8, r8, r0
 8009bf4:	e7e9      	b.n	8009bca <__sflush_r+0xda>
 8009bf6:	bf00      	nop
 8009bf8:	20400001 	.word	0x20400001

08009bfc <_fflush_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	690b      	ldr	r3, [r1, #16]
 8009c00:	4605      	mov	r5, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	b913      	cbnz	r3, 8009c0c <_fflush_r+0x10>
 8009c06:	2500      	movs	r5, #0
 8009c08:	4628      	mov	r0, r5
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	b118      	cbz	r0, 8009c16 <_fflush_r+0x1a>
 8009c0e:	6983      	ldr	r3, [r0, #24]
 8009c10:	b90b      	cbnz	r3, 8009c16 <_fflush_r+0x1a>
 8009c12:	f000 f887 	bl	8009d24 <__sinit>
 8009c16:	4b14      	ldr	r3, [pc, #80]	; (8009c68 <_fflush_r+0x6c>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d11b      	bne.n	8009c54 <_fflush_r+0x58>
 8009c1c:	686c      	ldr	r4, [r5, #4]
 8009c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0ef      	beq.n	8009c06 <_fflush_r+0xa>
 8009c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c28:	07d0      	lsls	r0, r2, #31
 8009c2a:	d404      	bmi.n	8009c36 <_fflush_r+0x3a>
 8009c2c:	0599      	lsls	r1, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_fflush_r+0x3a>
 8009c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c32:	f000 f915 	bl	8009e60 <__retarget_lock_acquire_recursive>
 8009c36:	4628      	mov	r0, r5
 8009c38:	4621      	mov	r1, r4
 8009c3a:	f7ff ff59 	bl	8009af0 <__sflush_r>
 8009c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c40:	4605      	mov	r5, r0
 8009c42:	07da      	lsls	r2, r3, #31
 8009c44:	d4e0      	bmi.n	8009c08 <_fflush_r+0xc>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	059b      	lsls	r3, r3, #22
 8009c4a:	d4dd      	bmi.n	8009c08 <_fflush_r+0xc>
 8009c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c4e:	f000 f908 	bl	8009e62 <__retarget_lock_release_recursive>
 8009c52:	e7d9      	b.n	8009c08 <_fflush_r+0xc>
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <_fflush_r+0x70>)
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d101      	bne.n	8009c5e <_fflush_r+0x62>
 8009c5a:	68ac      	ldr	r4, [r5, #8]
 8009c5c:	e7df      	b.n	8009c1e <_fflush_r+0x22>
 8009c5e:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <_fflush_r+0x74>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	bf08      	it	eq
 8009c64:	68ec      	ldreq	r4, [r5, #12]
 8009c66:	e7da      	b.n	8009c1e <_fflush_r+0x22>
 8009c68:	0800a8fc 	.word	0x0800a8fc
 8009c6c:	0800a91c 	.word	0x0800a91c
 8009c70:	0800a8dc 	.word	0x0800a8dc

08009c74 <std>:
 8009c74:	2300      	movs	r3, #0
 8009c76:	b510      	push	{r4, lr}
 8009c78:	4604      	mov	r4, r0
 8009c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c82:	6083      	str	r3, [r0, #8]
 8009c84:	8181      	strh	r1, [r0, #12]
 8009c86:	6643      	str	r3, [r0, #100]	; 0x64
 8009c88:	81c2      	strh	r2, [r0, #14]
 8009c8a:	6183      	str	r3, [r0, #24]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	2208      	movs	r2, #8
 8009c90:	305c      	adds	r0, #92	; 0x5c
 8009c92:	f7fb fe35 	bl	8005900 <memset>
 8009c96:	4b05      	ldr	r3, [pc, #20]	; (8009cac <std+0x38>)
 8009c98:	6224      	str	r4, [r4, #32]
 8009c9a:	6263      	str	r3, [r4, #36]	; 0x24
 8009c9c:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <std+0x3c>)
 8009c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <std+0x40>)
 8009ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ca4:	4b04      	ldr	r3, [pc, #16]	; (8009cb8 <std+0x44>)
 8009ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	bf00      	nop
 8009cac:	08009fc5 	.word	0x08009fc5
 8009cb0:	08009fe7 	.word	0x08009fe7
 8009cb4:	0800a01f 	.word	0x0800a01f
 8009cb8:	0800a043 	.word	0x0800a043

08009cbc <_cleanup_r>:
 8009cbc:	4901      	ldr	r1, [pc, #4]	; (8009cc4 <_cleanup_r+0x8>)
 8009cbe:	f000 b8af 	b.w	8009e20 <_fwalk_reent>
 8009cc2:	bf00      	nop
 8009cc4:	08009bfd 	.word	0x08009bfd

08009cc8 <__sfmoreglue>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	2568      	movs	r5, #104	; 0x68
 8009ccc:	1e4a      	subs	r2, r1, #1
 8009cce:	4355      	muls	r5, r2
 8009cd0:	460e      	mov	r6, r1
 8009cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cd6:	f7ff fa83 	bl	80091e0 <_malloc_r>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	b140      	cbz	r0, 8009cf0 <__sfmoreglue+0x28>
 8009cde:	2100      	movs	r1, #0
 8009ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ce4:	300c      	adds	r0, #12
 8009ce6:	60a0      	str	r0, [r4, #8]
 8009ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cec:	f7fb fe08 	bl	8005900 <memset>
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}

08009cf4 <__sfp_lock_acquire>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	; (8009cfc <__sfp_lock_acquire+0x8>)
 8009cf6:	f000 b8b3 	b.w	8009e60 <__retarget_lock_acquire_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	2000052c 	.word	0x2000052c

08009d00 <__sfp_lock_release>:
 8009d00:	4801      	ldr	r0, [pc, #4]	; (8009d08 <__sfp_lock_release+0x8>)
 8009d02:	f000 b8ae 	b.w	8009e62 <__retarget_lock_release_recursive>
 8009d06:	bf00      	nop
 8009d08:	2000052c 	.word	0x2000052c

08009d0c <__sinit_lock_acquire>:
 8009d0c:	4801      	ldr	r0, [pc, #4]	; (8009d14 <__sinit_lock_acquire+0x8>)
 8009d0e:	f000 b8a7 	b.w	8009e60 <__retarget_lock_acquire_recursive>
 8009d12:	bf00      	nop
 8009d14:	20000527 	.word	0x20000527

08009d18 <__sinit_lock_release>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__sinit_lock_release+0x8>)
 8009d1a:	f000 b8a2 	b.w	8009e62 <__retarget_lock_release_recursive>
 8009d1e:	bf00      	nop
 8009d20:	20000527 	.word	0x20000527

08009d24 <__sinit>:
 8009d24:	b510      	push	{r4, lr}
 8009d26:	4604      	mov	r4, r0
 8009d28:	f7ff fff0 	bl	8009d0c <__sinit_lock_acquire>
 8009d2c:	69a3      	ldr	r3, [r4, #24]
 8009d2e:	b11b      	cbz	r3, 8009d38 <__sinit+0x14>
 8009d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d34:	f7ff bff0 	b.w	8009d18 <__sinit_lock_release>
 8009d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8009d3e:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <__sinit+0x68>)
 8009d40:	4a13      	ldr	r2, [pc, #76]	; (8009d90 <__sinit+0x6c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d46:	42a3      	cmp	r3, r4
 8009d48:	bf08      	it	eq
 8009d4a:	2301      	moveq	r3, #1
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	bf08      	it	eq
 8009d50:	61a3      	streq	r3, [r4, #24]
 8009d52:	f000 f81f 	bl	8009d94 <__sfp>
 8009d56:	6060      	str	r0, [r4, #4]
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 f81b 	bl	8009d94 <__sfp>
 8009d5e:	60a0      	str	r0, [r4, #8]
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 f817 	bl	8009d94 <__sfp>
 8009d66:	2200      	movs	r2, #0
 8009d68:	2104      	movs	r1, #4
 8009d6a:	60e0      	str	r0, [r4, #12]
 8009d6c:	6860      	ldr	r0, [r4, #4]
 8009d6e:	f7ff ff81 	bl	8009c74 <std>
 8009d72:	2201      	movs	r2, #1
 8009d74:	2109      	movs	r1, #9
 8009d76:	68a0      	ldr	r0, [r4, #8]
 8009d78:	f7ff ff7c 	bl	8009c74 <std>
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	2112      	movs	r1, #18
 8009d80:	68e0      	ldr	r0, [r4, #12]
 8009d82:	f7ff ff77 	bl	8009c74 <std>
 8009d86:	2301      	movs	r3, #1
 8009d88:	61a3      	str	r3, [r4, #24]
 8009d8a:	e7d1      	b.n	8009d30 <__sinit+0xc>
 8009d8c:	0800a484 	.word	0x0800a484
 8009d90:	08009cbd 	.word	0x08009cbd

08009d94 <__sfp>:
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d96:	4607      	mov	r7, r0
 8009d98:	f7ff ffac 	bl	8009cf4 <__sfp_lock_acquire>
 8009d9c:	4b1e      	ldr	r3, [pc, #120]	; (8009e18 <__sfp+0x84>)
 8009d9e:	681e      	ldr	r6, [r3, #0]
 8009da0:	69b3      	ldr	r3, [r6, #24]
 8009da2:	b913      	cbnz	r3, 8009daa <__sfp+0x16>
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff ffbd 	bl	8009d24 <__sinit>
 8009daa:	3648      	adds	r6, #72	; 0x48
 8009dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	d503      	bpl.n	8009dbc <__sfp+0x28>
 8009db4:	6833      	ldr	r3, [r6, #0]
 8009db6:	b30b      	cbz	r3, 8009dfc <__sfp+0x68>
 8009db8:	6836      	ldr	r6, [r6, #0]
 8009dba:	e7f7      	b.n	8009dac <__sfp+0x18>
 8009dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009dc0:	b9d5      	cbnz	r5, 8009df8 <__sfp+0x64>
 8009dc2:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <__sfp+0x88>)
 8009dc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dc8:	60e3      	str	r3, [r4, #12]
 8009dca:	6665      	str	r5, [r4, #100]	; 0x64
 8009dcc:	f000 f847 	bl	8009e5e <__retarget_lock_init_recursive>
 8009dd0:	f7ff ff96 	bl	8009d00 <__sfp_lock_release>
 8009dd4:	2208      	movs	r2, #8
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ddc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009de0:	6025      	str	r5, [r4, #0]
 8009de2:	61a5      	str	r5, [r4, #24]
 8009de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009de8:	f7fb fd8a 	bl	8005900 <memset>
 8009dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009df4:	4620      	mov	r0, r4
 8009df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df8:	3468      	adds	r4, #104	; 0x68
 8009dfa:	e7d9      	b.n	8009db0 <__sfp+0x1c>
 8009dfc:	2104      	movs	r1, #4
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f7ff ff62 	bl	8009cc8 <__sfmoreglue>
 8009e04:	4604      	mov	r4, r0
 8009e06:	6030      	str	r0, [r6, #0]
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d1d5      	bne.n	8009db8 <__sfp+0x24>
 8009e0c:	f7ff ff78 	bl	8009d00 <__sfp_lock_release>
 8009e10:	230c      	movs	r3, #12
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	e7ee      	b.n	8009df4 <__sfp+0x60>
 8009e16:	bf00      	nop
 8009e18:	0800a484 	.word	0x0800a484
 8009e1c:	ffff0001 	.word	0xffff0001

08009e20 <_fwalk_reent>:
 8009e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e24:	4606      	mov	r6, r0
 8009e26:	4688      	mov	r8, r1
 8009e28:	2700      	movs	r7, #0
 8009e2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e32:	f1b9 0901 	subs.w	r9, r9, #1
 8009e36:	d505      	bpl.n	8009e44 <_fwalk_reent+0x24>
 8009e38:	6824      	ldr	r4, [r4, #0]
 8009e3a:	2c00      	cmp	r4, #0
 8009e3c:	d1f7      	bne.n	8009e2e <_fwalk_reent+0xe>
 8009e3e:	4638      	mov	r0, r7
 8009e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e44:	89ab      	ldrh	r3, [r5, #12]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d907      	bls.n	8009e5a <_fwalk_reent+0x3a>
 8009e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	d003      	beq.n	8009e5a <_fwalk_reent+0x3a>
 8009e52:	4629      	mov	r1, r5
 8009e54:	4630      	mov	r0, r6
 8009e56:	47c0      	blx	r8
 8009e58:	4307      	orrs	r7, r0
 8009e5a:	3568      	adds	r5, #104	; 0x68
 8009e5c:	e7e9      	b.n	8009e32 <_fwalk_reent+0x12>

08009e5e <__retarget_lock_init_recursive>:
 8009e5e:	4770      	bx	lr

08009e60 <__retarget_lock_acquire_recursive>:
 8009e60:	4770      	bx	lr

08009e62 <__retarget_lock_release_recursive>:
 8009e62:	4770      	bx	lr

08009e64 <__swhatbuf_r>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	460e      	mov	r6, r1
 8009e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	461d      	mov	r5, r3
 8009e72:	b096      	sub	sp, #88	; 0x58
 8009e74:	da07      	bge.n	8009e86 <__swhatbuf_r+0x22>
 8009e76:	2300      	movs	r3, #0
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	89b3      	ldrh	r3, [r6, #12]
 8009e7c:	061a      	lsls	r2, r3, #24
 8009e7e:	d410      	bmi.n	8009ea2 <__swhatbuf_r+0x3e>
 8009e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e84:	e00e      	b.n	8009ea4 <__swhatbuf_r+0x40>
 8009e86:	466a      	mov	r2, sp
 8009e88:	f000 f902 	bl	800a090 <_fstat_r>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	dbf2      	blt.n	8009e76 <__swhatbuf_r+0x12>
 8009e90:	9a01      	ldr	r2, [sp, #4]
 8009e92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e9a:	425a      	negs	r2, r3
 8009e9c:	415a      	adcs	r2, r3
 8009e9e:	602a      	str	r2, [r5, #0]
 8009ea0:	e7ee      	b.n	8009e80 <__swhatbuf_r+0x1c>
 8009ea2:	2340      	movs	r3, #64	; 0x40
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	6023      	str	r3, [r4, #0]
 8009ea8:	b016      	add	sp, #88	; 0x58
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}

08009eac <__smakebuf_r>:
 8009eac:	898b      	ldrh	r3, [r1, #12]
 8009eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009eb0:	079d      	lsls	r5, r3, #30
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	d507      	bpl.n	8009ec8 <__smakebuf_r+0x1c>
 8009eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	6163      	str	r3, [r4, #20]
 8009ec4:	b002      	add	sp, #8
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	466a      	mov	r2, sp
 8009eca:	ab01      	add	r3, sp, #4
 8009ecc:	f7ff ffca 	bl	8009e64 <__swhatbuf_r>
 8009ed0:	9900      	ldr	r1, [sp, #0]
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7ff f983 	bl	80091e0 <_malloc_r>
 8009eda:	b948      	cbnz	r0, 8009ef0 <__smakebuf_r+0x44>
 8009edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee0:	059a      	lsls	r2, r3, #22
 8009ee2:	d4ef      	bmi.n	8009ec4 <__smakebuf_r+0x18>
 8009ee4:	f023 0303 	bic.w	r3, r3, #3
 8009ee8:	f043 0302 	orr.w	r3, r3, #2
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	e7e3      	b.n	8009eb8 <__smakebuf_r+0xc>
 8009ef0:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <__smakebuf_r+0x7c>)
 8009ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	6020      	str	r0, [r4, #0]
 8009ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	9b00      	ldr	r3, [sp, #0]
 8009f00:	6120      	str	r0, [r4, #16]
 8009f02:	6163      	str	r3, [r4, #20]
 8009f04:	9b01      	ldr	r3, [sp, #4]
 8009f06:	b15b      	cbz	r3, 8009f20 <__smakebuf_r+0x74>
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f0e:	f000 f8d1 	bl	800a0b4 <_isatty_r>
 8009f12:	b128      	cbz	r0, 8009f20 <__smakebuf_r+0x74>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f023 0303 	bic.w	r3, r3, #3
 8009f1a:	f043 0301 	orr.w	r3, r3, #1
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	89a0      	ldrh	r0, [r4, #12]
 8009f22:	4305      	orrs	r5, r0
 8009f24:	81a5      	strh	r5, [r4, #12]
 8009f26:	e7cd      	b.n	8009ec4 <__smakebuf_r+0x18>
 8009f28:	08009cbd 	.word	0x08009cbd

08009f2c <_malloc_usable_size_r>:
 8009f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f30:	1f18      	subs	r0, r3, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfbc      	itt	lt
 8009f36:	580b      	ldrlt	r3, [r1, r0]
 8009f38:	18c0      	addlt	r0, r0, r3
 8009f3a:	4770      	bx	lr

08009f3c <_raise_r>:
 8009f3c:	291f      	cmp	r1, #31
 8009f3e:	b538      	push	{r3, r4, r5, lr}
 8009f40:	4604      	mov	r4, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	d904      	bls.n	8009f50 <_raise_r+0x14>
 8009f46:	2316      	movs	r3, #22
 8009f48:	6003      	str	r3, [r0, #0]
 8009f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f52:	b112      	cbz	r2, 8009f5a <_raise_r+0x1e>
 8009f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f58:	b94b      	cbnz	r3, 8009f6e <_raise_r+0x32>
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f830 	bl	8009fc0 <_getpid_r>
 8009f60:	462a      	mov	r2, r5
 8009f62:	4601      	mov	r1, r0
 8009f64:	4620      	mov	r0, r4
 8009f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f6a:	f000 b817 	b.w	8009f9c <_kill_r>
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d00a      	beq.n	8009f88 <_raise_r+0x4c>
 8009f72:	1c59      	adds	r1, r3, #1
 8009f74:	d103      	bne.n	8009f7e <_raise_r+0x42>
 8009f76:	2316      	movs	r3, #22
 8009f78:	6003      	str	r3, [r0, #0]
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	e7e7      	b.n	8009f4e <_raise_r+0x12>
 8009f7e:	2400      	movs	r4, #0
 8009f80:	4628      	mov	r0, r5
 8009f82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f86:	4798      	blx	r3
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7e0      	b.n	8009f4e <_raise_r+0x12>

08009f8c <raise>:
 8009f8c:	4b02      	ldr	r3, [pc, #8]	; (8009f98 <raise+0xc>)
 8009f8e:	4601      	mov	r1, r0
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	f7ff bfd3 	b.w	8009f3c <_raise_r>
 8009f96:	bf00      	nop
 8009f98:	2000001c 	.word	0x2000001c

08009f9c <_kill_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4d06      	ldr	r5, [pc, #24]	; (8009fbc <_kill_r+0x20>)
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	f7f8 ffb3 	bl	8002f14 <_kill>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d102      	bne.n	8009fb8 <_kill_r+0x1c>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b103      	cbz	r3, 8009fb8 <_kill_r+0x1c>
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000520 	.word	0x20000520

08009fc0 <_getpid_r>:
 8009fc0:	f7f8 bfa1 	b.w	8002f06 <_getpid>

08009fc4 <__sread>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fcc:	f000 f894 	bl	800a0f8 <_read_r>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	bfab      	itete	ge
 8009fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fd8:	181b      	addge	r3, r3, r0
 8009fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fde:	bfac      	ite	ge
 8009fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fe2:	81a3      	strhlt	r3, [r4, #12]
 8009fe4:	bd10      	pop	{r4, pc}

08009fe6 <__swrite>:
 8009fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	461f      	mov	r7, r3
 8009fec:	898b      	ldrh	r3, [r1, #12]
 8009fee:	4605      	mov	r5, r0
 8009ff0:	05db      	lsls	r3, r3, #23
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	d505      	bpl.n	800a004 <__swrite+0x1e>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a000:	f000 f868 	bl	800a0d4 <_lseek_r>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	4632      	mov	r2, r6
 800a008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	4628      	mov	r0, r5
 800a010:	463b      	mov	r3, r7
 800a012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a01a:	f000 b817 	b.w	800a04c <_write_r>

0800a01e <__sseek>:
 800a01e:	b510      	push	{r4, lr}
 800a020:	460c      	mov	r4, r1
 800a022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a026:	f000 f855 	bl	800a0d4 <_lseek_r>
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	bf15      	itete	ne
 800a030:	6560      	strne	r0, [r4, #84]	; 0x54
 800a032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a03a:	81a3      	strheq	r3, [r4, #12]
 800a03c:	bf18      	it	ne
 800a03e:	81a3      	strhne	r3, [r4, #12]
 800a040:	bd10      	pop	{r4, pc}

0800a042 <__sclose>:
 800a042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a046:	f000 b813 	b.w	800a070 <_close_r>
	...

0800a04c <_write_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	4611      	mov	r1, r2
 800a054:	2200      	movs	r2, #0
 800a056:	4d05      	ldr	r5, [pc, #20]	; (800a06c <_write_r+0x20>)
 800a058:	602a      	str	r2, [r5, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f7f8 ff91 	bl	8002f82 <_write>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	d102      	bne.n	800a06a <_write_r+0x1e>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	b103      	cbz	r3, 800a06a <_write_r+0x1e>
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	20000520 	.word	0x20000520

0800a070 <_close_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	2300      	movs	r3, #0
 800a074:	4d05      	ldr	r5, [pc, #20]	; (800a08c <_close_r+0x1c>)
 800a076:	4604      	mov	r4, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	f7f8 ff9d 	bl	8002fba <_close>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_close_r+0x1a>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_close_r+0x1a>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	20000520 	.word	0x20000520

0800a090 <_fstat_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	2300      	movs	r3, #0
 800a094:	4d06      	ldr	r5, [pc, #24]	; (800a0b0 <_fstat_r+0x20>)
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	4611      	mov	r1, r2
 800a09c:	602b      	str	r3, [r5, #0]
 800a09e:	f7f8 ff97 	bl	8002fd0 <_fstat>
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	d102      	bne.n	800a0ac <_fstat_r+0x1c>
 800a0a6:	682b      	ldr	r3, [r5, #0]
 800a0a8:	b103      	cbz	r3, 800a0ac <_fstat_r+0x1c>
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	bd38      	pop	{r3, r4, r5, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20000520 	.word	0x20000520

0800a0b4 <_isatty_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	4d05      	ldr	r5, [pc, #20]	; (800a0d0 <_isatty_r+0x1c>)
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	602b      	str	r3, [r5, #0]
 800a0c0:	f7f8 ff95 	bl	8002fee <_isatty>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_isatty_r+0x1a>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_isatty_r+0x1a>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	20000520 	.word	0x20000520

0800a0d4 <_lseek_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4d05      	ldr	r5, [pc, #20]	; (800a0f4 <_lseek_r+0x20>)
 800a0e0:	602a      	str	r2, [r5, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f7f8 ff8d 	bl	8003002 <_lseek>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_lseek_r+0x1e>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_lseek_r+0x1e>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	20000520 	.word	0x20000520

0800a0f8 <_read_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	4611      	mov	r1, r2
 800a100:	2200      	movs	r2, #0
 800a102:	4d05      	ldr	r5, [pc, #20]	; (800a118 <_read_r+0x20>)
 800a104:	602a      	str	r2, [r5, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	f7f8 ff1e 	bl	8002f48 <_read>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_read_r+0x1e>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	b103      	cbz	r3, 800a116 <_read_r+0x1e>
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	20000520 	.word	0x20000520

0800a11c <sqrt>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	f000 f827 	bl	800a174 <__ieee754_sqrt>
 800a126:	4b12      	ldr	r3, [pc, #72]	; (800a170 <sqrt+0x54>)
 800a128:	4604      	mov	r4, r0
 800a12a:	f993 3000 	ldrsb.w	r3, [r3]
 800a12e:	460d      	mov	r5, r1
 800a130:	3301      	adds	r3, #1
 800a132:	d019      	beq.n	800a168 <sqrt+0x4c>
 800a134:	4632      	mov	r2, r6
 800a136:	463b      	mov	r3, r7
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 fc66 	bl	8000a0c <__aeabi_dcmpun>
 800a140:	b990      	cbnz	r0, 800a168 <sqrt+0x4c>
 800a142:	2200      	movs	r2, #0
 800a144:	2300      	movs	r3, #0
 800a146:	4630      	mov	r0, r6
 800a148:	4639      	mov	r1, r7
 800a14a:	f7f6 fc37 	bl	80009bc <__aeabi_dcmplt>
 800a14e:	b158      	cbz	r0, 800a168 <sqrt+0x4c>
 800a150:	f7fb fbac 	bl	80058ac <__errno>
 800a154:	2321      	movs	r3, #33	; 0x21
 800a156:	2200      	movs	r2, #0
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	2300      	movs	r3, #0
 800a15c:	4610      	mov	r0, r2
 800a15e:	4619      	mov	r1, r3
 800a160:	f7f6 fae4 	bl	800072c <__aeabi_ddiv>
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	4620      	mov	r0, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16e:	bf00      	nop
 800a170:	200001f0 	.word	0x200001f0

0800a174 <__ieee754_sqrt>:
 800a174:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a2c8 <__ieee754_sqrt+0x154>
 800a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	ea3c 0c01 	bics.w	ip, ip, r1
 800a180:	460b      	mov	r3, r1
 800a182:	4606      	mov	r6, r0
 800a184:	460d      	mov	r5, r1
 800a186:	460a      	mov	r2, r1
 800a188:	4607      	mov	r7, r0
 800a18a:	4604      	mov	r4, r0
 800a18c:	d10e      	bne.n	800a1ac <__ieee754_sqrt+0x38>
 800a18e:	4602      	mov	r2, r0
 800a190:	f7f6 f9a2 	bl	80004d8 <__aeabi_dmul>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4630      	mov	r0, r6
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f5 ffe6 	bl	800016c <__adddf3>
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	460d      	mov	r5, r1
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	dc0d      	bgt.n	800a1cc <__ieee754_sqrt+0x58>
 800a1b0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a1b4:	ea5c 0707 	orrs.w	r7, ip, r7
 800a1b8:	d0f4      	beq.n	800a1a4 <__ieee754_sqrt+0x30>
 800a1ba:	b139      	cbz	r1, 800a1cc <__ieee754_sqrt+0x58>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	f7f5 ffd3 	bl	8000168 <__aeabi_dsub>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	f7f6 fab1 	bl	800072c <__aeabi_ddiv>
 800a1ca:	e7e9      	b.n	800a1a0 <__ieee754_sqrt+0x2c>
 800a1cc:	1512      	asrs	r2, r2, #20
 800a1ce:	d074      	beq.n	800a2ba <__ieee754_sqrt+0x146>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	07d5      	lsls	r5, r2, #31
 800a1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1d8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a1dc:	bf5e      	ittt	pl
 800a1de:	0fe3      	lsrpl	r3, r4, #31
 800a1e0:	0064      	lslpl	r4, r4, #1
 800a1e2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a1e6:	0fe3      	lsrs	r3, r4, #31
 800a1e8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a1ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a1f0:	2516      	movs	r5, #22
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a1f8:	1076      	asrs	r6, r6, #1
 800a1fa:	0064      	lsls	r4, r4, #1
 800a1fc:	188f      	adds	r7, r1, r2
 800a1fe:	429f      	cmp	r7, r3
 800a200:	bfde      	ittt	le
 800a202:	1bdb      	suble	r3, r3, r7
 800a204:	18b9      	addle	r1, r7, r2
 800a206:	1880      	addle	r0, r0, r2
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	3d01      	subs	r5, #1
 800a20c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a210:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a214:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a218:	d1f0      	bne.n	800a1fc <__ieee754_sqrt+0x88>
 800a21a:	462a      	mov	r2, r5
 800a21c:	f04f 0e20 	mov.w	lr, #32
 800a220:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a224:	428b      	cmp	r3, r1
 800a226:	eb07 0c05 	add.w	ip, r7, r5
 800a22a:	dc02      	bgt.n	800a232 <__ieee754_sqrt+0xbe>
 800a22c:	d113      	bne.n	800a256 <__ieee754_sqrt+0xe2>
 800a22e:	45a4      	cmp	ip, r4
 800a230:	d811      	bhi.n	800a256 <__ieee754_sqrt+0xe2>
 800a232:	f1bc 0f00 	cmp.w	ip, #0
 800a236:	eb0c 0507 	add.w	r5, ip, r7
 800a23a:	da43      	bge.n	800a2c4 <__ieee754_sqrt+0x150>
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	db41      	blt.n	800a2c4 <__ieee754_sqrt+0x150>
 800a240:	f101 0801 	add.w	r8, r1, #1
 800a244:	1a5b      	subs	r3, r3, r1
 800a246:	4641      	mov	r1, r8
 800a248:	45a4      	cmp	ip, r4
 800a24a:	bf88      	it	hi
 800a24c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a250:	eba4 040c 	sub.w	r4, r4, ip
 800a254:	443a      	add	r2, r7
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	f1be 0e01 	subs.w	lr, lr, #1
 800a25c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a260:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a264:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a268:	d1dc      	bne.n	800a224 <__ieee754_sqrt+0xb0>
 800a26a:	4323      	orrs	r3, r4
 800a26c:	d006      	beq.n	800a27c <__ieee754_sqrt+0x108>
 800a26e:	1c54      	adds	r4, r2, #1
 800a270:	bf0b      	itete	eq
 800a272:	4672      	moveq	r2, lr
 800a274:	3201      	addne	r2, #1
 800a276:	3001      	addeq	r0, #1
 800a278:	f022 0201 	bicne.w	r2, r2, #1
 800a27c:	1043      	asrs	r3, r0, #1
 800a27e:	07c1      	lsls	r1, r0, #31
 800a280:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a284:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a288:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a28c:	bf48      	it	mi
 800a28e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a292:	4610      	mov	r0, r2
 800a294:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a298:	e782      	b.n	800a1a0 <__ieee754_sqrt+0x2c>
 800a29a:	0ae3      	lsrs	r3, r4, #11
 800a29c:	3915      	subs	r1, #21
 800a29e:	0564      	lsls	r4, r4, #21
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0fa      	beq.n	800a29a <__ieee754_sqrt+0x126>
 800a2a4:	02de      	lsls	r6, r3, #11
 800a2a6:	d50a      	bpl.n	800a2be <__ieee754_sqrt+0x14a>
 800a2a8:	f1c2 0020 	rsb	r0, r2, #32
 800a2ac:	fa24 f000 	lsr.w	r0, r4, r0
 800a2b0:	1e55      	subs	r5, r2, #1
 800a2b2:	4094      	lsls	r4, r2
 800a2b4:	4303      	orrs	r3, r0
 800a2b6:	1b4a      	subs	r2, r1, r5
 800a2b8:	e78a      	b.n	800a1d0 <__ieee754_sqrt+0x5c>
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	e7f0      	b.n	800a2a0 <__ieee754_sqrt+0x12c>
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	3201      	adds	r2, #1
 800a2c2:	e7ef      	b.n	800a2a4 <__ieee754_sqrt+0x130>
 800a2c4:	4688      	mov	r8, r1
 800a2c6:	e7bd      	b.n	800a244 <__ieee754_sqrt+0xd0>
 800a2c8:	7ff00000 	.word	0x7ff00000

0800a2cc <_init>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr

0800a2d8 <_fini>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	bf00      	nop
 800a2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2de:	bc08      	pop	{r3}
 800a2e0:	469e      	mov	lr, r3
 800a2e2:	4770      	bx	lr
