
Simulasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  080084c0  080084c0  000184c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089cc  080089cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080089cc  080089cc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089cc  080089cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089cc  080089cc  000189cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080089d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001e0  08008bb4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08008bb4  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c762  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c3  00000000  00000000  0002c96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002ea30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e5a  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d232  00000000  00000000  00048daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b766  00000000  00000000  00055fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041bc  00000000  00000000  000e1798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080084a4 	.word	0x080084a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080084a4 	.word	0x080084a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	460c      	mov	r4, r1
 8000d88:	4605      	mov	r5, r0
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f023 030f 	bic.w	r3, r3, #15
 8000e04:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f043 030c 	orr.w	r3, r3, #12
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	f043 030c 	orr.w	r3, r3, #12
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e34:	f107 0208 	add.w	r2, r7, #8
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	214e      	movs	r1, #78	; 0x4e
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <lcd_send_cmd+0x5c>)
 8000e42:	f001 fe43 	bl	8002acc <HAL_I2C_Master_Transmit>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000030c 	.word	0x2000030c

08000e54 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f023 030f 	bic.w	r3, r3, #15
 8000e64:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	f043 030d 	orr.w	r3, r3, #13
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	f043 0309 	orr.w	r3, r3, #9
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	f043 030d 	orr.w	r3, r3, #13
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	f043 0309 	orr.w	r3, r3, #9
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e94:	f107 0208 	add.w	r2, r7, #8
 8000e98:	2364      	movs	r3, #100	; 0x64
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	214e      	movs	r1, #78	; 0x4e
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <lcd_send_data+0x5c>)
 8000ea2:	f001 fe13 	bl	8002acc <HAL_I2C_Master_Transmit>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000030c 	.word	0x2000030c

08000eb4 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000eb8:	2032      	movs	r0, #50	; 0x32
 8000eba:	f000 fec5 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ebe:	2030      	movs	r0, #48	; 0x30
 8000ec0:	f7ff ff98 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ec4:	2005      	movs	r0, #5
 8000ec6:	f000 febf 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000eca:	2030      	movs	r0, #48	; 0x30
 8000ecc:	f7ff ff92 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 feb9 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ed6:	2030      	movs	r0, #48	; 0x30
 8000ed8:	f7ff ff8c 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(10);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f000 feb3 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	f7ff ff86 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(10);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f000 fead 	bl	8001c48 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000eee:	2028      	movs	r0, #40	; 0x28
 8000ef0:	f7ff ff80 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 fea7 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000efa:	2008      	movs	r0, #8
 8000efc:	f7ff ff7a 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 fea1 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff ff74 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f000 fe9b 	bl	8001c48 <HAL_Delay>
	HAL_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fe98 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f18:	2006      	movs	r0, #6
 8000f1a:	f7ff ff6b 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 fe92 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f24:	200c      	movs	r0, #12
 8000f26:	f7ff ff65 	bl	8000df4 <lcd_send_cmd>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f36:	e006      	b.n	8000f46 <lcd_send_string+0x18>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff87 	bl	8000e54 <lcd_send_data>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f4      	bne.n	8000f38 <lcd_send_string+0xa>
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <keypad_init>:
#define C4_PIN GPIO_PIN_3
//


void keypad_init(void)
{		
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure; 
	/********************** Init GPIO Keypad *************************/
 	// aktivasi Kolom bit
	GPIO_InitStructure.Pin = C1_PIN|C2_PIN|C3_PIN|C4_PIN;
 8000f5e:	2378      	movs	r3, #120	; 0x78
 8000f60:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4816      	ldr	r0, [pc, #88]	; (8000fcc <keypad_init+0x74>)
 8000f74:	f001 fab2 	bl	80024dc <HAL_GPIO_Init>
	
	// aktivasi Baris bit
	GPIO_InitStructure.Pin = R1_PIN|R2_PIN|R3_PIN|R4_PIN;
 8000f78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <keypad_init+0x78>)
 8000f90:	f001 faa4 	bl	80024dc <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOB,R1_PIN,GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <keypad_init+0x78>)
 8000f9c:	f001 fc39 	bl	8002812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R2_PIN,GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <keypad_init+0x78>)
 8000fa8:	f001 fc33 	bl	8002812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R3_PIN,GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <keypad_init+0x78>)
 8000fb4:	f001 fc2d 	bl	8002812 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,R4_PIN,GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <keypad_init+0x78>)
 8000fc0:	f001 fc27 	bl	8002812 <HAL_GPIO_WritePin>
/********************** End GPIO LCD ********************/
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <keypad_get_key_value>:


char keypad_get_key_value(void)
{     int key;
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
			key=' ';
 8000fda:	2320      	movs	r3, #32
 8000fdc:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R1_PIN,GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe4:	486d      	ldr	r0, [pc, #436]	; (800119c <keypad_get_key_value+0x1c8>)
 8000fe6:	f001 fc14 	bl	8002812 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 fe2c 	bl	8001c48 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '1'; 
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	486b      	ldr	r0, [pc, #428]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8000ff4:	f001 fbf6 	bl	80027e4 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <keypad_get_key_value+0x30>
 8000ffe:	2331      	movs	r3, #49	; 0x31
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	e01c      	b.n	800103e <keypad_get_key_value+0x6a>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='2';
 8001004:	2120      	movs	r1, #32
 8001006:	4866      	ldr	r0, [pc, #408]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001008:	f001 fbec 	bl	80027e4 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <keypad_get_key_value+0x44>
 8001012:	2332      	movs	r3, #50	; 0x32
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	e012      	b.n	800103e <keypad_get_key_value+0x6a>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='3';
 8001018:	2110      	movs	r1, #16
 800101a:	4861      	ldr	r0, [pc, #388]	; (80011a0 <keypad_get_key_value+0x1cc>)
 800101c:	f001 fbe2 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <keypad_get_key_value+0x58>
 8001026:	2333      	movs	r3, #51	; 0x33
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	e008      	b.n	800103e <keypad_get_key_value+0x6a>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='A';
 800102c:	2108      	movs	r1, #8
 800102e:	485c      	ldr	r0, [pc, #368]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001030:	f001 fbd8 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <keypad_get_key_value+0x6a>
 800103a:	2341      	movs	r3, #65	; 0x41
 800103c:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R1_PIN,GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001044:	4855      	ldr	r0, [pc, #340]	; (800119c <keypad_get_key_value+0x1c8>)
 8001046:	f001 fbe4 	bl	8002812 <HAL_GPIO_WritePin>
      
			HAL_GPIO_WritePin(GPIOB,R2_PIN,GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	4852      	ldr	r0, [pc, #328]	; (800119c <keypad_get_key_value+0x1c8>)
 8001052:	f001 fbde 	bl	8002812 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001056:	200a      	movs	r0, #10
 8001058:	f000 fdf6 	bl	8001c48 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '4'; 
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	4850      	ldr	r0, [pc, #320]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001060:	f001 fbc0 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <keypad_get_key_value+0x9c>
 800106a:	2334      	movs	r3, #52	; 0x34
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e01c      	b.n	80010aa <keypad_get_key_value+0xd6>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='5';
 8001070:	2120      	movs	r1, #32
 8001072:	484b      	ldr	r0, [pc, #300]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001074:	f001 fbb6 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <keypad_get_key_value+0xb0>
 800107e:	2335      	movs	r3, #53	; 0x35
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e012      	b.n	80010aa <keypad_get_key_value+0xd6>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='6';
 8001084:	2110      	movs	r1, #16
 8001086:	4846      	ldr	r0, [pc, #280]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001088:	f001 fbac 	bl	80027e4 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <keypad_get_key_value+0xc4>
 8001092:	2336      	movs	r3, #54	; 0x36
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e008      	b.n	80010aa <keypad_get_key_value+0xd6>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='B';
 8001098:	2108      	movs	r1, #8
 800109a:	4841      	ldr	r0, [pc, #260]	; (80011a0 <keypad_get_key_value+0x1cc>)
 800109c:	f001 fba2 	bl	80027e4 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <keypad_get_key_value+0xd6>
 80010a6:	2342      	movs	r3, #66	; 0x42
 80010a8:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R2_PIN,GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b0:	483a      	ldr	r0, [pc, #232]	; (800119c <keypad_get_key_value+0x1c8>)
 80010b2:	f001 fbae 	bl	8002812 <HAL_GPIO_WritePin>
		
 			HAL_GPIO_WritePin(GPIOB,R3_PIN,GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	4837      	ldr	r0, [pc, #220]	; (800119c <keypad_get_key_value+0x1c8>)
 80010be:	f001 fba8 	bl	8002812 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f000 fdc0 	bl	8001c48 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '7'; 
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4835      	ldr	r0, [pc, #212]	; (80011a0 <keypad_get_key_value+0x1cc>)
 80010cc:	f001 fb8a 	bl	80027e4 <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <keypad_get_key_value+0x108>
 80010d6:	2337      	movs	r3, #55	; 0x37
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e01c      	b.n	8001116 <keypad_get_key_value+0x142>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='8';
 80010dc:	2120      	movs	r1, #32
 80010de:	4830      	ldr	r0, [pc, #192]	; (80011a0 <keypad_get_key_value+0x1cc>)
 80010e0:	f001 fb80 	bl	80027e4 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <keypad_get_key_value+0x11c>
 80010ea:	2338      	movs	r3, #56	; 0x38
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e012      	b.n	8001116 <keypad_get_key_value+0x142>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='9';
 80010f0:	2110      	movs	r1, #16
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <keypad_get_key_value+0x1cc>)
 80010f4:	f001 fb76 	bl	80027e4 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <keypad_get_key_value+0x130>
 80010fe:	2339      	movs	r3, #57	; 0x39
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	e008      	b.n	8001116 <keypad_get_key_value+0x142>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='C';
 8001104:	2108      	movs	r1, #8
 8001106:	4826      	ldr	r0, [pc, #152]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001108:	f001 fb6c 	bl	80027e4 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <keypad_get_key_value+0x142>
 8001112:	2343      	movs	r3, #67	; 0x43
 8001114:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOB,R3_PIN,GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111c:	481f      	ldr	r0, [pc, #124]	; (800119c <keypad_get_key_value+0x1c8>)
 800111e:	f001 fb78 	bl	8002812 <HAL_GPIO_WritePin>
	
 			HAL_GPIO_WritePin(GPIOB,R4_PIN,GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001128:	481c      	ldr	r0, [pc, #112]	; (800119c <keypad_get_key_value+0x1c8>)
 800112a:	f001 fb72 	bl	8002812 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f000 fd8a 	bl	8001c48 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C4_PORT,C1_PIN)==0) key = '*'; 
 8001134:	2140      	movs	r1, #64	; 0x40
 8001136:	481a      	ldr	r0, [pc, #104]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001138:	f001 fb54 	bl	80027e4 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <keypad_get_key_value+0x174>
 8001142:	232a      	movs	r3, #42	; 0x2a
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e01c      	b.n	8001182 <keypad_get_key_value+0x1ae>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='0';
 8001148:	2120      	movs	r1, #32
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <keypad_get_key_value+0x1cc>)
 800114c:	f001 fb4a 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <keypad_get_key_value+0x188>
 8001156:	2330      	movs	r3, #48	; 0x30
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	e012      	b.n	8001182 <keypad_get_key_value+0x1ae>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='#';
 800115c:	2110      	movs	r1, #16
 800115e:	4810      	ldr	r0, [pc, #64]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001160:	f001 fb40 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <keypad_get_key_value+0x19c>
 800116a:	2323      	movs	r3, #35	; 0x23
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	e008      	b.n	8001182 <keypad_get_key_value+0x1ae>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='D';
 8001170:	2108      	movs	r1, #8
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <keypad_get_key_value+0x1cc>)
 8001174:	f001 fb36 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <keypad_get_key_value+0x1ae>
 800117e:	2344      	movs	r3, #68	; 0x44
 8001180:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOA,R4_PIN,GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <keypad_get_key_value+0x1cc>)
 800118a:	f001 fb42 	bl	8002812 <HAL_GPIO_WritePin>
      
			return key;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	b2db      	uxtb	r3, r3
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	40010800 	.word	0x40010800

080011a4 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <DWT_Init+0x24>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <DWT_Init+0x24>)
 80011ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011b2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <DWT_Init+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <DWT_Init+0x28>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	e000edf0 	.word	0xe000edf0
 80011cc:	e0001000 	.word	0xe0001000

080011d0 <delay_us>:

__STATIC_INLINE void delay_us(uint32_t us)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <delay_us+0x3c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <delay_us+0x40>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9a      	lsrs	r2, r3, #18
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <delay_us+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 80011f2:	bf00      	nop
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <delay_us+0x44>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d8fa      	bhi.n	80011f4 <delay_us+0x24>
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000
 8001210:	431bde83 	.word	0x431bde83
 8001214:	e0001000 	.word	0xe0001000

08001218 <micros>:

__STATIC_INLINE uint32_t micros(void){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <micros+0x20>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <micros+0x24>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4906      	ldr	r1, [pc, #24]	; (8001240 <micros+0x28>)
 8001226:	fba1 1303 	umull	r1, r3, r1, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	e0001000 	.word	0xe0001000
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fc9c 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f8b4 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f000 f9e0 	bl	8001614 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001254:	f000 f90a 	bl	800146c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001258:	f000 f946 	bl	80014e8 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800125c:	f000 f9b0 	bl	80015c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001260:	f000 f980 	bl	8001564 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8001264:	f7ff ff9e 	bl	80011a4 <DWT_Init>
  startMicros = micros();
 8001268:	f7ff ffd6 	bl	8001218 <micros>
 800126c:	4603      	mov	r3, r0
 800126e:	4a43      	ldr	r2, [pc, #268]	; (800137c <main+0x138>)
 8001270:	6013      	str	r3, [r2, #0]
  lcd_init();
 8001272:	f7ff fe1f 	bl	8000eb4 <lcd_init>
  keypad_init();
 8001276:	f7ff fe6f 	bl	8000f58 <keypad_init>
  lcd_send_cmd(0x80|0x03);
 800127a:	2083      	movs	r0, #131	; 0x83
 800127c:	f7ff fdba 	bl	8000df4 <lcd_send_cmd>
  lcd_send_string("KWH METER SOLAR");
 8001280:	483f      	ldr	r0, [pc, #252]	; (8001380 <main+0x13c>)
 8001282:	f7ff fe54 	bl	8000f2e <lcd_send_string>

  startMillisLCD = HAL_GetTick();
 8001286:	f000 fcd5 	bl	8001c34 <HAL_GetTick>
 800128a:	4603      	mov	r3, r0
 800128c:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <main+0x140>)
 800128e:	6013      	str	r3, [r2, #0]
  startButtonMillis = HAL_GetTick();
 8001290:	f000 fcd0 	bl	8001c34 <HAL_GetTick>
 8001294:	4603      	mov	r3, r0
 8001296:	4a3c      	ldr	r2, [pc, #240]	; (8001388 <main+0x144>)
 8001298:	6013      	str	r3, [r2, #0]
//		  z = 1;
//	  }



	HAL_ADC_Start(&hadc1);
 800129a:	483c      	ldr	r0, [pc, #240]	; (800138c <main+0x148>)
 800129c:	f000 fdd0 	bl	8001e40 <HAL_ADC_Start>
	while (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != SET){;}
 80012a0:	bf00      	nop
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <main+0x148>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d1f8      	bne.n	80012a2 <main+0x5e>
	voltageSampleRead = HAL_ADC_GetValue(&hadc1);
 80012b0:	4836      	ldr	r0, [pc, #216]	; (800138c <main+0x148>)
 80012b2:	f000 fe9f 	bl	8001ff4 <HAL_ADC_GetValue>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd0b 	bl	8000cd4 <__aeabi_ui2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a33      	ldr	r2, [pc, #204]	; (8001390 <main+0x14c>)
 80012c2:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 80012c4:	4831      	ldr	r0, [pc, #196]	; (800138c <main+0x148>)
 80012c6:	f000 fe69 	bl	8001f9c <HAL_ADC_Stop>
	lcd_send_cmd(0x80|0x40);
 80012ca:	20c0      	movs	r0, #192	; 0xc0
 80012cc:	f7ff fd92 	bl	8000df4 <lcd_send_cmd>
	lcd_send_string("VOLT:");
 80012d0:	4830      	ldr	r0, [pc, #192]	; (8001394 <main+0x150>)
 80012d2:	f7ff fe2c 	bl	8000f2e <lcd_send_string>
	sprintf(buffer, "%.1f", voltageSampleRead);
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <main+0x14c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8a4 	bl	8000428 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	492c      	ldr	r1, [pc, #176]	; (8001398 <main+0x154>)
 80012e6:	482d      	ldr	r0, [pc, #180]	; (800139c <main+0x158>)
 80012e8:	f003 fb4a 	bl	8004980 <siprintf>
	lcd_send_string(buffer);
 80012ec:	482b      	ldr	r0, [pc, #172]	; (800139c <main+0x158>)
 80012ee:	f7ff fe1e 	bl	8000f2e <lcd_send_string>

	HAL_ADC_Start(&hadc2);
 80012f2:	482b      	ldr	r0, [pc, #172]	; (80013a0 <main+0x15c>)
 80012f4:	f000 fda4 	bl	8001e40 <HAL_ADC_Start>
	while (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) != SET){;}
 80012f8:	bf00      	nop
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <main+0x15c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b02      	cmp	r3, #2
 8001306:	d1f8      	bne.n	80012fa <main+0xb6>
	currentSampleRead = HAL_ADC_GetValue(&hadc2);
 8001308:	4825      	ldr	r0, [pc, #148]	; (80013a0 <main+0x15c>)
 800130a:	f000 fe73 	bl	8001ff4 <HAL_ADC_GetValue>
 800130e:	4603      	mov	r3, r0
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fcdf 	bl	8000cd4 <__aeabi_ui2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <main+0x160>)
 800131a:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc2);
 800131c:	4820      	ldr	r0, [pc, #128]	; (80013a0 <main+0x15c>)
 800131e:	f000 fe3d 	bl	8001f9c <HAL_ADC_Stop>
	lcd_send_cmd(0x80|0x14);
 8001322:	2094      	movs	r0, #148	; 0x94
 8001324:	f7ff fd66 	bl	8000df4 <lcd_send_cmd>
	lcd_send_string("ARUS:");
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <main+0x164>)
 800132a:	f7ff fe00 	bl	8000f2e <lcd_send_string>
	sprintf(buffer, "%.1f", currentSampleRead);
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <main+0x160>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f878 	bl	8000428 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4916      	ldr	r1, [pc, #88]	; (8001398 <main+0x154>)
 800133e:	4817      	ldr	r0, [pc, #92]	; (800139c <main+0x158>)
 8001340:	f003 fb1e 	bl	8004980 <siprintf>
	lcd_send_string(buffer);
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <main+0x158>)
 8001346:	f7ff fdf2 	bl	8000f2e <lcd_send_string>
	delay_us(100000);
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <main+0x168>)
 800134c:	f7ff ff40 	bl	80011d0 <delay_us>

		key_val = keypad_get_key_value();
 8001350:	f7ff fe40 	bl	8000fd4 <keypad_get_key_value>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0x16c>)
 800135a:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(0x80|0x54);
 800135c:	20d4      	movs	r0, #212	; 0xd4
 800135e:	f7ff fd49 	bl	8000df4 <lcd_send_cmd>
		lcd_send_string("KEYP:");
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <main+0x170>)
 8001364:	f7ff fde3 	bl	8000f2e <lcd_send_string>
		lcd_send_cmd(0x80 | 0x59);
 8001368:	20d9      	movs	r0, #217	; 0xd9
 800136a:	f7ff fd43 	bl	8000df4 <lcd_send_cmd>
		lcd_send_data(key_val);
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <main+0x16c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fd6e 	bl	8000e54 <lcd_send_data>
	HAL_ADC_Start(&hadc1);
 8001378:	e78f      	b.n	800129a <main+0x56>
 800137a:	bf00      	nop
 800137c:	2000037c 	.word	0x2000037c
 8001380:	080084c0 	.word	0x080084c0
 8001384:	20000360 	.word	0x20000360
 8001388:	200003b0 	.word	0x200003b0
 800138c:	20000380 	.word	0x20000380
 8001390:	200001fc 	.word	0x200001fc
 8001394:	080084d0 	.word	0x080084d0
 8001398:	080084d8 	.word	0x080084d8
 800139c:	200003f4 	.word	0x200003f4
 80013a0:	200002dc 	.word	0x200002dc
 80013a4:	20000200 	.word	0x20000200
 80013a8:	080084e0 	.word	0x080084e0
 80013ac:	000186a0 	.word	0x000186a0
 80013b0:	20000370 	.word	0x20000370
 80013b4:	080084e8 	.word	0x080084e8

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fc5c 	bl	8003c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f6:	2301      	movs	r3, #1
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fa:	2302      	movs	r3, #2
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001404:	2300      	movs	r3, #0
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fe63 	bl	80030d8 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001418:	f000 f978 	bl	800170c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f002 f8cd 	bl	80035d8 <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001444:	f000 f962 	bl	800170c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001448:	2302      	movs	r3, #2
 800144a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fa5a 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800145e:	f000 f955 	bl	800170c <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	3750      	adds	r7, #80	; 0x50
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_ADC1_Init+0x74>)
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <MX_ADC1_Init+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_ADC1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_ADC1_Init+0x74>)
 800148a:	2201      	movs	r2, #1
 800148c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_ADC1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <MX_ADC1_Init+0x74>)
 8001496:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800149a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_ADC1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_ADC1_Init+0x74>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_ADC1_Init+0x74>)
 80014aa:	f000 fbf1 	bl	8001c90 <HAL_ADC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014b4:	f000 f92a 	bl	800170c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014bc:	2301      	movs	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_ADC1_Init+0x74>)
 80014ca:	f000 fd9f 	bl	800200c <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014d4:	f000 f91a 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000380 	.word	0x20000380
 80014e4:	40012400 	.word	0x40012400

080014e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_ADC2_Init+0x74>)
 80014fa:	4a19      	ldr	r2, [pc, #100]	; (8001560 <MX_ADC2_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_ADC2_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_ADC2_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_ADC2_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_ADC2_Init+0x74>)
 8001512:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001516:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_ADC2_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_ADC2_Init+0x74>)
 8001520:	2201      	movs	r2, #1
 8001522:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_ADC2_Init+0x74>)
 8001526:	f000 fbb3 	bl	8001c90 <HAL_ADC_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001530:	f000 f8ec 	bl	800170c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001534:	2301      	movs	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001538:	2301      	movs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_ADC2_Init+0x74>)
 8001546:	f000 fd61 	bl	800200c <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001550:	f000 f8dc 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200002dc 	.word	0x200002dc
 8001560:	40012800 	.word	0x40012800

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x50>)
 800156a:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <MX_I2C1_Init+0x54>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_I2C1_Init+0x58>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_I2C1_Init+0x50>)
 80015a2:	f001 f94f 	bl	8002844 <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 f8ae 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000030c 	.word	0x2000030c
 80015b8:	40005400 	.word	0x40005400
 80015bc:	000186a0 	.word	0x000186a0

080015c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_USART1_UART_Init+0x50>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_USART1_UART_Init+0x4c>)
 80015f8:	f002 fa3e 	bl	8003a78 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001602:	f000 f883 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200003b4 	.word	0x200003b4
 8001610:	40013800 	.word	0x40013800

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <MX_GPIO_Init+0xe8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a33      	ldr	r2, [pc, #204]	; (80016fc <MX_GPIO_Init+0xe8>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <MX_GPIO_Init+0xe8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <MX_GPIO_Init+0xe8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <MX_GPIO_Init+0xe8>)
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <MX_GPIO_Init+0xe8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_GPIO_Init+0xe8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <MX_GPIO_Init+0xe8>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_GPIO_Init+0xe8>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_GPIO_Init+0xe8>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <MX_GPIO_Init+0xe8>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_GPIO_Init+0xe8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168e:	481c      	ldr	r0, [pc, #112]	; (8001700 <MX_GPIO_Init+0xec>)
 8001690:	f001 f8bf 	bl	8002812 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800169a:	481a      	ldr	r0, [pc, #104]	; (8001704 <MX_GPIO_Init+0xf0>)
 800169c:	f001 f8b9 	bl	8002812 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	4811      	ldr	r0, [pc, #68]	; (8001700 <MX_GPIO_Init+0xec>)
 80016ba:	f000 ff0f 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016be:	2378      	movs	r3, #120	; 0x78
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_GPIO_Init+0xf4>)
 80016d2:	f000 ff03 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_GPIO_Init+0xf0>)
 80016f0:	f000 fef4 	bl	80024dc <HAL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40011000 	.word	0x40011000
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40010800 	.word	0x40010800

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_MspInit+0x5c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_MspInit+0x5c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_MspInit+0x5c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x5c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x5c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x5c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_MspInit+0x60>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_MspInit+0x60>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000

0800177c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a28      	ldr	r2, [pc, #160]	; (8001838 <HAL_ADC_MspInit+0xbc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d122      	bne.n	80017e2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <HAL_ADC_MspInit+0xc0>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a26      	ldr	r2, [pc, #152]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	4619      	mov	r1, r3
 80017da:	4819      	ldr	r0, [pc, #100]	; (8001840 <HAL_ADC_MspInit+0xc4>)
 80017dc:	f000 fe7e 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017e0:	e026      	b.n	8001830 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_ADC_MspInit+0xc8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d121      	bne.n	8001830 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_ADC_MspInit+0xc0>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_ADC_MspInit+0xc0>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_ADC_MspInit+0xc0>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_ADC_MspInit+0xc0>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001820:	2303      	movs	r3, #3
 8001822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0318 	add.w	r3, r7, #24
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_ADC_MspInit+0xc4>)
 800182c:	f000 fe56 	bl	80024dc <HAL_GPIO_Init>
}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40012400 	.word	0x40012400
 800183c:	40021000 	.word	0x40021000
 8001840:	40010800 	.word	0x40010800
 8001844:	40012800 	.word	0x40012800

08001848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <HAL_I2C_MspInit+0x70>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d123      	bne.n	80018b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_I2C_MspInit+0x74>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a13      	ldr	r2, [pc, #76]	; (80018bc <HAL_I2C_MspInit+0x74>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_I2C_MspInit+0x74>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001880:	23c0      	movs	r3, #192	; 0xc0
 8001882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <HAL_I2C_MspInit+0x78>)
 8001894:	f000 fe22 	bl	80024dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0x74>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_I2C_MspInit+0x74>)
 800189e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a2:	61d3      	str	r3, [r2, #28]
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_I2C_MspInit+0x74>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010c00 	.word	0x40010c00

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <HAL_UART_MspInit+0x8c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d131      	bne.n	8001948 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_UART_MspInit+0x90>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_UART_MspInit+0x90>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <HAL_UART_MspInit+0x94>)
 800192a:	f000 fdd7 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_UART_MspInit+0x94>)
 8001944:	f000 fdca 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40013800 	.word	0x40013800
 8001954:	40021000 	.word	0x40021000
 8001958:	40010800 	.word	0x40010800

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a2:	f000 f935 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <_kill>:

int _kill(int pid, int sig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019c2:	f002 f935 	bl	8003c30 <__errno>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2216      	movs	r2, #22
 80019ca:	601a      	str	r2, [r3, #0]
	return -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_exit>:

void _exit (int status)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ffe7 	bl	80019b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ea:	e7fe      	b.n	80019ea <_exit+0x12>

080019ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e00a      	b.n	8001a14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019fe:	f3af 8000 	nop.w
 8001a02:	4601      	mov	r1, r0
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf0      	blt.n	80019fe <_read+0x12>
	}

return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e009      	b.n	8001a4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf1      	blt.n	8001a38 <_write+0x12>
	}
	return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_close>:

int _close(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	return -1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a84:	605a      	str	r2, [r3, #4]
	return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <_isatty>:

int _isatty(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f002 f89e 	bl	8003c30 <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20005000 	.word	0x20005000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20000204 	.word	0x20000204
 8001b28:	20000430 	.word	0x20000430

08001b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b3a:	e003      	b.n	8001b44 <LoopCopyDataInit>

08001b3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b42:	3104      	adds	r1, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b44:	480a      	ldr	r0, [pc, #40]	; (8001b70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b4c:	d3f6      	bcc.n	8001b3c <CopyDataInit>
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b50:	e002      	b.n	8001b58 <LoopFillZerobss>

08001b52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b54:	f842 3b04 	str.w	r3, [r2], #4

08001b58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b5c:	d3f9      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b5e:	f7ff ffe5 	bl	8001b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f002 f86b 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b66:	f7ff fb6d 	bl	8001244 <main>
  bx lr
 8001b6a:	4770      	bx	lr
  ldr r3, =_sidata
 8001b6c:	080089d4 	.word	0x080089d4
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b74:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001b78:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001b7c:	2000042c 	.word	0x2000042c

08001b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC1_2_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x28>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x28>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 fc6d 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fdba 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fc77 	bl	80024c2 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 fc4d 	bl	800248a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x1c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_IncTick+0x20>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <HAL_IncTick+0x20>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000418 	.word	0x20000418

08001c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_GetTick+0x10>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	20000418 	.word	0x20000418

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_Delay+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffe0 	bl	8001c34 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008

08001c90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0be      	b.n	8001e30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fd54 	bl	800177c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fae3 	bl	80022a0 <ADC_ConversionStop_Disable>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 8099 	bne.w	8001e1e <HAL_ADC_Init+0x18e>
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8095 	bne.w	8001e1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cfc:	f023 0302 	bic.w	r3, r3, #2
 8001d00:	f043 0202 	orr.w	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b1b      	ldrb	r3, [r3, #12]
 8001d16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d28:	d003      	beq.n	8001d32 <HAL_ADC_Init+0xa2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_ADC_Init+0xa8>
 8001d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_Init+0xaa>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7d1b      	ldrb	r3, [r3, #20]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d119      	bne.n	8001d7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7b1b      	ldrb	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	035a      	lsls	r2, r3, #13
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e00b      	b.n	8001d7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_ADC_Init+0x1a8>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dac:	d003      	beq.n	8001db6 <HAL_ADC_Init+0x126>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d104      	bne.n	8001dc0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	051b      	lsls	r3, r3, #20
 8001dbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_ADC_Init+0x1ac>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	f023 0303 	bic.w	r3, r3, #3
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dfa:	e018      	b.n	8001e2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	f023 0312 	bic.w	r3, r3, #18
 8001e04:	f043 0210 	orr.w	r2, r3, #16
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e1c:	e007      	b.n	8001e2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	ffe1f7fd 	.word	0xffe1f7fd
 8001e3c:	ff1f0efe 	.word	0xff1f0efe

08001e40 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Start+0x1a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e098      	b.n	8001f8c <HAL_ADC_Start+0x14c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f9ca 	bl	80021fc <ADC_Enable>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 8087 	bne.w	8001f82 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a41      	ldr	r2, [pc, #260]	; (8001f94 <HAL_ADC_Start+0x154>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d105      	bne.n	8001e9e <HAL_ADC_Start+0x5e>
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_ADC_Start+0x158>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d026      	beq.n	8001f06 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec8:	e01d      	b.n	8001f06 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <HAL_ADC_Start+0x158>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_ADC_Start+0xaa>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_ADC_Start+0x154>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10d      	bne.n	8001f06 <HAL_ADC_Start+0xc6>
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_ADC_Start+0x158>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001efe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f023 0206 	bic.w	r2, r3, #6
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f1e:	e002      	b.n	8001f26 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0202 	mvn.w	r2, #2
 8001f36:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f46:	d113      	bne.n	8001f70 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f4c:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <HAL_ADC_Start+0x154>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d105      	bne.n	8001f5e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_ADC_Start+0x158>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d108      	bne.n	8001f70 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	e00c      	b.n	8001f8a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012800 	.word	0x40012800
 8001f98:	40012400 	.word	0x40012400

08001f9c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Stop+0x1a>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e01a      	b.n	8001fec <HAL_ADC_Stop+0x50>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f96e 	bl	80022a0 <ADC_ConversionStop_Disable>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x20>
 8002028:	2302      	movs	r3, #2
 800202a:	e0dc      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x1da>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b06      	cmp	r3, #6
 800203a:	d81c      	bhi.n	8002076 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b05      	subs	r3, #5
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	4019      	ands	r1, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b05      	subs	r3, #5
 8002068:	fa00 f203 	lsl.w	r2, r0, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	635a      	str	r2, [r3, #52]	; 0x34
 8002074:	e03c      	b.n	80020f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d81c      	bhi.n	80020b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b23      	subs	r3, #35	; 0x23
 8002090:	221f      	movs	r2, #31
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	4019      	ands	r1, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	3b23      	subs	r3, #35	; 0x23
 80020aa:	fa00 f203 	lsl.w	r2, r0, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
 80020b6:	e01b      	b.n	80020f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	3b41      	subs	r3, #65	; 0x41
 80020ca:	221f      	movs	r2, #31
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4019      	ands	r1, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3b41      	subs	r3, #65	; 0x41
 80020e4:	fa00 f203 	lsl.w	r2, r0, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d91c      	bls.n	8002132 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68d9      	ldr	r1, [r3, #12]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	3b1e      	subs	r3, #30
 800210a:	2207      	movs	r2, #7
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	4019      	ands	r1, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6898      	ldr	r0, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	3b1e      	subs	r3, #30
 8002124:	fa00 f203 	lsl.w	r2, r0, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	e019      	b.n	8002166 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6919      	ldr	r1, [r3, #16]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	2207      	movs	r2, #7
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	4019      	ands	r1, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6898      	ldr	r0, [r3, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	fa00 f203 	lsl.w	r2, r0, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d003      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002172:	2b11      	cmp	r3, #17
 8002174:	d132      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d125      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d126      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800219c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d11a      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c9a      	lsrs	r2, r3, #18
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021bc:	e002      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <HAL_ADC_ConfigChannel+0x1b2>
 80021ca:	e007      	b.n	80021dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40012400 	.word	0x40012400
 80021f4:	20000000 	.word	0x20000000
 80021f8:	431bde83 	.word	0x431bde83

080021fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d039      	beq.n	800228e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <ADC_Enable+0x9c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1b      	ldr	r2, [pc, #108]	; (800229c <ADC_Enable+0xa0>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002238:	e002      	b.n	8002240 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3b01      	subs	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002246:	f7ff fcf5 	bl	8001c34 <HAL_GetTick>
 800224a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800224c:	e018      	b.n	8002280 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800224e:	f7ff fcf1 	bl	8001c34 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d911      	bls.n	8002280 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d1df      	bne.n	800224e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000000 	.word	0x20000000
 800229c:	431bde83 	.word	0x431bde83

080022a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d127      	bne.n	800230a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ca:	f7ff fcb3 	bl	8001c34 <HAL_GetTick>
 80022ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022d0:	e014      	b.n	80022fc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022d2:	f7ff fcaf 	bl	8001c34 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d90d      	bls.n	80022fc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f043 0210 	orr.w	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d0e3      	beq.n	80022d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff90 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff49 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff5e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff90 	bl	80023cc <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5f 	bl	8002378 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffb0 	bl	8002430 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b08b      	sub	sp, #44	; 0x2c
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ee:	e169      	b.n	80027c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f0:	2201      	movs	r2, #1
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 8158 	bne.w	80027be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4a9a      	ldr	r2, [pc, #616]	; (800277c <HAL_GPIO_Init+0x2a0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d05e      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002518:	4a98      	ldr	r2, [pc, #608]	; (800277c <HAL_GPIO_Init+0x2a0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d875      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 800251e:	4a98      	ldr	r2, [pc, #608]	; (8002780 <HAL_GPIO_Init+0x2a4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d058      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002524:	4a96      	ldr	r2, [pc, #600]	; (8002780 <HAL_GPIO_Init+0x2a4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d86f      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 800252a:	4a96      	ldr	r2, [pc, #600]	; (8002784 <HAL_GPIO_Init+0x2a8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d052      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002530:	4a94      	ldr	r2, [pc, #592]	; (8002784 <HAL_GPIO_Init+0x2a8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d869      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 8002536:	4a94      	ldr	r2, [pc, #592]	; (8002788 <HAL_GPIO_Init+0x2ac>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d04c      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 800253c:	4a92      	ldr	r2, [pc, #584]	; (8002788 <HAL_GPIO_Init+0x2ac>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d863      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 8002542:	4a92      	ldr	r2, [pc, #584]	; (800278c <HAL_GPIO_Init+0x2b0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d046      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002548:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_GPIO_Init+0x2b0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d85d      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 800254e:	2b12      	cmp	r3, #18
 8002550:	d82a      	bhi.n	80025a8 <HAL_GPIO_Init+0xcc>
 8002552:	2b12      	cmp	r3, #18
 8002554:	d859      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <HAL_GPIO_Init+0x80>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	080025d7 	.word	0x080025d7
 8002560:	080025b1 	.word	0x080025b1
 8002564:	080025c3 	.word	0x080025c3
 8002568:	08002605 	.word	0x08002605
 800256c:	0800260b 	.word	0x0800260b
 8002570:	0800260b 	.word	0x0800260b
 8002574:	0800260b 	.word	0x0800260b
 8002578:	0800260b 	.word	0x0800260b
 800257c:	0800260b 	.word	0x0800260b
 8002580:	0800260b 	.word	0x0800260b
 8002584:	0800260b 	.word	0x0800260b
 8002588:	0800260b 	.word	0x0800260b
 800258c:	0800260b 	.word	0x0800260b
 8002590:	0800260b 	.word	0x0800260b
 8002594:	0800260b 	.word	0x0800260b
 8002598:	0800260b 	.word	0x0800260b
 800259c:	0800260b 	.word	0x0800260b
 80025a0:	080025b9 	.word	0x080025b9
 80025a4:	080025cd 	.word	0x080025cd
 80025a8:	4a79      	ldr	r2, [pc, #484]	; (8002790 <HAL_GPIO_Init+0x2b4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ae:	e02c      	b.n	800260a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	623b      	str	r3, [r7, #32]
          break;
 80025b6:	e029      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	3304      	adds	r3, #4
 80025be:	623b      	str	r3, [r7, #32]
          break;
 80025c0:	e024      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	3308      	adds	r3, #8
 80025c8:	623b      	str	r3, [r7, #32]
          break;
 80025ca:	e01f      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	330c      	adds	r3, #12
 80025d2:	623b      	str	r3, [r7, #32]
          break;
 80025d4:	e01a      	b.n	800260c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025de:	2304      	movs	r3, #4
 80025e0:	623b      	str	r3, [r7, #32]
          break;
 80025e2:	e013      	b.n	800260c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025ec:	2308      	movs	r3, #8
 80025ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	611a      	str	r2, [r3, #16]
          break;
 80025f6:	e009      	b.n	800260c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f8:	2308      	movs	r3, #8
 80025fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	615a      	str	r2, [r3, #20]
          break;
 8002602:	e003      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
          break;
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x130>
          break;
 800260a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d801      	bhi.n	8002616 <HAL_GPIO_Init+0x13a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	e001      	b.n	800261a <HAL_GPIO_Init+0x13e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3304      	adds	r3, #4
 800261a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2bff      	cmp	r3, #255	; 0xff
 8002620:	d802      	bhi.n	8002628 <HAL_GPIO_Init+0x14c>
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	e002      	b.n	800262e <HAL_GPIO_Init+0x152>
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	3b08      	subs	r3, #8
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	210f      	movs	r1, #15
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	6a39      	ldr	r1, [r7, #32]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	431a      	orrs	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80b1 	beq.w	80027be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800265c:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_GPIO_Init+0x2b8>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a4c      	ldr	r2, [pc, #304]	; (8002794 <HAL_GPIO_Init+0x2b8>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_GPIO_Init+0x2b8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002674:	4a48      	ldr	r2, [pc, #288]	; (8002798 <HAL_GPIO_Init+0x2bc>)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a40      	ldr	r2, [pc, #256]	; (800279c <HAL_GPIO_Init+0x2c0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <HAL_GPIO_Init+0x1ec>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3f      	ldr	r2, [pc, #252]	; (80027a0 <HAL_GPIO_Init+0x2c4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00d      	beq.n	80026c4 <HAL_GPIO_Init+0x1e8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3e      	ldr	r2, [pc, #248]	; (80027a4 <HAL_GPIO_Init+0x2c8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <HAL_GPIO_Init+0x1e4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3d      	ldr	r2, [pc, #244]	; (80027a8 <HAL_GPIO_Init+0x2cc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_GPIO_Init+0x1e0>
 80026b8:	2303      	movs	r3, #3
 80026ba:	e006      	b.n	80026ca <HAL_GPIO_Init+0x1ee>
 80026bc:	2304      	movs	r3, #4
 80026be:	e004      	b.n	80026ca <HAL_GPIO_Init+0x1ee>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e002      	b.n	80026ca <HAL_GPIO_Init+0x1ee>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_GPIO_Init+0x1ee>
 80026c8:	2300      	movs	r3, #0
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	f002 0203 	and.w	r2, r2, #3
 80026d0:	0092      	lsls	r2, r2, #2
 80026d2:	4093      	lsls	r3, r2
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026da:	492f      	ldr	r1, [pc, #188]	; (8002798 <HAL_GPIO_Init+0x2bc>)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	492c      	ldr	r1, [pc, #176]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	43db      	mvns	r3, r3
 800270a:	4928      	ldr	r1, [pc, #160]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 800270c:	4013      	ands	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800271c:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4922      	ldr	r1, [pc, #136]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	43db      	mvns	r3, r3
 8002732:	491e      	ldr	r1, [pc, #120]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 8002734:	4013      	ands	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4918      	ldr	r1, [pc, #96]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	43db      	mvns	r3, r3
 800275a:	4914      	ldr	r1, [pc, #80]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 800275c:	4013      	ands	r3, r2
 800275e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d021      	beq.n	80027b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
 8002778:	e021      	b.n	80027be <HAL_GPIO_Init+0x2e2>
 800277a:	bf00      	nop
 800277c:	10320000 	.word	0x10320000
 8002780:	10310000 	.word	0x10310000
 8002784:	10220000 	.word	0x10220000
 8002788:	10210000 	.word	0x10210000
 800278c:	10120000 	.word	0x10120000
 8002790:	10110000 	.word	0x10110000
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	40010800 	.word	0x40010800
 80027a0:	40010c00 	.word	0x40010c00
 80027a4:	40011000 	.word	0x40011000
 80027a8:	40011400 	.word	0x40011400
 80027ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_GPIO_Init+0x304>)
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	4909      	ldr	r1, [pc, #36]	; (80027e0 <HAL_GPIO_Init+0x304>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	3301      	adds	r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f47f ae8e 	bne.w	80024f0 <HAL_GPIO_Init+0x14>
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	372c      	adds	r7, #44	; 0x2c
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40010400 	.word	0x40010400

080027e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]
 800281e:	4613      	mov	r3, r2
 8002820:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002822:	787b      	ldrb	r3, [r7, #1]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800282e:	e003      	b.n	8002838 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	041a      	lsls	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
	...

08002844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e12b      	b.n	8002aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe ffec 	bl	8001848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a8:	f000 ffea 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a81      	ldr	r2, [pc, #516]	; (8002ab8 <HAL_I2C_Init+0x274>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d807      	bhi.n	80028c8 <HAL_I2C_Init+0x84>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a80      	ldr	r2, [pc, #512]	; (8002abc <HAL_I2C_Init+0x278>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf94      	ite	ls
 80028c0:	2301      	movls	r3, #1
 80028c2:	2300      	movhi	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e006      	b.n	80028d6 <HAL_I2C_Init+0x92>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a7d      	ldr	r2, [pc, #500]	; (8002ac0 <HAL_I2C_Init+0x27c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0e7      	b.n	8002aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <HAL_I2C_Init+0x280>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a6a      	ldr	r2, [pc, #424]	; (8002ab8 <HAL_I2C_Init+0x274>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d802      	bhi.n	8002918 <HAL_I2C_Init+0xd4>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	e009      	b.n	800292c <HAL_I2C_Init+0xe8>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_I2C_Init+0x284>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	3301      	adds	r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800293e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	495c      	ldr	r1, [pc, #368]	; (8002ab8 <HAL_I2C_Init+0x274>)
 8002948:	428b      	cmp	r3, r1
 800294a:	d819      	bhi.n	8002980 <HAL_I2C_Init+0x13c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e59      	subs	r1, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fbb1 f3f3 	udiv	r3, r1, r3
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002960:	400b      	ands	r3, r1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_I2C_Init+0x138>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e59      	subs	r1, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb1 f3f3 	udiv	r3, r1, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	e051      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 800297c:	2304      	movs	r3, #4
 800297e:	e04f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <HAL_I2C_Init+0x168>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e012      	b.n	80029d2 <HAL_I2C_Init+0x18e>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	0099      	lsls	r1, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Init+0x196>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e022      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10e      	bne.n	8002a00 <HAL_I2C_Init+0x1bc>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e58      	subs	r0, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fe:	e00f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6809      	ldr	r1, [r1, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6911      	ldr	r1, [r2, #16]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	000186a0 	.word	0x000186a0
 8002abc:	001e847f 	.word	0x001e847f
 8002ac0:	003d08ff 	.word	0x003d08ff
 8002ac4:	431bde83 	.word	0x431bde83
 8002ac8:	10624dd3 	.word	0x10624dd3

08002acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	817b      	strh	r3, [r7, #10]
 8002adc:	4613      	mov	r3, r2
 8002ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff f8a8 	bl	8001c34 <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	f040 80e0 	bne.w	8002cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	4970      	ldr	r1, [pc, #448]	; (8002cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f964 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0d3      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x50>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d007      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2221      	movs	r2, #33	; 0x21
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f89c 	bl	8002cc8 <I2C_MasterRequestWrite>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e08d      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bb0:	e066      	b.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f9de 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06b      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d11b      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6a39      	ldr	r1, [r7, #32]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f9ce 	bl	8002ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d107      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e01a      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d194      	bne.n	8002bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	00100002 	.word	0x00100002
 8002cc4:	ffff0000 	.word	0xffff0000

08002cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d006      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d003      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e00b      	b.n	8002d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b12      	cmp	r3, #18
 8002d0a:	d107      	bne.n	8002d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f84f 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d42:	d103      	bne.n	8002d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e035      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e01b      	b.n	8002da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	11db      	asrs	r3, r3, #7
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0306 	and.w	r3, r3, #6
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f063 030f 	orn	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <I2C_MasterRequestWrite+0xfc>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f875 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e010      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <I2C_MasterRequestWrite+0x100>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f865 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00010008 	.word	0x00010008
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e025      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe ff25 	bl	8001c34 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e023      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10d      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	e00c      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0b6      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	e051      	b.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d123      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e046      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fea3 	bl	8001c34 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e00b      	b.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d18d      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e02d      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f878 	bl	800307c <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02d      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d021      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fe49 	bl	8001c34 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d116      	bne.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d1ca      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003006:	e02d      	b.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f837 	bl	800307c <I2C_IsAcknowledgeFailed>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02d      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d021      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe fe08 	bl	8001c34 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d1ca      	bne.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d11b      	bne.n	80030cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e26c      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b92      	ldr	r3, [pc, #584]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00c      	beq.n	800311e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d112      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
 8003110:	4b8c      	ldr	r3, [pc, #560]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b89      	ldr	r3, [pc, #548]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x12c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e246      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x76>
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7f      	ldr	r2, [pc, #508]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7a      	ldr	r2, [pc, #488]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b78      	ldr	r3, [pc, #480]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a77      	ldr	r2, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xbc>
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6e      	ldr	r2, [pc, #440]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003194:	4b6b      	ldr	r3, [pc, #428]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a67      	ldr	r2, [pc, #412]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fd3e 	bl	8001c34 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fd3a 	bl	8001c34 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e1fa      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe4>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fd2a 	bl	8001c34 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fd26 	bl	8001c34 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1e6      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x10c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800321e:	4b49      	ldr	r3, [pc, #292]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1ba      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4939      	ldr	r1, [pc, #228]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fcdf 	bl	8001c34 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fcdb 	bl	8001c34 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e19b      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4927      	ldr	r1, [pc, #156]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fcbe 	bl	8001c34 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe fcba 	bl	8001c34 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e17a      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03a      	beq.n	800335c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f4:	f7fe fc9e 	bl	8001c34 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fe fc9a 	bl	8001c34 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e15a      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f000 fad8 	bl	80038d0 <RCC_Delay>
 8003320:	e01c      	b.n	800335c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fc84 	bl	8001c34 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe fc80 	bl	8001c34 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d908      	bls.n	8003350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e140      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	42420000 	.word	0x42420000
 800334c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b9e      	ldr	r3, [pc, #632]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e9      	bne.n	8003330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a6 	beq.w	80034b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b97      	ldr	r3, [pc, #604]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a93      	ldr	r2, [pc, #588]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b91      	ldr	r3, [pc, #580]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b8e      	ldr	r3, [pc, #568]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a8a      	ldr	r2, [pc, #552]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fc41 	bl	8001c34 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fe fc3d 	bl	8001c34 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0fd      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x312>
 80033dc:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a7a      	ldr	r2, [pc, #488]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	e02d      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x334>
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a72      	ldr	r2, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x356>
 8003414:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a69      	ldr	r2, [pc, #420]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800342e:	4b67      	ldr	r3, [pc, #412]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a66      	ldr	r2, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	4b64      	ldr	r3, [pc, #400]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a63      	ldr	r2, [pc, #396]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe fbf1 	bl	8001c34 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fbed 	bl	8001c34 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0ab      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b57      	ldr	r3, [pc, #348]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x37e>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe fbdb 	bl	8001c34 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fbd7 	bl	8001c34 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e095      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a47      	ldr	r2, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8081 	beq.w	80035c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d061      	beq.n	8003590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d146      	bne.n	8003562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_OscConfig+0x4fc>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe fbab 	bl	8001c34 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe fba7 	bl	8001c34 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e067      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	492d      	ldr	r1, [pc, #180]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a19      	ldr	r1, [r3, #32]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	430b      	orrs	r3, r1
 800352e:	4927      	ldr	r1, [pc, #156]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_OscConfig+0x4fc>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe fb7b 	bl	8001c34 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe fb77 	bl	8001c34 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e037      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x46a>
 8003560:	e02f      	b.n	80035c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <HAL_RCC_OscConfig+0x4fc>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fb64 	bl	8001c34 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fb60 	bl	8001c34 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e020      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x498>
 800358e:	e018      	b.n	80035c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e013      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
 80035d4:	42420060 	.word	0x42420060

080035d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0d0      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d910      	bls.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 0207 	bic.w	r2, r3, #7
 8003602:	4965      	ldr	r1, [pc, #404]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0b8      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a58      	ldr	r2, [pc, #352]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800363e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800364c:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b50      	ldr	r3, [pc, #320]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	494d      	ldr	r1, [pc, #308]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d040      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07f      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e073      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06b      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4936      	ldr	r1, [pc, #216]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c8:	f7fe fab4 	bl	8001c34 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fe fab0 	bl	8001c34 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e053      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d210      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	4922      	ldr	r1, [pc, #136]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e032      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4916      	ldr	r1, [pc, #88]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	490e      	ldr	r1, [pc, #56]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003766:	f000 f821 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490a      	ldr	r1, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fa12 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40022000 	.word	0x40022000
 800379c:	40021000 	.word	0x40021000
 80037a0:	08008500 	.word	0x08008500
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000004 	.word	0x20000004

080037ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	b490      	push	{r4, r7}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037b2:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_RCC_GetSysClockFreq+0xb0>)
 80037b4:	1d3c      	adds	r4, r7, #4
 80037b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037bc:	f240 2301 	movw	r3, #513	; 0x201
 80037c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037d6:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x40>
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x46>
 80037ea:	e02d      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ee:	623b      	str	r3, [r7, #32]
      break;
 80037f0:	e02d      	b.n	800384e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	0c9b      	lsrs	r3, r3, #18
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037fe:	4413      	add	r3, r2
 8003800:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003804:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0c5b      	lsrs	r3, r3, #17
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800381e:	4413      	add	r3, r2
 8003820:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003824:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800382a:	fb02 f203 	mul.w	r2, r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	e004      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	623b      	str	r3, [r7, #32]
      break;
 8003846:	e002      	b.n	800384e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800384a:	623b      	str	r3, [r7, #32]
      break;
 800384c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384e:	6a3b      	ldr	r3, [r7, #32]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3728      	adds	r7, #40	; 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc90      	pop	{r4, r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	080084f0 	.word	0x080084f0
 8003860:	40021000 	.word	0x40021000
 8003864:	007a1200 	.word	0x007a1200
 8003868:	003d0900 	.word	0x003d0900

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <HAL_RCC_GetHCLKFreq+0x10>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff2 	bl	800386c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08008510 	.word	0x08008510

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff ffde 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0adb      	lsrs	r3, r3, #11
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08008510 	.word	0x08008510

080038d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <RCC_Delay+0x34>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <RCC_Delay+0x38>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	0a5b      	lsrs	r3, r3, #9
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038ec:	bf00      	nop
  }
  while (Delay --);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	60fa      	str	r2, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f9      	bne.n	80038ec <RCC_Delay+0x1c>
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20000000 	.word	0x20000000
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d07d      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	4b4c      	ldr	r3, [pc, #304]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	61d3      	str	r3, [r2, #28]
 8003944:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d118      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003960:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396c:	f7fe f962 	bl	8001c34 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	e008      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fe f95e 	bl	8001c34 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e06d      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d027      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b0:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039c6:	4a29      	ldr	r2, [pc, #164]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d014      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fe f92d 	bl	8001c34 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fe f929 	bl	8001c34 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e036      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ee      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4917      	ldr	r1, [pc, #92]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	490b      	ldr	r1, [pc, #44]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40007000 	.word	0x40007000
 8003a74:	42420440 	.word	0x42420440

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e03f      	b.n	8003b0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd ff10 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f829 	bl	8003b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b4e:	f023 030c 	bic.w	r3, r3, #12
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <UART_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7ff fe94 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	e002      	b.n	8003b8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b84:	f7ff fe7c 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8003b88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <UART_SetConfig+0x118>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	0119      	lsls	r1, r3, #4
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009a      	lsls	r2, r3, #2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <UART_SetConfig+0x118>)
 8003bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2064      	movs	r0, #100	; 0x64
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	3332      	adds	r3, #50	; 0x32
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <UART_SetConfig+0x118>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be0:	4419      	add	r1, r3
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009a      	lsls	r2, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <UART_SetConfig+0x118>)
 8003bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2064      	movs	r0, #100	; 0x64
 8003c02:	fb00 f303 	mul.w	r3, r0, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	3332      	adds	r3, #50	; 0x32
 8003c0c:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <UART_SetConfig+0x118>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	51eb851f 	.word	0x51eb851f

08003c30 <__errno>:
 8003c30:	4b01      	ldr	r3, [pc, #4]	; (8003c38 <__errno+0x8>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	2600      	movs	r6, #0
 8003c40:	4d0c      	ldr	r5, [pc, #48]	; (8003c74 <__libc_init_array+0x38>)
 8003c42:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c44:	1b64      	subs	r4, r4, r5
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	f004 fc2a 	bl	80084a4 <_init>
 8003c50:	2600      	movs	r6, #0
 8003c52:	4d0a      	ldr	r5, [pc, #40]	; (8003c7c <__libc_init_array+0x40>)
 8003c54:	4c0a      	ldr	r4, [pc, #40]	; (8003c80 <__libc_init_array+0x44>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	080089cc 	.word	0x080089cc
 8003c78:	080089cc 	.word	0x080089cc
 8003c7c:	080089cc 	.word	0x080089cc
 8003c80:	080089d0 	.word	0x080089d0

08003c84 <memset>:
 8003c84:	4603      	mov	r3, r0
 8003c86:	4402      	add	r2, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <__cvt>:
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9a:	461f      	mov	r7, r3
 8003c9c:	bfbb      	ittet	lt
 8003c9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003ca2:	461f      	movlt	r7, r3
 8003ca4:	2300      	movge	r3, #0
 8003ca6:	232d      	movlt	r3, #45	; 0x2d
 8003ca8:	b088      	sub	sp, #32
 8003caa:	4614      	mov	r4, r2
 8003cac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003cae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003cb0:	7013      	strb	r3, [r2, #0]
 8003cb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003cb8:	f023 0820 	bic.w	r8, r3, #32
 8003cbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cc0:	d005      	beq.n	8003cce <__cvt+0x3a>
 8003cc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cc6:	d100      	bne.n	8003cca <__cvt+0x36>
 8003cc8:	3501      	adds	r5, #1
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e000      	b.n	8003cd0 <__cvt+0x3c>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	aa07      	add	r2, sp, #28
 8003cd2:	9204      	str	r2, [sp, #16]
 8003cd4:	aa06      	add	r2, sp, #24
 8003cd6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003cda:	e9cd 3500 	strd	r3, r5, [sp]
 8003cde:	4622      	mov	r2, r4
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	f001 fda1 	bl	8005828 <_dtoa_r>
 8003ce6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003cea:	4606      	mov	r6, r0
 8003cec:	d102      	bne.n	8003cf4 <__cvt+0x60>
 8003cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cf0:	07db      	lsls	r3, r3, #31
 8003cf2:	d522      	bpl.n	8003d3a <__cvt+0xa6>
 8003cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cf8:	eb06 0905 	add.w	r9, r6, r5
 8003cfc:	d110      	bne.n	8003d20 <__cvt+0x8c>
 8003cfe:	7833      	ldrb	r3, [r6, #0]
 8003d00:	2b30      	cmp	r3, #48	; 0x30
 8003d02:	d10a      	bne.n	8003d1a <__cvt+0x86>
 8003d04:	2200      	movs	r2, #0
 8003d06:	2300      	movs	r3, #0
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4639      	mov	r1, r7
 8003d0c:	f7fc fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8003d10:	b918      	cbnz	r0, 8003d1a <__cvt+0x86>
 8003d12:	f1c5 0501 	rsb	r5, r5, #1
 8003d16:	f8ca 5000 	str.w	r5, [sl]
 8003d1a:	f8da 3000 	ldr.w	r3, [sl]
 8003d1e:	4499      	add	r9, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	2300      	movs	r3, #0
 8003d24:	4620      	mov	r0, r4
 8003d26:	4639      	mov	r1, r7
 8003d28:	f7fc fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8003d2c:	b108      	cbz	r0, 8003d32 <__cvt+0x9e>
 8003d2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d32:	2230      	movs	r2, #48	; 0x30
 8003d34:	9b07      	ldr	r3, [sp, #28]
 8003d36:	454b      	cmp	r3, r9
 8003d38:	d307      	bcc.n	8003d4a <__cvt+0xb6>
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	9b07      	ldr	r3, [sp, #28]
 8003d3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d40:	1b9b      	subs	r3, r3, r6
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	b008      	add	sp, #32
 8003d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	9107      	str	r1, [sp, #28]
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e7f0      	b.n	8003d34 <__cvt+0xa0>

08003d52 <__exponent>:
 8003d52:	4603      	mov	r3, r0
 8003d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d56:	2900      	cmp	r1, #0
 8003d58:	f803 2b02 	strb.w	r2, [r3], #2
 8003d5c:	bfb6      	itet	lt
 8003d5e:	222d      	movlt	r2, #45	; 0x2d
 8003d60:	222b      	movge	r2, #43	; 0x2b
 8003d62:	4249      	neglt	r1, r1
 8003d64:	2909      	cmp	r1, #9
 8003d66:	7042      	strb	r2, [r0, #1]
 8003d68:	dd2b      	ble.n	8003dc2 <__exponent+0x70>
 8003d6a:	f10d 0407 	add.w	r4, sp, #7
 8003d6e:	46a4      	mov	ip, r4
 8003d70:	270a      	movs	r7, #10
 8003d72:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d76:	460a      	mov	r2, r1
 8003d78:	46a6      	mov	lr, r4
 8003d7a:	fb07 1516 	mls	r5, r7, r6, r1
 8003d7e:	2a63      	cmp	r2, #99	; 0x63
 8003d80:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003d84:	4631      	mov	r1, r6
 8003d86:	f104 34ff 	add.w	r4, r4, #4294967295
 8003d8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003d8e:	dcf0      	bgt.n	8003d72 <__exponent+0x20>
 8003d90:	3130      	adds	r1, #48	; 0x30
 8003d92:	f1ae 0502 	sub.w	r5, lr, #2
 8003d96:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	1c44      	adds	r4, r0, #1
 8003d9e:	4561      	cmp	r1, ip
 8003da0:	d30a      	bcc.n	8003db8 <__exponent+0x66>
 8003da2:	f10d 0209 	add.w	r2, sp, #9
 8003da6:	eba2 020e 	sub.w	r2, r2, lr
 8003daa:	4565      	cmp	r5, ip
 8003dac:	bf88      	it	hi
 8003dae:	2200      	movhi	r2, #0
 8003db0:	4413      	add	r3, r2
 8003db2:	1a18      	subs	r0, r3, r0
 8003db4:	b003      	add	sp, #12
 8003db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dbc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003dc0:	e7ed      	b.n	8003d9e <__exponent+0x4c>
 8003dc2:	2330      	movs	r3, #48	; 0x30
 8003dc4:	3130      	adds	r1, #48	; 0x30
 8003dc6:	7083      	strb	r3, [r0, #2]
 8003dc8:	70c1      	strb	r1, [r0, #3]
 8003dca:	1d03      	adds	r3, r0, #4
 8003dcc:	e7f1      	b.n	8003db2 <__exponent+0x60>
	...

08003dd0 <_printf_float>:
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	b091      	sub	sp, #68	; 0x44
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ddc:	4616      	mov	r6, r2
 8003dde:	461f      	mov	r7, r3
 8003de0:	4605      	mov	r5, r0
 8003de2:	f002 fe75 	bl	8006ad0 <_localeconv_r>
 8003de6:	6803      	ldr	r3, [r0, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	9309      	str	r3, [sp, #36]	; 0x24
 8003dec:	f7fc f9b0 	bl	8000150 <strlen>
 8003df0:	2300      	movs	r3, #0
 8003df2:	930e      	str	r3, [sp, #56]	; 0x38
 8003df4:	f8d8 3000 	ldr.w	r3, [r8]
 8003df8:	900a      	str	r0, [sp, #40]	; 0x28
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	f103 0208 	add.w	r2, r3, #8
 8003e04:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e08:	f8d4 b000 	ldr.w	fp, [r4]
 8003e0c:	f8c8 2000 	str.w	r2, [r8]
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e18:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003e1c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	4640      	mov	r0, r8
 8003e28:	4b9c      	ldr	r3, [pc, #624]	; (800409c <_printf_float+0x2cc>)
 8003e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e2c:	f7fc fdee 	bl	8000a0c <__aeabi_dcmpun>
 8003e30:	bb70      	cbnz	r0, 8003e90 <_printf_float+0xc0>
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	4640      	mov	r0, r8
 8003e38:	4b98      	ldr	r3, [pc, #608]	; (800409c <_printf_float+0x2cc>)
 8003e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e3c:	f7fc fdc8 	bl	80009d0 <__aeabi_dcmple>
 8003e40:	bb30      	cbnz	r0, 8003e90 <_printf_float+0xc0>
 8003e42:	2200      	movs	r2, #0
 8003e44:	2300      	movs	r3, #0
 8003e46:	4640      	mov	r0, r8
 8003e48:	4651      	mov	r1, sl
 8003e4a:	f7fc fdb7 	bl	80009bc <__aeabi_dcmplt>
 8003e4e:	b110      	cbz	r0, 8003e56 <_printf_float+0x86>
 8003e50:	232d      	movs	r3, #45	; 0x2d
 8003e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e56:	4b92      	ldr	r3, [pc, #584]	; (80040a0 <_printf_float+0x2d0>)
 8003e58:	4892      	ldr	r0, [pc, #584]	; (80040a4 <_printf_float+0x2d4>)
 8003e5a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e5e:	bf94      	ite	ls
 8003e60:	4698      	movls	r8, r3
 8003e62:	4680      	movhi	r8, r0
 8003e64:	2303      	movs	r3, #3
 8003e66:	f04f 0a00 	mov.w	sl, #0
 8003e6a:	6123      	str	r3, [r4, #16]
 8003e6c:	f02b 0304 	bic.w	r3, fp, #4
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	4633      	mov	r3, r6
 8003e74:	4621      	mov	r1, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	9700      	str	r7, [sp, #0]
 8003e7a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e7c:	f000 f9d4 	bl	8004228 <_printf_common>
 8003e80:	3001      	adds	r0, #1
 8003e82:	f040 8090 	bne.w	8003fa6 <_printf_float+0x1d6>
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	b011      	add	sp, #68	; 0x44
 8003e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e90:	4642      	mov	r2, r8
 8003e92:	4653      	mov	r3, sl
 8003e94:	4640      	mov	r0, r8
 8003e96:	4651      	mov	r1, sl
 8003e98:	f7fc fdb8 	bl	8000a0c <__aeabi_dcmpun>
 8003e9c:	b148      	cbz	r0, 8003eb2 <_printf_float+0xe2>
 8003e9e:	f1ba 0f00 	cmp.w	sl, #0
 8003ea2:	bfb8      	it	lt
 8003ea4:	232d      	movlt	r3, #45	; 0x2d
 8003ea6:	4880      	ldr	r0, [pc, #512]	; (80040a8 <_printf_float+0x2d8>)
 8003ea8:	bfb8      	it	lt
 8003eaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003eae:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <_printf_float+0x2dc>)
 8003eb0:	e7d3      	b.n	8003e5a <_printf_float+0x8a>
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	d142      	bne.n	8003f42 <_printf_float+0x172>
 8003ebc:	2306      	movs	r3, #6
 8003ebe:	6063      	str	r3, [r4, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	9206      	str	r2, [sp, #24]
 8003ec4:	aa0e      	add	r2, sp, #56	; 0x38
 8003ec6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003eca:	aa0d      	add	r2, sp, #52	; 0x34
 8003ecc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ed0:	9203      	str	r2, [sp, #12]
 8003ed2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003ed6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003eda:	6023      	str	r3, [r4, #0]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	4642      	mov	r2, r8
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	4653      	mov	r3, sl
 8003ee6:	910b      	str	r1, [sp, #44]	; 0x2c
 8003ee8:	f7ff fed4 	bl	8003c94 <__cvt>
 8003eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eee:	4680      	mov	r8, r0
 8003ef0:	2947      	cmp	r1, #71	; 0x47
 8003ef2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ef4:	d108      	bne.n	8003f08 <_printf_float+0x138>
 8003ef6:	1cc8      	adds	r0, r1, #3
 8003ef8:	db02      	blt.n	8003f00 <_printf_float+0x130>
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	4299      	cmp	r1, r3
 8003efe:	dd40      	ble.n	8003f82 <_printf_float+0x1b2>
 8003f00:	f1a9 0902 	sub.w	r9, r9, #2
 8003f04:	fa5f f989 	uxtb.w	r9, r9
 8003f08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f0c:	d81f      	bhi.n	8003f4e <_printf_float+0x17e>
 8003f0e:	464a      	mov	r2, r9
 8003f10:	3901      	subs	r1, #1
 8003f12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f16:	910d      	str	r1, [sp, #52]	; 0x34
 8003f18:	f7ff ff1b 	bl	8003d52 <__exponent>
 8003f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f1e:	4682      	mov	sl, r0
 8003f20:	1813      	adds	r3, r2, r0
 8003f22:	2a01      	cmp	r2, #1
 8003f24:	6123      	str	r3, [r4, #16]
 8003f26:	dc02      	bgt.n	8003f2e <_printf_float+0x15e>
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	07d2      	lsls	r2, r2, #31
 8003f2c:	d501      	bpl.n	8003f32 <_printf_float+0x162>
 8003f2e:	3301      	adds	r3, #1
 8003f30:	6123      	str	r3, [r4, #16]
 8003f32:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d09b      	beq.n	8003e72 <_printf_float+0xa2>
 8003f3a:	232d      	movs	r3, #45	; 0x2d
 8003f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f40:	e797      	b.n	8003e72 <_printf_float+0xa2>
 8003f42:	2947      	cmp	r1, #71	; 0x47
 8003f44:	d1bc      	bne.n	8003ec0 <_printf_float+0xf0>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ba      	bne.n	8003ec0 <_printf_float+0xf0>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e7b7      	b.n	8003ebe <_printf_float+0xee>
 8003f4e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f52:	d118      	bne.n	8003f86 <_printf_float+0x1b6>
 8003f54:	2900      	cmp	r1, #0
 8003f56:	6863      	ldr	r3, [r4, #4]
 8003f58:	dd0b      	ble.n	8003f72 <_printf_float+0x1a2>
 8003f5a:	6121      	str	r1, [r4, #16]
 8003f5c:	b913      	cbnz	r3, 8003f64 <_printf_float+0x194>
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	07d0      	lsls	r0, r2, #31
 8003f62:	d502      	bpl.n	8003f6a <_printf_float+0x19a>
 8003f64:	3301      	adds	r3, #1
 8003f66:	440b      	add	r3, r1
 8003f68:	6123      	str	r3, [r4, #16]
 8003f6a:	f04f 0a00 	mov.w	sl, #0
 8003f6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f70:	e7df      	b.n	8003f32 <_printf_float+0x162>
 8003f72:	b913      	cbnz	r3, 8003f7a <_printf_float+0x1aa>
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	07d2      	lsls	r2, r2, #31
 8003f78:	d501      	bpl.n	8003f7e <_printf_float+0x1ae>
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	e7f4      	b.n	8003f68 <_printf_float+0x198>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e7f2      	b.n	8003f68 <_printf_float+0x198>
 8003f82:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	db05      	blt.n	8003f98 <_printf_float+0x1c8>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	6121      	str	r1, [r4, #16]
 8003f90:	07d8      	lsls	r0, r3, #31
 8003f92:	d5ea      	bpl.n	8003f6a <_printf_float+0x19a>
 8003f94:	1c4b      	adds	r3, r1, #1
 8003f96:	e7e7      	b.n	8003f68 <_printf_float+0x198>
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	bfcc      	ite	gt
 8003f9c:	2201      	movgt	r2, #1
 8003f9e:	f1c1 0202 	rsble	r2, r1, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	e7e0      	b.n	8003f68 <_printf_float+0x198>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	055a      	lsls	r2, r3, #21
 8003faa:	d407      	bmi.n	8003fbc <_printf_float+0x1ec>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	4642      	mov	r2, r8
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	47b8      	blx	r7
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d12b      	bne.n	8004012 <_printf_float+0x242>
 8003fba:	e764      	b.n	8003e86 <_printf_float+0xb6>
 8003fbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fc0:	f240 80dd 	bls.w	800417e <_printf_float+0x3ae>
 8003fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f7fc fcec 	bl	80009a8 <__aeabi_dcmpeq>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d033      	beq.n	800403c <_printf_float+0x26c>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	4a35      	ldr	r2, [pc, #212]	; (80040b0 <_printf_float+0x2e0>)
 8003fdc:	47b8      	blx	r7
 8003fde:	3001      	adds	r0, #1
 8003fe0:	f43f af51 	beq.w	8003e86 <_printf_float+0xb6>
 8003fe4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	db02      	blt.n	8003ff2 <_printf_float+0x222>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	07d8      	lsls	r0, r3, #31
 8003ff0:	d50f      	bpl.n	8004012 <_printf_float+0x242>
 8003ff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	47b8      	blx	r7
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	f43f af42 	beq.w	8003e86 <_printf_float+0xb6>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	f104 091a 	add.w	r9, r4, #26
 800400a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800400c:	3b01      	subs	r3, #1
 800400e:	4543      	cmp	r3, r8
 8004010:	dc09      	bgt.n	8004026 <_printf_float+0x256>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	079b      	lsls	r3, r3, #30
 8004016:	f100 8102 	bmi.w	800421e <_printf_float+0x44e>
 800401a:	68e0      	ldr	r0, [r4, #12]
 800401c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800401e:	4298      	cmp	r0, r3
 8004020:	bfb8      	it	lt
 8004022:	4618      	movlt	r0, r3
 8004024:	e731      	b.n	8003e8a <_printf_float+0xba>
 8004026:	2301      	movs	r3, #1
 8004028:	464a      	mov	r2, r9
 800402a:	4631      	mov	r1, r6
 800402c:	4628      	mov	r0, r5
 800402e:	47b8      	blx	r7
 8004030:	3001      	adds	r0, #1
 8004032:	f43f af28 	beq.w	8003e86 <_printf_float+0xb6>
 8004036:	f108 0801 	add.w	r8, r8, #1
 800403a:	e7e6      	b.n	800400a <_printf_float+0x23a>
 800403c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800403e:	2b00      	cmp	r3, #0
 8004040:	dc38      	bgt.n	80040b4 <_printf_float+0x2e4>
 8004042:	2301      	movs	r3, #1
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <_printf_float+0x2e0>)
 800404a:	47b8      	blx	r7
 800404c:	3001      	adds	r0, #1
 800404e:	f43f af1a 	beq.w	8003e86 <_printf_float+0xb6>
 8004052:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004056:	4313      	orrs	r3, r2
 8004058:	d102      	bne.n	8004060 <_printf_float+0x290>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	07d9      	lsls	r1, r3, #31
 800405e:	d5d8      	bpl.n	8004012 <_printf_float+0x242>
 8004060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004064:	4631      	mov	r1, r6
 8004066:	4628      	mov	r0, r5
 8004068:	47b8      	blx	r7
 800406a:	3001      	adds	r0, #1
 800406c:	f43f af0b 	beq.w	8003e86 <_printf_float+0xb6>
 8004070:	f04f 0900 	mov.w	r9, #0
 8004074:	f104 0a1a 	add.w	sl, r4, #26
 8004078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800407a:	425b      	negs	r3, r3
 800407c:	454b      	cmp	r3, r9
 800407e:	dc01      	bgt.n	8004084 <_printf_float+0x2b4>
 8004080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004082:	e794      	b.n	8003fae <_printf_float+0x1de>
 8004084:	2301      	movs	r3, #1
 8004086:	4652      	mov	r2, sl
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	f43f aef9 	beq.w	8003e86 <_printf_float+0xb6>
 8004094:	f109 0901 	add.w	r9, r9, #1
 8004098:	e7ee      	b.n	8004078 <_printf_float+0x2a8>
 800409a:	bf00      	nop
 800409c:	7fefffff 	.word	0x7fefffff
 80040a0:	0800851c 	.word	0x0800851c
 80040a4:	08008520 	.word	0x08008520
 80040a8:	08008528 	.word	0x08008528
 80040ac:	08008524 	.word	0x08008524
 80040b0:	0800852c 	.word	0x0800852c
 80040b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bfa8      	it	ge
 80040bc:	461a      	movge	r2, r3
 80040be:	2a00      	cmp	r2, #0
 80040c0:	4691      	mov	r9, r2
 80040c2:	dc37      	bgt.n	8004134 <_printf_float+0x364>
 80040c4:	f04f 0b00 	mov.w	fp, #0
 80040c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040cc:	f104 021a 	add.w	r2, r4, #26
 80040d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040d4:	ebaa 0309 	sub.w	r3, sl, r9
 80040d8:	455b      	cmp	r3, fp
 80040da:	dc33      	bgt.n	8004144 <_printf_float+0x374>
 80040dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040e0:	429a      	cmp	r2, r3
 80040e2:	db3b      	blt.n	800415c <_printf_float+0x38c>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07da      	lsls	r2, r3, #31
 80040e8:	d438      	bmi.n	800415c <_printf_float+0x38c>
 80040ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040ee:	eba2 030a 	sub.w	r3, r2, sl
 80040f2:	eba2 0901 	sub.w	r9, r2, r1
 80040f6:	4599      	cmp	r9, r3
 80040f8:	bfa8      	it	ge
 80040fa:	4699      	movge	r9, r3
 80040fc:	f1b9 0f00 	cmp.w	r9, #0
 8004100:	dc34      	bgt.n	800416c <_printf_float+0x39c>
 8004102:	f04f 0800 	mov.w	r8, #0
 8004106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800410a:	f104 0a1a 	add.w	sl, r4, #26
 800410e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	eba3 0309 	sub.w	r3, r3, r9
 8004118:	4543      	cmp	r3, r8
 800411a:	f77f af7a 	ble.w	8004012 <_printf_float+0x242>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4631      	mov	r1, r6
 8004124:	4628      	mov	r0, r5
 8004126:	47b8      	blx	r7
 8004128:	3001      	adds	r0, #1
 800412a:	f43f aeac 	beq.w	8003e86 <_printf_float+0xb6>
 800412e:	f108 0801 	add.w	r8, r8, #1
 8004132:	e7ec      	b.n	800410e <_printf_float+0x33e>
 8004134:	4613      	mov	r3, r2
 8004136:	4631      	mov	r1, r6
 8004138:	4642      	mov	r2, r8
 800413a:	4628      	mov	r0, r5
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	d1c0      	bne.n	80040c4 <_printf_float+0x2f4>
 8004142:	e6a0      	b.n	8003e86 <_printf_float+0xb6>
 8004144:	2301      	movs	r3, #1
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	920b      	str	r2, [sp, #44]	; 0x2c
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	f43f ae99 	beq.w	8003e86 <_printf_float+0xb6>
 8004154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004156:	f10b 0b01 	add.w	fp, fp, #1
 800415a:	e7b9      	b.n	80040d0 <_printf_float+0x300>
 800415c:	4631      	mov	r1, r6
 800415e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	d1bf      	bne.n	80040ea <_printf_float+0x31a>
 800416a:	e68c      	b.n	8003e86 <_printf_float+0xb6>
 800416c:	464b      	mov	r3, r9
 800416e:	4631      	mov	r1, r6
 8004170:	4628      	mov	r0, r5
 8004172:	eb08 020a 	add.w	r2, r8, sl
 8004176:	47b8      	blx	r7
 8004178:	3001      	adds	r0, #1
 800417a:	d1c2      	bne.n	8004102 <_printf_float+0x332>
 800417c:	e683      	b.n	8003e86 <_printf_float+0xb6>
 800417e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004180:	2a01      	cmp	r2, #1
 8004182:	dc01      	bgt.n	8004188 <_printf_float+0x3b8>
 8004184:	07db      	lsls	r3, r3, #31
 8004186:	d537      	bpl.n	80041f8 <_printf_float+0x428>
 8004188:	2301      	movs	r3, #1
 800418a:	4642      	mov	r2, r8
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f ae77 	beq.w	8003e86 <_printf_float+0xb6>
 8004198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800419c:	4631      	mov	r1, r6
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f ae6f 	beq.w	8003e86 <_printf_float+0xb6>
 80041a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041ac:	2200      	movs	r2, #0
 80041ae:	2300      	movs	r3, #0
 80041b0:	f7fc fbfa 	bl	80009a8 <__aeabi_dcmpeq>
 80041b4:	b9d8      	cbnz	r0, 80041ee <_printf_float+0x41e>
 80041b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b8:	f108 0201 	add.w	r2, r8, #1
 80041bc:	3b01      	subs	r3, #1
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	d10e      	bne.n	80041e6 <_printf_float+0x416>
 80041c8:	e65d      	b.n	8003e86 <_printf_float+0xb6>
 80041ca:	2301      	movs	r3, #1
 80041cc:	464a      	mov	r2, r9
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	f43f ae56 	beq.w	8003e86 <_printf_float+0xb6>
 80041da:	f108 0801 	add.w	r8, r8, #1
 80041de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e0:	3b01      	subs	r3, #1
 80041e2:	4543      	cmp	r3, r8
 80041e4:	dcf1      	bgt.n	80041ca <_printf_float+0x3fa>
 80041e6:	4653      	mov	r3, sl
 80041e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041ec:	e6e0      	b.n	8003fb0 <_printf_float+0x1e0>
 80041ee:	f04f 0800 	mov.w	r8, #0
 80041f2:	f104 091a 	add.w	r9, r4, #26
 80041f6:	e7f2      	b.n	80041de <_printf_float+0x40e>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4642      	mov	r2, r8
 80041fc:	e7df      	b.n	80041be <_printf_float+0x3ee>
 80041fe:	2301      	movs	r3, #1
 8004200:	464a      	mov	r2, r9
 8004202:	4631      	mov	r1, r6
 8004204:	4628      	mov	r0, r5
 8004206:	47b8      	blx	r7
 8004208:	3001      	adds	r0, #1
 800420a:	f43f ae3c 	beq.w	8003e86 <_printf_float+0xb6>
 800420e:	f108 0801 	add.w	r8, r8, #1
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004216:	1a5b      	subs	r3, r3, r1
 8004218:	4543      	cmp	r3, r8
 800421a:	dcf0      	bgt.n	80041fe <_printf_float+0x42e>
 800421c:	e6fd      	b.n	800401a <_printf_float+0x24a>
 800421e:	f04f 0800 	mov.w	r8, #0
 8004222:	f104 0919 	add.w	r9, r4, #25
 8004226:	e7f4      	b.n	8004212 <_printf_float+0x442>

08004228 <_printf_common>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	4616      	mov	r6, r2
 800422e:	4699      	mov	r9, r3
 8004230:	688a      	ldr	r2, [r1, #8]
 8004232:	690b      	ldr	r3, [r1, #16]
 8004234:	4607      	mov	r7, r0
 8004236:	4293      	cmp	r3, r2
 8004238:	bfb8      	it	lt
 800423a:	4613      	movlt	r3, r2
 800423c:	6033      	str	r3, [r6, #0]
 800423e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004242:	460c      	mov	r4, r1
 8004244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004248:	b10a      	cbz	r2, 800424e <_printf_common+0x26>
 800424a:	3301      	adds	r3, #1
 800424c:	6033      	str	r3, [r6, #0]
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	0699      	lsls	r1, r3, #26
 8004252:	bf42      	ittt	mi
 8004254:	6833      	ldrmi	r3, [r6, #0]
 8004256:	3302      	addmi	r3, #2
 8004258:	6033      	strmi	r3, [r6, #0]
 800425a:	6825      	ldr	r5, [r4, #0]
 800425c:	f015 0506 	ands.w	r5, r5, #6
 8004260:	d106      	bne.n	8004270 <_printf_common+0x48>
 8004262:	f104 0a19 	add.w	sl, r4, #25
 8004266:	68e3      	ldr	r3, [r4, #12]
 8004268:	6832      	ldr	r2, [r6, #0]
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	42ab      	cmp	r3, r5
 800426e:	dc28      	bgt.n	80042c2 <_printf_common+0x9a>
 8004270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004274:	1e13      	subs	r3, r2, #0
 8004276:	6822      	ldr	r2, [r4, #0]
 8004278:	bf18      	it	ne
 800427a:	2301      	movne	r3, #1
 800427c:	0692      	lsls	r2, r2, #26
 800427e:	d42d      	bmi.n	80042dc <_printf_common+0xb4>
 8004280:	4649      	mov	r1, r9
 8004282:	4638      	mov	r0, r7
 8004284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004288:	47c0      	blx	r8
 800428a:	3001      	adds	r0, #1
 800428c:	d020      	beq.n	80042d0 <_printf_common+0xa8>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	68e5      	ldr	r5, [r4, #12]
 8004292:	f003 0306 	and.w	r3, r3, #6
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf18      	it	ne
 800429a:	2500      	movne	r5, #0
 800429c:	6832      	ldr	r2, [r6, #0]
 800429e:	f04f 0600 	mov.w	r6, #0
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	bf08      	it	eq
 80042a6:	1aad      	subeq	r5, r5, r2
 80042a8:	6922      	ldr	r2, [r4, #16]
 80042aa:	bf08      	it	eq
 80042ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b0:	4293      	cmp	r3, r2
 80042b2:	bfc4      	itt	gt
 80042b4:	1a9b      	subgt	r3, r3, r2
 80042b6:	18ed      	addgt	r5, r5, r3
 80042b8:	341a      	adds	r4, #26
 80042ba:	42b5      	cmp	r5, r6
 80042bc:	d11a      	bne.n	80042f4 <_printf_common+0xcc>
 80042be:	2000      	movs	r0, #0
 80042c0:	e008      	b.n	80042d4 <_printf_common+0xac>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4652      	mov	r2, sl
 80042c6:	4649      	mov	r1, r9
 80042c8:	4638      	mov	r0, r7
 80042ca:	47c0      	blx	r8
 80042cc:	3001      	adds	r0, #1
 80042ce:	d103      	bne.n	80042d8 <_printf_common+0xb0>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d8:	3501      	adds	r5, #1
 80042da:	e7c4      	b.n	8004266 <_printf_common+0x3e>
 80042dc:	2030      	movs	r0, #48	; 0x30
 80042de:	18e1      	adds	r1, r4, r3
 80042e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042ea:	4422      	add	r2, r4
 80042ec:	3302      	adds	r3, #2
 80042ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042f2:	e7c5      	b.n	8004280 <_printf_common+0x58>
 80042f4:	2301      	movs	r3, #1
 80042f6:	4622      	mov	r2, r4
 80042f8:	4649      	mov	r1, r9
 80042fa:	4638      	mov	r0, r7
 80042fc:	47c0      	blx	r8
 80042fe:	3001      	adds	r0, #1
 8004300:	d0e6      	beq.n	80042d0 <_printf_common+0xa8>
 8004302:	3601      	adds	r6, #1
 8004304:	e7d9      	b.n	80042ba <_printf_common+0x92>
	...

08004308 <_printf_i>:
 8004308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	460c      	mov	r4, r1
 800430e:	7e27      	ldrb	r7, [r4, #24]
 8004310:	4691      	mov	r9, r2
 8004312:	2f78      	cmp	r7, #120	; 0x78
 8004314:	4680      	mov	r8, r0
 8004316:	469a      	mov	sl, r3
 8004318:	990c      	ldr	r1, [sp, #48]	; 0x30
 800431a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800431e:	d807      	bhi.n	8004330 <_printf_i+0x28>
 8004320:	2f62      	cmp	r7, #98	; 0x62
 8004322:	d80a      	bhi.n	800433a <_printf_i+0x32>
 8004324:	2f00      	cmp	r7, #0
 8004326:	f000 80d9 	beq.w	80044dc <_printf_i+0x1d4>
 800432a:	2f58      	cmp	r7, #88	; 0x58
 800432c:	f000 80a4 	beq.w	8004478 <_printf_i+0x170>
 8004330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004338:	e03a      	b.n	80043b0 <_printf_i+0xa8>
 800433a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800433e:	2b15      	cmp	r3, #21
 8004340:	d8f6      	bhi.n	8004330 <_printf_i+0x28>
 8004342:	a001      	add	r0, pc, #4	; (adr r0, 8004348 <_printf_i+0x40>)
 8004344:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004348:	080043a1 	.word	0x080043a1
 800434c:	080043b5 	.word	0x080043b5
 8004350:	08004331 	.word	0x08004331
 8004354:	08004331 	.word	0x08004331
 8004358:	08004331 	.word	0x08004331
 800435c:	08004331 	.word	0x08004331
 8004360:	080043b5 	.word	0x080043b5
 8004364:	08004331 	.word	0x08004331
 8004368:	08004331 	.word	0x08004331
 800436c:	08004331 	.word	0x08004331
 8004370:	08004331 	.word	0x08004331
 8004374:	080044c3 	.word	0x080044c3
 8004378:	080043e5 	.word	0x080043e5
 800437c:	080044a5 	.word	0x080044a5
 8004380:	08004331 	.word	0x08004331
 8004384:	08004331 	.word	0x08004331
 8004388:	080044e5 	.word	0x080044e5
 800438c:	08004331 	.word	0x08004331
 8004390:	080043e5 	.word	0x080043e5
 8004394:	08004331 	.word	0x08004331
 8004398:	08004331 	.word	0x08004331
 800439c:	080044ad 	.word	0x080044ad
 80043a0:	680b      	ldr	r3, [r1, #0]
 80043a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043a6:	1d1a      	adds	r2, r3, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	600a      	str	r2, [r1, #0]
 80043ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0a4      	b.n	80044fe <_printf_i+0x1f6>
 80043b4:	6825      	ldr	r5, [r4, #0]
 80043b6:	6808      	ldr	r0, [r1, #0]
 80043b8:	062e      	lsls	r6, r5, #24
 80043ba:	f100 0304 	add.w	r3, r0, #4
 80043be:	d50a      	bpl.n	80043d6 <_printf_i+0xce>
 80043c0:	6805      	ldr	r5, [r0, #0]
 80043c2:	600b      	str	r3, [r1, #0]
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	da03      	bge.n	80043d0 <_printf_i+0xc8>
 80043c8:	232d      	movs	r3, #45	; 0x2d
 80043ca:	426d      	negs	r5, r5
 80043cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d0:	230a      	movs	r3, #10
 80043d2:	485e      	ldr	r0, [pc, #376]	; (800454c <_printf_i+0x244>)
 80043d4:	e019      	b.n	800440a <_printf_i+0x102>
 80043d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043da:	6805      	ldr	r5, [r0, #0]
 80043dc:	600b      	str	r3, [r1, #0]
 80043de:	bf18      	it	ne
 80043e0:	b22d      	sxthne	r5, r5
 80043e2:	e7ef      	b.n	80043c4 <_printf_i+0xbc>
 80043e4:	680b      	ldr	r3, [r1, #0]
 80043e6:	6825      	ldr	r5, [r4, #0]
 80043e8:	1d18      	adds	r0, r3, #4
 80043ea:	6008      	str	r0, [r1, #0]
 80043ec:	0628      	lsls	r0, r5, #24
 80043ee:	d501      	bpl.n	80043f4 <_printf_i+0xec>
 80043f0:	681d      	ldr	r5, [r3, #0]
 80043f2:	e002      	b.n	80043fa <_printf_i+0xf2>
 80043f4:	0669      	lsls	r1, r5, #25
 80043f6:	d5fb      	bpl.n	80043f0 <_printf_i+0xe8>
 80043f8:	881d      	ldrh	r5, [r3, #0]
 80043fa:	2f6f      	cmp	r7, #111	; 0x6f
 80043fc:	bf0c      	ite	eq
 80043fe:	2308      	moveq	r3, #8
 8004400:	230a      	movne	r3, #10
 8004402:	4852      	ldr	r0, [pc, #328]	; (800454c <_printf_i+0x244>)
 8004404:	2100      	movs	r1, #0
 8004406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800440a:	6866      	ldr	r6, [r4, #4]
 800440c:	2e00      	cmp	r6, #0
 800440e:	bfa8      	it	ge
 8004410:	6821      	ldrge	r1, [r4, #0]
 8004412:	60a6      	str	r6, [r4, #8]
 8004414:	bfa4      	itt	ge
 8004416:	f021 0104 	bicge.w	r1, r1, #4
 800441a:	6021      	strge	r1, [r4, #0]
 800441c:	b90d      	cbnz	r5, 8004422 <_printf_i+0x11a>
 800441e:	2e00      	cmp	r6, #0
 8004420:	d04d      	beq.n	80044be <_printf_i+0x1b6>
 8004422:	4616      	mov	r6, r2
 8004424:	fbb5 f1f3 	udiv	r1, r5, r3
 8004428:	fb03 5711 	mls	r7, r3, r1, r5
 800442c:	5dc7      	ldrb	r7, [r0, r7]
 800442e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004432:	462f      	mov	r7, r5
 8004434:	42bb      	cmp	r3, r7
 8004436:	460d      	mov	r5, r1
 8004438:	d9f4      	bls.n	8004424 <_printf_i+0x11c>
 800443a:	2b08      	cmp	r3, #8
 800443c:	d10b      	bne.n	8004456 <_printf_i+0x14e>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	07df      	lsls	r7, r3, #31
 8004442:	d508      	bpl.n	8004456 <_printf_i+0x14e>
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	6861      	ldr	r1, [r4, #4]
 8004448:	4299      	cmp	r1, r3
 800444a:	bfde      	ittt	le
 800444c:	2330      	movle	r3, #48	; 0x30
 800444e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004452:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004456:	1b92      	subs	r2, r2, r6
 8004458:	6122      	str	r2, [r4, #16]
 800445a:	464b      	mov	r3, r9
 800445c:	4621      	mov	r1, r4
 800445e:	4640      	mov	r0, r8
 8004460:	f8cd a000 	str.w	sl, [sp]
 8004464:	aa03      	add	r2, sp, #12
 8004466:	f7ff fedf 	bl	8004228 <_printf_common>
 800446a:	3001      	adds	r0, #1
 800446c:	d14c      	bne.n	8004508 <_printf_i+0x200>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	b004      	add	sp, #16
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004478:	4834      	ldr	r0, [pc, #208]	; (800454c <_printf_i+0x244>)
 800447a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800447e:	680e      	ldr	r6, [r1, #0]
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	f856 5b04 	ldr.w	r5, [r6], #4
 8004486:	061f      	lsls	r7, r3, #24
 8004488:	600e      	str	r6, [r1, #0]
 800448a:	d514      	bpl.n	80044b6 <_printf_i+0x1ae>
 800448c:	07d9      	lsls	r1, r3, #31
 800448e:	bf44      	itt	mi
 8004490:	f043 0320 	orrmi.w	r3, r3, #32
 8004494:	6023      	strmi	r3, [r4, #0]
 8004496:	b91d      	cbnz	r5, 80044a0 <_printf_i+0x198>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	f023 0320 	bic.w	r3, r3, #32
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	2310      	movs	r3, #16
 80044a2:	e7af      	b.n	8004404 <_printf_i+0xfc>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	f043 0320 	orr.w	r3, r3, #32
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	2378      	movs	r3, #120	; 0x78
 80044ae:	4828      	ldr	r0, [pc, #160]	; (8004550 <_printf_i+0x248>)
 80044b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044b4:	e7e3      	b.n	800447e <_printf_i+0x176>
 80044b6:	065e      	lsls	r6, r3, #25
 80044b8:	bf48      	it	mi
 80044ba:	b2ad      	uxthmi	r5, r5
 80044bc:	e7e6      	b.n	800448c <_printf_i+0x184>
 80044be:	4616      	mov	r6, r2
 80044c0:	e7bb      	b.n	800443a <_printf_i+0x132>
 80044c2:	680b      	ldr	r3, [r1, #0]
 80044c4:	6826      	ldr	r6, [r4, #0]
 80044c6:	1d1d      	adds	r5, r3, #4
 80044c8:	6960      	ldr	r0, [r4, #20]
 80044ca:	600d      	str	r5, [r1, #0]
 80044cc:	0635      	lsls	r5, r6, #24
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	d501      	bpl.n	80044d6 <_printf_i+0x1ce>
 80044d2:	6018      	str	r0, [r3, #0]
 80044d4:	e002      	b.n	80044dc <_printf_i+0x1d4>
 80044d6:	0671      	lsls	r1, r6, #25
 80044d8:	d5fb      	bpl.n	80044d2 <_printf_i+0x1ca>
 80044da:	8018      	strh	r0, [r3, #0]
 80044dc:	2300      	movs	r3, #0
 80044de:	4616      	mov	r6, r2
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	e7ba      	b.n	800445a <_printf_i+0x152>
 80044e4:	680b      	ldr	r3, [r1, #0]
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	600a      	str	r2, [r1, #0]
 80044ea:	681e      	ldr	r6, [r3, #0]
 80044ec:	2100      	movs	r1, #0
 80044ee:	4630      	mov	r0, r6
 80044f0:	6862      	ldr	r2, [r4, #4]
 80044f2:	f002 fb0b 	bl	8006b0c <memchr>
 80044f6:	b108      	cbz	r0, 80044fc <_printf_i+0x1f4>
 80044f8:	1b80      	subs	r0, r0, r6
 80044fa:	6060      	str	r0, [r4, #4]
 80044fc:	6863      	ldr	r3, [r4, #4]
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	2300      	movs	r3, #0
 8004502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004506:	e7a8      	b.n	800445a <_printf_i+0x152>
 8004508:	4632      	mov	r2, r6
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	47d0      	blx	sl
 8004512:	3001      	adds	r0, #1
 8004514:	d0ab      	beq.n	800446e <_printf_i+0x166>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	079b      	lsls	r3, r3, #30
 800451a:	d413      	bmi.n	8004544 <_printf_i+0x23c>
 800451c:	68e0      	ldr	r0, [r4, #12]
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	4298      	cmp	r0, r3
 8004522:	bfb8      	it	lt
 8004524:	4618      	movlt	r0, r3
 8004526:	e7a4      	b.n	8004472 <_printf_i+0x16a>
 8004528:	2301      	movs	r3, #1
 800452a:	4632      	mov	r2, r6
 800452c:	4649      	mov	r1, r9
 800452e:	4640      	mov	r0, r8
 8004530:	47d0      	blx	sl
 8004532:	3001      	adds	r0, #1
 8004534:	d09b      	beq.n	800446e <_printf_i+0x166>
 8004536:	3501      	adds	r5, #1
 8004538:	68e3      	ldr	r3, [r4, #12]
 800453a:	9903      	ldr	r1, [sp, #12]
 800453c:	1a5b      	subs	r3, r3, r1
 800453e:	42ab      	cmp	r3, r5
 8004540:	dcf2      	bgt.n	8004528 <_printf_i+0x220>
 8004542:	e7eb      	b.n	800451c <_printf_i+0x214>
 8004544:	2500      	movs	r5, #0
 8004546:	f104 0619 	add.w	r6, r4, #25
 800454a:	e7f5      	b.n	8004538 <_printf_i+0x230>
 800454c:	0800852e 	.word	0x0800852e
 8004550:	0800853f 	.word	0x0800853f

08004554 <_scanf_float>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	b087      	sub	sp, #28
 800455a:	9303      	str	r3, [sp, #12]
 800455c:	688b      	ldr	r3, [r1, #8]
 800455e:	4617      	mov	r7, r2
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004566:	bf85      	ittet	hi
 8004568:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800456c:	195b      	addhi	r3, r3, r5
 800456e:	2300      	movls	r3, #0
 8004570:	9302      	strhi	r3, [sp, #8]
 8004572:	bf88      	it	hi
 8004574:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004578:	468b      	mov	fp, r1
 800457a:	f04f 0500 	mov.w	r5, #0
 800457e:	bf8c      	ite	hi
 8004580:	608b      	strhi	r3, [r1, #8]
 8004582:	9302      	strls	r3, [sp, #8]
 8004584:	680b      	ldr	r3, [r1, #0]
 8004586:	4680      	mov	r8, r0
 8004588:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800458c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004590:	460c      	mov	r4, r1
 8004592:	465e      	mov	r6, fp
 8004594:	46aa      	mov	sl, r5
 8004596:	46a9      	mov	r9, r5
 8004598:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800459c:	9501      	str	r5, [sp, #4]
 800459e:	68a2      	ldr	r2, [r4, #8]
 80045a0:	b152      	cbz	r2, 80045b8 <_scanf_float+0x64>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b4e      	cmp	r3, #78	; 0x4e
 80045a8:	d864      	bhi.n	8004674 <_scanf_float+0x120>
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d83c      	bhi.n	8004628 <_scanf_float+0xd4>
 80045ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80045b2:	b2c8      	uxtb	r0, r1
 80045b4:	280e      	cmp	r0, #14
 80045b6:	d93a      	bls.n	800462e <_scanf_float+0xda>
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	d003      	beq.n	80045c6 <_scanf_float+0x72>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045ca:	f1ba 0f01 	cmp.w	sl, #1
 80045ce:	f200 8113 	bhi.w	80047f8 <_scanf_float+0x2a4>
 80045d2:	455e      	cmp	r6, fp
 80045d4:	f200 8105 	bhi.w	80047e2 <_scanf_float+0x28e>
 80045d8:	2501      	movs	r5, #1
 80045da:	4628      	mov	r0, r5
 80045dc:	b007      	add	sp, #28
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80045e6:	2a0d      	cmp	r2, #13
 80045e8:	d8e6      	bhi.n	80045b8 <_scanf_float+0x64>
 80045ea:	a101      	add	r1, pc, #4	; (adr r1, 80045f0 <_scanf_float+0x9c>)
 80045ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045f0:	0800472f 	.word	0x0800472f
 80045f4:	080045b9 	.word	0x080045b9
 80045f8:	080045b9 	.word	0x080045b9
 80045fc:	080045b9 	.word	0x080045b9
 8004600:	0800478f 	.word	0x0800478f
 8004604:	08004767 	.word	0x08004767
 8004608:	080045b9 	.word	0x080045b9
 800460c:	080045b9 	.word	0x080045b9
 8004610:	0800473d 	.word	0x0800473d
 8004614:	080045b9 	.word	0x080045b9
 8004618:	080045b9 	.word	0x080045b9
 800461c:	080045b9 	.word	0x080045b9
 8004620:	080045b9 	.word	0x080045b9
 8004624:	080046f5 	.word	0x080046f5
 8004628:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800462c:	e7db      	b.n	80045e6 <_scanf_float+0x92>
 800462e:	290e      	cmp	r1, #14
 8004630:	d8c2      	bhi.n	80045b8 <_scanf_float+0x64>
 8004632:	a001      	add	r0, pc, #4	; (adr r0, 8004638 <_scanf_float+0xe4>)
 8004634:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004638:	080046e7 	.word	0x080046e7
 800463c:	080045b9 	.word	0x080045b9
 8004640:	080046e7 	.word	0x080046e7
 8004644:	0800477b 	.word	0x0800477b
 8004648:	080045b9 	.word	0x080045b9
 800464c:	08004695 	.word	0x08004695
 8004650:	080046d1 	.word	0x080046d1
 8004654:	080046d1 	.word	0x080046d1
 8004658:	080046d1 	.word	0x080046d1
 800465c:	080046d1 	.word	0x080046d1
 8004660:	080046d1 	.word	0x080046d1
 8004664:	080046d1 	.word	0x080046d1
 8004668:	080046d1 	.word	0x080046d1
 800466c:	080046d1 	.word	0x080046d1
 8004670:	080046d1 	.word	0x080046d1
 8004674:	2b6e      	cmp	r3, #110	; 0x6e
 8004676:	d809      	bhi.n	800468c <_scanf_float+0x138>
 8004678:	2b60      	cmp	r3, #96	; 0x60
 800467a:	d8b2      	bhi.n	80045e2 <_scanf_float+0x8e>
 800467c:	2b54      	cmp	r3, #84	; 0x54
 800467e:	d077      	beq.n	8004770 <_scanf_float+0x21c>
 8004680:	2b59      	cmp	r3, #89	; 0x59
 8004682:	d199      	bne.n	80045b8 <_scanf_float+0x64>
 8004684:	2d07      	cmp	r5, #7
 8004686:	d197      	bne.n	80045b8 <_scanf_float+0x64>
 8004688:	2508      	movs	r5, #8
 800468a:	e029      	b.n	80046e0 <_scanf_float+0x18c>
 800468c:	2b74      	cmp	r3, #116	; 0x74
 800468e:	d06f      	beq.n	8004770 <_scanf_float+0x21c>
 8004690:	2b79      	cmp	r3, #121	; 0x79
 8004692:	e7f6      	b.n	8004682 <_scanf_float+0x12e>
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	05c8      	lsls	r0, r1, #23
 8004698:	d51a      	bpl.n	80046d0 <_scanf_float+0x17c>
 800469a:	9b02      	ldr	r3, [sp, #8]
 800469c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80046a0:	6021      	str	r1, [r4, #0]
 80046a2:	f109 0901 	add.w	r9, r9, #1
 80046a6:	b11b      	cbz	r3, 80046b0 <_scanf_float+0x15c>
 80046a8:	3b01      	subs	r3, #1
 80046aa:	3201      	adds	r2, #1
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	60a2      	str	r2, [r4, #8]
 80046b0:	68a3      	ldr	r3, [r4, #8]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	60a3      	str	r3, [r4, #8]
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	3301      	adds	r3, #1
 80046ba:	6123      	str	r3, [r4, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	f340 8084 	ble.w	80047d0 <_scanf_float+0x27c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	e766      	b.n	800459e <_scanf_float+0x4a>
 80046d0:	eb1a 0f05 	cmn.w	sl, r5
 80046d4:	f47f af70 	bne.w	80045b8 <_scanf_float+0x64>
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80046de:	6022      	str	r2, [r4, #0]
 80046e0:	f806 3b01 	strb.w	r3, [r6], #1
 80046e4:	e7e4      	b.n	80046b0 <_scanf_float+0x15c>
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	0610      	lsls	r0, r2, #24
 80046ea:	f57f af65 	bpl.w	80045b8 <_scanf_float+0x64>
 80046ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f2:	e7f4      	b.n	80046de <_scanf_float+0x18a>
 80046f4:	f1ba 0f00 	cmp.w	sl, #0
 80046f8:	d10e      	bne.n	8004718 <_scanf_float+0x1c4>
 80046fa:	f1b9 0f00 	cmp.w	r9, #0
 80046fe:	d10e      	bne.n	800471e <_scanf_float+0x1ca>
 8004700:	6822      	ldr	r2, [r4, #0]
 8004702:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004706:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800470a:	d108      	bne.n	800471e <_scanf_float+0x1ca>
 800470c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004710:	f04f 0a01 	mov.w	sl, #1
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	e7e3      	b.n	80046e0 <_scanf_float+0x18c>
 8004718:	f1ba 0f02 	cmp.w	sl, #2
 800471c:	d055      	beq.n	80047ca <_scanf_float+0x276>
 800471e:	2d01      	cmp	r5, #1
 8004720:	d002      	beq.n	8004728 <_scanf_float+0x1d4>
 8004722:	2d04      	cmp	r5, #4
 8004724:	f47f af48 	bne.w	80045b8 <_scanf_float+0x64>
 8004728:	3501      	adds	r5, #1
 800472a:	b2ed      	uxtb	r5, r5
 800472c:	e7d8      	b.n	80046e0 <_scanf_float+0x18c>
 800472e:	f1ba 0f01 	cmp.w	sl, #1
 8004732:	f47f af41 	bne.w	80045b8 <_scanf_float+0x64>
 8004736:	f04f 0a02 	mov.w	sl, #2
 800473a:	e7d1      	b.n	80046e0 <_scanf_float+0x18c>
 800473c:	b97d      	cbnz	r5, 800475e <_scanf_float+0x20a>
 800473e:	f1b9 0f00 	cmp.w	r9, #0
 8004742:	f47f af3c 	bne.w	80045be <_scanf_float+0x6a>
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800474c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004750:	f47f af39 	bne.w	80045c6 <_scanf_float+0x72>
 8004754:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004758:	2501      	movs	r5, #1
 800475a:	6022      	str	r2, [r4, #0]
 800475c:	e7c0      	b.n	80046e0 <_scanf_float+0x18c>
 800475e:	2d03      	cmp	r5, #3
 8004760:	d0e2      	beq.n	8004728 <_scanf_float+0x1d4>
 8004762:	2d05      	cmp	r5, #5
 8004764:	e7de      	b.n	8004724 <_scanf_float+0x1d0>
 8004766:	2d02      	cmp	r5, #2
 8004768:	f47f af26 	bne.w	80045b8 <_scanf_float+0x64>
 800476c:	2503      	movs	r5, #3
 800476e:	e7b7      	b.n	80046e0 <_scanf_float+0x18c>
 8004770:	2d06      	cmp	r5, #6
 8004772:	f47f af21 	bne.w	80045b8 <_scanf_float+0x64>
 8004776:	2507      	movs	r5, #7
 8004778:	e7b2      	b.n	80046e0 <_scanf_float+0x18c>
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	0591      	lsls	r1, r2, #22
 800477e:	f57f af1b 	bpl.w	80045b8 <_scanf_float+0x64>
 8004782:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004786:	6022      	str	r2, [r4, #0]
 8004788:	f8cd 9004 	str.w	r9, [sp, #4]
 800478c:	e7a8      	b.n	80046e0 <_scanf_float+0x18c>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004794:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004798:	d006      	beq.n	80047a8 <_scanf_float+0x254>
 800479a:	0550      	lsls	r0, r2, #21
 800479c:	f57f af0c 	bpl.w	80045b8 <_scanf_float+0x64>
 80047a0:	f1b9 0f00 	cmp.w	r9, #0
 80047a4:	f43f af0f 	beq.w	80045c6 <_scanf_float+0x72>
 80047a8:	0591      	lsls	r1, r2, #22
 80047aa:	bf58      	it	pl
 80047ac:	9901      	ldrpl	r1, [sp, #4]
 80047ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047b2:	bf58      	it	pl
 80047b4:	eba9 0101 	subpl.w	r1, r9, r1
 80047b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80047bc:	f04f 0900 	mov.w	r9, #0
 80047c0:	bf58      	it	pl
 80047c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	e78a      	b.n	80046e0 <_scanf_float+0x18c>
 80047ca:	f04f 0a03 	mov.w	sl, #3
 80047ce:	e787      	b.n	80046e0 <_scanf_float+0x18c>
 80047d0:	4639      	mov	r1, r7
 80047d2:	4640      	mov	r0, r8
 80047d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047d8:	4798      	blx	r3
 80047da:	2800      	cmp	r0, #0
 80047dc:	f43f aedf 	beq.w	800459e <_scanf_float+0x4a>
 80047e0:	e6ea      	b.n	80045b8 <_scanf_float+0x64>
 80047e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047e6:	463a      	mov	r2, r7
 80047e8:	4640      	mov	r0, r8
 80047ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047ee:	4798      	blx	r3
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	6123      	str	r3, [r4, #16]
 80047f6:	e6ec      	b.n	80045d2 <_scanf_float+0x7e>
 80047f8:	1e6b      	subs	r3, r5, #1
 80047fa:	2b06      	cmp	r3, #6
 80047fc:	d825      	bhi.n	800484a <_scanf_float+0x2f6>
 80047fe:	2d02      	cmp	r5, #2
 8004800:	d836      	bhi.n	8004870 <_scanf_float+0x31c>
 8004802:	455e      	cmp	r6, fp
 8004804:	f67f aee8 	bls.w	80045d8 <_scanf_float+0x84>
 8004808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800480c:	463a      	mov	r2, r7
 800480e:	4640      	mov	r0, r8
 8004810:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004814:	4798      	blx	r3
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	3b01      	subs	r3, #1
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	e7f1      	b.n	8004802 <_scanf_float+0x2ae>
 800481e:	9802      	ldr	r0, [sp, #8]
 8004820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004824:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004828:	463a      	mov	r2, r7
 800482a:	9002      	str	r0, [sp, #8]
 800482c:	4640      	mov	r0, r8
 800482e:	4798      	blx	r3
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	3b01      	subs	r3, #1
 8004834:	6123      	str	r3, [r4, #16]
 8004836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800483a:	fa5f fa8a 	uxtb.w	sl, sl
 800483e:	f1ba 0f02 	cmp.w	sl, #2
 8004842:	d1ec      	bne.n	800481e <_scanf_float+0x2ca>
 8004844:	3d03      	subs	r5, #3
 8004846:	b2ed      	uxtb	r5, r5
 8004848:	1b76      	subs	r6, r6, r5
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	05da      	lsls	r2, r3, #23
 800484e:	d52f      	bpl.n	80048b0 <_scanf_float+0x35c>
 8004850:	055b      	lsls	r3, r3, #21
 8004852:	d510      	bpl.n	8004876 <_scanf_float+0x322>
 8004854:	455e      	cmp	r6, fp
 8004856:	f67f aebf 	bls.w	80045d8 <_scanf_float+0x84>
 800485a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800485e:	463a      	mov	r2, r7
 8004860:	4640      	mov	r0, r8
 8004862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004866:	4798      	blx	r3
 8004868:	6923      	ldr	r3, [r4, #16]
 800486a:	3b01      	subs	r3, #1
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	e7f1      	b.n	8004854 <_scanf_float+0x300>
 8004870:	46aa      	mov	sl, r5
 8004872:	9602      	str	r6, [sp, #8]
 8004874:	e7df      	b.n	8004836 <_scanf_float+0x2e2>
 8004876:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	2965      	cmp	r1, #101	; 0x65
 800487e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004882:	f106 35ff 	add.w	r5, r6, #4294967295
 8004886:	6123      	str	r3, [r4, #16]
 8004888:	d00c      	beq.n	80048a4 <_scanf_float+0x350>
 800488a:	2945      	cmp	r1, #69	; 0x45
 800488c:	d00a      	beq.n	80048a4 <_scanf_float+0x350>
 800488e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004892:	463a      	mov	r2, r7
 8004894:	4640      	mov	r0, r8
 8004896:	4798      	blx	r3
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800489e:	3b01      	subs	r3, #1
 80048a0:	1eb5      	subs	r5, r6, #2
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	463a      	mov	r2, r7
 80048a6:	4640      	mov	r0, r8
 80048a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048ac:	4798      	blx	r3
 80048ae:	462e      	mov	r6, r5
 80048b0:	6825      	ldr	r5, [r4, #0]
 80048b2:	f015 0510 	ands.w	r5, r5, #16
 80048b6:	d159      	bne.n	800496c <_scanf_float+0x418>
 80048b8:	7035      	strb	r5, [r6, #0]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d11c      	bne.n	8004900 <_scanf_float+0x3ac>
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	454b      	cmp	r3, r9
 80048ca:	eba3 0209 	sub.w	r2, r3, r9
 80048ce:	d124      	bne.n	800491a <_scanf_float+0x3c6>
 80048d0:	2200      	movs	r2, #0
 80048d2:	4659      	mov	r1, fp
 80048d4:	4640      	mov	r0, r8
 80048d6:	f000 fe8b 	bl	80055f0 <_strtod_r>
 80048da:	f8d4 c000 	ldr.w	ip, [r4]
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	f01c 0f02 	tst.w	ip, #2
 80048e4:	4606      	mov	r6, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	d021      	beq.n	8004930 <_scanf_float+0x3dc>
 80048ec:	9903      	ldr	r1, [sp, #12]
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	600a      	str	r2, [r1, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	e9c3 6700 	strd	r6, r7, [r3]
 80048f8:	68e3      	ldr	r3, [r4, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60e3      	str	r3, [r4, #12]
 80048fe:	e66c      	b.n	80045da <_scanf_float+0x86>
 8004900:	9b04      	ldr	r3, [sp, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0e4      	beq.n	80048d0 <_scanf_float+0x37c>
 8004906:	9905      	ldr	r1, [sp, #20]
 8004908:	230a      	movs	r3, #10
 800490a:	462a      	mov	r2, r5
 800490c:	4640      	mov	r0, r8
 800490e:	3101      	adds	r1, #1
 8004910:	f000 fefa 	bl	8005708 <_strtol_r>
 8004914:	9b04      	ldr	r3, [sp, #16]
 8004916:	9e05      	ldr	r6, [sp, #20]
 8004918:	1ac2      	subs	r2, r0, r3
 800491a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800491e:	429e      	cmp	r6, r3
 8004920:	bf28      	it	cs
 8004922:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004926:	4630      	mov	r0, r6
 8004928:	4911      	ldr	r1, [pc, #68]	; (8004970 <_scanf_float+0x41c>)
 800492a:	f000 f829 	bl	8004980 <siprintf>
 800492e:	e7cf      	b.n	80048d0 <_scanf_float+0x37c>
 8004930:	f01c 0f04 	tst.w	ip, #4
 8004934:	f103 0e04 	add.w	lr, r3, #4
 8004938:	d003      	beq.n	8004942 <_scanf_float+0x3ee>
 800493a:	9903      	ldr	r1, [sp, #12]
 800493c:	f8c1 e000 	str.w	lr, [r1]
 8004940:	e7d7      	b.n	80048f2 <_scanf_float+0x39e>
 8004942:	9a03      	ldr	r2, [sp, #12]
 8004944:	f8c2 e000 	str.w	lr, [r2]
 8004948:	f8d3 8000 	ldr.w	r8, [r3]
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	f7fc f85c 	bl	8000a0c <__aeabi_dcmpun>
 8004954:	b128      	cbz	r0, 8004962 <_scanf_float+0x40e>
 8004956:	4807      	ldr	r0, [pc, #28]	; (8004974 <_scanf_float+0x420>)
 8004958:	f000 f80e 	bl	8004978 <nanf>
 800495c:	f8c8 0000 	str.w	r0, [r8]
 8004960:	e7ca      	b.n	80048f8 <_scanf_float+0x3a4>
 8004962:	4630      	mov	r0, r6
 8004964:	4639      	mov	r1, r7
 8004966:	f7fc f8af 	bl	8000ac8 <__aeabi_d2f>
 800496a:	e7f7      	b.n	800495c <_scanf_float+0x408>
 800496c:	2500      	movs	r5, #0
 800496e:	e634      	b.n	80045da <_scanf_float+0x86>
 8004970:	08008550 	.word	0x08008550
 8004974:	08008968 	.word	0x08008968

08004978 <nanf>:
 8004978:	4800      	ldr	r0, [pc, #0]	; (800497c <nanf+0x4>)
 800497a:	4770      	bx	lr
 800497c:	7fc00000 	.word	0x7fc00000

08004980 <siprintf>:
 8004980:	b40e      	push	{r1, r2, r3}
 8004982:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004986:	b500      	push	{lr}
 8004988:	b09c      	sub	sp, #112	; 0x70
 800498a:	ab1d      	add	r3, sp, #116	; 0x74
 800498c:	9002      	str	r0, [sp, #8]
 800498e:	9006      	str	r0, [sp, #24]
 8004990:	9107      	str	r1, [sp, #28]
 8004992:	9104      	str	r1, [sp, #16]
 8004994:	4808      	ldr	r0, [pc, #32]	; (80049b8 <siprintf+0x38>)
 8004996:	4909      	ldr	r1, [pc, #36]	; (80049bc <siprintf+0x3c>)
 8004998:	f853 2b04 	ldr.w	r2, [r3], #4
 800499c:	9105      	str	r1, [sp, #20]
 800499e:	6800      	ldr	r0, [r0, #0]
 80049a0:	a902      	add	r1, sp, #8
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	f002 fe96 	bl	80076d4 <_svfiprintf_r>
 80049a8:	2200      	movs	r2, #0
 80049aa:	9b02      	ldr	r3, [sp, #8]
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	b01c      	add	sp, #112	; 0x70
 80049b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b4:	b003      	add	sp, #12
 80049b6:	4770      	bx	lr
 80049b8:	2000000c 	.word	0x2000000c
 80049bc:	ffff0208 	.word	0xffff0208

080049c0 <sulp>:
 80049c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c4:	460f      	mov	r7, r1
 80049c6:	4690      	mov	r8, r2
 80049c8:	f002 fc2c 	bl	8007224 <__ulp>
 80049cc:	4604      	mov	r4, r0
 80049ce:	460d      	mov	r5, r1
 80049d0:	f1b8 0f00 	cmp.w	r8, #0
 80049d4:	d011      	beq.n	80049fa <sulp+0x3a>
 80049d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80049da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd0b      	ble.n	80049fa <sulp+0x3a>
 80049e2:	2400      	movs	r4, #0
 80049e4:	051b      	lsls	r3, r3, #20
 80049e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80049ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f7fb fd71 	bl	80004d8 <__aeabi_dmul>
 80049f6:	4604      	mov	r4, r0
 80049f8:	460d      	mov	r5, r1
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a02:	0000      	movs	r0, r0
 8004a04:	0000      	movs	r0, r0
	...

08004a08 <_strtod_l>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	469b      	mov	fp, r3
 8004a0e:	2300      	movs	r3, #0
 8004a10:	b0a1      	sub	sp, #132	; 0x84
 8004a12:	931c      	str	r3, [sp, #112]	; 0x70
 8004a14:	4ba1      	ldr	r3, [pc, #644]	; (8004c9c <_strtod_l+0x294>)
 8004a16:	4682      	mov	sl, r0
 8004a18:	681f      	ldr	r7, [r3, #0]
 8004a1a:	460e      	mov	r6, r1
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a20:	f7fb fb96 	bl	8000150 <strlen>
 8004a24:	f04f 0800 	mov.w	r8, #0
 8004a28:	4604      	mov	r4, r0
 8004a2a:	f04f 0900 	mov.w	r9, #0
 8004a2e:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a32:	781a      	ldrb	r2, [r3, #0]
 8004a34:	2a2b      	cmp	r2, #43	; 0x2b
 8004a36:	d04c      	beq.n	8004ad2 <_strtod_l+0xca>
 8004a38:	d83a      	bhi.n	8004ab0 <_strtod_l+0xa8>
 8004a3a:	2a0d      	cmp	r2, #13
 8004a3c:	d833      	bhi.n	8004aa6 <_strtod_l+0x9e>
 8004a3e:	2a08      	cmp	r2, #8
 8004a40:	d833      	bhi.n	8004aaa <_strtod_l+0xa2>
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d03d      	beq.n	8004ac2 <_strtod_l+0xba>
 8004a46:	2300      	movs	r3, #0
 8004a48:	930c      	str	r3, [sp, #48]	; 0x30
 8004a4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004a4c:	782b      	ldrb	r3, [r5, #0]
 8004a4e:	2b30      	cmp	r3, #48	; 0x30
 8004a50:	f040 80af 	bne.w	8004bb2 <_strtod_l+0x1aa>
 8004a54:	786b      	ldrb	r3, [r5, #1]
 8004a56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004a5a:	2b58      	cmp	r3, #88	; 0x58
 8004a5c:	d16c      	bne.n	8004b38 <_strtod_l+0x130>
 8004a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a60:	4650      	mov	r0, sl
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	ab1c      	add	r3, sp, #112	; 0x70
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4a8d      	ldr	r2, [pc, #564]	; (8004ca0 <_strtod_l+0x298>)
 8004a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8004a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a70:	a91b      	add	r1, sp, #108	; 0x6c
 8004a72:	f001 fd2f 	bl	80064d4 <__gethex>
 8004a76:	f010 0607 	ands.w	r6, r0, #7
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	d005      	beq.n	8004a8a <_strtod_l+0x82>
 8004a7e:	2e06      	cmp	r6, #6
 8004a80:	d129      	bne.n	8004ad6 <_strtod_l+0xce>
 8004a82:	2300      	movs	r3, #0
 8004a84:	3501      	adds	r5, #1
 8004a86:	951b      	str	r5, [sp, #108]	; 0x6c
 8004a88:	930c      	str	r3, [sp, #48]	; 0x30
 8004a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 8596 	bne.w	80055be <_strtod_l+0xbb6>
 8004a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a94:	b1d3      	cbz	r3, 8004acc <_strtod_l+0xc4>
 8004a96:	4642      	mov	r2, r8
 8004a98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	b021      	add	sp, #132	; 0x84
 8004aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa6:	2a20      	cmp	r2, #32
 8004aa8:	d1cd      	bne.n	8004a46 <_strtod_l+0x3e>
 8004aaa:	3301      	adds	r3, #1
 8004aac:	931b      	str	r3, [sp, #108]	; 0x6c
 8004aae:	e7bf      	b.n	8004a30 <_strtod_l+0x28>
 8004ab0:	2a2d      	cmp	r2, #45	; 0x2d
 8004ab2:	d1c8      	bne.n	8004a46 <_strtod_l+0x3e>
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	920c      	str	r2, [sp, #48]	; 0x30
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	921b      	str	r2, [sp, #108]	; 0x6c
 8004abc:	785b      	ldrb	r3, [r3, #1]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1c3      	bne.n	8004a4a <_strtod_l+0x42>
 8004ac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ac4:	961b      	str	r6, [sp, #108]	; 0x6c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 8577 	bne.w	80055ba <_strtod_l+0xbb2>
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	e7e4      	b.n	8004a9c <_strtod_l+0x94>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	e7ef      	b.n	8004ab6 <_strtod_l+0xae>
 8004ad6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ad8:	b13a      	cbz	r2, 8004aea <_strtod_l+0xe2>
 8004ada:	2135      	movs	r1, #53	; 0x35
 8004adc:	a81e      	add	r0, sp, #120	; 0x78
 8004ade:	f002 fca5 	bl	800742c <__copybits>
 8004ae2:	4650      	mov	r0, sl
 8004ae4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ae6:	f002 f86d 	bl	8006bc4 <_Bfree>
 8004aea:	3e01      	subs	r6, #1
 8004aec:	2e05      	cmp	r6, #5
 8004aee:	d807      	bhi.n	8004b00 <_strtod_l+0xf8>
 8004af0:	e8df f006 	tbb	[pc, r6]
 8004af4:	1d180b0e 	.word	0x1d180b0e
 8004af8:	030e      	.short	0x030e
 8004afa:	f04f 0900 	mov.w	r9, #0
 8004afe:	46c8      	mov	r8, r9
 8004b00:	0721      	lsls	r1, r4, #28
 8004b02:	d5c2      	bpl.n	8004a8a <_strtod_l+0x82>
 8004b04:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004b08:	e7bf      	b.n	8004a8a <_strtod_l+0x82>
 8004b0a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004b0e:	e7f7      	b.n	8004b00 <_strtod_l+0xf8>
 8004b10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004b12:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004b16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004b22:	e7ed      	b.n	8004b00 <_strtod_l+0xf8>
 8004b24:	f04f 0800 	mov.w	r8, #0
 8004b28:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004ca4 <_strtod_l+0x29c>
 8004b2c:	e7e8      	b.n	8004b00 <_strtod_l+0xf8>
 8004b2e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004b32:	f04f 38ff 	mov.w	r8, #4294967295
 8004b36:	e7e3      	b.n	8004b00 <_strtod_l+0xf8>
 8004b38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	2b30      	cmp	r3, #48	; 0x30
 8004b42:	d0f9      	beq.n	8004b38 <_strtod_l+0x130>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0a0      	beq.n	8004a8a <_strtod_l+0x82>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	9307      	str	r3, [sp, #28]
 8004b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b4e:	220a      	movs	r2, #10
 8004b50:	9308      	str	r3, [sp, #32]
 8004b52:	2300      	movs	r3, #0
 8004b54:	469b      	mov	fp, r3
 8004b56:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004b5a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004b5c:	7805      	ldrb	r5, [r0, #0]
 8004b5e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004b62:	b2d9      	uxtb	r1, r3
 8004b64:	2909      	cmp	r1, #9
 8004b66:	d926      	bls.n	8004bb6 <_strtod_l+0x1ae>
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	f002 fec8 	bl	8007900 <strncmp>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d032      	beq.n	8004bda <_strtod_l+0x1d2>
 8004b74:	2000      	movs	r0, #0
 8004b76:	462b      	mov	r3, r5
 8004b78:	465c      	mov	r4, fp
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	9004      	str	r0, [sp, #16]
 8004b7e:	2b65      	cmp	r3, #101	; 0x65
 8004b80:	d001      	beq.n	8004b86 <_strtod_l+0x17e>
 8004b82:	2b45      	cmp	r3, #69	; 0x45
 8004b84:	d113      	bne.n	8004bae <_strtod_l+0x1a6>
 8004b86:	b91c      	cbnz	r4, 8004b90 <_strtod_l+0x188>
 8004b88:	9b07      	ldr	r3, [sp, #28]
 8004b8a:	4303      	orrs	r3, r0
 8004b8c:	d099      	beq.n	8004ac2 <_strtod_l+0xba>
 8004b8e:	2400      	movs	r4, #0
 8004b90:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004b92:	1c73      	adds	r3, r6, #1
 8004b94:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b96:	7873      	ldrb	r3, [r6, #1]
 8004b98:	2b2b      	cmp	r3, #43	; 0x2b
 8004b9a:	d078      	beq.n	8004c8e <_strtod_l+0x286>
 8004b9c:	2b2d      	cmp	r3, #45	; 0x2d
 8004b9e:	d07b      	beq.n	8004c98 <_strtod_l+0x290>
 8004ba0:	2700      	movs	r7, #0
 8004ba2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004ba6:	2909      	cmp	r1, #9
 8004ba8:	f240 8082 	bls.w	8004cb0 <_strtod_l+0x2a8>
 8004bac:	961b      	str	r6, [sp, #108]	; 0x6c
 8004bae:	2500      	movs	r5, #0
 8004bb0:	e09e      	b.n	8004cf0 <_strtod_l+0x2e8>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e7c9      	b.n	8004b4a <_strtod_l+0x142>
 8004bb6:	f1bb 0f08 	cmp.w	fp, #8
 8004bba:	bfd5      	itete	le
 8004bbc:	9906      	ldrle	r1, [sp, #24]
 8004bbe:	9905      	ldrgt	r1, [sp, #20]
 8004bc0:	fb02 3301 	mlale	r3, r2, r1, r3
 8004bc4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004bc8:	f100 0001 	add.w	r0, r0, #1
 8004bcc:	bfd4      	ite	le
 8004bce:	9306      	strle	r3, [sp, #24]
 8004bd0:	9305      	strgt	r3, [sp, #20]
 8004bd2:	f10b 0b01 	add.w	fp, fp, #1
 8004bd6:	901b      	str	r0, [sp, #108]	; 0x6c
 8004bd8:	e7bf      	b.n	8004b5a <_strtod_l+0x152>
 8004bda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bdc:	191a      	adds	r2, r3, r4
 8004bde:	921b      	str	r2, [sp, #108]	; 0x6c
 8004be0:	5d1b      	ldrb	r3, [r3, r4]
 8004be2:	f1bb 0f00 	cmp.w	fp, #0
 8004be6:	d036      	beq.n	8004c56 <_strtod_l+0x24e>
 8004be8:	465c      	mov	r4, fp
 8004bea:	9004      	str	r0, [sp, #16]
 8004bec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004bf0:	2a09      	cmp	r2, #9
 8004bf2:	d912      	bls.n	8004c1a <_strtod_l+0x212>
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	e7c2      	b.n	8004b7e <_strtod_l+0x176>
 8004bf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	921b      	str	r2, [sp, #108]	; 0x6c
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b30      	cmp	r3, #48	; 0x30
 8004c04:	d0f8      	beq.n	8004bf8 <_strtod_l+0x1f0>
 8004c06:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004c0a:	2a08      	cmp	r2, #8
 8004c0c:	f200 84dc 	bhi.w	80055c8 <_strtod_l+0xbc0>
 8004c10:	9004      	str	r0, [sp, #16]
 8004c12:	2000      	movs	r0, #0
 8004c14:	4604      	mov	r4, r0
 8004c16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004c18:	9208      	str	r2, [sp, #32]
 8004c1a:	3b30      	subs	r3, #48	; 0x30
 8004c1c:	f100 0201 	add.w	r2, r0, #1
 8004c20:	d013      	beq.n	8004c4a <_strtod_l+0x242>
 8004c22:	9904      	ldr	r1, [sp, #16]
 8004c24:	1905      	adds	r5, r0, r4
 8004c26:	4411      	add	r1, r2
 8004c28:	9104      	str	r1, [sp, #16]
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	210a      	movs	r1, #10
 8004c2e:	42aa      	cmp	r2, r5
 8004c30:	d113      	bne.n	8004c5a <_strtod_l+0x252>
 8004c32:	1822      	adds	r2, r4, r0
 8004c34:	2a08      	cmp	r2, #8
 8004c36:	f104 0401 	add.w	r4, r4, #1
 8004c3a:	4404      	add	r4, r0
 8004c3c:	dc1b      	bgt.n	8004c76 <_strtod_l+0x26e>
 8004c3e:	220a      	movs	r2, #10
 8004c40:	9906      	ldr	r1, [sp, #24]
 8004c42:	fb02 3301 	mla	r3, r2, r1, r3
 8004c46:	9306      	str	r3, [sp, #24]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	1c59      	adds	r1, r3, #1
 8004c50:	911b      	str	r1, [sp, #108]	; 0x6c
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	e7ca      	b.n	8004bec <_strtod_l+0x1e4>
 8004c56:	4658      	mov	r0, fp
 8004c58:	e7d3      	b.n	8004c02 <_strtod_l+0x1fa>
 8004c5a:	2a08      	cmp	r2, #8
 8004c5c:	dc04      	bgt.n	8004c68 <_strtod_l+0x260>
 8004c5e:	9f06      	ldr	r7, [sp, #24]
 8004c60:	434f      	muls	r7, r1
 8004c62:	9706      	str	r7, [sp, #24]
 8004c64:	3201      	adds	r2, #1
 8004c66:	e7e2      	b.n	8004c2e <_strtod_l+0x226>
 8004c68:	1c57      	adds	r7, r2, #1
 8004c6a:	2f10      	cmp	r7, #16
 8004c6c:	bfde      	ittt	le
 8004c6e:	9f05      	ldrle	r7, [sp, #20]
 8004c70:	434f      	mulle	r7, r1
 8004c72:	9705      	strle	r7, [sp, #20]
 8004c74:	e7f6      	b.n	8004c64 <_strtod_l+0x25c>
 8004c76:	2c10      	cmp	r4, #16
 8004c78:	bfdf      	itttt	le
 8004c7a:	220a      	movle	r2, #10
 8004c7c:	9905      	ldrle	r1, [sp, #20]
 8004c7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c82:	9305      	strle	r3, [sp, #20]
 8004c84:	e7e0      	b.n	8004c48 <_strtod_l+0x240>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2201      	movs	r2, #1
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	e77c      	b.n	8004b88 <_strtod_l+0x180>
 8004c8e:	2700      	movs	r7, #0
 8004c90:	1cb3      	adds	r3, r6, #2
 8004c92:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c94:	78b3      	ldrb	r3, [r6, #2]
 8004c96:	e784      	b.n	8004ba2 <_strtod_l+0x19a>
 8004c98:	2701      	movs	r7, #1
 8004c9a:	e7f9      	b.n	8004c90 <_strtod_l+0x288>
 8004c9c:	080087a8 	.word	0x080087a8
 8004ca0:	08008558 	.word	0x08008558
 8004ca4:	7ff00000 	.word	0x7ff00000
 8004ca8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004caa:	1c59      	adds	r1, r3, #1
 8004cac:	911b      	str	r1, [sp, #108]	; 0x6c
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b30      	cmp	r3, #48	; 0x30
 8004cb2:	d0f9      	beq.n	8004ca8 <_strtod_l+0x2a0>
 8004cb4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004cb8:	2908      	cmp	r1, #8
 8004cba:	f63f af78 	bhi.w	8004bae <_strtod_l+0x1a6>
 8004cbe:	f04f 0e0a 	mov.w	lr, #10
 8004cc2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004cc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ccc:	1c59      	adds	r1, r3, #1
 8004cce:	911b      	str	r1, [sp, #108]	; 0x6c
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004cd6:	2d09      	cmp	r5, #9
 8004cd8:	d935      	bls.n	8004d46 <_strtod_l+0x33e>
 8004cda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004cdc:	1b49      	subs	r1, r1, r5
 8004cde:	2908      	cmp	r1, #8
 8004ce0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004ce4:	dc02      	bgt.n	8004cec <_strtod_l+0x2e4>
 8004ce6:	4565      	cmp	r5, ip
 8004ce8:	bfa8      	it	ge
 8004cea:	4665      	movge	r5, ip
 8004cec:	b107      	cbz	r7, 8004cf0 <_strtod_l+0x2e8>
 8004cee:	426d      	negs	r5, r5
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	d14c      	bne.n	8004d8e <_strtod_l+0x386>
 8004cf4:	9907      	ldr	r1, [sp, #28]
 8004cf6:	4301      	orrs	r1, r0
 8004cf8:	f47f aec7 	bne.w	8004a8a <_strtod_l+0x82>
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	f47f aee0 	bne.w	8004ac2 <_strtod_l+0xba>
 8004d02:	2b69      	cmp	r3, #105	; 0x69
 8004d04:	d026      	beq.n	8004d54 <_strtod_l+0x34c>
 8004d06:	dc23      	bgt.n	8004d50 <_strtod_l+0x348>
 8004d08:	2b49      	cmp	r3, #73	; 0x49
 8004d0a:	d023      	beq.n	8004d54 <_strtod_l+0x34c>
 8004d0c:	2b4e      	cmp	r3, #78	; 0x4e
 8004d0e:	f47f aed8 	bne.w	8004ac2 <_strtod_l+0xba>
 8004d12:	499c      	ldr	r1, [pc, #624]	; (8004f84 <_strtod_l+0x57c>)
 8004d14:	a81b      	add	r0, sp, #108	; 0x6c
 8004d16:	f001 fe2b 	bl	8006970 <__match>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	f43f aed1 	beq.w	8004ac2 <_strtod_l+0xba>
 8004d20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b28      	cmp	r3, #40	; 0x28
 8004d26:	d12c      	bne.n	8004d82 <_strtod_l+0x37a>
 8004d28:	4997      	ldr	r1, [pc, #604]	; (8004f88 <_strtod_l+0x580>)
 8004d2a:	aa1e      	add	r2, sp, #120	; 0x78
 8004d2c:	a81b      	add	r0, sp, #108	; 0x6c
 8004d2e:	f001 fe33 	bl	8006998 <__hexnan>
 8004d32:	2805      	cmp	r0, #5
 8004d34:	d125      	bne.n	8004d82 <_strtod_l+0x37a>
 8004d36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d38:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004d3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004d40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004d44:	e6a1      	b.n	8004a8a <_strtod_l+0x82>
 8004d46:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004d4a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004d4e:	e7bc      	b.n	8004cca <_strtod_l+0x2c2>
 8004d50:	2b6e      	cmp	r3, #110	; 0x6e
 8004d52:	e7dc      	b.n	8004d0e <_strtod_l+0x306>
 8004d54:	498d      	ldr	r1, [pc, #564]	; (8004f8c <_strtod_l+0x584>)
 8004d56:	a81b      	add	r0, sp, #108	; 0x6c
 8004d58:	f001 fe0a 	bl	8006970 <__match>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f43f aeb0 	beq.w	8004ac2 <_strtod_l+0xba>
 8004d62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d64:	498a      	ldr	r1, [pc, #552]	; (8004f90 <_strtod_l+0x588>)
 8004d66:	3b01      	subs	r3, #1
 8004d68:	a81b      	add	r0, sp, #108	; 0x6c
 8004d6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d6c:	f001 fe00 	bl	8006970 <__match>
 8004d70:	b910      	cbnz	r0, 8004d78 <_strtod_l+0x370>
 8004d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d74:	3301      	adds	r3, #1
 8004d76:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d78:	f04f 0800 	mov.w	r8, #0
 8004d7c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004fa0 <_strtod_l+0x598>
 8004d80:	e683      	b.n	8004a8a <_strtod_l+0x82>
 8004d82:	4884      	ldr	r0, [pc, #528]	; (8004f94 <_strtod_l+0x58c>)
 8004d84:	f002 fda6 	bl	80078d4 <nan>
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4689      	mov	r9, r1
 8004d8c:	e67d      	b.n	8004a8a <_strtod_l+0x82>
 8004d8e:	9b04      	ldr	r3, [sp, #16]
 8004d90:	f1bb 0f00 	cmp.w	fp, #0
 8004d94:	bf08      	it	eq
 8004d96:	46a3      	moveq	fp, r4
 8004d98:	1aeb      	subs	r3, r5, r3
 8004d9a:	2c10      	cmp	r4, #16
 8004d9c:	9806      	ldr	r0, [sp, #24]
 8004d9e:	4626      	mov	r6, r4
 8004da0:	9307      	str	r3, [sp, #28]
 8004da2:	bfa8      	it	ge
 8004da4:	2610      	movge	r6, #16
 8004da6:	f7fb fb1d 	bl	80003e4 <__aeabi_ui2d>
 8004daa:	2c09      	cmp	r4, #9
 8004dac:	4680      	mov	r8, r0
 8004dae:	4689      	mov	r9, r1
 8004db0:	dd13      	ble.n	8004dda <_strtod_l+0x3d2>
 8004db2:	4b79      	ldr	r3, [pc, #484]	; (8004f98 <_strtod_l+0x590>)
 8004db4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004db8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004dbc:	f7fb fb8c 	bl	80004d8 <__aeabi_dmul>
 8004dc0:	4680      	mov	r8, r0
 8004dc2:	9805      	ldr	r0, [sp, #20]
 8004dc4:	4689      	mov	r9, r1
 8004dc6:	f7fb fb0d 	bl	80003e4 <__aeabi_ui2d>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4640      	mov	r0, r8
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	f7fb f9cb 	bl	800016c <__adddf3>
 8004dd6:	4680      	mov	r8, r0
 8004dd8:	4689      	mov	r9, r1
 8004dda:	2c0f      	cmp	r4, #15
 8004ddc:	dc36      	bgt.n	8004e4c <_strtod_l+0x444>
 8004dde:	9b07      	ldr	r3, [sp, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f43f ae52 	beq.w	8004a8a <_strtod_l+0x82>
 8004de6:	dd22      	ble.n	8004e2e <_strtod_l+0x426>
 8004de8:	2b16      	cmp	r3, #22
 8004dea:	dc09      	bgt.n	8004e00 <_strtod_l+0x3f8>
 8004dec:	4c6a      	ldr	r4, [pc, #424]	; (8004f98 <_strtod_l+0x590>)
 8004dee:	4642      	mov	r2, r8
 8004df0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004df4:	464b      	mov	r3, r9
 8004df6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004dfa:	f7fb fb6d 	bl	80004d8 <__aeabi_dmul>
 8004dfe:	e7c3      	b.n	8004d88 <_strtod_l+0x380>
 8004e00:	9a07      	ldr	r2, [sp, #28]
 8004e02:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004e06:	4293      	cmp	r3, r2
 8004e08:	db20      	blt.n	8004e4c <_strtod_l+0x444>
 8004e0a:	4d63      	ldr	r5, [pc, #396]	; (8004f98 <_strtod_l+0x590>)
 8004e0c:	f1c4 040f 	rsb	r4, r4, #15
 8004e10:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004e14:	4642      	mov	r2, r8
 8004e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	f7fb fb5c 	bl	80004d8 <__aeabi_dmul>
 8004e20:	9b07      	ldr	r3, [sp, #28]
 8004e22:	1b1c      	subs	r4, r3, r4
 8004e24:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e2c:	e7e5      	b.n	8004dfa <_strtod_l+0x3f2>
 8004e2e:	9b07      	ldr	r3, [sp, #28]
 8004e30:	3316      	adds	r3, #22
 8004e32:	db0b      	blt.n	8004e4c <_strtod_l+0x444>
 8004e34:	9b04      	ldr	r3, [sp, #16]
 8004e36:	4a58      	ldr	r2, [pc, #352]	; (8004f98 <_strtod_l+0x590>)
 8004e38:	1b5d      	subs	r5, r3, r5
 8004e3a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004e3e:	4640      	mov	r0, r8
 8004e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e44:	4649      	mov	r1, r9
 8004e46:	f7fb fc71 	bl	800072c <__aeabi_ddiv>
 8004e4a:	e79d      	b.n	8004d88 <_strtod_l+0x380>
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	1ba6      	subs	r6, r4, r6
 8004e50:	441e      	add	r6, r3
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	dd71      	ble.n	8004f3a <_strtod_l+0x532>
 8004e56:	f016 030f 	ands.w	r3, r6, #15
 8004e5a:	d00a      	beq.n	8004e72 <_strtod_l+0x46a>
 8004e5c:	494e      	ldr	r1, [pc, #312]	; (8004f98 <_strtod_l+0x590>)
 8004e5e:	4642      	mov	r2, r8
 8004e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	f7fb fb35 	bl	80004d8 <__aeabi_dmul>
 8004e6e:	4680      	mov	r8, r0
 8004e70:	4689      	mov	r9, r1
 8004e72:	f036 060f 	bics.w	r6, r6, #15
 8004e76:	d050      	beq.n	8004f1a <_strtod_l+0x512>
 8004e78:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004e7c:	dd27      	ble.n	8004ece <_strtod_l+0x4c6>
 8004e7e:	f04f 0b00 	mov.w	fp, #0
 8004e82:	f8cd b010 	str.w	fp, [sp, #16]
 8004e86:	f8cd b020 	str.w	fp, [sp, #32]
 8004e8a:	f8cd b018 	str.w	fp, [sp, #24]
 8004e8e:	2322      	movs	r3, #34	; 0x22
 8004e90:	f04f 0800 	mov.w	r8, #0
 8004e94:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004fa0 <_strtod_l+0x598>
 8004e98:	f8ca 3000 	str.w	r3, [sl]
 8004e9c:	9b08      	ldr	r3, [sp, #32]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f43f adf3 	beq.w	8004a8a <_strtod_l+0x82>
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ea8:	f001 fe8c 	bl	8006bc4 <_Bfree>
 8004eac:	4650      	mov	r0, sl
 8004eae:	9906      	ldr	r1, [sp, #24]
 8004eb0:	f001 fe88 	bl	8006bc4 <_Bfree>
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	9904      	ldr	r1, [sp, #16]
 8004eb8:	f001 fe84 	bl	8006bc4 <_Bfree>
 8004ebc:	4650      	mov	r0, sl
 8004ebe:	9908      	ldr	r1, [sp, #32]
 8004ec0:	f001 fe80 	bl	8006bc4 <_Bfree>
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	f001 fe7c 	bl	8006bc4 <_Bfree>
 8004ecc:	e5dd      	b.n	8004a8a <_strtod_l+0x82>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	461f      	mov	r7, r3
 8004ed6:	1136      	asrs	r6, r6, #4
 8004ed8:	2e01      	cmp	r6, #1
 8004eda:	dc21      	bgt.n	8004f20 <_strtod_l+0x518>
 8004edc:	b10b      	cbz	r3, 8004ee2 <_strtod_l+0x4da>
 8004ede:	4680      	mov	r8, r0
 8004ee0:	4689      	mov	r9, r1
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <_strtod_l+0x594>)
 8004ee4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004ee8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004eec:	4642      	mov	r2, r8
 8004eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	f7fb faf0 	bl	80004d8 <__aeabi_dmul>
 8004ef8:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <_strtod_l+0x598>)
 8004efa:	460a      	mov	r2, r1
 8004efc:	400b      	ands	r3, r1
 8004efe:	4929      	ldr	r1, [pc, #164]	; (8004fa4 <_strtod_l+0x59c>)
 8004f00:	4680      	mov	r8, r0
 8004f02:	428b      	cmp	r3, r1
 8004f04:	d8bb      	bhi.n	8004e7e <_strtod_l+0x476>
 8004f06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f0a:	428b      	cmp	r3, r1
 8004f0c:	bf86      	itte	hi
 8004f0e:	f04f 38ff 	movhi.w	r8, #4294967295
 8004f12:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004fa8 <_strtod_l+0x5a0>
 8004f16:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9305      	str	r3, [sp, #20]
 8004f1e:	e07e      	b.n	800501e <_strtod_l+0x616>
 8004f20:	07f2      	lsls	r2, r6, #31
 8004f22:	d507      	bpl.n	8004f34 <_strtod_l+0x52c>
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <_strtod_l+0x594>)
 8004f26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb fad3 	bl	80004d8 <__aeabi_dmul>
 8004f32:	2301      	movs	r3, #1
 8004f34:	3701      	adds	r7, #1
 8004f36:	1076      	asrs	r6, r6, #1
 8004f38:	e7ce      	b.n	8004ed8 <_strtod_l+0x4d0>
 8004f3a:	d0ee      	beq.n	8004f1a <_strtod_l+0x512>
 8004f3c:	4276      	negs	r6, r6
 8004f3e:	f016 020f 	ands.w	r2, r6, #15
 8004f42:	d00a      	beq.n	8004f5a <_strtod_l+0x552>
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <_strtod_l+0x590>)
 8004f46:	4640      	mov	r0, r8
 8004f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f7fb fbeb 	bl	800072c <__aeabi_ddiv>
 8004f56:	4680      	mov	r8, r0
 8004f58:	4689      	mov	r9, r1
 8004f5a:	1136      	asrs	r6, r6, #4
 8004f5c:	d0dd      	beq.n	8004f1a <_strtod_l+0x512>
 8004f5e:	2e1f      	cmp	r6, #31
 8004f60:	dd24      	ble.n	8004fac <_strtod_l+0x5a4>
 8004f62:	f04f 0b00 	mov.w	fp, #0
 8004f66:	f8cd b010 	str.w	fp, [sp, #16]
 8004f6a:	f8cd b020 	str.w	fp, [sp, #32]
 8004f6e:	f8cd b018 	str.w	fp, [sp, #24]
 8004f72:	2322      	movs	r3, #34	; 0x22
 8004f74:	f04f 0800 	mov.w	r8, #0
 8004f78:	f04f 0900 	mov.w	r9, #0
 8004f7c:	f8ca 3000 	str.w	r3, [sl]
 8004f80:	e78c      	b.n	8004e9c <_strtod_l+0x494>
 8004f82:	bf00      	nop
 8004f84:	08008529 	.word	0x08008529
 8004f88:	0800856c 	.word	0x0800856c
 8004f8c:	08008521 	.word	0x08008521
 8004f90:	080086ac 	.word	0x080086ac
 8004f94:	08008968 	.word	0x08008968
 8004f98:	08008848 	.word	0x08008848
 8004f9c:	08008820 	.word	0x08008820
 8004fa0:	7ff00000 	.word	0x7ff00000
 8004fa4:	7ca00000 	.word	0x7ca00000
 8004fa8:	7fefffff 	.word	0x7fefffff
 8004fac:	f016 0310 	ands.w	r3, r6, #16
 8004fb0:	bf18      	it	ne
 8004fb2:	236a      	movne	r3, #106	; 0x6a
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	9305      	str	r3, [sp, #20]
 8004fb8:	4649      	mov	r1, r9
 8004fba:	2300      	movs	r3, #0
 8004fbc:	4fb2      	ldr	r7, [pc, #712]	; (8005288 <_strtod_l+0x880>)
 8004fbe:	07f2      	lsls	r2, r6, #31
 8004fc0:	d504      	bpl.n	8004fcc <_strtod_l+0x5c4>
 8004fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc6:	f7fb fa87 	bl	80004d8 <__aeabi_dmul>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	1076      	asrs	r6, r6, #1
 8004fce:	f107 0708 	add.w	r7, r7, #8
 8004fd2:	d1f4      	bne.n	8004fbe <_strtod_l+0x5b6>
 8004fd4:	b10b      	cbz	r3, 8004fda <_strtod_l+0x5d2>
 8004fd6:	4680      	mov	r8, r0
 8004fd8:	4689      	mov	r9, r1
 8004fda:	9b05      	ldr	r3, [sp, #20]
 8004fdc:	b1bb      	cbz	r3, 800500e <_strtod_l+0x606>
 8004fde:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004fe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	4649      	mov	r1, r9
 8004fea:	dd10      	ble.n	800500e <_strtod_l+0x606>
 8004fec:	2b1f      	cmp	r3, #31
 8004fee:	f340 812b 	ble.w	8005248 <_strtod_l+0x840>
 8004ff2:	2b34      	cmp	r3, #52	; 0x34
 8004ff4:	bfd8      	it	le
 8004ff6:	f04f 32ff 	movle.w	r2, #4294967295
 8004ffa:	f04f 0800 	mov.w	r8, #0
 8004ffe:	bfcf      	iteee	gt
 8005000:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005004:	3b20      	suble	r3, #32
 8005006:	fa02 f303 	lslle.w	r3, r2, r3
 800500a:	ea03 0901 	andle.w	r9, r3, r1
 800500e:	2200      	movs	r2, #0
 8005010:	2300      	movs	r3, #0
 8005012:	4640      	mov	r0, r8
 8005014:	4649      	mov	r1, r9
 8005016:	f7fb fcc7 	bl	80009a8 <__aeabi_dcmpeq>
 800501a:	2800      	cmp	r0, #0
 800501c:	d1a1      	bne.n	8004f62 <_strtod_l+0x55a>
 800501e:	9b06      	ldr	r3, [sp, #24]
 8005020:	465a      	mov	r2, fp
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	4650      	mov	r0, sl
 8005026:	4623      	mov	r3, r4
 8005028:	9908      	ldr	r1, [sp, #32]
 800502a:	f001 fe37 	bl	8006c9c <__s2b>
 800502e:	9008      	str	r0, [sp, #32]
 8005030:	2800      	cmp	r0, #0
 8005032:	f43f af24 	beq.w	8004e7e <_strtod_l+0x476>
 8005036:	9b04      	ldr	r3, [sp, #16]
 8005038:	f04f 0b00 	mov.w	fp, #0
 800503c:	1b5d      	subs	r5, r3, r5
 800503e:	9b07      	ldr	r3, [sp, #28]
 8005040:	f8cd b010 	str.w	fp, [sp, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfb4      	ite	lt
 8005048:	462b      	movlt	r3, r5
 800504a:	2300      	movge	r3, #0
 800504c:	930e      	str	r3, [sp, #56]	; 0x38
 800504e:	9b07      	ldr	r3, [sp, #28]
 8005050:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005054:	9316      	str	r3, [sp, #88]	; 0x58
 8005056:	9b08      	ldr	r3, [sp, #32]
 8005058:	4650      	mov	r0, sl
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	f001 fd72 	bl	8006b44 <_Balloc>
 8005060:	9006      	str	r0, [sp, #24]
 8005062:	2800      	cmp	r0, #0
 8005064:	f43f af13 	beq.w	8004e8e <_strtod_l+0x486>
 8005068:	9b08      	ldr	r3, [sp, #32]
 800506a:	300c      	adds	r0, #12
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	f103 010c 	add.w	r1, r3, #12
 8005072:	3202      	adds	r2, #2
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	f001 fd57 	bl	8006b28 <memcpy>
 800507a:	ab1e      	add	r3, sp, #120	; 0x78
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	ab1d      	add	r3, sp, #116	; 0x74
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	4642      	mov	r2, r8
 8005084:	464b      	mov	r3, r9
 8005086:	4650      	mov	r0, sl
 8005088:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800508c:	f002 f944 	bl	8007318 <__d2b>
 8005090:	901c      	str	r0, [sp, #112]	; 0x70
 8005092:	2800      	cmp	r0, #0
 8005094:	f43f aefb 	beq.w	8004e8e <_strtod_l+0x486>
 8005098:	2101      	movs	r1, #1
 800509a:	4650      	mov	r0, sl
 800509c:	f001 fe96 	bl	8006dcc <__i2b>
 80050a0:	4603      	mov	r3, r0
 80050a2:	9004      	str	r0, [sp, #16]
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f43f aef2 	beq.w	8004e8e <_strtod_l+0x486>
 80050aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80050ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	bfab      	itete	ge
 80050b2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80050b4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80050b6:	18ee      	addge	r6, r5, r3
 80050b8:	1b5c      	sublt	r4, r3, r5
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	bfa8      	it	ge
 80050be:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80050c0:	eba5 0503 	sub.w	r5, r5, r3
 80050c4:	4415      	add	r5, r2
 80050c6:	4b71      	ldr	r3, [pc, #452]	; (800528c <_strtod_l+0x884>)
 80050c8:	f105 35ff 	add.w	r5, r5, #4294967295
 80050cc:	bfb8      	it	lt
 80050ce:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80050d0:	429d      	cmp	r5, r3
 80050d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80050d6:	f280 80c9 	bge.w	800526c <_strtod_l+0x864>
 80050da:	1b5b      	subs	r3, r3, r5
 80050dc:	2b1f      	cmp	r3, #31
 80050de:	f04f 0701 	mov.w	r7, #1
 80050e2:	eba2 0203 	sub.w	r2, r2, r3
 80050e6:	f300 80b6 	bgt.w	8005256 <_strtod_l+0x84e>
 80050ea:	2500      	movs	r5, #0
 80050ec:	fa07 f303 	lsl.w	r3, r7, r3
 80050f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80050f2:	18b7      	adds	r7, r6, r2
 80050f4:	9b05      	ldr	r3, [sp, #20]
 80050f6:	42be      	cmp	r6, r7
 80050f8:	4414      	add	r4, r2
 80050fa:	441c      	add	r4, r3
 80050fc:	4633      	mov	r3, r6
 80050fe:	bfa8      	it	ge
 8005100:	463b      	movge	r3, r7
 8005102:	42a3      	cmp	r3, r4
 8005104:	bfa8      	it	ge
 8005106:	4623      	movge	r3, r4
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfc2      	ittt	gt
 800510c:	1aff      	subgt	r7, r7, r3
 800510e:	1ae4      	subgt	r4, r4, r3
 8005110:	1af6      	subgt	r6, r6, r3
 8005112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	dd17      	ble.n	8005148 <_strtod_l+0x740>
 8005118:	461a      	mov	r2, r3
 800511a:	4650      	mov	r0, sl
 800511c:	9904      	ldr	r1, [sp, #16]
 800511e:	f001 ff0f 	bl	8006f40 <__pow5mult>
 8005122:	9004      	str	r0, [sp, #16]
 8005124:	2800      	cmp	r0, #0
 8005126:	f43f aeb2 	beq.w	8004e8e <_strtod_l+0x486>
 800512a:	4601      	mov	r1, r0
 800512c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800512e:	4650      	mov	r0, sl
 8005130:	f001 fe62 	bl	8006df8 <__multiply>
 8005134:	9009      	str	r0, [sp, #36]	; 0x24
 8005136:	2800      	cmp	r0, #0
 8005138:	f43f aea9 	beq.w	8004e8e <_strtod_l+0x486>
 800513c:	4650      	mov	r0, sl
 800513e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005140:	f001 fd40 	bl	8006bc4 <_Bfree>
 8005144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005146:	931c      	str	r3, [sp, #112]	; 0x70
 8005148:	2f00      	cmp	r7, #0
 800514a:	f300 8093 	bgt.w	8005274 <_strtod_l+0x86c>
 800514e:	9b07      	ldr	r3, [sp, #28]
 8005150:	2b00      	cmp	r3, #0
 8005152:	dd08      	ble.n	8005166 <_strtod_l+0x75e>
 8005154:	4650      	mov	r0, sl
 8005156:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005158:	9906      	ldr	r1, [sp, #24]
 800515a:	f001 fef1 	bl	8006f40 <__pow5mult>
 800515e:	9006      	str	r0, [sp, #24]
 8005160:	2800      	cmp	r0, #0
 8005162:	f43f ae94 	beq.w	8004e8e <_strtod_l+0x486>
 8005166:	2c00      	cmp	r4, #0
 8005168:	dd08      	ble.n	800517c <_strtod_l+0x774>
 800516a:	4622      	mov	r2, r4
 800516c:	4650      	mov	r0, sl
 800516e:	9906      	ldr	r1, [sp, #24]
 8005170:	f001 ff40 	bl	8006ff4 <__lshift>
 8005174:	9006      	str	r0, [sp, #24]
 8005176:	2800      	cmp	r0, #0
 8005178:	f43f ae89 	beq.w	8004e8e <_strtod_l+0x486>
 800517c:	2e00      	cmp	r6, #0
 800517e:	dd08      	ble.n	8005192 <_strtod_l+0x78a>
 8005180:	4632      	mov	r2, r6
 8005182:	4650      	mov	r0, sl
 8005184:	9904      	ldr	r1, [sp, #16]
 8005186:	f001 ff35 	bl	8006ff4 <__lshift>
 800518a:	9004      	str	r0, [sp, #16]
 800518c:	2800      	cmp	r0, #0
 800518e:	f43f ae7e 	beq.w	8004e8e <_strtod_l+0x486>
 8005192:	4650      	mov	r0, sl
 8005194:	9a06      	ldr	r2, [sp, #24]
 8005196:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005198:	f001 ffb4 	bl	8007104 <__mdiff>
 800519c:	4683      	mov	fp, r0
 800519e:	2800      	cmp	r0, #0
 80051a0:	f43f ae75 	beq.w	8004e8e <_strtod_l+0x486>
 80051a4:	2400      	movs	r4, #0
 80051a6:	68c3      	ldr	r3, [r0, #12]
 80051a8:	9904      	ldr	r1, [sp, #16]
 80051aa:	60c4      	str	r4, [r0, #12]
 80051ac:	930d      	str	r3, [sp, #52]	; 0x34
 80051ae:	f001 ff8d 	bl	80070cc <__mcmp>
 80051b2:	42a0      	cmp	r0, r4
 80051b4:	da70      	bge.n	8005298 <_strtod_l+0x890>
 80051b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051b8:	ea53 0308 	orrs.w	r3, r3, r8
 80051bc:	f040 8096 	bne.w	80052ec <_strtod_l+0x8e4>
 80051c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 8091 	bne.w	80052ec <_strtod_l+0x8e4>
 80051ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051ce:	0d1b      	lsrs	r3, r3, #20
 80051d0:	051b      	lsls	r3, r3, #20
 80051d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80051d6:	f240 8089 	bls.w	80052ec <_strtod_l+0x8e4>
 80051da:	f8db 3014 	ldr.w	r3, [fp, #20]
 80051de:	b923      	cbnz	r3, 80051ea <_strtod_l+0x7e2>
 80051e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	f340 8081 	ble.w	80052ec <_strtod_l+0x8e4>
 80051ea:	4659      	mov	r1, fp
 80051ec:	2201      	movs	r2, #1
 80051ee:	4650      	mov	r0, sl
 80051f0:	f001 ff00 	bl	8006ff4 <__lshift>
 80051f4:	9904      	ldr	r1, [sp, #16]
 80051f6:	4683      	mov	fp, r0
 80051f8:	f001 ff68 	bl	80070cc <__mcmp>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	dd75      	ble.n	80052ec <_strtod_l+0x8e4>
 8005200:	9905      	ldr	r1, [sp, #20]
 8005202:	464b      	mov	r3, r9
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <_strtod_l+0x888>)
 8005206:	2900      	cmp	r1, #0
 8005208:	f000 8091 	beq.w	800532e <_strtod_l+0x926>
 800520c:	ea02 0109 	and.w	r1, r2, r9
 8005210:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005214:	f300 808b 	bgt.w	800532e <_strtod_l+0x926>
 8005218:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800521c:	f77f aea9 	ble.w	8004f72 <_strtod_l+0x56a>
 8005220:	2300      	movs	r3, #0
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <_strtod_l+0x88c>)
 8005224:	4640      	mov	r0, r8
 8005226:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800522a:	4649      	mov	r1, r9
 800522c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005230:	f7fb f952 	bl	80004d8 <__aeabi_dmul>
 8005234:	460b      	mov	r3, r1
 8005236:	4303      	orrs	r3, r0
 8005238:	bf08      	it	eq
 800523a:	2322      	moveq	r3, #34	; 0x22
 800523c:	4680      	mov	r8, r0
 800523e:	4689      	mov	r9, r1
 8005240:	bf08      	it	eq
 8005242:	f8ca 3000 	streq.w	r3, [sl]
 8005246:	e62d      	b.n	8004ea4 <_strtod_l+0x49c>
 8005248:	f04f 32ff 	mov.w	r2, #4294967295
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	ea03 0808 	and.w	r8, r3, r8
 8005254:	e6db      	b.n	800500e <_strtod_l+0x606>
 8005256:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800525a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800525e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005262:	35e2      	adds	r5, #226	; 0xe2
 8005264:	fa07 f505 	lsl.w	r5, r7, r5
 8005268:	970f      	str	r7, [sp, #60]	; 0x3c
 800526a:	e742      	b.n	80050f2 <_strtod_l+0x6ea>
 800526c:	2301      	movs	r3, #1
 800526e:	2500      	movs	r5, #0
 8005270:	930f      	str	r3, [sp, #60]	; 0x3c
 8005272:	e73e      	b.n	80050f2 <_strtod_l+0x6ea>
 8005274:	463a      	mov	r2, r7
 8005276:	4650      	mov	r0, sl
 8005278:	991c      	ldr	r1, [sp, #112]	; 0x70
 800527a:	f001 febb 	bl	8006ff4 <__lshift>
 800527e:	901c      	str	r0, [sp, #112]	; 0x70
 8005280:	2800      	cmp	r0, #0
 8005282:	f47f af64 	bne.w	800514e <_strtod_l+0x746>
 8005286:	e602      	b.n	8004e8e <_strtod_l+0x486>
 8005288:	08008580 	.word	0x08008580
 800528c:	fffffc02 	.word	0xfffffc02
 8005290:	7ff00000 	.word	0x7ff00000
 8005294:	39500000 	.word	0x39500000
 8005298:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800529c:	d166      	bne.n	800536c <_strtod_l+0x964>
 800529e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052a4:	b35a      	cbz	r2, 80052fe <_strtod_l+0x8f6>
 80052a6:	4a9c      	ldr	r2, [pc, #624]	; (8005518 <_strtod_l+0xb10>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d12c      	bne.n	8005306 <_strtod_l+0x8fe>
 80052ac:	9b05      	ldr	r3, [sp, #20]
 80052ae:	4640      	mov	r0, r8
 80052b0:	b303      	cbz	r3, 80052f4 <_strtod_l+0x8ec>
 80052b2:	464b      	mov	r3, r9
 80052b4:	4a99      	ldr	r2, [pc, #612]	; (800551c <_strtod_l+0xb14>)
 80052b6:	f04f 31ff 	mov.w	r1, #4294967295
 80052ba:	401a      	ands	r2, r3
 80052bc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80052c0:	d81b      	bhi.n	80052fa <_strtod_l+0x8f2>
 80052c2:	0d12      	lsrs	r2, r2, #20
 80052c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	4298      	cmp	r0, r3
 80052ce:	d11a      	bne.n	8005306 <_strtod_l+0x8fe>
 80052d0:	4b93      	ldr	r3, [pc, #588]	; (8005520 <_strtod_l+0xb18>)
 80052d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d102      	bne.n	80052de <_strtod_l+0x8d6>
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f add8 	beq.w	8004e8e <_strtod_l+0x486>
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	4b8e      	ldr	r3, [pc, #568]	; (800551c <_strtod_l+0xb14>)
 80052e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052e6:	401a      	ands	r2, r3
 80052e8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80052ec:	9b05      	ldr	r3, [sp, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d196      	bne.n	8005220 <_strtod_l+0x818>
 80052f2:	e5d7      	b.n	8004ea4 <_strtod_l+0x49c>
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	e7e8      	b.n	80052cc <_strtod_l+0x8c4>
 80052fa:	460b      	mov	r3, r1
 80052fc:	e7e6      	b.n	80052cc <_strtod_l+0x8c4>
 80052fe:	ea53 0308 	orrs.w	r3, r3, r8
 8005302:	f43f af7d 	beq.w	8005200 <_strtod_l+0x7f8>
 8005306:	b1e5      	cbz	r5, 8005342 <_strtod_l+0x93a>
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	421d      	tst	r5, r3
 800530c:	d0ee      	beq.n	80052ec <_strtod_l+0x8e4>
 800530e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005310:	4640      	mov	r0, r8
 8005312:	4649      	mov	r1, r9
 8005314:	9a05      	ldr	r2, [sp, #20]
 8005316:	b1c3      	cbz	r3, 800534a <_strtod_l+0x942>
 8005318:	f7ff fb52 	bl	80049c0 <sulp>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005324:	f7fa ff22 	bl	800016c <__adddf3>
 8005328:	4680      	mov	r8, r0
 800532a:	4689      	mov	r9, r1
 800532c:	e7de      	b.n	80052ec <_strtod_l+0x8e4>
 800532e:	4013      	ands	r3, r2
 8005330:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005334:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005338:	f04f 38ff 	mov.w	r8, #4294967295
 800533c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005340:	e7d4      	b.n	80052ec <_strtod_l+0x8e4>
 8005342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005344:	ea13 0f08 	tst.w	r3, r8
 8005348:	e7e0      	b.n	800530c <_strtod_l+0x904>
 800534a:	f7ff fb39 	bl	80049c0 <sulp>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005356:	f7fa ff07 	bl	8000168 <__aeabi_dsub>
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	4680      	mov	r8, r0
 8005360:	4689      	mov	r9, r1
 8005362:	f7fb fb21 	bl	80009a8 <__aeabi_dcmpeq>
 8005366:	2800      	cmp	r0, #0
 8005368:	d0c0      	beq.n	80052ec <_strtod_l+0x8e4>
 800536a:	e602      	b.n	8004f72 <_strtod_l+0x56a>
 800536c:	4658      	mov	r0, fp
 800536e:	9904      	ldr	r1, [sp, #16]
 8005370:	f002 f82e 	bl	80073d0 <__ratio>
 8005374:	2200      	movs	r2, #0
 8005376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800537a:	4606      	mov	r6, r0
 800537c:	460f      	mov	r7, r1
 800537e:	f7fb fb27 	bl	80009d0 <__aeabi_dcmple>
 8005382:	2800      	cmp	r0, #0
 8005384:	d075      	beq.n	8005472 <_strtod_l+0xa6a>
 8005386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005388:	2b00      	cmp	r3, #0
 800538a:	d047      	beq.n	800541c <_strtod_l+0xa14>
 800538c:	2600      	movs	r6, #0
 800538e:	4f65      	ldr	r7, [pc, #404]	; (8005524 <_strtod_l+0xb1c>)
 8005390:	4d64      	ldr	r5, [pc, #400]	; (8005524 <_strtod_l+0xb1c>)
 8005392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005398:	0d1b      	lsrs	r3, r3, #20
 800539a:	051b      	lsls	r3, r3, #20
 800539c:	930f      	str	r3, [sp, #60]	; 0x3c
 800539e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053a0:	4b61      	ldr	r3, [pc, #388]	; (8005528 <_strtod_l+0xb20>)
 80053a2:	429a      	cmp	r2, r3
 80053a4:	f040 80c8 	bne.w	8005538 <_strtod_l+0xb30>
 80053a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053ac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80053b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b2:	4640      	mov	r0, r8
 80053b4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80053b8:	4649      	mov	r1, r9
 80053ba:	f001 ff33 	bl	8007224 <__ulp>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	f7fb f887 	bl	80004d8 <__aeabi_dmul>
 80053ca:	4642      	mov	r2, r8
 80053cc:	464b      	mov	r3, r9
 80053ce:	f7fa fecd 	bl	800016c <__adddf3>
 80053d2:	460b      	mov	r3, r1
 80053d4:	4951      	ldr	r1, [pc, #324]	; (800551c <_strtod_l+0xb14>)
 80053d6:	4a55      	ldr	r2, [pc, #340]	; (800552c <_strtod_l+0xb24>)
 80053d8:	4019      	ands	r1, r3
 80053da:	4291      	cmp	r1, r2
 80053dc:	4680      	mov	r8, r0
 80053de:	d95e      	bls.n	800549e <_strtod_l+0xa96>
 80053e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d103      	bne.n	80053f2 <_strtod_l+0x9ea>
 80053ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ec:	3301      	adds	r3, #1
 80053ee:	f43f ad4e 	beq.w	8004e8e <_strtod_l+0x486>
 80053f2:	f04f 38ff 	mov.w	r8, #4294967295
 80053f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005520 <_strtod_l+0xb18>
 80053fa:	4650      	mov	r0, sl
 80053fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053fe:	f001 fbe1 	bl	8006bc4 <_Bfree>
 8005402:	4650      	mov	r0, sl
 8005404:	9906      	ldr	r1, [sp, #24]
 8005406:	f001 fbdd 	bl	8006bc4 <_Bfree>
 800540a:	4650      	mov	r0, sl
 800540c:	9904      	ldr	r1, [sp, #16]
 800540e:	f001 fbd9 	bl	8006bc4 <_Bfree>
 8005412:	4659      	mov	r1, fp
 8005414:	4650      	mov	r0, sl
 8005416:	f001 fbd5 	bl	8006bc4 <_Bfree>
 800541a:	e61c      	b.n	8005056 <_strtod_l+0x64e>
 800541c:	f1b8 0f00 	cmp.w	r8, #0
 8005420:	d119      	bne.n	8005456 <_strtod_l+0xa4e>
 8005422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005428:	b9e3      	cbnz	r3, 8005464 <_strtod_l+0xa5c>
 800542a:	2200      	movs	r2, #0
 800542c:	4630      	mov	r0, r6
 800542e:	4639      	mov	r1, r7
 8005430:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <_strtod_l+0xb1c>)
 8005432:	f7fb fac3 	bl	80009bc <__aeabi_dcmplt>
 8005436:	b9c8      	cbnz	r0, 800546c <_strtod_l+0xa64>
 8005438:	2200      	movs	r2, #0
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	4b3c      	ldr	r3, [pc, #240]	; (8005530 <_strtod_l+0xb28>)
 8005440:	f7fb f84a 	bl	80004d8 <__aeabi_dmul>
 8005444:	4604      	mov	r4, r0
 8005446:	460d      	mov	r5, r1
 8005448:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800544c:	9418      	str	r4, [sp, #96]	; 0x60
 800544e:	9319      	str	r3, [sp, #100]	; 0x64
 8005450:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005454:	e79d      	b.n	8005392 <_strtod_l+0x98a>
 8005456:	f1b8 0f01 	cmp.w	r8, #1
 800545a:	d103      	bne.n	8005464 <_strtod_l+0xa5c>
 800545c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	f43f ad87 	beq.w	8004f72 <_strtod_l+0x56a>
 8005464:	2600      	movs	r6, #0
 8005466:	2400      	movs	r4, #0
 8005468:	4f32      	ldr	r7, [pc, #200]	; (8005534 <_strtod_l+0xb2c>)
 800546a:	e791      	b.n	8005390 <_strtod_l+0x988>
 800546c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800546e:	4d30      	ldr	r5, [pc, #192]	; (8005530 <_strtod_l+0xb28>)
 8005470:	e7ea      	b.n	8005448 <_strtod_l+0xa40>
 8005472:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <_strtod_l+0xb28>)
 8005474:	2200      	movs	r2, #0
 8005476:	4630      	mov	r0, r6
 8005478:	4639      	mov	r1, r7
 800547a:	f7fb f82d 	bl	80004d8 <__aeabi_dmul>
 800547e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005480:	4604      	mov	r4, r0
 8005482:	460d      	mov	r5, r1
 8005484:	b933      	cbnz	r3, 8005494 <_strtod_l+0xa8c>
 8005486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800548a:	9010      	str	r0, [sp, #64]	; 0x40
 800548c:	9311      	str	r3, [sp, #68]	; 0x44
 800548e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005492:	e77e      	b.n	8005392 <_strtod_l+0x98a>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800549c:	e7f7      	b.n	800548e <_strtod_l+0xa86>
 800549e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80054a2:	9b05      	ldr	r3, [sp, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1a8      	bne.n	80053fa <_strtod_l+0x9f2>
 80054a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054ae:	0d1b      	lsrs	r3, r3, #20
 80054b0:	051b      	lsls	r3, r3, #20
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d1a1      	bne.n	80053fa <_strtod_l+0x9f2>
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fb fc63 	bl	8000d84 <__aeabi_d2lz>
 80054be:	f7fa ffdd 	bl	800047c <__aeabi_l2d>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	f7fa fe4d 	bl	8000168 <__aeabi_dsub>
 80054ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054d4:	ea43 0308 	orr.w	r3, r3, r8
 80054d8:	4313      	orrs	r3, r2
 80054da:	4604      	mov	r4, r0
 80054dc:	460d      	mov	r5, r1
 80054de:	d066      	beq.n	80055ae <_strtod_l+0xba6>
 80054e0:	a309      	add	r3, pc, #36	; (adr r3, 8005508 <_strtod_l+0xb00>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fb fa69 	bl	80009bc <__aeabi_dcmplt>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f47f acda 	bne.w	8004ea4 <_strtod_l+0x49c>
 80054f0:	a307      	add	r3, pc, #28	; (adr r3, 8005510 <_strtod_l+0xb08>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	4620      	mov	r0, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	f7fb fa7d 	bl	80009f8 <__aeabi_dcmpgt>
 80054fe:	2800      	cmp	r0, #0
 8005500:	f43f af7b 	beq.w	80053fa <_strtod_l+0x9f2>
 8005504:	e4ce      	b.n	8004ea4 <_strtod_l+0x49c>
 8005506:	bf00      	nop
 8005508:	94a03595 	.word	0x94a03595
 800550c:	3fdfffff 	.word	0x3fdfffff
 8005510:	35afe535 	.word	0x35afe535
 8005514:	3fe00000 	.word	0x3fe00000
 8005518:	000fffff 	.word	0x000fffff
 800551c:	7ff00000 	.word	0x7ff00000
 8005520:	7fefffff 	.word	0x7fefffff
 8005524:	3ff00000 	.word	0x3ff00000
 8005528:	7fe00000 	.word	0x7fe00000
 800552c:	7c9fffff 	.word	0x7c9fffff
 8005530:	3fe00000 	.word	0x3fe00000
 8005534:	bff00000 	.word	0xbff00000
 8005538:	9b05      	ldr	r3, [sp, #20]
 800553a:	b313      	cbz	r3, 8005582 <_strtod_l+0xb7a>
 800553c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800553e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005542:	d81e      	bhi.n	8005582 <_strtod_l+0xb7a>
 8005544:	a326      	add	r3, pc, #152	; (adr r3, 80055e0 <_strtod_l+0xbd8>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	4620      	mov	r0, r4
 800554c:	4629      	mov	r1, r5
 800554e:	f7fb fa3f 	bl	80009d0 <__aeabi_dcmple>
 8005552:	b190      	cbz	r0, 800557a <_strtod_l+0xb72>
 8005554:	4629      	mov	r1, r5
 8005556:	4620      	mov	r0, r4
 8005558:	f7fb fa96 	bl	8000a88 <__aeabi_d2uiz>
 800555c:	2801      	cmp	r0, #1
 800555e:	bf38      	it	cc
 8005560:	2001      	movcc	r0, #1
 8005562:	f7fa ff3f 	bl	80003e4 <__aeabi_ui2d>
 8005566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005568:	4604      	mov	r4, r0
 800556a:	460d      	mov	r5, r1
 800556c:	b9d3      	cbnz	r3, 80055a4 <_strtod_l+0xb9c>
 800556e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005572:	9012      	str	r0, [sp, #72]	; 0x48
 8005574:	9313      	str	r3, [sp, #76]	; 0x4c
 8005576:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800557a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800557c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005580:	1a9f      	subs	r7, r3, r2
 8005582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005586:	f001 fe4d 	bl	8007224 <__ulp>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa ffa1 	bl	80004d8 <__aeabi_dmul>
 8005596:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800559a:	f7fa fde7 	bl	800016c <__adddf3>
 800559e:	4680      	mov	r8, r0
 80055a0:	4689      	mov	r9, r1
 80055a2:	e77e      	b.n	80054a2 <_strtod_l+0xa9a>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80055ac:	e7e3      	b.n	8005576 <_strtod_l+0xb6e>
 80055ae:	a30e      	add	r3, pc, #56	; (adr r3, 80055e8 <_strtod_l+0xbe0>)
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f7fb fa02 	bl	80009bc <__aeabi_dcmplt>
 80055b8:	e7a1      	b.n	80054fe <_strtod_l+0xaf6>
 80055ba:	2300      	movs	r3, #0
 80055bc:	930c      	str	r3, [sp, #48]	; 0x30
 80055be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	f7ff ba65 	b.w	8004a92 <_strtod_l+0x8a>
 80055c8:	2b65      	cmp	r3, #101	; 0x65
 80055ca:	f43f ab5c 	beq.w	8004c86 <_strtod_l+0x27e>
 80055ce:	2b45      	cmp	r3, #69	; 0x45
 80055d0:	f43f ab59 	beq.w	8004c86 <_strtod_l+0x27e>
 80055d4:	2201      	movs	r2, #1
 80055d6:	f7ff bb8d 	b.w	8004cf4 <_strtod_l+0x2ec>
 80055da:	bf00      	nop
 80055dc:	f3af 8000 	nop.w
 80055e0:	ffc00000 	.word	0xffc00000
 80055e4:	41dfffff 	.word	0x41dfffff
 80055e8:	94a03595 	.word	0x94a03595
 80055ec:	3fcfffff 	.word	0x3fcfffff

080055f0 <_strtod_r>:
 80055f0:	4b01      	ldr	r3, [pc, #4]	; (80055f8 <_strtod_r+0x8>)
 80055f2:	f7ff ba09 	b.w	8004a08 <_strtod_l>
 80055f6:	bf00      	nop
 80055f8:	20000074 	.word	0x20000074

080055fc <_strtol_l.isra.0>:
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005602:	4686      	mov	lr, r0
 8005604:	d001      	beq.n	800560a <_strtol_l.isra.0+0xe>
 8005606:	2b24      	cmp	r3, #36	; 0x24
 8005608:	d906      	bls.n	8005618 <_strtol_l.isra.0+0x1c>
 800560a:	f7fe fb11 	bl	8003c30 <__errno>
 800560e:	2316      	movs	r3, #22
 8005610:	6003      	str	r3, [r0, #0]
 8005612:	2000      	movs	r0, #0
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005618:	468c      	mov	ip, r1
 800561a:	4e3a      	ldr	r6, [pc, #232]	; (8005704 <_strtol_l.isra.0+0x108>)
 800561c:	4660      	mov	r0, ip
 800561e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005622:	5da5      	ldrb	r5, [r4, r6]
 8005624:	f015 0508 	ands.w	r5, r5, #8
 8005628:	d1f8      	bne.n	800561c <_strtol_l.isra.0+0x20>
 800562a:	2c2d      	cmp	r4, #45	; 0x2d
 800562c:	d133      	bne.n	8005696 <_strtol_l.isra.0+0x9a>
 800562e:	f04f 0801 	mov.w	r8, #1
 8005632:	f89c 4000 	ldrb.w	r4, [ip]
 8005636:	f100 0c02 	add.w	ip, r0, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d05d      	beq.n	80056fa <_strtol_l.isra.0+0xfe>
 800563e:	2b10      	cmp	r3, #16
 8005640:	d10c      	bne.n	800565c <_strtol_l.isra.0+0x60>
 8005642:	2c30      	cmp	r4, #48	; 0x30
 8005644:	d10a      	bne.n	800565c <_strtol_l.isra.0+0x60>
 8005646:	f89c 0000 	ldrb.w	r0, [ip]
 800564a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800564e:	2858      	cmp	r0, #88	; 0x58
 8005650:	d14e      	bne.n	80056f0 <_strtol_l.isra.0+0xf4>
 8005652:	2310      	movs	r3, #16
 8005654:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005658:	f10c 0c02 	add.w	ip, ip, #2
 800565c:	2500      	movs	r5, #0
 800565e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005662:	3f01      	subs	r7, #1
 8005664:	fbb7 f9f3 	udiv	r9, r7, r3
 8005668:	4628      	mov	r0, r5
 800566a:	fb03 7a19 	mls	sl, r3, r9, r7
 800566e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005672:	2e09      	cmp	r6, #9
 8005674:	d818      	bhi.n	80056a8 <_strtol_l.isra.0+0xac>
 8005676:	4634      	mov	r4, r6
 8005678:	42a3      	cmp	r3, r4
 800567a:	dd24      	ble.n	80056c6 <_strtol_l.isra.0+0xca>
 800567c:	2d00      	cmp	r5, #0
 800567e:	db1f      	blt.n	80056c0 <_strtol_l.isra.0+0xc4>
 8005680:	4581      	cmp	r9, r0
 8005682:	d31d      	bcc.n	80056c0 <_strtol_l.isra.0+0xc4>
 8005684:	d101      	bne.n	800568a <_strtol_l.isra.0+0x8e>
 8005686:	45a2      	cmp	sl, r4
 8005688:	db1a      	blt.n	80056c0 <_strtol_l.isra.0+0xc4>
 800568a:	2501      	movs	r5, #1
 800568c:	fb00 4003 	mla	r0, r0, r3, r4
 8005690:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005694:	e7eb      	b.n	800566e <_strtol_l.isra.0+0x72>
 8005696:	2c2b      	cmp	r4, #43	; 0x2b
 8005698:	bf08      	it	eq
 800569a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800569e:	46a8      	mov	r8, r5
 80056a0:	bf08      	it	eq
 80056a2:	f100 0c02 	addeq.w	ip, r0, #2
 80056a6:	e7c8      	b.n	800563a <_strtol_l.isra.0+0x3e>
 80056a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80056ac:	2e19      	cmp	r6, #25
 80056ae:	d801      	bhi.n	80056b4 <_strtol_l.isra.0+0xb8>
 80056b0:	3c37      	subs	r4, #55	; 0x37
 80056b2:	e7e1      	b.n	8005678 <_strtol_l.isra.0+0x7c>
 80056b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80056b8:	2e19      	cmp	r6, #25
 80056ba:	d804      	bhi.n	80056c6 <_strtol_l.isra.0+0xca>
 80056bc:	3c57      	subs	r4, #87	; 0x57
 80056be:	e7db      	b.n	8005678 <_strtol_l.isra.0+0x7c>
 80056c0:	f04f 35ff 	mov.w	r5, #4294967295
 80056c4:	e7e4      	b.n	8005690 <_strtol_l.isra.0+0x94>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	da08      	bge.n	80056dc <_strtol_l.isra.0+0xe0>
 80056ca:	2322      	movs	r3, #34	; 0x22
 80056cc:	4638      	mov	r0, r7
 80056ce:	f8ce 3000 	str.w	r3, [lr]
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d09e      	beq.n	8005614 <_strtol_l.isra.0+0x18>
 80056d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80056da:	e007      	b.n	80056ec <_strtol_l.isra.0+0xf0>
 80056dc:	f1b8 0f00 	cmp.w	r8, #0
 80056e0:	d000      	beq.n	80056e4 <_strtol_l.isra.0+0xe8>
 80056e2:	4240      	negs	r0, r0
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	d095      	beq.n	8005614 <_strtol_l.isra.0+0x18>
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	d1f4      	bne.n	80056d6 <_strtol_l.isra.0+0xda>
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	e791      	b.n	8005614 <_strtol_l.isra.0+0x18>
 80056f0:	2430      	movs	r4, #48	; 0x30
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1b2      	bne.n	800565c <_strtol_l.isra.0+0x60>
 80056f6:	2308      	movs	r3, #8
 80056f8:	e7b0      	b.n	800565c <_strtol_l.isra.0+0x60>
 80056fa:	2c30      	cmp	r4, #48	; 0x30
 80056fc:	d0a3      	beq.n	8005646 <_strtol_l.isra.0+0x4a>
 80056fe:	230a      	movs	r3, #10
 8005700:	e7ac      	b.n	800565c <_strtol_l.isra.0+0x60>
 8005702:	bf00      	nop
 8005704:	080085a9 	.word	0x080085a9

08005708 <_strtol_r>:
 8005708:	f7ff bf78 	b.w	80055fc <_strtol_l.isra.0>

0800570c <quorem>:
 800570c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005710:	6903      	ldr	r3, [r0, #16]
 8005712:	690c      	ldr	r4, [r1, #16]
 8005714:	4607      	mov	r7, r0
 8005716:	42a3      	cmp	r3, r4
 8005718:	f2c0 8083 	blt.w	8005822 <quorem+0x116>
 800571c:	3c01      	subs	r4, #1
 800571e:	f100 0514 	add.w	r5, r0, #20
 8005722:	f101 0814 	add.w	r8, r1, #20
 8005726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005734:	3301      	adds	r3, #1
 8005736:	429a      	cmp	r2, r3
 8005738:	fbb2 f6f3 	udiv	r6, r2, r3
 800573c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005744:	d332      	bcc.n	80057ac <quorem+0xa0>
 8005746:	f04f 0e00 	mov.w	lr, #0
 800574a:	4640      	mov	r0, r8
 800574c:	46ac      	mov	ip, r5
 800574e:	46f2      	mov	sl, lr
 8005750:	f850 2b04 	ldr.w	r2, [r0], #4
 8005754:	b293      	uxth	r3, r2
 8005756:	fb06 e303 	mla	r3, r6, r3, lr
 800575a:	0c12      	lsrs	r2, r2, #16
 800575c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005760:	fb06 e202 	mla	r2, r6, r2, lr
 8005764:	b29b      	uxth	r3, r3
 8005766:	ebaa 0303 	sub.w	r3, sl, r3
 800576a:	f8dc a000 	ldr.w	sl, [ip]
 800576e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005772:	fa1f fa8a 	uxth.w	sl, sl
 8005776:	4453      	add	r3, sl
 8005778:	fa1f fa82 	uxth.w	sl, r2
 800577c:	f8dc 2000 	ldr.w	r2, [ip]
 8005780:	4581      	cmp	r9, r0
 8005782:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005786:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800578a:	b29b      	uxth	r3, r3
 800578c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005790:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005794:	f84c 3b04 	str.w	r3, [ip], #4
 8005798:	d2da      	bcs.n	8005750 <quorem+0x44>
 800579a:	f855 300b 	ldr.w	r3, [r5, fp]
 800579e:	b92b      	cbnz	r3, 80057ac <quorem+0xa0>
 80057a0:	9b01      	ldr	r3, [sp, #4]
 80057a2:	3b04      	subs	r3, #4
 80057a4:	429d      	cmp	r5, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	d32f      	bcc.n	800580a <quorem+0xfe>
 80057aa:	613c      	str	r4, [r7, #16]
 80057ac:	4638      	mov	r0, r7
 80057ae:	f001 fc8d 	bl	80070cc <__mcmp>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	db25      	blt.n	8005802 <quorem+0xf6>
 80057b6:	4628      	mov	r0, r5
 80057b8:	f04f 0c00 	mov.w	ip, #0
 80057bc:	3601      	adds	r6, #1
 80057be:	f858 1b04 	ldr.w	r1, [r8], #4
 80057c2:	f8d0 e000 	ldr.w	lr, [r0]
 80057c6:	b28b      	uxth	r3, r1
 80057c8:	ebac 0303 	sub.w	r3, ip, r3
 80057cc:	fa1f f28e 	uxth.w	r2, lr
 80057d0:	4413      	add	r3, r2
 80057d2:	0c0a      	lsrs	r2, r1, #16
 80057d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057e2:	45c1      	cmp	r9, r8
 80057e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057e8:	f840 3b04 	str.w	r3, [r0], #4
 80057ec:	d2e7      	bcs.n	80057be <quorem+0xb2>
 80057ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057f6:	b922      	cbnz	r2, 8005802 <quorem+0xf6>
 80057f8:	3b04      	subs	r3, #4
 80057fa:	429d      	cmp	r5, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	d30a      	bcc.n	8005816 <quorem+0x10a>
 8005800:	613c      	str	r4, [r7, #16]
 8005802:	4630      	mov	r0, r6
 8005804:	b003      	add	sp, #12
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	3b04      	subs	r3, #4
 800580e:	2a00      	cmp	r2, #0
 8005810:	d1cb      	bne.n	80057aa <quorem+0x9e>
 8005812:	3c01      	subs	r4, #1
 8005814:	e7c6      	b.n	80057a4 <quorem+0x98>
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	3b04      	subs	r3, #4
 800581a:	2a00      	cmp	r2, #0
 800581c:	d1f0      	bne.n	8005800 <quorem+0xf4>
 800581e:	3c01      	subs	r4, #1
 8005820:	e7eb      	b.n	80057fa <quorem+0xee>
 8005822:	2000      	movs	r0, #0
 8005824:	e7ee      	b.n	8005804 <quorem+0xf8>
	...

08005828 <_dtoa_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	4616      	mov	r6, r2
 800582e:	461f      	mov	r7, r3
 8005830:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005832:	b099      	sub	sp, #100	; 0x64
 8005834:	4605      	mov	r5, r0
 8005836:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800583a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800583e:	b974      	cbnz	r4, 800585e <_dtoa_r+0x36>
 8005840:	2010      	movs	r0, #16
 8005842:	f001 f949 	bl	8006ad8 <malloc>
 8005846:	4602      	mov	r2, r0
 8005848:	6268      	str	r0, [r5, #36]	; 0x24
 800584a:	b920      	cbnz	r0, 8005856 <_dtoa_r+0x2e>
 800584c:	21ea      	movs	r1, #234	; 0xea
 800584e:	4bae      	ldr	r3, [pc, #696]	; (8005b08 <_dtoa_r+0x2e0>)
 8005850:	48ae      	ldr	r0, [pc, #696]	; (8005b0c <_dtoa_r+0x2e4>)
 8005852:	f002 f875 	bl	8007940 <__assert_func>
 8005856:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800585a:	6004      	str	r4, [r0, #0]
 800585c:	60c4      	str	r4, [r0, #12]
 800585e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005860:	6819      	ldr	r1, [r3, #0]
 8005862:	b151      	cbz	r1, 800587a <_dtoa_r+0x52>
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	2301      	movs	r3, #1
 8005868:	4093      	lsls	r3, r2
 800586a:	604a      	str	r2, [r1, #4]
 800586c:	608b      	str	r3, [r1, #8]
 800586e:	4628      	mov	r0, r5
 8005870:	f001 f9a8 	bl	8006bc4 <_Bfree>
 8005874:	2200      	movs	r2, #0
 8005876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	1e3b      	subs	r3, r7, #0
 800587c:	bfaf      	iteee	ge
 800587e:	2300      	movge	r3, #0
 8005880:	2201      	movlt	r2, #1
 8005882:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005886:	9305      	strlt	r3, [sp, #20]
 8005888:	bfa8      	it	ge
 800588a:	f8c8 3000 	strge.w	r3, [r8]
 800588e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005892:	4b9f      	ldr	r3, [pc, #636]	; (8005b10 <_dtoa_r+0x2e8>)
 8005894:	bfb8      	it	lt
 8005896:	f8c8 2000 	strlt.w	r2, [r8]
 800589a:	ea33 0309 	bics.w	r3, r3, r9
 800589e:	d119      	bne.n	80058d4 <_dtoa_r+0xac>
 80058a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80058a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058ac:	4333      	orrs	r3, r6
 80058ae:	f000 8580 	beq.w	80063b2 <_dtoa_r+0xb8a>
 80058b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058b4:	b953      	cbnz	r3, 80058cc <_dtoa_r+0xa4>
 80058b6:	4b97      	ldr	r3, [pc, #604]	; (8005b14 <_dtoa_r+0x2ec>)
 80058b8:	e022      	b.n	8005900 <_dtoa_r+0xd8>
 80058ba:	4b97      	ldr	r3, [pc, #604]	; (8005b18 <_dtoa_r+0x2f0>)
 80058bc:	9308      	str	r3, [sp, #32]
 80058be:	3308      	adds	r3, #8
 80058c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	9808      	ldr	r0, [sp, #32]
 80058c6:	b019      	add	sp, #100	; 0x64
 80058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058cc:	4b91      	ldr	r3, [pc, #580]	; (8005b14 <_dtoa_r+0x2ec>)
 80058ce:	9308      	str	r3, [sp, #32]
 80058d0:	3303      	adds	r3, #3
 80058d2:	e7f5      	b.n	80058c0 <_dtoa_r+0x98>
 80058d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80058dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058e0:	2200      	movs	r2, #0
 80058e2:	2300      	movs	r3, #0
 80058e4:	f7fb f860 	bl	80009a8 <__aeabi_dcmpeq>
 80058e8:	4680      	mov	r8, r0
 80058ea:	b158      	cbz	r0, 8005904 <_dtoa_r+0xdc>
 80058ec:	2301      	movs	r3, #1
 80058ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8559 	beq.w	80063ac <_dtoa_r+0xb84>
 80058fa:	4888      	ldr	r0, [pc, #544]	; (8005b1c <_dtoa_r+0x2f4>)
 80058fc:	6018      	str	r0, [r3, #0]
 80058fe:	1e43      	subs	r3, r0, #1
 8005900:	9308      	str	r3, [sp, #32]
 8005902:	e7df      	b.n	80058c4 <_dtoa_r+0x9c>
 8005904:	ab16      	add	r3, sp, #88	; 0x58
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	ab17      	add	r3, sp, #92	; 0x5c
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	4628      	mov	r0, r5
 800590e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005912:	f001 fd01 	bl	8007318 <__d2b>
 8005916:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800591a:	4682      	mov	sl, r0
 800591c:	2c00      	cmp	r4, #0
 800591e:	d07e      	beq.n	8005a1e <_dtoa_r+0x1f6>
 8005920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005926:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800592a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800592e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005932:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005936:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800593a:	2200      	movs	r2, #0
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <_dtoa_r+0x2f8>)
 800593e:	f7fa fc13 	bl	8000168 <__aeabi_dsub>
 8005942:	a36b      	add	r3, pc, #428	; (adr r3, 8005af0 <_dtoa_r+0x2c8>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f7fa fdc6 	bl	80004d8 <__aeabi_dmul>
 800594c:	a36a      	add	r3, pc, #424	; (adr r3, 8005af8 <_dtoa_r+0x2d0>)
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f7fa fc0b 	bl	800016c <__adddf3>
 8005956:	4606      	mov	r6, r0
 8005958:	4620      	mov	r0, r4
 800595a:	460f      	mov	r7, r1
 800595c:	f7fa fd52 	bl	8000404 <__aeabi_i2d>
 8005960:	a367      	add	r3, pc, #412	; (adr r3, 8005b00 <_dtoa_r+0x2d8>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fdb7 	bl	80004d8 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fa fbfb 	bl	800016c <__adddf3>
 8005976:	4606      	mov	r6, r0
 8005978:	460f      	mov	r7, r1
 800597a:	f7fb f85d 	bl	8000a38 <__aeabi_d2iz>
 800597e:	2200      	movs	r2, #0
 8005980:	4681      	mov	r9, r0
 8005982:	2300      	movs	r3, #0
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f818 	bl	80009bc <__aeabi_dcmplt>
 800598c:	b148      	cbz	r0, 80059a2 <_dtoa_r+0x17a>
 800598e:	4648      	mov	r0, r9
 8005990:	f7fa fd38 	bl	8000404 <__aeabi_i2d>
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	f7fb f806 	bl	80009a8 <__aeabi_dcmpeq>
 800599c:	b908      	cbnz	r0, 80059a2 <_dtoa_r+0x17a>
 800599e:	f109 39ff 	add.w	r9, r9, #4294967295
 80059a2:	f1b9 0f16 	cmp.w	r9, #22
 80059a6:	d857      	bhi.n	8005a58 <_dtoa_r+0x230>
 80059a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059ac:	4b5d      	ldr	r3, [pc, #372]	; (8005b24 <_dtoa_r+0x2fc>)
 80059ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fb f801 	bl	80009bc <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d04e      	beq.n	8005a5c <_dtoa_r+0x234>
 80059be:	2300      	movs	r3, #0
 80059c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80059c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80059c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059c8:	1b1c      	subs	r4, r3, r4
 80059ca:	1e63      	subs	r3, r4, #1
 80059cc:	9309      	str	r3, [sp, #36]	; 0x24
 80059ce:	bf49      	itett	mi
 80059d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80059d4:	2300      	movpl	r3, #0
 80059d6:	9306      	strmi	r3, [sp, #24]
 80059d8:	2300      	movmi	r3, #0
 80059da:	bf54      	ite	pl
 80059dc:	9306      	strpl	r3, [sp, #24]
 80059de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80059e0:	f1b9 0f00 	cmp.w	r9, #0
 80059e4:	db3c      	blt.n	8005a60 <_dtoa_r+0x238>
 80059e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80059ec:	444b      	add	r3, r9
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	2300      	movs	r3, #0
 80059f2:	930a      	str	r3, [sp, #40]	; 0x28
 80059f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059f6:	2b09      	cmp	r3, #9
 80059f8:	d86c      	bhi.n	8005ad4 <_dtoa_r+0x2ac>
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	bfc4      	itt	gt
 80059fe:	3b04      	subgt	r3, #4
 8005a00:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a04:	bfc8      	it	gt
 8005a06:	2400      	movgt	r4, #0
 8005a08:	f1a3 0302 	sub.w	r3, r3, #2
 8005a0c:	bfd8      	it	le
 8005a0e:	2401      	movle	r4, #1
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	f200 808b 	bhi.w	8005b2c <_dtoa_r+0x304>
 8005a16:	e8df f003 	tbb	[pc, r3]
 8005a1a:	4f2d      	.short	0x4f2d
 8005a1c:	5b4d      	.short	0x5b4d
 8005a1e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005a22:	441c      	add	r4, r3
 8005a24:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	bfc3      	ittte	gt
 8005a2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a30:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005a34:	fa09 f303 	lslgt.w	r3, r9, r3
 8005a38:	f1c3 0320 	rsble	r3, r3, #32
 8005a3c:	bfc6      	itte	gt
 8005a3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a42:	4318      	orrgt	r0, r3
 8005a44:	fa06 f003 	lslle.w	r0, r6, r3
 8005a48:	f7fa fccc 	bl	80003e4 <__aeabi_ui2d>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005a52:	3c01      	subs	r4, #1
 8005a54:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a56:	e770      	b.n	800593a <_dtoa_r+0x112>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7b3      	b.n	80059c4 <_dtoa_r+0x19c>
 8005a5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a5e:	e7b2      	b.n	80059c6 <_dtoa_r+0x19e>
 8005a60:	9b06      	ldr	r3, [sp, #24]
 8005a62:	eba3 0309 	sub.w	r3, r3, r9
 8005a66:	9306      	str	r3, [sp, #24]
 8005a68:	f1c9 0300 	rsb	r3, r9, #0
 8005a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a6e:	2300      	movs	r3, #0
 8005a70:	930e      	str	r3, [sp, #56]	; 0x38
 8005a72:	e7bf      	b.n	80059f4 <_dtoa_r+0x1cc>
 8005a74:	2300      	movs	r3, #0
 8005a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dc59      	bgt.n	8005b32 <_dtoa_r+0x30a>
 8005a7e:	f04f 0b01 	mov.w	fp, #1
 8005a82:	465b      	mov	r3, fp
 8005a84:	f8cd b008 	str.w	fp, [sp, #8]
 8005a88:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005a90:	6042      	str	r2, [r0, #4]
 8005a92:	2204      	movs	r2, #4
 8005a94:	f102 0614 	add.w	r6, r2, #20
 8005a98:	429e      	cmp	r6, r3
 8005a9a:	6841      	ldr	r1, [r0, #4]
 8005a9c:	d94f      	bls.n	8005b3e <_dtoa_r+0x316>
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f001 f850 	bl	8006b44 <_Balloc>
 8005aa4:	9008      	str	r0, [sp, #32]
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d14d      	bne.n	8005b46 <_dtoa_r+0x31e>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <_dtoa_r+0x300>)
 8005ab2:	e6cd      	b.n	8005850 <_dtoa_r+0x28>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e7de      	b.n	8005a76 <_dtoa_r+0x24e>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8005abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005abe:	eb09 0b03 	add.w	fp, r9, r3
 8005ac2:	f10b 0301 	add.w	r3, fp, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	9302      	str	r3, [sp, #8]
 8005aca:	bfb8      	it	lt
 8005acc:	2301      	movlt	r3, #1
 8005ace:	e7dd      	b.n	8005a8c <_dtoa_r+0x264>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e7f2      	b.n	8005aba <_dtoa_r+0x292>
 8005ad4:	2401      	movs	r4, #1
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ada:	9322      	str	r3, [sp, #136]	; 0x88
 8005adc:	f04f 3bff 	mov.w	fp, #4294967295
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2312      	movs	r3, #18
 8005ae4:	f8cd b008 	str.w	fp, [sp, #8]
 8005ae8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005aea:	e7cf      	b.n	8005a8c <_dtoa_r+0x264>
 8005aec:	f3af 8000 	nop.w
 8005af0:	636f4361 	.word	0x636f4361
 8005af4:	3fd287a7 	.word	0x3fd287a7
 8005af8:	8b60c8b3 	.word	0x8b60c8b3
 8005afc:	3fc68a28 	.word	0x3fc68a28
 8005b00:	509f79fb 	.word	0x509f79fb
 8005b04:	3fd34413 	.word	0x3fd34413
 8005b08:	080086b6 	.word	0x080086b6
 8005b0c:	080086cd 	.word	0x080086cd
 8005b10:	7ff00000 	.word	0x7ff00000
 8005b14:	080086b2 	.word	0x080086b2
 8005b18:	080086a9 	.word	0x080086a9
 8005b1c:	0800852d 	.word	0x0800852d
 8005b20:	3ff80000 	.word	0x3ff80000
 8005b24:	08008848 	.word	0x08008848
 8005b28:	0800872c 	.word	0x0800872c
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b30:	e7d4      	b.n	8005adc <_dtoa_r+0x2b4>
 8005b32:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005b36:	465b      	mov	r3, fp
 8005b38:	f8cd b008 	str.w	fp, [sp, #8]
 8005b3c:	e7a6      	b.n	8005a8c <_dtoa_r+0x264>
 8005b3e:	3101      	adds	r1, #1
 8005b40:	6041      	str	r1, [r0, #4]
 8005b42:	0052      	lsls	r2, r2, #1
 8005b44:	e7a6      	b.n	8005a94 <_dtoa_r+0x26c>
 8005b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b48:	9a08      	ldr	r2, [sp, #32]
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	2b0e      	cmp	r3, #14
 8005b50:	f200 80a8 	bhi.w	8005ca4 <_dtoa_r+0x47c>
 8005b54:	2c00      	cmp	r4, #0
 8005b56:	f000 80a5 	beq.w	8005ca4 <_dtoa_r+0x47c>
 8005b5a:	f1b9 0f00 	cmp.w	r9, #0
 8005b5e:	dd34      	ble.n	8005bca <_dtoa_r+0x3a2>
 8005b60:	4a9a      	ldr	r2, [pc, #616]	; (8005dcc <_dtoa_r+0x5a4>)
 8005b62:	f009 030f 	and.w	r3, r9, #15
 8005b66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b6a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005b6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b76:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005b7a:	d016      	beq.n	8005baa <_dtoa_r+0x382>
 8005b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b80:	4b93      	ldr	r3, [pc, #588]	; (8005dd0 <_dtoa_r+0x5a8>)
 8005b82:	2703      	movs	r7, #3
 8005b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b88:	f7fa fdd0 	bl	800072c <__aeabi_ddiv>
 8005b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b90:	f004 040f 	and.w	r4, r4, #15
 8005b94:	4e8e      	ldr	r6, [pc, #568]	; (8005dd0 <_dtoa_r+0x5a8>)
 8005b96:	b954      	cbnz	r4, 8005bae <_dtoa_r+0x386>
 8005b98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba0:	f7fa fdc4 	bl	800072c <__aeabi_ddiv>
 8005ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ba8:	e029      	b.n	8005bfe <_dtoa_r+0x3d6>
 8005baa:	2702      	movs	r7, #2
 8005bac:	e7f2      	b.n	8005b94 <_dtoa_r+0x36c>
 8005bae:	07e1      	lsls	r1, r4, #31
 8005bb0:	d508      	bpl.n	8005bc4 <_dtoa_r+0x39c>
 8005bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bba:	f7fa fc8d 	bl	80004d8 <__aeabi_dmul>
 8005bbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bc2:	3701      	adds	r7, #1
 8005bc4:	1064      	asrs	r4, r4, #1
 8005bc6:	3608      	adds	r6, #8
 8005bc8:	e7e5      	b.n	8005b96 <_dtoa_r+0x36e>
 8005bca:	f000 80a5 	beq.w	8005d18 <_dtoa_r+0x4f0>
 8005bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd2:	f1c9 0400 	rsb	r4, r9, #0
 8005bd6:	4b7d      	ldr	r3, [pc, #500]	; (8005dcc <_dtoa_r+0x5a4>)
 8005bd8:	f004 020f 	and.w	r2, r4, #15
 8005bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fc78 	bl	80004d8 <__aeabi_dmul>
 8005be8:	2702      	movs	r7, #2
 8005bea:	2300      	movs	r3, #0
 8005bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bf0:	4e77      	ldr	r6, [pc, #476]	; (8005dd0 <_dtoa_r+0x5a8>)
 8005bf2:	1124      	asrs	r4, r4, #4
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	f040 8084 	bne.w	8005d02 <_dtoa_r+0x4da>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1d2      	bne.n	8005ba4 <_dtoa_r+0x37c>
 8005bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 808b 	beq.w	8005d1c <_dtoa_r+0x4f4>
 8005c06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c12:	2200      	movs	r2, #0
 8005c14:	4b6f      	ldr	r3, [pc, #444]	; (8005dd4 <_dtoa_r+0x5ac>)
 8005c16:	f7fa fed1 	bl	80009bc <__aeabi_dcmplt>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d07e      	beq.n	8005d1c <_dtoa_r+0x4f4>
 8005c1e:	9b02      	ldr	r3, [sp, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d07b      	beq.n	8005d1c <_dtoa_r+0x4f4>
 8005c24:	f1bb 0f00 	cmp.w	fp, #0
 8005c28:	dd38      	ble.n	8005c9c <_dtoa_r+0x474>
 8005c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4b69      	ldr	r3, [pc, #420]	; (8005dd8 <_dtoa_r+0x5b0>)
 8005c32:	f7fa fc51 	bl	80004d8 <__aeabi_dmul>
 8005c36:	465c      	mov	r4, fp
 8005c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c3c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005c40:	3701      	adds	r7, #1
 8005c42:	4638      	mov	r0, r7
 8005c44:	f7fa fbde 	bl	8000404 <__aeabi_i2d>
 8005c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c4c:	f7fa fc44 	bl	80004d8 <__aeabi_dmul>
 8005c50:	2200      	movs	r2, #0
 8005c52:	4b62      	ldr	r3, [pc, #392]	; (8005ddc <_dtoa_r+0x5b4>)
 8005c54:	f7fa fa8a 	bl	800016c <__adddf3>
 8005c58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c60:	9611      	str	r6, [sp, #68]	; 0x44
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	d15d      	bne.n	8005d22 <_dtoa_r+0x4fa>
 8005c66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4b5c      	ldr	r3, [pc, #368]	; (8005de0 <_dtoa_r+0x5b8>)
 8005c6e:	f7fa fa7b 	bl	8000168 <__aeabi_dsub>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c7e:	f7fa febb 	bl	80009f8 <__aeabi_dcmpgt>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f040 829e 	bne.w	80061c4 <_dtoa_r+0x99c>
 8005c88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c92:	f7fa fe93 	bl	80009bc <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f040 8292 	bne.w	80061c0 <_dtoa_r+0x998>
 8005c9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ca0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ca4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f2c0 8153 	blt.w	8005f52 <_dtoa_r+0x72a>
 8005cac:	f1b9 0f0e 	cmp.w	r9, #14
 8005cb0:	f300 814f 	bgt.w	8005f52 <_dtoa_r+0x72a>
 8005cb4:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <_dtoa_r+0x5a4>)
 8005cb6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005cba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f280 80db 	bge.w	8005e80 <_dtoa_r+0x658>
 8005cca:	9b02      	ldr	r3, [sp, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f300 80d7 	bgt.w	8005e80 <_dtoa_r+0x658>
 8005cd2:	f040 8274 	bne.w	80061be <_dtoa_r+0x996>
 8005cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	4b40      	ldr	r3, [pc, #256]	; (8005de0 <_dtoa_r+0x5b8>)
 8005cde:	f7fa fbfb 	bl	80004d8 <__aeabi_dmul>
 8005ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce6:	f7fa fe7d 	bl	80009e4 <__aeabi_dcmpge>
 8005cea:	9c02      	ldr	r4, [sp, #8]
 8005cec:	4626      	mov	r6, r4
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f040 824a 	bne.w	8006188 <_dtoa_r+0x960>
 8005cf4:	2331      	movs	r3, #49	; 0x31
 8005cf6:	9f08      	ldr	r7, [sp, #32]
 8005cf8:	f109 0901 	add.w	r9, r9, #1
 8005cfc:	f807 3b01 	strb.w	r3, [r7], #1
 8005d00:	e246      	b.n	8006190 <_dtoa_r+0x968>
 8005d02:	07e2      	lsls	r2, r4, #31
 8005d04:	d505      	bpl.n	8005d12 <_dtoa_r+0x4ea>
 8005d06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d0a:	f7fa fbe5 	bl	80004d8 <__aeabi_dmul>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	3701      	adds	r7, #1
 8005d12:	1064      	asrs	r4, r4, #1
 8005d14:	3608      	adds	r6, #8
 8005d16:	e76d      	b.n	8005bf4 <_dtoa_r+0x3cc>
 8005d18:	2702      	movs	r7, #2
 8005d1a:	e770      	b.n	8005bfe <_dtoa_r+0x3d6>
 8005d1c:	46c8      	mov	r8, r9
 8005d1e:	9c02      	ldr	r4, [sp, #8]
 8005d20:	e78f      	b.n	8005c42 <_dtoa_r+0x41a>
 8005d22:	9908      	ldr	r1, [sp, #32]
 8005d24:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <_dtoa_r+0x5a4>)
 8005d26:	4421      	add	r1, r4
 8005d28:	9112      	str	r1, [sp, #72]	; 0x48
 8005d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	d055      	beq.n	8005de8 <_dtoa_r+0x5c0>
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	4929      	ldr	r1, [pc, #164]	; (8005de4 <_dtoa_r+0x5bc>)
 8005d40:	f7fa fcf4 	bl	800072c <__aeabi_ddiv>
 8005d44:	463b      	mov	r3, r7
 8005d46:	4632      	mov	r2, r6
 8005d48:	f7fa fa0e 	bl	8000168 <__aeabi_dsub>
 8005d4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d50:	9f08      	ldr	r7, [sp, #32]
 8005d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d56:	f7fa fe6f 	bl	8000a38 <__aeabi_d2iz>
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f7fa fb52 	bl	8000404 <__aeabi_i2d>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d68:	f7fa f9fe 	bl	8000168 <__aeabi_dsub>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	3430      	adds	r4, #48	; 0x30
 8005d72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d7a:	f807 4b01 	strb.w	r4, [r7], #1
 8005d7e:	f7fa fe1d 	bl	80009bc <__aeabi_dcmplt>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d174      	bne.n	8005e70 <_dtoa_r+0x648>
 8005d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	4911      	ldr	r1, [pc, #68]	; (8005dd4 <_dtoa_r+0x5ac>)
 8005d8e:	f7fa f9eb 	bl	8000168 <__aeabi_dsub>
 8005d92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d96:	f7fa fe11 	bl	80009bc <__aeabi_dcmplt>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	f040 80b6 	bne.w	8005f0c <_dtoa_r+0x6e4>
 8005da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da2:	429f      	cmp	r7, r3
 8005da4:	f43f af7a 	beq.w	8005c9c <_dtoa_r+0x474>
 8005da8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dac:	2200      	movs	r2, #0
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <_dtoa_r+0x5b0>)
 8005db0:	f7fa fb92 	bl	80004d8 <__aeabi_dmul>
 8005db4:	2200      	movs	r2, #0
 8005db6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <_dtoa_r+0x5b0>)
 8005dc0:	f7fa fb8a 	bl	80004d8 <__aeabi_dmul>
 8005dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dc8:	e7c3      	b.n	8005d52 <_dtoa_r+0x52a>
 8005dca:	bf00      	nop
 8005dcc:	08008848 	.word	0x08008848
 8005dd0:	08008820 	.word	0x08008820
 8005dd4:	3ff00000 	.word	0x3ff00000
 8005dd8:	40240000 	.word	0x40240000
 8005ddc:	401c0000 	.word	0x401c0000
 8005de0:	40140000 	.word	0x40140000
 8005de4:	3fe00000 	.word	0x3fe00000
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa fb74 	bl	80004d8 <__aeabi_dmul>
 8005df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005df2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005df6:	9c08      	ldr	r4, [sp, #32]
 8005df8:	9314      	str	r3, [sp, #80]	; 0x50
 8005dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dfe:	f7fa fe1b 	bl	8000a38 <__aeabi_d2iz>
 8005e02:	9015      	str	r0, [sp, #84]	; 0x54
 8005e04:	f7fa fafe 	bl	8000404 <__aeabi_i2d>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e10:	f7fa f9aa 	bl	8000168 <__aeabi_dsub>
 8005e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e16:	4606      	mov	r6, r0
 8005e18:	3330      	adds	r3, #48	; 0x30
 8005e1a:	f804 3b01 	strb.w	r3, [r4], #1
 8005e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e20:	460f      	mov	r7, r1
 8005e22:	429c      	cmp	r4, r3
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	d124      	bne.n	8005e74 <_dtoa_r+0x64c>
 8005e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e2e:	4bb3      	ldr	r3, [pc, #716]	; (80060fc <_dtoa_r+0x8d4>)
 8005e30:	f7fa f99c 	bl	800016c <__adddf3>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4630      	mov	r0, r6
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f7fa fddc 	bl	80009f8 <__aeabi_dcmpgt>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d162      	bne.n	8005f0a <_dtoa_r+0x6e2>
 8005e44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e48:	2000      	movs	r0, #0
 8005e4a:	49ac      	ldr	r1, [pc, #688]	; (80060fc <_dtoa_r+0x8d4>)
 8005e4c:	f7fa f98c 	bl	8000168 <__aeabi_dsub>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4630      	mov	r0, r6
 8005e56:	4639      	mov	r1, r7
 8005e58:	f7fa fdb0 	bl	80009bc <__aeabi_dcmplt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f43f af1d 	beq.w	8005c9c <_dtoa_r+0x474>
 8005e62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e64:	1e7b      	subs	r3, r7, #1
 8005e66:	9314      	str	r3, [sp, #80]	; 0x50
 8005e68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d0f8      	beq.n	8005e62 <_dtoa_r+0x63a>
 8005e70:	46c1      	mov	r9, r8
 8005e72:	e03a      	b.n	8005eea <_dtoa_r+0x6c2>
 8005e74:	4ba2      	ldr	r3, [pc, #648]	; (8006100 <_dtoa_r+0x8d8>)
 8005e76:	f7fa fb2f 	bl	80004d8 <__aeabi_dmul>
 8005e7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e7e:	e7bc      	b.n	8005dfa <_dtoa_r+0x5d2>
 8005e80:	9f08      	ldr	r7, [sp, #32]
 8005e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e8a:	f7fa fc4f 	bl	800072c <__aeabi_ddiv>
 8005e8e:	f7fa fdd3 	bl	8000a38 <__aeabi_d2iz>
 8005e92:	4604      	mov	r4, r0
 8005e94:	f7fa fab6 	bl	8000404 <__aeabi_i2d>
 8005e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e9c:	f7fa fb1c 	bl	80004d8 <__aeabi_dmul>
 8005ea0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eac:	f7fa f95c 	bl	8000168 <__aeabi_dsub>
 8005eb0:	f807 6b01 	strb.w	r6, [r7], #1
 8005eb4:	9e08      	ldr	r6, [sp, #32]
 8005eb6:	9b02      	ldr	r3, [sp, #8]
 8005eb8:	1bbe      	subs	r6, r7, r6
 8005eba:	42b3      	cmp	r3, r6
 8005ebc:	d13a      	bne.n	8005f34 <_dtoa_r+0x70c>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	f7fa f953 	bl	800016c <__adddf3>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ed2:	f7fa fd91 	bl	80009f8 <__aeabi_dcmpgt>
 8005ed6:	bb58      	cbnz	r0, 8005f30 <_dtoa_r+0x708>
 8005ed8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee0:	f7fa fd62 	bl	80009a8 <__aeabi_dcmpeq>
 8005ee4:	b108      	cbz	r0, 8005eea <_dtoa_r+0x6c2>
 8005ee6:	07e1      	lsls	r1, r4, #31
 8005ee8:	d422      	bmi.n	8005f30 <_dtoa_r+0x708>
 8005eea:	4628      	mov	r0, r5
 8005eec:	4651      	mov	r1, sl
 8005eee:	f000 fe69 	bl	8006bc4 <_Bfree>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	703b      	strb	r3, [r7, #0]
 8005ef6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ef8:	f109 0001 	add.w	r0, r9, #1
 8005efc:	6018      	str	r0, [r3, #0]
 8005efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f43f acdf 	beq.w	80058c4 <_dtoa_r+0x9c>
 8005f06:	601f      	str	r7, [r3, #0]
 8005f08:	e4dc      	b.n	80058c4 <_dtoa_r+0x9c>
 8005f0a:	4627      	mov	r7, r4
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	461f      	mov	r7, r3
 8005f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f14:	2a39      	cmp	r2, #57	; 0x39
 8005f16:	d107      	bne.n	8005f28 <_dtoa_r+0x700>
 8005f18:	9a08      	ldr	r2, [sp, #32]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d1f7      	bne.n	8005f0e <_dtoa_r+0x6e6>
 8005f1e:	2230      	movs	r2, #48	; 0x30
 8005f20:	9908      	ldr	r1, [sp, #32]
 8005f22:	f108 0801 	add.w	r8, r8, #1
 8005f26:	700a      	strb	r2, [r1, #0]
 8005f28:	781a      	ldrb	r2, [r3, #0]
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e79f      	b.n	8005e70 <_dtoa_r+0x648>
 8005f30:	46c8      	mov	r8, r9
 8005f32:	e7eb      	b.n	8005f0c <_dtoa_r+0x6e4>
 8005f34:	2200      	movs	r2, #0
 8005f36:	4b72      	ldr	r3, [pc, #456]	; (8006100 <_dtoa_r+0x8d8>)
 8005f38:	f7fa face 	bl	80004d8 <__aeabi_dmul>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2300      	movs	r3, #0
 8005f48:	f7fa fd2e 	bl	80009a8 <__aeabi_dcmpeq>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d098      	beq.n	8005e82 <_dtoa_r+0x65a>
 8005f50:	e7cb      	b.n	8005eea <_dtoa_r+0x6c2>
 8005f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f54:	2a00      	cmp	r2, #0
 8005f56:	f000 80cd 	beq.w	80060f4 <_dtoa_r+0x8cc>
 8005f5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f5c:	2a01      	cmp	r2, #1
 8005f5e:	f300 80af 	bgt.w	80060c0 <_dtoa_r+0x898>
 8005f62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	f000 80a7 	beq.w	80060b8 <_dtoa_r+0x890>
 8005f6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f70:	9f06      	ldr	r7, [sp, #24]
 8005f72:	9a06      	ldr	r2, [sp, #24]
 8005f74:	2101      	movs	r1, #1
 8005f76:	441a      	add	r2, r3
 8005f78:	9206      	str	r2, [sp, #24]
 8005f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	441a      	add	r2, r3
 8005f80:	9209      	str	r2, [sp, #36]	; 0x24
 8005f82:	f000 ff23 	bl	8006dcc <__i2b>
 8005f86:	4606      	mov	r6, r0
 8005f88:	2f00      	cmp	r7, #0
 8005f8a:	dd0c      	ble.n	8005fa6 <_dtoa_r+0x77e>
 8005f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dd09      	ble.n	8005fa6 <_dtoa_r+0x77e>
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	bfa8      	it	ge
 8005f96:	463b      	movge	r3, r7
 8005f98:	9a06      	ldr	r2, [sp, #24]
 8005f9a:	1aff      	subs	r7, r7, r3
 8005f9c:	1ad2      	subs	r2, r2, r3
 8005f9e:	9206      	str	r2, [sp, #24]
 8005fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa8:	b1f3      	cbz	r3, 8005fe8 <_dtoa_r+0x7c0>
 8005faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80a9 	beq.w	8006104 <_dtoa_r+0x8dc>
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	dd10      	ble.n	8005fd8 <_dtoa_r+0x7b0>
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4622      	mov	r2, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 ffc0 	bl	8006f40 <__pow5mult>
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4601      	mov	r1, r0
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 ff16 	bl	8006df8 <__multiply>
 8005fcc:	4680      	mov	r8, r0
 8005fce:	4651      	mov	r1, sl
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f000 fdf7 	bl	8006bc4 <_Bfree>
 8005fd6:	46c2      	mov	sl, r8
 8005fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fda:	1b1a      	subs	r2, r3, r4
 8005fdc:	d004      	beq.n	8005fe8 <_dtoa_r+0x7c0>
 8005fde:	4651      	mov	r1, sl
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 ffad 	bl	8006f40 <__pow5mult>
 8005fe6:	4682      	mov	sl, r0
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 feee 	bl	8006dcc <__i2b>
 8005ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f340 8087 	ble.w	8006108 <_dtoa_r+0x8e0>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 ff9e 	bl	8006f40 <__pow5mult>
 8006004:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006006:	4604      	mov	r4, r0
 8006008:	2b01      	cmp	r3, #1
 800600a:	f340 8080 	ble.w	800610e <_dtoa_r+0x8e6>
 800600e:	f04f 0800 	mov.w	r8, #0
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006018:	6918      	ldr	r0, [r3, #16]
 800601a:	f000 fe89 	bl	8006d30 <__hi0bits>
 800601e:	f1c0 0020 	rsb	r0, r0, #32
 8006022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006024:	4418      	add	r0, r3
 8006026:	f010 001f 	ands.w	r0, r0, #31
 800602a:	f000 8092 	beq.w	8006152 <_dtoa_r+0x92a>
 800602e:	f1c0 0320 	rsb	r3, r0, #32
 8006032:	2b04      	cmp	r3, #4
 8006034:	f340 808a 	ble.w	800614c <_dtoa_r+0x924>
 8006038:	f1c0 001c 	rsb	r0, r0, #28
 800603c:	9b06      	ldr	r3, [sp, #24]
 800603e:	4407      	add	r7, r0
 8006040:	4403      	add	r3, r0
 8006042:	9306      	str	r3, [sp, #24]
 8006044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006046:	4403      	add	r3, r0
 8006048:	9309      	str	r3, [sp, #36]	; 0x24
 800604a:	9b06      	ldr	r3, [sp, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	dd05      	ble.n	800605c <_dtoa_r+0x834>
 8006050:	4651      	mov	r1, sl
 8006052:	461a      	mov	r2, r3
 8006054:	4628      	mov	r0, r5
 8006056:	f000 ffcd 	bl	8006ff4 <__lshift>
 800605a:	4682      	mov	sl, r0
 800605c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	dd05      	ble.n	800606e <_dtoa_r+0x846>
 8006062:	4621      	mov	r1, r4
 8006064:	461a      	mov	r2, r3
 8006066:	4628      	mov	r0, r5
 8006068:	f000 ffc4 	bl	8006ff4 <__lshift>
 800606c:	4604      	mov	r4, r0
 800606e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d070      	beq.n	8006156 <_dtoa_r+0x92e>
 8006074:	4621      	mov	r1, r4
 8006076:	4650      	mov	r0, sl
 8006078:	f001 f828 	bl	80070cc <__mcmp>
 800607c:	2800      	cmp	r0, #0
 800607e:	da6a      	bge.n	8006156 <_dtoa_r+0x92e>
 8006080:	2300      	movs	r3, #0
 8006082:	4651      	mov	r1, sl
 8006084:	220a      	movs	r2, #10
 8006086:	4628      	mov	r0, r5
 8006088:	f000 fdbe 	bl	8006c08 <__multadd>
 800608c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800608e:	4682      	mov	sl, r0
 8006090:	f109 39ff 	add.w	r9, r9, #4294967295
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8193 	beq.w	80063c0 <_dtoa_r+0xb98>
 800609a:	4631      	mov	r1, r6
 800609c:	2300      	movs	r3, #0
 800609e:	220a      	movs	r2, #10
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 fdb1 	bl	8006c08 <__multadd>
 80060a6:	f1bb 0f00 	cmp.w	fp, #0
 80060aa:	4606      	mov	r6, r0
 80060ac:	f300 8093 	bgt.w	80061d6 <_dtoa_r+0x9ae>
 80060b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	dc57      	bgt.n	8006166 <_dtoa_r+0x93e>
 80060b6:	e08e      	b.n	80061d6 <_dtoa_r+0x9ae>
 80060b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060be:	e756      	b.n	8005f6e <_dtoa_r+0x746>
 80060c0:	9b02      	ldr	r3, [sp, #8]
 80060c2:	1e5c      	subs	r4, r3, #1
 80060c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c6:	42a3      	cmp	r3, r4
 80060c8:	bfb7      	itett	lt
 80060ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060cc:	1b1c      	subge	r4, r3, r4
 80060ce:	1ae2      	sublt	r2, r4, r3
 80060d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80060d2:	bfbe      	ittt	lt
 80060d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80060d6:	189b      	addlt	r3, r3, r2
 80060d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	bfb8      	it	lt
 80060de:	2400      	movlt	r4, #0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bfbb      	ittet	lt
 80060e4:	9b06      	ldrlt	r3, [sp, #24]
 80060e6:	9a02      	ldrlt	r2, [sp, #8]
 80060e8:	9f06      	ldrge	r7, [sp, #24]
 80060ea:	1a9f      	sublt	r7, r3, r2
 80060ec:	bfac      	ite	ge
 80060ee:	9b02      	ldrge	r3, [sp, #8]
 80060f0:	2300      	movlt	r3, #0
 80060f2:	e73e      	b.n	8005f72 <_dtoa_r+0x74a>
 80060f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060f6:	9f06      	ldr	r7, [sp, #24]
 80060f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80060fa:	e745      	b.n	8005f88 <_dtoa_r+0x760>
 80060fc:	3fe00000 	.word	0x3fe00000
 8006100:	40240000 	.word	0x40240000
 8006104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006106:	e76a      	b.n	8005fde <_dtoa_r+0x7b6>
 8006108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800610a:	2b01      	cmp	r3, #1
 800610c:	dc19      	bgt.n	8006142 <_dtoa_r+0x91a>
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	b9bb      	cbnz	r3, 8006142 <_dtoa_r+0x91a>
 8006112:	9b05      	ldr	r3, [sp, #20]
 8006114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006118:	b99b      	cbnz	r3, 8006142 <_dtoa_r+0x91a>
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006120:	0d1b      	lsrs	r3, r3, #20
 8006122:	051b      	lsls	r3, r3, #20
 8006124:	b183      	cbz	r3, 8006148 <_dtoa_r+0x920>
 8006126:	f04f 0801 	mov.w	r8, #1
 800612a:	9b06      	ldr	r3, [sp, #24]
 800612c:	3301      	adds	r3, #1
 800612e:	9306      	str	r3, [sp, #24]
 8006130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006132:	3301      	adds	r3, #1
 8006134:	9309      	str	r3, [sp, #36]	; 0x24
 8006136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f af6a 	bne.w	8006012 <_dtoa_r+0x7ea>
 800613e:	2001      	movs	r0, #1
 8006140:	e76f      	b.n	8006022 <_dtoa_r+0x7fa>
 8006142:	f04f 0800 	mov.w	r8, #0
 8006146:	e7f6      	b.n	8006136 <_dtoa_r+0x90e>
 8006148:	4698      	mov	r8, r3
 800614a:	e7f4      	b.n	8006136 <_dtoa_r+0x90e>
 800614c:	f43f af7d 	beq.w	800604a <_dtoa_r+0x822>
 8006150:	4618      	mov	r0, r3
 8006152:	301c      	adds	r0, #28
 8006154:	e772      	b.n	800603c <_dtoa_r+0x814>
 8006156:	9b02      	ldr	r3, [sp, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	dc36      	bgt.n	80061ca <_dtoa_r+0x9a2>
 800615c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800615e:	2b02      	cmp	r3, #2
 8006160:	dd33      	ble.n	80061ca <_dtoa_r+0x9a2>
 8006162:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006166:	f1bb 0f00 	cmp.w	fp, #0
 800616a:	d10d      	bne.n	8006188 <_dtoa_r+0x960>
 800616c:	4621      	mov	r1, r4
 800616e:	465b      	mov	r3, fp
 8006170:	2205      	movs	r2, #5
 8006172:	4628      	mov	r0, r5
 8006174:	f000 fd48 	bl	8006c08 <__multadd>
 8006178:	4601      	mov	r1, r0
 800617a:	4604      	mov	r4, r0
 800617c:	4650      	mov	r0, sl
 800617e:	f000 ffa5 	bl	80070cc <__mcmp>
 8006182:	2800      	cmp	r0, #0
 8006184:	f73f adb6 	bgt.w	8005cf4 <_dtoa_r+0x4cc>
 8006188:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800618a:	9f08      	ldr	r7, [sp, #32]
 800618c:	ea6f 0903 	mvn.w	r9, r3
 8006190:	f04f 0800 	mov.w	r8, #0
 8006194:	4621      	mov	r1, r4
 8006196:	4628      	mov	r0, r5
 8006198:	f000 fd14 	bl	8006bc4 <_Bfree>
 800619c:	2e00      	cmp	r6, #0
 800619e:	f43f aea4 	beq.w	8005eea <_dtoa_r+0x6c2>
 80061a2:	f1b8 0f00 	cmp.w	r8, #0
 80061a6:	d005      	beq.n	80061b4 <_dtoa_r+0x98c>
 80061a8:	45b0      	cmp	r8, r6
 80061aa:	d003      	beq.n	80061b4 <_dtoa_r+0x98c>
 80061ac:	4641      	mov	r1, r8
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 fd08 	bl	8006bc4 <_Bfree>
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fd04 	bl	8006bc4 <_Bfree>
 80061bc:	e695      	b.n	8005eea <_dtoa_r+0x6c2>
 80061be:	2400      	movs	r4, #0
 80061c0:	4626      	mov	r6, r4
 80061c2:	e7e1      	b.n	8006188 <_dtoa_r+0x960>
 80061c4:	46c1      	mov	r9, r8
 80061c6:	4626      	mov	r6, r4
 80061c8:	e594      	b.n	8005cf4 <_dtoa_r+0x4cc>
 80061ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80fc 	beq.w	80063ce <_dtoa_r+0xba6>
 80061d6:	2f00      	cmp	r7, #0
 80061d8:	dd05      	ble.n	80061e6 <_dtoa_r+0x9be>
 80061da:	4631      	mov	r1, r6
 80061dc:	463a      	mov	r2, r7
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 ff08 	bl	8006ff4 <__lshift>
 80061e4:	4606      	mov	r6, r0
 80061e6:	f1b8 0f00 	cmp.w	r8, #0
 80061ea:	d05c      	beq.n	80062a6 <_dtoa_r+0xa7e>
 80061ec:	4628      	mov	r0, r5
 80061ee:	6871      	ldr	r1, [r6, #4]
 80061f0:	f000 fca8 	bl	8006b44 <_Balloc>
 80061f4:	4607      	mov	r7, r0
 80061f6:	b928      	cbnz	r0, 8006204 <_dtoa_r+0x9dc>
 80061f8:	4602      	mov	r2, r0
 80061fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061fe:	4b7e      	ldr	r3, [pc, #504]	; (80063f8 <_dtoa_r+0xbd0>)
 8006200:	f7ff bb26 	b.w	8005850 <_dtoa_r+0x28>
 8006204:	6932      	ldr	r2, [r6, #16]
 8006206:	f106 010c 	add.w	r1, r6, #12
 800620a:	3202      	adds	r2, #2
 800620c:	0092      	lsls	r2, r2, #2
 800620e:	300c      	adds	r0, #12
 8006210:	f000 fc8a 	bl	8006b28 <memcpy>
 8006214:	2201      	movs	r2, #1
 8006216:	4639      	mov	r1, r7
 8006218:	4628      	mov	r0, r5
 800621a:	f000 feeb 	bl	8006ff4 <__lshift>
 800621e:	46b0      	mov	r8, r6
 8006220:	4606      	mov	r6, r0
 8006222:	9b08      	ldr	r3, [sp, #32]
 8006224:	3301      	adds	r3, #1
 8006226:	9302      	str	r3, [sp, #8]
 8006228:	9b08      	ldr	r3, [sp, #32]
 800622a:	445b      	add	r3, fp
 800622c:	930a      	str	r3, [sp, #40]	; 0x28
 800622e:	9b04      	ldr	r3, [sp, #16]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	9309      	str	r3, [sp, #36]	; 0x24
 8006236:	9b02      	ldr	r3, [sp, #8]
 8006238:	4621      	mov	r1, r4
 800623a:	4650      	mov	r0, sl
 800623c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006240:	f7ff fa64 	bl	800570c <quorem>
 8006244:	4603      	mov	r3, r0
 8006246:	4641      	mov	r1, r8
 8006248:	3330      	adds	r3, #48	; 0x30
 800624a:	9004      	str	r0, [sp, #16]
 800624c:	4650      	mov	r0, sl
 800624e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006250:	f000 ff3c 	bl	80070cc <__mcmp>
 8006254:	4632      	mov	r2, r6
 8006256:	9006      	str	r0, [sp, #24]
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	f000 ff52 	bl	8007104 <__mdiff>
 8006260:	68c2      	ldr	r2, [r0, #12]
 8006262:	4607      	mov	r7, r0
 8006264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006266:	bb02      	cbnz	r2, 80062aa <_dtoa_r+0xa82>
 8006268:	4601      	mov	r1, r0
 800626a:	4650      	mov	r0, sl
 800626c:	f000 ff2e 	bl	80070cc <__mcmp>
 8006270:	4602      	mov	r2, r0
 8006272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006274:	4639      	mov	r1, r7
 8006276:	4628      	mov	r0, r5
 8006278:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800627c:	f000 fca2 	bl	8006bc4 <_Bfree>
 8006280:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006284:	9f02      	ldr	r7, [sp, #8]
 8006286:	ea43 0102 	orr.w	r1, r3, r2
 800628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628c:	430b      	orrs	r3, r1
 800628e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006290:	d10d      	bne.n	80062ae <_dtoa_r+0xa86>
 8006292:	2b39      	cmp	r3, #57	; 0x39
 8006294:	d027      	beq.n	80062e6 <_dtoa_r+0xabe>
 8006296:	9a06      	ldr	r2, [sp, #24]
 8006298:	2a00      	cmp	r2, #0
 800629a:	dd01      	ble.n	80062a0 <_dtoa_r+0xa78>
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	3331      	adds	r3, #49	; 0x31
 80062a0:	f88b 3000 	strb.w	r3, [fp]
 80062a4:	e776      	b.n	8006194 <_dtoa_r+0x96c>
 80062a6:	4630      	mov	r0, r6
 80062a8:	e7b9      	b.n	800621e <_dtoa_r+0x9f6>
 80062aa:	2201      	movs	r2, #1
 80062ac:	e7e2      	b.n	8006274 <_dtoa_r+0xa4c>
 80062ae:	9906      	ldr	r1, [sp, #24]
 80062b0:	2900      	cmp	r1, #0
 80062b2:	db04      	blt.n	80062be <_dtoa_r+0xa96>
 80062b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80062b6:	4301      	orrs	r1, r0
 80062b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ba:	4301      	orrs	r1, r0
 80062bc:	d120      	bne.n	8006300 <_dtoa_r+0xad8>
 80062be:	2a00      	cmp	r2, #0
 80062c0:	ddee      	ble.n	80062a0 <_dtoa_r+0xa78>
 80062c2:	4651      	mov	r1, sl
 80062c4:	2201      	movs	r2, #1
 80062c6:	4628      	mov	r0, r5
 80062c8:	9302      	str	r3, [sp, #8]
 80062ca:	f000 fe93 	bl	8006ff4 <__lshift>
 80062ce:	4621      	mov	r1, r4
 80062d0:	4682      	mov	sl, r0
 80062d2:	f000 fefb 	bl	80070cc <__mcmp>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	9b02      	ldr	r3, [sp, #8]
 80062da:	dc02      	bgt.n	80062e2 <_dtoa_r+0xaba>
 80062dc:	d1e0      	bne.n	80062a0 <_dtoa_r+0xa78>
 80062de:	07da      	lsls	r2, r3, #31
 80062e0:	d5de      	bpl.n	80062a0 <_dtoa_r+0xa78>
 80062e2:	2b39      	cmp	r3, #57	; 0x39
 80062e4:	d1da      	bne.n	800629c <_dtoa_r+0xa74>
 80062e6:	2339      	movs	r3, #57	; 0x39
 80062e8:	f88b 3000 	strb.w	r3, [fp]
 80062ec:	463b      	mov	r3, r7
 80062ee:	461f      	mov	r7, r3
 80062f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	2a39      	cmp	r2, #57	; 0x39
 80062f8:	d050      	beq.n	800639c <_dtoa_r+0xb74>
 80062fa:	3201      	adds	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	e749      	b.n	8006194 <_dtoa_r+0x96c>
 8006300:	2a00      	cmp	r2, #0
 8006302:	dd03      	ble.n	800630c <_dtoa_r+0xae4>
 8006304:	2b39      	cmp	r3, #57	; 0x39
 8006306:	d0ee      	beq.n	80062e6 <_dtoa_r+0xabe>
 8006308:	3301      	adds	r3, #1
 800630a:	e7c9      	b.n	80062a0 <_dtoa_r+0xa78>
 800630c:	9a02      	ldr	r2, [sp, #8]
 800630e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006310:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006314:	428a      	cmp	r2, r1
 8006316:	d02a      	beq.n	800636e <_dtoa_r+0xb46>
 8006318:	4651      	mov	r1, sl
 800631a:	2300      	movs	r3, #0
 800631c:	220a      	movs	r2, #10
 800631e:	4628      	mov	r0, r5
 8006320:	f000 fc72 	bl	8006c08 <__multadd>
 8006324:	45b0      	cmp	r8, r6
 8006326:	4682      	mov	sl, r0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	f04f 020a 	mov.w	r2, #10
 8006330:	4641      	mov	r1, r8
 8006332:	4628      	mov	r0, r5
 8006334:	d107      	bne.n	8006346 <_dtoa_r+0xb1e>
 8006336:	f000 fc67 	bl	8006c08 <__multadd>
 800633a:	4680      	mov	r8, r0
 800633c:	4606      	mov	r6, r0
 800633e:	9b02      	ldr	r3, [sp, #8]
 8006340:	3301      	adds	r3, #1
 8006342:	9302      	str	r3, [sp, #8]
 8006344:	e777      	b.n	8006236 <_dtoa_r+0xa0e>
 8006346:	f000 fc5f 	bl	8006c08 <__multadd>
 800634a:	4631      	mov	r1, r6
 800634c:	4680      	mov	r8, r0
 800634e:	2300      	movs	r3, #0
 8006350:	220a      	movs	r2, #10
 8006352:	4628      	mov	r0, r5
 8006354:	f000 fc58 	bl	8006c08 <__multadd>
 8006358:	4606      	mov	r6, r0
 800635a:	e7f0      	b.n	800633e <_dtoa_r+0xb16>
 800635c:	f1bb 0f00 	cmp.w	fp, #0
 8006360:	bfcc      	ite	gt
 8006362:	465f      	movgt	r7, fp
 8006364:	2701      	movle	r7, #1
 8006366:	f04f 0800 	mov.w	r8, #0
 800636a:	9a08      	ldr	r2, [sp, #32]
 800636c:	4417      	add	r7, r2
 800636e:	4651      	mov	r1, sl
 8006370:	2201      	movs	r2, #1
 8006372:	4628      	mov	r0, r5
 8006374:	9302      	str	r3, [sp, #8]
 8006376:	f000 fe3d 	bl	8006ff4 <__lshift>
 800637a:	4621      	mov	r1, r4
 800637c:	4682      	mov	sl, r0
 800637e:	f000 fea5 	bl	80070cc <__mcmp>
 8006382:	2800      	cmp	r0, #0
 8006384:	dcb2      	bgt.n	80062ec <_dtoa_r+0xac4>
 8006386:	d102      	bne.n	800638e <_dtoa_r+0xb66>
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	07db      	lsls	r3, r3, #31
 800638c:	d4ae      	bmi.n	80062ec <_dtoa_r+0xac4>
 800638e:	463b      	mov	r3, r7
 8006390:	461f      	mov	r7, r3
 8006392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006396:	2a30      	cmp	r2, #48	; 0x30
 8006398:	d0fa      	beq.n	8006390 <_dtoa_r+0xb68>
 800639a:	e6fb      	b.n	8006194 <_dtoa_r+0x96c>
 800639c:	9a08      	ldr	r2, [sp, #32]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d1a5      	bne.n	80062ee <_dtoa_r+0xac6>
 80063a2:	2331      	movs	r3, #49	; 0x31
 80063a4:	f109 0901 	add.w	r9, r9, #1
 80063a8:	7013      	strb	r3, [r2, #0]
 80063aa:	e6f3      	b.n	8006194 <_dtoa_r+0x96c>
 80063ac:	4b13      	ldr	r3, [pc, #76]	; (80063fc <_dtoa_r+0xbd4>)
 80063ae:	f7ff baa7 	b.w	8005900 <_dtoa_r+0xd8>
 80063b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f47f aa80 	bne.w	80058ba <_dtoa_r+0x92>
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <_dtoa_r+0xbd8>)
 80063bc:	f7ff baa0 	b.w	8005900 <_dtoa_r+0xd8>
 80063c0:	f1bb 0f00 	cmp.w	fp, #0
 80063c4:	dc03      	bgt.n	80063ce <_dtoa_r+0xba6>
 80063c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	f73f aecc 	bgt.w	8006166 <_dtoa_r+0x93e>
 80063ce:	9f08      	ldr	r7, [sp, #32]
 80063d0:	4621      	mov	r1, r4
 80063d2:	4650      	mov	r0, sl
 80063d4:	f7ff f99a 	bl	800570c <quorem>
 80063d8:	9a08      	ldr	r2, [sp, #32]
 80063da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80063de:	f807 3b01 	strb.w	r3, [r7], #1
 80063e2:	1aba      	subs	r2, r7, r2
 80063e4:	4593      	cmp	fp, r2
 80063e6:	ddb9      	ble.n	800635c <_dtoa_r+0xb34>
 80063e8:	4651      	mov	r1, sl
 80063ea:	2300      	movs	r3, #0
 80063ec:	220a      	movs	r2, #10
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 fc0a 	bl	8006c08 <__multadd>
 80063f4:	4682      	mov	sl, r0
 80063f6:	e7eb      	b.n	80063d0 <_dtoa_r+0xba8>
 80063f8:	0800872c 	.word	0x0800872c
 80063fc:	0800852c 	.word	0x0800852c
 8006400:	080086a9 	.word	0x080086a9

08006404 <rshift>:
 8006404:	6903      	ldr	r3, [r0, #16]
 8006406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800640a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800640e:	f100 0414 	add.w	r4, r0, #20
 8006412:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006416:	dd46      	ble.n	80064a6 <rshift+0xa2>
 8006418:	f011 011f 	ands.w	r1, r1, #31
 800641c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006420:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006424:	d10c      	bne.n	8006440 <rshift+0x3c>
 8006426:	4629      	mov	r1, r5
 8006428:	f100 0710 	add.w	r7, r0, #16
 800642c:	42b1      	cmp	r1, r6
 800642e:	d335      	bcc.n	800649c <rshift+0x98>
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	1eea      	subs	r2, r5, #3
 8006436:	4296      	cmp	r6, r2
 8006438:	bf38      	it	cc
 800643a:	2300      	movcc	r3, #0
 800643c:	4423      	add	r3, r4
 800643e:	e015      	b.n	800646c <rshift+0x68>
 8006440:	46a1      	mov	r9, r4
 8006442:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006446:	f1c1 0820 	rsb	r8, r1, #32
 800644a:	40cf      	lsrs	r7, r1
 800644c:	f105 0e04 	add.w	lr, r5, #4
 8006450:	4576      	cmp	r6, lr
 8006452:	46f4      	mov	ip, lr
 8006454:	d816      	bhi.n	8006484 <rshift+0x80>
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	009a      	lsls	r2, r3, #2
 800645a:	3a04      	subs	r2, #4
 800645c:	3501      	adds	r5, #1
 800645e:	42ae      	cmp	r6, r5
 8006460:	bf38      	it	cc
 8006462:	2200      	movcc	r2, #0
 8006464:	18a3      	adds	r3, r4, r2
 8006466:	50a7      	str	r7, [r4, r2]
 8006468:	b107      	cbz	r7, 800646c <rshift+0x68>
 800646a:	3304      	adds	r3, #4
 800646c:	42a3      	cmp	r3, r4
 800646e:	eba3 0204 	sub.w	r2, r3, r4
 8006472:	bf08      	it	eq
 8006474:	2300      	moveq	r3, #0
 8006476:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800647a:	6102      	str	r2, [r0, #16]
 800647c:	bf08      	it	eq
 800647e:	6143      	streq	r3, [r0, #20]
 8006480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006484:	f8dc c000 	ldr.w	ip, [ip]
 8006488:	fa0c fc08 	lsl.w	ip, ip, r8
 800648c:	ea4c 0707 	orr.w	r7, ip, r7
 8006490:	f849 7b04 	str.w	r7, [r9], #4
 8006494:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006498:	40cf      	lsrs	r7, r1
 800649a:	e7d9      	b.n	8006450 <rshift+0x4c>
 800649c:	f851 cb04 	ldr.w	ip, [r1], #4
 80064a0:	f847 cf04 	str.w	ip, [r7, #4]!
 80064a4:	e7c2      	b.n	800642c <rshift+0x28>
 80064a6:	4623      	mov	r3, r4
 80064a8:	e7e0      	b.n	800646c <rshift+0x68>

080064aa <__hexdig_fun>:
 80064aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80064ae:	2b09      	cmp	r3, #9
 80064b0:	d802      	bhi.n	80064b8 <__hexdig_fun+0xe>
 80064b2:	3820      	subs	r0, #32
 80064b4:	b2c0      	uxtb	r0, r0
 80064b6:	4770      	bx	lr
 80064b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80064bc:	2b05      	cmp	r3, #5
 80064be:	d801      	bhi.n	80064c4 <__hexdig_fun+0x1a>
 80064c0:	3847      	subs	r0, #71	; 0x47
 80064c2:	e7f7      	b.n	80064b4 <__hexdig_fun+0xa>
 80064c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d801      	bhi.n	80064d0 <__hexdig_fun+0x26>
 80064cc:	3827      	subs	r0, #39	; 0x27
 80064ce:	e7f1      	b.n	80064b4 <__hexdig_fun+0xa>
 80064d0:	2000      	movs	r0, #0
 80064d2:	4770      	bx	lr

080064d4 <__gethex>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	b08b      	sub	sp, #44	; 0x2c
 80064da:	9306      	str	r3, [sp, #24]
 80064dc:	4bb9      	ldr	r3, [pc, #740]	; (80067c4 <__gethex+0x2f0>)
 80064de:	9002      	str	r0, [sp, #8]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	468b      	mov	fp, r1
 80064e4:	4618      	mov	r0, r3
 80064e6:	4690      	mov	r8, r2
 80064e8:	9303      	str	r3, [sp, #12]
 80064ea:	f7f9 fe31 	bl	8000150 <strlen>
 80064ee:	4682      	mov	sl, r0
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	f8db 2000 	ldr.w	r2, [fp]
 80064f6:	4403      	add	r3, r0
 80064f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80064fc:	9307      	str	r3, [sp, #28]
 80064fe:	1c93      	adds	r3, r2, #2
 8006500:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006504:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006508:	32fe      	adds	r2, #254	; 0xfe
 800650a:	18d1      	adds	r1, r2, r3
 800650c:	461f      	mov	r7, r3
 800650e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006512:	9101      	str	r1, [sp, #4]
 8006514:	2830      	cmp	r0, #48	; 0x30
 8006516:	d0f8      	beq.n	800650a <__gethex+0x36>
 8006518:	f7ff ffc7 	bl	80064aa <__hexdig_fun>
 800651c:	4604      	mov	r4, r0
 800651e:	2800      	cmp	r0, #0
 8006520:	d13a      	bne.n	8006598 <__gethex+0xc4>
 8006522:	4652      	mov	r2, sl
 8006524:	4638      	mov	r0, r7
 8006526:	9903      	ldr	r1, [sp, #12]
 8006528:	f001 f9ea 	bl	8007900 <strncmp>
 800652c:	4605      	mov	r5, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	d166      	bne.n	8006600 <__gethex+0x12c>
 8006532:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006536:	eb07 060a 	add.w	r6, r7, sl
 800653a:	f7ff ffb6 	bl	80064aa <__hexdig_fun>
 800653e:	2800      	cmp	r0, #0
 8006540:	d060      	beq.n	8006604 <__gethex+0x130>
 8006542:	4633      	mov	r3, r6
 8006544:	7818      	ldrb	r0, [r3, #0]
 8006546:	461f      	mov	r7, r3
 8006548:	2830      	cmp	r0, #48	; 0x30
 800654a:	f103 0301 	add.w	r3, r3, #1
 800654e:	d0f9      	beq.n	8006544 <__gethex+0x70>
 8006550:	f7ff ffab 	bl	80064aa <__hexdig_fun>
 8006554:	2301      	movs	r3, #1
 8006556:	fab0 f480 	clz	r4, r0
 800655a:	4635      	mov	r5, r6
 800655c:	0964      	lsrs	r4, r4, #5
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	463a      	mov	r2, r7
 8006562:	4616      	mov	r6, r2
 8006564:	7830      	ldrb	r0, [r6, #0]
 8006566:	3201      	adds	r2, #1
 8006568:	f7ff ff9f 	bl	80064aa <__hexdig_fun>
 800656c:	2800      	cmp	r0, #0
 800656e:	d1f8      	bne.n	8006562 <__gethex+0x8e>
 8006570:	4652      	mov	r2, sl
 8006572:	4630      	mov	r0, r6
 8006574:	9903      	ldr	r1, [sp, #12]
 8006576:	f001 f9c3 	bl	8007900 <strncmp>
 800657a:	b980      	cbnz	r0, 800659e <__gethex+0xca>
 800657c:	b94d      	cbnz	r5, 8006592 <__gethex+0xbe>
 800657e:	eb06 050a 	add.w	r5, r6, sl
 8006582:	462a      	mov	r2, r5
 8006584:	4616      	mov	r6, r2
 8006586:	7830      	ldrb	r0, [r6, #0]
 8006588:	3201      	adds	r2, #1
 800658a:	f7ff ff8e 	bl	80064aa <__hexdig_fun>
 800658e:	2800      	cmp	r0, #0
 8006590:	d1f8      	bne.n	8006584 <__gethex+0xb0>
 8006592:	1bad      	subs	r5, r5, r6
 8006594:	00ad      	lsls	r5, r5, #2
 8006596:	e004      	b.n	80065a2 <__gethex+0xce>
 8006598:	2400      	movs	r4, #0
 800659a:	4625      	mov	r5, r4
 800659c:	e7e0      	b.n	8006560 <__gethex+0x8c>
 800659e:	2d00      	cmp	r5, #0
 80065a0:	d1f7      	bne.n	8006592 <__gethex+0xbe>
 80065a2:	7833      	ldrb	r3, [r6, #0]
 80065a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065a8:	2b50      	cmp	r3, #80	; 0x50
 80065aa:	d139      	bne.n	8006620 <__gethex+0x14c>
 80065ac:	7873      	ldrb	r3, [r6, #1]
 80065ae:	2b2b      	cmp	r3, #43	; 0x2b
 80065b0:	d02a      	beq.n	8006608 <__gethex+0x134>
 80065b2:	2b2d      	cmp	r3, #45	; 0x2d
 80065b4:	d02c      	beq.n	8006610 <__gethex+0x13c>
 80065b6:	f04f 0900 	mov.w	r9, #0
 80065ba:	1c71      	adds	r1, r6, #1
 80065bc:	7808      	ldrb	r0, [r1, #0]
 80065be:	f7ff ff74 	bl	80064aa <__hexdig_fun>
 80065c2:	1e43      	subs	r3, r0, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b18      	cmp	r3, #24
 80065c8:	d82a      	bhi.n	8006620 <__gethex+0x14c>
 80065ca:	f1a0 0210 	sub.w	r2, r0, #16
 80065ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80065d2:	f7ff ff6a 	bl	80064aa <__hexdig_fun>
 80065d6:	1e43      	subs	r3, r0, #1
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b18      	cmp	r3, #24
 80065dc:	d91b      	bls.n	8006616 <__gethex+0x142>
 80065de:	f1b9 0f00 	cmp.w	r9, #0
 80065e2:	d000      	beq.n	80065e6 <__gethex+0x112>
 80065e4:	4252      	negs	r2, r2
 80065e6:	4415      	add	r5, r2
 80065e8:	f8cb 1000 	str.w	r1, [fp]
 80065ec:	b1d4      	cbz	r4, 8006624 <__gethex+0x150>
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bf14      	ite	ne
 80065f4:	2700      	movne	r7, #0
 80065f6:	2706      	moveq	r7, #6
 80065f8:	4638      	mov	r0, r7
 80065fa:	b00b      	add	sp, #44	; 0x2c
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	463e      	mov	r6, r7
 8006602:	4625      	mov	r5, r4
 8006604:	2401      	movs	r4, #1
 8006606:	e7cc      	b.n	80065a2 <__gethex+0xce>
 8006608:	f04f 0900 	mov.w	r9, #0
 800660c:	1cb1      	adds	r1, r6, #2
 800660e:	e7d5      	b.n	80065bc <__gethex+0xe8>
 8006610:	f04f 0901 	mov.w	r9, #1
 8006614:	e7fa      	b.n	800660c <__gethex+0x138>
 8006616:	230a      	movs	r3, #10
 8006618:	fb03 0202 	mla	r2, r3, r2, r0
 800661c:	3a10      	subs	r2, #16
 800661e:	e7d6      	b.n	80065ce <__gethex+0xfa>
 8006620:	4631      	mov	r1, r6
 8006622:	e7e1      	b.n	80065e8 <__gethex+0x114>
 8006624:	4621      	mov	r1, r4
 8006626:	1bf3      	subs	r3, r6, r7
 8006628:	3b01      	subs	r3, #1
 800662a:	2b07      	cmp	r3, #7
 800662c:	dc0a      	bgt.n	8006644 <__gethex+0x170>
 800662e:	9802      	ldr	r0, [sp, #8]
 8006630:	f000 fa88 	bl	8006b44 <_Balloc>
 8006634:	4604      	mov	r4, r0
 8006636:	b940      	cbnz	r0, 800664a <__gethex+0x176>
 8006638:	4602      	mov	r2, r0
 800663a:	21de      	movs	r1, #222	; 0xde
 800663c:	4b62      	ldr	r3, [pc, #392]	; (80067c8 <__gethex+0x2f4>)
 800663e:	4863      	ldr	r0, [pc, #396]	; (80067cc <__gethex+0x2f8>)
 8006640:	f001 f97e 	bl	8007940 <__assert_func>
 8006644:	3101      	adds	r1, #1
 8006646:	105b      	asrs	r3, r3, #1
 8006648:	e7ef      	b.n	800662a <__gethex+0x156>
 800664a:	f04f 0b00 	mov.w	fp, #0
 800664e:	f100 0914 	add.w	r9, r0, #20
 8006652:	f1ca 0301 	rsb	r3, sl, #1
 8006656:	f8cd 9010 	str.w	r9, [sp, #16]
 800665a:	f8cd b004 	str.w	fp, [sp, #4]
 800665e:	9308      	str	r3, [sp, #32]
 8006660:	42b7      	cmp	r7, r6
 8006662:	d33f      	bcc.n	80066e4 <__gethex+0x210>
 8006664:	9f04      	ldr	r7, [sp, #16]
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	f847 3b04 	str.w	r3, [r7], #4
 800666c:	eba7 0709 	sub.w	r7, r7, r9
 8006670:	10bf      	asrs	r7, r7, #2
 8006672:	6127      	str	r7, [r4, #16]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fb5b 	bl	8006d30 <__hi0bits>
 800667a:	017f      	lsls	r7, r7, #5
 800667c:	f8d8 6000 	ldr.w	r6, [r8]
 8006680:	1a3f      	subs	r7, r7, r0
 8006682:	42b7      	cmp	r7, r6
 8006684:	dd62      	ble.n	800674c <__gethex+0x278>
 8006686:	1bbf      	subs	r7, r7, r6
 8006688:	4639      	mov	r1, r7
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fef1 	bl	8007472 <__any_on>
 8006690:	4682      	mov	sl, r0
 8006692:	b1a8      	cbz	r0, 80066c0 <__gethex+0x1ec>
 8006694:	f04f 0a01 	mov.w	sl, #1
 8006698:	1e7b      	subs	r3, r7, #1
 800669a:	1159      	asrs	r1, r3, #5
 800669c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80066a0:	f003 021f 	and.w	r2, r3, #31
 80066a4:	fa0a f202 	lsl.w	r2, sl, r2
 80066a8:	420a      	tst	r2, r1
 80066aa:	d009      	beq.n	80066c0 <__gethex+0x1ec>
 80066ac:	4553      	cmp	r3, sl
 80066ae:	dd05      	ble.n	80066bc <__gethex+0x1e8>
 80066b0:	4620      	mov	r0, r4
 80066b2:	1eb9      	subs	r1, r7, #2
 80066b4:	f000 fedd 	bl	8007472 <__any_on>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d144      	bne.n	8006746 <__gethex+0x272>
 80066bc:	f04f 0a02 	mov.w	sl, #2
 80066c0:	4639      	mov	r1, r7
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7ff fe9e 	bl	8006404 <rshift>
 80066c8:	443d      	add	r5, r7
 80066ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066ce:	42ab      	cmp	r3, r5
 80066d0:	da4a      	bge.n	8006768 <__gethex+0x294>
 80066d2:	4621      	mov	r1, r4
 80066d4:	9802      	ldr	r0, [sp, #8]
 80066d6:	f000 fa75 	bl	8006bc4 <_Bfree>
 80066da:	2300      	movs	r3, #0
 80066dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066de:	27a3      	movs	r7, #163	; 0xa3
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e789      	b.n	80065f8 <__gethex+0x124>
 80066e4:	1e73      	subs	r3, r6, #1
 80066e6:	9a07      	ldr	r2, [sp, #28]
 80066e8:	9305      	str	r3, [sp, #20]
 80066ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d019      	beq.n	8006726 <__gethex+0x252>
 80066f2:	f1bb 0f20 	cmp.w	fp, #32
 80066f6:	d107      	bne.n	8006708 <__gethex+0x234>
 80066f8:	9b04      	ldr	r3, [sp, #16]
 80066fa:	9a01      	ldr	r2, [sp, #4]
 80066fc:	f843 2b04 	str.w	r2, [r3], #4
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	2300      	movs	r3, #0
 8006704:	469b      	mov	fp, r3
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800670c:	f7ff fecd 	bl	80064aa <__hexdig_fun>
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	f000 000f 	and.w	r0, r0, #15
 8006716:	fa00 f00b 	lsl.w	r0, r0, fp
 800671a:	4303      	orrs	r3, r0
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	f10b 0b04 	add.w	fp, fp, #4
 8006722:	9b05      	ldr	r3, [sp, #20]
 8006724:	e00d      	b.n	8006742 <__gethex+0x26e>
 8006726:	9b05      	ldr	r3, [sp, #20]
 8006728:	9a08      	ldr	r2, [sp, #32]
 800672a:	4413      	add	r3, r2
 800672c:	42bb      	cmp	r3, r7
 800672e:	d3e0      	bcc.n	80066f2 <__gethex+0x21e>
 8006730:	4618      	mov	r0, r3
 8006732:	4652      	mov	r2, sl
 8006734:	9903      	ldr	r1, [sp, #12]
 8006736:	9309      	str	r3, [sp, #36]	; 0x24
 8006738:	f001 f8e2 	bl	8007900 <strncmp>
 800673c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673e:	2800      	cmp	r0, #0
 8006740:	d1d7      	bne.n	80066f2 <__gethex+0x21e>
 8006742:	461e      	mov	r6, r3
 8006744:	e78c      	b.n	8006660 <__gethex+0x18c>
 8006746:	f04f 0a03 	mov.w	sl, #3
 800674a:	e7b9      	b.n	80066c0 <__gethex+0x1ec>
 800674c:	da09      	bge.n	8006762 <__gethex+0x28e>
 800674e:	1bf7      	subs	r7, r6, r7
 8006750:	4621      	mov	r1, r4
 8006752:	463a      	mov	r2, r7
 8006754:	9802      	ldr	r0, [sp, #8]
 8006756:	f000 fc4d 	bl	8006ff4 <__lshift>
 800675a:	4604      	mov	r4, r0
 800675c:	1bed      	subs	r5, r5, r7
 800675e:	f100 0914 	add.w	r9, r0, #20
 8006762:	f04f 0a00 	mov.w	sl, #0
 8006766:	e7b0      	b.n	80066ca <__gethex+0x1f6>
 8006768:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800676c:	42a8      	cmp	r0, r5
 800676e:	dd71      	ble.n	8006854 <__gethex+0x380>
 8006770:	1b45      	subs	r5, r0, r5
 8006772:	42ae      	cmp	r6, r5
 8006774:	dc34      	bgt.n	80067e0 <__gethex+0x30c>
 8006776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d028      	beq.n	80067d0 <__gethex+0x2fc>
 800677e:	2b03      	cmp	r3, #3
 8006780:	d02a      	beq.n	80067d8 <__gethex+0x304>
 8006782:	2b01      	cmp	r3, #1
 8006784:	d115      	bne.n	80067b2 <__gethex+0x2de>
 8006786:	42ae      	cmp	r6, r5
 8006788:	d113      	bne.n	80067b2 <__gethex+0x2de>
 800678a:	2e01      	cmp	r6, #1
 800678c:	d10b      	bne.n	80067a6 <__gethex+0x2d2>
 800678e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006792:	9a06      	ldr	r2, [sp, #24]
 8006794:	2762      	movs	r7, #98	; 0x62
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	2301      	movs	r3, #1
 800679a:	6123      	str	r3, [r4, #16]
 800679c:	f8c9 3000 	str.w	r3, [r9]
 80067a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067a2:	601c      	str	r4, [r3, #0]
 80067a4:	e728      	b.n	80065f8 <__gethex+0x124>
 80067a6:	4620      	mov	r0, r4
 80067a8:	1e71      	subs	r1, r6, #1
 80067aa:	f000 fe62 	bl	8007472 <__any_on>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1ed      	bne.n	800678e <__gethex+0x2ba>
 80067b2:	4621      	mov	r1, r4
 80067b4:	9802      	ldr	r0, [sp, #8]
 80067b6:	f000 fa05 	bl	8006bc4 <_Bfree>
 80067ba:	2300      	movs	r3, #0
 80067bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067be:	2750      	movs	r7, #80	; 0x50
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e719      	b.n	80065f8 <__gethex+0x124>
 80067c4:	080087a8 	.word	0x080087a8
 80067c8:	0800872c 	.word	0x0800872c
 80067cc:	0800873d 	.word	0x0800873d
 80067d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1ed      	bne.n	80067b2 <__gethex+0x2de>
 80067d6:	e7da      	b.n	800678e <__gethex+0x2ba>
 80067d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1d7      	bne.n	800678e <__gethex+0x2ba>
 80067de:	e7e8      	b.n	80067b2 <__gethex+0x2de>
 80067e0:	1e6f      	subs	r7, r5, #1
 80067e2:	f1ba 0f00 	cmp.w	sl, #0
 80067e6:	d132      	bne.n	800684e <__gethex+0x37a>
 80067e8:	b127      	cbz	r7, 80067f4 <__gethex+0x320>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fe40 	bl	8007472 <__any_on>
 80067f2:	4682      	mov	sl, r0
 80067f4:	2101      	movs	r1, #1
 80067f6:	117b      	asrs	r3, r7, #5
 80067f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80067fc:	f007 071f 	and.w	r7, r7, #31
 8006800:	fa01 f707 	lsl.w	r7, r1, r7
 8006804:	421f      	tst	r7, r3
 8006806:	f04f 0702 	mov.w	r7, #2
 800680a:	4629      	mov	r1, r5
 800680c:	4620      	mov	r0, r4
 800680e:	bf18      	it	ne
 8006810:	f04a 0a02 	orrne.w	sl, sl, #2
 8006814:	1b76      	subs	r6, r6, r5
 8006816:	f7ff fdf5 	bl	8006404 <rshift>
 800681a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800681e:	f1ba 0f00 	cmp.w	sl, #0
 8006822:	d048      	beq.n	80068b6 <__gethex+0x3e2>
 8006824:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d015      	beq.n	8006858 <__gethex+0x384>
 800682c:	2b03      	cmp	r3, #3
 800682e:	d017      	beq.n	8006860 <__gethex+0x38c>
 8006830:	2b01      	cmp	r3, #1
 8006832:	d109      	bne.n	8006848 <__gethex+0x374>
 8006834:	f01a 0f02 	tst.w	sl, #2
 8006838:	d006      	beq.n	8006848 <__gethex+0x374>
 800683a:	f8d9 0000 	ldr.w	r0, [r9]
 800683e:	ea4a 0a00 	orr.w	sl, sl, r0
 8006842:	f01a 0f01 	tst.w	sl, #1
 8006846:	d10e      	bne.n	8006866 <__gethex+0x392>
 8006848:	f047 0710 	orr.w	r7, r7, #16
 800684c:	e033      	b.n	80068b6 <__gethex+0x3e2>
 800684e:	f04f 0a01 	mov.w	sl, #1
 8006852:	e7cf      	b.n	80067f4 <__gethex+0x320>
 8006854:	2701      	movs	r7, #1
 8006856:	e7e2      	b.n	800681e <__gethex+0x34a>
 8006858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800685a:	f1c3 0301 	rsb	r3, r3, #1
 800685e:	9315      	str	r3, [sp, #84]	; 0x54
 8006860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <__gethex+0x374>
 8006866:	f04f 0c00 	mov.w	ip, #0
 800686a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800686e:	f104 0314 	add.w	r3, r4, #20
 8006872:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006876:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800687a:	4618      	mov	r0, r3
 800687c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006880:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006884:	d01c      	beq.n	80068c0 <__gethex+0x3ec>
 8006886:	3201      	adds	r2, #1
 8006888:	6002      	str	r2, [r0, #0]
 800688a:	2f02      	cmp	r7, #2
 800688c:	f104 0314 	add.w	r3, r4, #20
 8006890:	d13d      	bne.n	800690e <__gethex+0x43a>
 8006892:	f8d8 2000 	ldr.w	r2, [r8]
 8006896:	3a01      	subs	r2, #1
 8006898:	42b2      	cmp	r2, r6
 800689a:	d10a      	bne.n	80068b2 <__gethex+0x3de>
 800689c:	2201      	movs	r2, #1
 800689e:	1171      	asrs	r1, r6, #5
 80068a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068a4:	f006 061f 	and.w	r6, r6, #31
 80068a8:	fa02 f606 	lsl.w	r6, r2, r6
 80068ac:	421e      	tst	r6, r3
 80068ae:	bf18      	it	ne
 80068b0:	4617      	movne	r7, r2
 80068b2:	f047 0720 	orr.w	r7, r7, #32
 80068b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068b8:	601c      	str	r4, [r3, #0]
 80068ba:	9b06      	ldr	r3, [sp, #24]
 80068bc:	601d      	str	r5, [r3, #0]
 80068be:	e69b      	b.n	80065f8 <__gethex+0x124>
 80068c0:	4299      	cmp	r1, r3
 80068c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80068c6:	d8d8      	bhi.n	800687a <__gethex+0x3a6>
 80068c8:	68a3      	ldr	r3, [r4, #8]
 80068ca:	459b      	cmp	fp, r3
 80068cc:	db17      	blt.n	80068fe <__gethex+0x42a>
 80068ce:	6861      	ldr	r1, [r4, #4]
 80068d0:	9802      	ldr	r0, [sp, #8]
 80068d2:	3101      	adds	r1, #1
 80068d4:	f000 f936 	bl	8006b44 <_Balloc>
 80068d8:	4681      	mov	r9, r0
 80068da:	b918      	cbnz	r0, 80068e4 <__gethex+0x410>
 80068dc:	4602      	mov	r2, r0
 80068de:	2184      	movs	r1, #132	; 0x84
 80068e0:	4b19      	ldr	r3, [pc, #100]	; (8006948 <__gethex+0x474>)
 80068e2:	e6ac      	b.n	800663e <__gethex+0x16a>
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	f104 010c 	add.w	r1, r4, #12
 80068ea:	3202      	adds	r2, #2
 80068ec:	0092      	lsls	r2, r2, #2
 80068ee:	300c      	adds	r0, #12
 80068f0:	f000 f91a 	bl	8006b28 <memcpy>
 80068f4:	4621      	mov	r1, r4
 80068f6:	9802      	ldr	r0, [sp, #8]
 80068f8:	f000 f964 	bl	8006bc4 <_Bfree>
 80068fc:	464c      	mov	r4, r9
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	6122      	str	r2, [r4, #16]
 8006904:	2201      	movs	r2, #1
 8006906:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800690a:	615a      	str	r2, [r3, #20]
 800690c:	e7bd      	b.n	800688a <__gethex+0x3b6>
 800690e:	6922      	ldr	r2, [r4, #16]
 8006910:	455a      	cmp	r2, fp
 8006912:	dd0b      	ble.n	800692c <__gethex+0x458>
 8006914:	2101      	movs	r1, #1
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff fd74 	bl	8006404 <rshift>
 800691c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006920:	3501      	adds	r5, #1
 8006922:	42ab      	cmp	r3, r5
 8006924:	f6ff aed5 	blt.w	80066d2 <__gethex+0x1fe>
 8006928:	2701      	movs	r7, #1
 800692a:	e7c2      	b.n	80068b2 <__gethex+0x3de>
 800692c:	f016 061f 	ands.w	r6, r6, #31
 8006930:	d0fa      	beq.n	8006928 <__gethex+0x454>
 8006932:	449a      	add	sl, r3
 8006934:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006938:	f000 f9fa 	bl	8006d30 <__hi0bits>
 800693c:	f1c6 0620 	rsb	r6, r6, #32
 8006940:	42b0      	cmp	r0, r6
 8006942:	dbe7      	blt.n	8006914 <__gethex+0x440>
 8006944:	e7f0      	b.n	8006928 <__gethex+0x454>
 8006946:	bf00      	nop
 8006948:	0800872c 	.word	0x0800872c

0800694c <L_shift>:
 800694c:	f1c2 0208 	rsb	r2, r2, #8
 8006950:	0092      	lsls	r2, r2, #2
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	f1c2 0620 	rsb	r6, r2, #32
 8006958:	6843      	ldr	r3, [r0, #4]
 800695a:	6804      	ldr	r4, [r0, #0]
 800695c:	fa03 f506 	lsl.w	r5, r3, r6
 8006960:	432c      	orrs	r4, r5
 8006962:	40d3      	lsrs	r3, r2
 8006964:	6004      	str	r4, [r0, #0]
 8006966:	f840 3f04 	str.w	r3, [r0, #4]!
 800696a:	4288      	cmp	r0, r1
 800696c:	d3f4      	bcc.n	8006958 <L_shift+0xc>
 800696e:	bd70      	pop	{r4, r5, r6, pc}

08006970 <__match>:
 8006970:	b530      	push	{r4, r5, lr}
 8006972:	6803      	ldr	r3, [r0, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800697a:	b914      	cbnz	r4, 8006982 <__match+0x12>
 800697c:	6003      	str	r3, [r0, #0]
 800697e:	2001      	movs	r0, #1
 8006980:	bd30      	pop	{r4, r5, pc}
 8006982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006986:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800698a:	2d19      	cmp	r5, #25
 800698c:	bf98      	it	ls
 800698e:	3220      	addls	r2, #32
 8006990:	42a2      	cmp	r2, r4
 8006992:	d0f0      	beq.n	8006976 <__match+0x6>
 8006994:	2000      	movs	r0, #0
 8006996:	e7f3      	b.n	8006980 <__match+0x10>

08006998 <__hexnan>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	2500      	movs	r5, #0
 800699e:	680b      	ldr	r3, [r1, #0]
 80069a0:	4682      	mov	sl, r0
 80069a2:	115e      	asrs	r6, r3, #5
 80069a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069a8:	f013 031f 	ands.w	r3, r3, #31
 80069ac:	bf18      	it	ne
 80069ae:	3604      	addne	r6, #4
 80069b0:	1f37      	subs	r7, r6, #4
 80069b2:	4690      	mov	r8, r2
 80069b4:	46b9      	mov	r9, r7
 80069b6:	463c      	mov	r4, r7
 80069b8:	46ab      	mov	fp, r5
 80069ba:	b087      	sub	sp, #28
 80069bc:	6801      	ldr	r1, [r0, #0]
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	f846 5c04 	str.w	r5, [r6, #-4]
 80069c4:	9502      	str	r5, [sp, #8]
 80069c6:	784a      	ldrb	r2, [r1, #1]
 80069c8:	1c4b      	adds	r3, r1, #1
 80069ca:	9303      	str	r3, [sp, #12]
 80069cc:	b342      	cbz	r2, 8006a20 <__hexnan+0x88>
 80069ce:	4610      	mov	r0, r2
 80069d0:	9105      	str	r1, [sp, #20]
 80069d2:	9204      	str	r2, [sp, #16]
 80069d4:	f7ff fd69 	bl	80064aa <__hexdig_fun>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d14f      	bne.n	8006a7c <__hexnan+0xe4>
 80069dc:	9a04      	ldr	r2, [sp, #16]
 80069de:	9905      	ldr	r1, [sp, #20]
 80069e0:	2a20      	cmp	r2, #32
 80069e2:	d818      	bhi.n	8006a16 <__hexnan+0x7e>
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	459b      	cmp	fp, r3
 80069e8:	dd13      	ble.n	8006a12 <__hexnan+0x7a>
 80069ea:	454c      	cmp	r4, r9
 80069ec:	d206      	bcs.n	80069fc <__hexnan+0x64>
 80069ee:	2d07      	cmp	r5, #7
 80069f0:	dc04      	bgt.n	80069fc <__hexnan+0x64>
 80069f2:	462a      	mov	r2, r5
 80069f4:	4649      	mov	r1, r9
 80069f6:	4620      	mov	r0, r4
 80069f8:	f7ff ffa8 	bl	800694c <L_shift>
 80069fc:	4544      	cmp	r4, r8
 80069fe:	d950      	bls.n	8006aa2 <__hexnan+0x10a>
 8006a00:	2300      	movs	r3, #0
 8006a02:	f1a4 0904 	sub.w	r9, r4, #4
 8006a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	464c      	mov	r4, r9
 8006a0e:	f8cd b008 	str.w	fp, [sp, #8]
 8006a12:	9903      	ldr	r1, [sp, #12]
 8006a14:	e7d7      	b.n	80069c6 <__hexnan+0x2e>
 8006a16:	2a29      	cmp	r2, #41	; 0x29
 8006a18:	d156      	bne.n	8006ac8 <__hexnan+0x130>
 8006a1a:	3102      	adds	r1, #2
 8006a1c:	f8ca 1000 	str.w	r1, [sl]
 8006a20:	f1bb 0f00 	cmp.w	fp, #0
 8006a24:	d050      	beq.n	8006ac8 <__hexnan+0x130>
 8006a26:	454c      	cmp	r4, r9
 8006a28:	d206      	bcs.n	8006a38 <__hexnan+0xa0>
 8006a2a:	2d07      	cmp	r5, #7
 8006a2c:	dc04      	bgt.n	8006a38 <__hexnan+0xa0>
 8006a2e:	462a      	mov	r2, r5
 8006a30:	4649      	mov	r1, r9
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff ff8a 	bl	800694c <L_shift>
 8006a38:	4544      	cmp	r4, r8
 8006a3a:	d934      	bls.n	8006aa6 <__hexnan+0x10e>
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	f1a8 0204 	sub.w	r2, r8, #4
 8006a42:	f853 1b04 	ldr.w	r1, [r3], #4
 8006a46:	429f      	cmp	r7, r3
 8006a48:	f842 1f04 	str.w	r1, [r2, #4]!
 8006a4c:	d2f9      	bcs.n	8006a42 <__hexnan+0xaa>
 8006a4e:	1b3b      	subs	r3, r7, r4
 8006a50:	f023 0303 	bic.w	r3, r3, #3
 8006a54:	3304      	adds	r3, #4
 8006a56:	3401      	adds	r4, #1
 8006a58:	3e03      	subs	r6, #3
 8006a5a:	42b4      	cmp	r4, r6
 8006a5c:	bf88      	it	hi
 8006a5e:	2304      	movhi	r3, #4
 8006a60:	2200      	movs	r2, #0
 8006a62:	4443      	add	r3, r8
 8006a64:	f843 2b04 	str.w	r2, [r3], #4
 8006a68:	429f      	cmp	r7, r3
 8006a6a:	d2fb      	bcs.n	8006a64 <__hexnan+0xcc>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	b91b      	cbnz	r3, 8006a78 <__hexnan+0xe0>
 8006a70:	4547      	cmp	r7, r8
 8006a72:	d127      	bne.n	8006ac4 <__hexnan+0x12c>
 8006a74:	2301      	movs	r3, #1
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	2005      	movs	r0, #5
 8006a7a:	e026      	b.n	8006aca <__hexnan+0x132>
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	2d08      	cmp	r5, #8
 8006a80:	f10b 0b01 	add.w	fp, fp, #1
 8006a84:	dd06      	ble.n	8006a94 <__hexnan+0xfc>
 8006a86:	4544      	cmp	r4, r8
 8006a88:	d9c3      	bls.n	8006a12 <__hexnan+0x7a>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2501      	movs	r5, #1
 8006a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a92:	3c04      	subs	r4, #4
 8006a94:	6822      	ldr	r2, [r4, #0]
 8006a96:	f000 000f 	and.w	r0, r0, #15
 8006a9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006a9e:	6022      	str	r2, [r4, #0]
 8006aa0:	e7b7      	b.n	8006a12 <__hexnan+0x7a>
 8006aa2:	2508      	movs	r5, #8
 8006aa4:	e7b5      	b.n	8006a12 <__hexnan+0x7a>
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0df      	beq.n	8006a6c <__hexnan+0xd4>
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	f1c3 0320 	rsb	r3, r3, #32
 8006ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006abc:	401a      	ands	r2, r3
 8006abe:	f846 2c04 	str.w	r2, [r6, #-4]
 8006ac2:	e7d3      	b.n	8006a6c <__hexnan+0xd4>
 8006ac4:	3f04      	subs	r7, #4
 8006ac6:	e7d1      	b.n	8006a6c <__hexnan+0xd4>
 8006ac8:	2004      	movs	r0, #4
 8006aca:	b007      	add	sp, #28
 8006acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ad0 <_localeconv_r>:
 8006ad0:	4800      	ldr	r0, [pc, #0]	; (8006ad4 <_localeconv_r+0x4>)
 8006ad2:	4770      	bx	lr
 8006ad4:	20000164 	.word	0x20000164

08006ad8 <malloc>:
 8006ad8:	4b02      	ldr	r3, [pc, #8]	; (8006ae4 <malloc+0xc>)
 8006ada:	4601      	mov	r1, r0
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	f000 bd43 	b.w	8007568 <_malloc_r>
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c

08006ae8 <__ascii_mbtowc>:
 8006ae8:	b082      	sub	sp, #8
 8006aea:	b901      	cbnz	r1, 8006aee <__ascii_mbtowc+0x6>
 8006aec:	a901      	add	r1, sp, #4
 8006aee:	b142      	cbz	r2, 8006b02 <__ascii_mbtowc+0x1a>
 8006af0:	b14b      	cbz	r3, 8006b06 <__ascii_mbtowc+0x1e>
 8006af2:	7813      	ldrb	r3, [r2, #0]
 8006af4:	600b      	str	r3, [r1, #0]
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	1e10      	subs	r0, r2, #0
 8006afa:	bf18      	it	ne
 8006afc:	2001      	movne	r0, #1
 8006afe:	b002      	add	sp, #8
 8006b00:	4770      	bx	lr
 8006b02:	4610      	mov	r0, r2
 8006b04:	e7fb      	b.n	8006afe <__ascii_mbtowc+0x16>
 8006b06:	f06f 0001 	mvn.w	r0, #1
 8006b0a:	e7f8      	b.n	8006afe <__ascii_mbtowc+0x16>

08006b0c <memchr>:
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	b2c9      	uxtb	r1, r1
 8006b12:	4402      	add	r2, r0
 8006b14:	4293      	cmp	r3, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	d101      	bne.n	8006b1e <memchr+0x12>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e003      	b.n	8006b26 <memchr+0x1a>
 8006b1e:	7804      	ldrb	r4, [r0, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	428c      	cmp	r4, r1
 8006b24:	d1f6      	bne.n	8006b14 <memchr+0x8>
 8006b26:	bd10      	pop	{r4, pc}

08006b28 <memcpy>:
 8006b28:	440a      	add	r2, r1
 8006b2a:	4291      	cmp	r1, r2
 8006b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b30:	d100      	bne.n	8006b34 <memcpy+0xc>
 8006b32:	4770      	bx	lr
 8006b34:	b510      	push	{r4, lr}
 8006b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3a:	4291      	cmp	r1, r2
 8006b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b40:	d1f9      	bne.n	8006b36 <memcpy+0xe>
 8006b42:	bd10      	pop	{r4, pc}

08006b44 <_Balloc>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	b976      	cbnz	r6, 8006b6c <_Balloc+0x28>
 8006b4e:	2010      	movs	r0, #16
 8006b50:	f7ff ffc2 	bl	8006ad8 <malloc>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6260      	str	r0, [r4, #36]	; 0x24
 8006b58:	b920      	cbnz	r0, 8006b64 <_Balloc+0x20>
 8006b5a:	2166      	movs	r1, #102	; 0x66
 8006b5c:	4b17      	ldr	r3, [pc, #92]	; (8006bbc <_Balloc+0x78>)
 8006b5e:	4818      	ldr	r0, [pc, #96]	; (8006bc0 <_Balloc+0x7c>)
 8006b60:	f000 feee 	bl	8007940 <__assert_func>
 8006b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b68:	6006      	str	r6, [r0, #0]
 8006b6a:	60c6      	str	r6, [r0, #12]
 8006b6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b6e:	68f3      	ldr	r3, [r6, #12]
 8006b70:	b183      	cbz	r3, 8006b94 <_Balloc+0x50>
 8006b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b7a:	b9b8      	cbnz	r0, 8006bac <_Balloc+0x68>
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b82:	1d72      	adds	r2, r6, #5
 8006b84:	4620      	mov	r0, r4
 8006b86:	0092      	lsls	r2, r2, #2
 8006b88:	f000 fc94 	bl	80074b4 <_calloc_r>
 8006b8c:	b160      	cbz	r0, 8006ba8 <_Balloc+0x64>
 8006b8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b92:	e00e      	b.n	8006bb2 <_Balloc+0x6e>
 8006b94:	2221      	movs	r2, #33	; 0x21
 8006b96:	2104      	movs	r1, #4
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fc8b 	bl	80074b4 <_calloc_r>
 8006b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba0:	60f0      	str	r0, [r6, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e4      	bne.n	8006b72 <_Balloc+0x2e>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	6802      	ldr	r2, [r0, #0]
 8006bae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bb8:	e7f7      	b.n	8006baa <_Balloc+0x66>
 8006bba:	bf00      	nop
 8006bbc:	080086b6 	.word	0x080086b6
 8006bc0:	080087bc 	.word	0x080087bc

08006bc4 <_Bfree>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bc8:	4605      	mov	r5, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	b976      	cbnz	r6, 8006bec <_Bfree+0x28>
 8006bce:	2010      	movs	r0, #16
 8006bd0:	f7ff ff82 	bl	8006ad8 <malloc>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6268      	str	r0, [r5, #36]	; 0x24
 8006bd8:	b920      	cbnz	r0, 8006be4 <_Bfree+0x20>
 8006bda:	218a      	movs	r1, #138	; 0x8a
 8006bdc:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <_Bfree+0x3c>)
 8006bde:	4809      	ldr	r0, [pc, #36]	; (8006c04 <_Bfree+0x40>)
 8006be0:	f000 feae 	bl	8007940 <__assert_func>
 8006be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006be8:	6006      	str	r6, [r0, #0]
 8006bea:	60c6      	str	r6, [r0, #12]
 8006bec:	b13c      	cbz	r4, 8006bfe <_Bfree+0x3a>
 8006bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bf0:	6862      	ldr	r2, [r4, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bf8:	6021      	str	r1, [r4, #0]
 8006bfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	080086b6 	.word	0x080086b6
 8006c04:	080087bc 	.word	0x080087bc

08006c08 <__multadd>:
 8006c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0c:	4698      	mov	r8, r3
 8006c0e:	460c      	mov	r4, r1
 8006c10:	2300      	movs	r3, #0
 8006c12:	690e      	ldr	r6, [r1, #16]
 8006c14:	4607      	mov	r7, r0
 8006c16:	f101 0014 	add.w	r0, r1, #20
 8006c1a:	6805      	ldr	r5, [r0, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	b2a9      	uxth	r1, r5
 8006c20:	fb02 8101 	mla	r1, r2, r1, r8
 8006c24:	0c2d      	lsrs	r5, r5, #16
 8006c26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006c2a:	fb02 c505 	mla	r5, r2, r5, ip
 8006c2e:	b289      	uxth	r1, r1
 8006c30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006c34:	429e      	cmp	r6, r3
 8006c36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006c3a:	f840 1b04 	str.w	r1, [r0], #4
 8006c3e:	dcec      	bgt.n	8006c1a <__multadd+0x12>
 8006c40:	f1b8 0f00 	cmp.w	r8, #0
 8006c44:	d022      	beq.n	8006c8c <__multadd+0x84>
 8006c46:	68a3      	ldr	r3, [r4, #8]
 8006c48:	42b3      	cmp	r3, r6
 8006c4a:	dc19      	bgt.n	8006c80 <__multadd+0x78>
 8006c4c:	6861      	ldr	r1, [r4, #4]
 8006c4e:	4638      	mov	r0, r7
 8006c50:	3101      	adds	r1, #1
 8006c52:	f7ff ff77 	bl	8006b44 <_Balloc>
 8006c56:	4605      	mov	r5, r0
 8006c58:	b928      	cbnz	r0, 8006c66 <__multadd+0x5e>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	21b5      	movs	r1, #181	; 0xb5
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <__multadd+0x8c>)
 8006c60:	480d      	ldr	r0, [pc, #52]	; (8006c98 <__multadd+0x90>)
 8006c62:	f000 fe6d 	bl	8007940 <__assert_func>
 8006c66:	6922      	ldr	r2, [r4, #16]
 8006c68:	f104 010c 	add.w	r1, r4, #12
 8006c6c:	3202      	adds	r2, #2
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	300c      	adds	r0, #12
 8006c72:	f7ff ff59 	bl	8006b28 <memcpy>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff ffa3 	bl	8006bc4 <_Bfree>
 8006c7e:	462c      	mov	r4, r5
 8006c80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006c84:	3601      	adds	r6, #1
 8006c86:	f8c3 8014 	str.w	r8, [r3, #20]
 8006c8a:	6126      	str	r6, [r4, #16]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c92:	bf00      	nop
 8006c94:	0800872c 	.word	0x0800872c
 8006c98:	080087bc 	.word	0x080087bc

08006c9c <__s2b>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	2209      	movs	r2, #9
 8006ca4:	461f      	mov	r7, r3
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	460c      	mov	r4, r1
 8006caa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cae:	4606      	mov	r6, r0
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	db09      	blt.n	8006ccc <__s2b+0x30>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff ff43 	bl	8006b44 <_Balloc>
 8006cbe:	b940      	cbnz	r0, 8006cd2 <__s2b+0x36>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	21ce      	movs	r1, #206	; 0xce
 8006cc4:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <__s2b+0x8c>)
 8006cc6:	4819      	ldr	r0, [pc, #100]	; (8006d2c <__s2b+0x90>)
 8006cc8:	f000 fe3a 	bl	8007940 <__assert_func>
 8006ccc:	0052      	lsls	r2, r2, #1
 8006cce:	3101      	adds	r1, #1
 8006cd0:	e7f0      	b.n	8006cb4 <__s2b+0x18>
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	2d09      	cmp	r5, #9
 8006cd6:	6143      	str	r3, [r0, #20]
 8006cd8:	f04f 0301 	mov.w	r3, #1
 8006cdc:	6103      	str	r3, [r0, #16]
 8006cde:	dd16      	ble.n	8006d0e <__s2b+0x72>
 8006ce0:	f104 0909 	add.w	r9, r4, #9
 8006ce4:	46c8      	mov	r8, r9
 8006ce6:	442c      	add	r4, r5
 8006ce8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006cec:	4601      	mov	r1, r0
 8006cee:	220a      	movs	r2, #10
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	3b30      	subs	r3, #48	; 0x30
 8006cf4:	f7ff ff88 	bl	8006c08 <__multadd>
 8006cf8:	45a0      	cmp	r8, r4
 8006cfa:	d1f5      	bne.n	8006ce8 <__s2b+0x4c>
 8006cfc:	f1a5 0408 	sub.w	r4, r5, #8
 8006d00:	444c      	add	r4, r9
 8006d02:	1b2d      	subs	r5, r5, r4
 8006d04:	1963      	adds	r3, r4, r5
 8006d06:	42bb      	cmp	r3, r7
 8006d08:	db04      	blt.n	8006d14 <__s2b+0x78>
 8006d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	2509      	movs	r5, #9
 8006d10:	340a      	adds	r4, #10
 8006d12:	e7f6      	b.n	8006d02 <__s2b+0x66>
 8006d14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d18:	4601      	mov	r1, r0
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	3b30      	subs	r3, #48	; 0x30
 8006d20:	f7ff ff72 	bl	8006c08 <__multadd>
 8006d24:	e7ee      	b.n	8006d04 <__s2b+0x68>
 8006d26:	bf00      	nop
 8006d28:	0800872c 	.word	0x0800872c
 8006d2c:	080087bc 	.word	0x080087bc

08006d30 <__hi0bits>:
 8006d30:	0c02      	lsrs	r2, r0, #16
 8006d32:	0412      	lsls	r2, r2, #16
 8006d34:	4603      	mov	r3, r0
 8006d36:	b9ca      	cbnz	r2, 8006d6c <__hi0bits+0x3c>
 8006d38:	0403      	lsls	r3, r0, #16
 8006d3a:	2010      	movs	r0, #16
 8006d3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d40:	bf04      	itt	eq
 8006d42:	021b      	lsleq	r3, r3, #8
 8006d44:	3008      	addeq	r0, #8
 8006d46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d4a:	bf04      	itt	eq
 8006d4c:	011b      	lsleq	r3, r3, #4
 8006d4e:	3004      	addeq	r0, #4
 8006d50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d54:	bf04      	itt	eq
 8006d56:	009b      	lsleq	r3, r3, #2
 8006d58:	3002      	addeq	r0, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	db05      	blt.n	8006d6a <__hi0bits+0x3a>
 8006d5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006d62:	f100 0001 	add.w	r0, r0, #1
 8006d66:	bf08      	it	eq
 8006d68:	2020      	moveq	r0, #32
 8006d6a:	4770      	bx	lr
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e7e5      	b.n	8006d3c <__hi0bits+0xc>

08006d70 <__lo0bits>:
 8006d70:	6803      	ldr	r3, [r0, #0]
 8006d72:	4602      	mov	r2, r0
 8006d74:	f013 0007 	ands.w	r0, r3, #7
 8006d78:	d00b      	beq.n	8006d92 <__lo0bits+0x22>
 8006d7a:	07d9      	lsls	r1, r3, #31
 8006d7c:	d422      	bmi.n	8006dc4 <__lo0bits+0x54>
 8006d7e:	0798      	lsls	r0, r3, #30
 8006d80:	bf49      	itett	mi
 8006d82:	085b      	lsrmi	r3, r3, #1
 8006d84:	089b      	lsrpl	r3, r3, #2
 8006d86:	2001      	movmi	r0, #1
 8006d88:	6013      	strmi	r3, [r2, #0]
 8006d8a:	bf5c      	itt	pl
 8006d8c:	2002      	movpl	r0, #2
 8006d8e:	6013      	strpl	r3, [r2, #0]
 8006d90:	4770      	bx	lr
 8006d92:	b299      	uxth	r1, r3
 8006d94:	b909      	cbnz	r1, 8006d9a <__lo0bits+0x2a>
 8006d96:	2010      	movs	r0, #16
 8006d98:	0c1b      	lsrs	r3, r3, #16
 8006d9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d9e:	bf04      	itt	eq
 8006da0:	0a1b      	lsreq	r3, r3, #8
 8006da2:	3008      	addeq	r0, #8
 8006da4:	0719      	lsls	r1, r3, #28
 8006da6:	bf04      	itt	eq
 8006da8:	091b      	lsreq	r3, r3, #4
 8006daa:	3004      	addeq	r0, #4
 8006dac:	0799      	lsls	r1, r3, #30
 8006dae:	bf04      	itt	eq
 8006db0:	089b      	lsreq	r3, r3, #2
 8006db2:	3002      	addeq	r0, #2
 8006db4:	07d9      	lsls	r1, r3, #31
 8006db6:	d403      	bmi.n	8006dc0 <__lo0bits+0x50>
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	f100 0001 	add.w	r0, r0, #1
 8006dbe:	d003      	beq.n	8006dc8 <__lo0bits+0x58>
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4770      	bx	lr
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	4770      	bx	lr
 8006dc8:	2020      	movs	r0, #32
 8006dca:	4770      	bx	lr

08006dcc <__i2b>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	460c      	mov	r4, r1
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	f7ff feb7 	bl	8006b44 <_Balloc>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	b928      	cbnz	r0, 8006de6 <__i2b+0x1a>
 8006dda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dde:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <__i2b+0x24>)
 8006de0:	4804      	ldr	r0, [pc, #16]	; (8006df4 <__i2b+0x28>)
 8006de2:	f000 fdad 	bl	8007940 <__assert_func>
 8006de6:	2301      	movs	r3, #1
 8006de8:	6144      	str	r4, [r0, #20]
 8006dea:	6103      	str	r3, [r0, #16]
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop
 8006df0:	0800872c 	.word	0x0800872c
 8006df4:	080087bc 	.word	0x080087bc

08006df8 <__multiply>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	690a      	ldr	r2, [r1, #16]
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	460d      	mov	r5, r1
 8006e04:	429a      	cmp	r2, r3
 8006e06:	bfbe      	ittt	lt
 8006e08:	460b      	movlt	r3, r1
 8006e0a:	4625      	movlt	r5, r4
 8006e0c:	461c      	movlt	r4, r3
 8006e0e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e12:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e16:	68ab      	ldr	r3, [r5, #8]
 8006e18:	6869      	ldr	r1, [r5, #4]
 8006e1a:	eb0a 0709 	add.w	r7, sl, r9
 8006e1e:	42bb      	cmp	r3, r7
 8006e20:	b085      	sub	sp, #20
 8006e22:	bfb8      	it	lt
 8006e24:	3101      	addlt	r1, #1
 8006e26:	f7ff fe8d 	bl	8006b44 <_Balloc>
 8006e2a:	b930      	cbnz	r0, 8006e3a <__multiply+0x42>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	f240 115d 	movw	r1, #349	; 0x15d
 8006e32:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <__multiply+0x140>)
 8006e34:	4841      	ldr	r0, [pc, #260]	; (8006f3c <__multiply+0x144>)
 8006e36:	f000 fd83 	bl	8007940 <__assert_func>
 8006e3a:	f100 0614 	add.w	r6, r0, #20
 8006e3e:	4633      	mov	r3, r6
 8006e40:	2200      	movs	r2, #0
 8006e42:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006e46:	4543      	cmp	r3, r8
 8006e48:	d31e      	bcc.n	8006e88 <__multiply+0x90>
 8006e4a:	f105 0c14 	add.w	ip, r5, #20
 8006e4e:	f104 0314 	add.w	r3, r4, #20
 8006e52:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006e56:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006e5a:	9202      	str	r2, [sp, #8]
 8006e5c:	ebac 0205 	sub.w	r2, ip, r5
 8006e60:	3a15      	subs	r2, #21
 8006e62:	f022 0203 	bic.w	r2, r2, #3
 8006e66:	3204      	adds	r2, #4
 8006e68:	f105 0115 	add.w	r1, r5, #21
 8006e6c:	458c      	cmp	ip, r1
 8006e6e:	bf38      	it	cc
 8006e70:	2204      	movcc	r2, #4
 8006e72:	9201      	str	r2, [sp, #4]
 8006e74:	9a02      	ldr	r2, [sp, #8]
 8006e76:	9303      	str	r3, [sp, #12]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d808      	bhi.n	8006e8e <__multiply+0x96>
 8006e7c:	2f00      	cmp	r7, #0
 8006e7e:	dc55      	bgt.n	8006f2c <__multiply+0x134>
 8006e80:	6107      	str	r7, [r0, #16]
 8006e82:	b005      	add	sp, #20
 8006e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e88:	f843 2b04 	str.w	r2, [r3], #4
 8006e8c:	e7db      	b.n	8006e46 <__multiply+0x4e>
 8006e8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e92:	f1ba 0f00 	cmp.w	sl, #0
 8006e96:	d020      	beq.n	8006eda <__multiply+0xe2>
 8006e98:	46b1      	mov	r9, r6
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f105 0e14 	add.w	lr, r5, #20
 8006ea0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ea4:	f8d9 b000 	ldr.w	fp, [r9]
 8006ea8:	b2a1      	uxth	r1, r4
 8006eaa:	fa1f fb8b 	uxth.w	fp, fp
 8006eae:	fb0a b101 	mla	r1, sl, r1, fp
 8006eb2:	4411      	add	r1, r2
 8006eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8006eb8:	0c24      	lsrs	r4, r4, #16
 8006eba:	0c12      	lsrs	r2, r2, #16
 8006ebc:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ec0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ec4:	b289      	uxth	r1, r1
 8006ec6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006eca:	45f4      	cmp	ip, lr
 8006ecc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006ed0:	f849 1b04 	str.w	r1, [r9], #4
 8006ed4:	d8e4      	bhi.n	8006ea0 <__multiply+0xa8>
 8006ed6:	9901      	ldr	r1, [sp, #4]
 8006ed8:	5072      	str	r2, [r6, r1]
 8006eda:	9a03      	ldr	r2, [sp, #12]
 8006edc:	3304      	adds	r3, #4
 8006ede:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ee2:	f1b9 0f00 	cmp.w	r9, #0
 8006ee6:	d01f      	beq.n	8006f28 <__multiply+0x130>
 8006ee8:	46b6      	mov	lr, r6
 8006eea:	f04f 0a00 	mov.w	sl, #0
 8006eee:	6834      	ldr	r4, [r6, #0]
 8006ef0:	f105 0114 	add.w	r1, r5, #20
 8006ef4:	880a      	ldrh	r2, [r1, #0]
 8006ef6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006efa:	b2a4      	uxth	r4, r4
 8006efc:	fb09 b202 	mla	r2, r9, r2, fp
 8006f00:	4492      	add	sl, r2
 8006f02:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006f06:	f84e 4b04 	str.w	r4, [lr], #4
 8006f0a:	f851 4b04 	ldr.w	r4, [r1], #4
 8006f0e:	f8be 2000 	ldrh.w	r2, [lr]
 8006f12:	0c24      	lsrs	r4, r4, #16
 8006f14:	fb09 2404 	mla	r4, r9, r4, r2
 8006f18:	458c      	cmp	ip, r1
 8006f1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006f1e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f22:	d8e7      	bhi.n	8006ef4 <__multiply+0xfc>
 8006f24:	9a01      	ldr	r2, [sp, #4]
 8006f26:	50b4      	str	r4, [r6, r2]
 8006f28:	3604      	adds	r6, #4
 8006f2a:	e7a3      	b.n	8006e74 <__multiply+0x7c>
 8006f2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1a5      	bne.n	8006e80 <__multiply+0x88>
 8006f34:	3f01      	subs	r7, #1
 8006f36:	e7a1      	b.n	8006e7c <__multiply+0x84>
 8006f38:	0800872c 	.word	0x0800872c
 8006f3c:	080087bc 	.word	0x080087bc

08006f40 <__pow5mult>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4615      	mov	r5, r2
 8006f46:	f012 0203 	ands.w	r2, r2, #3
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	d007      	beq.n	8006f60 <__pow5mult+0x20>
 8006f50:	4c25      	ldr	r4, [pc, #148]	; (8006fe8 <__pow5mult+0xa8>)
 8006f52:	3a01      	subs	r2, #1
 8006f54:	2300      	movs	r3, #0
 8006f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f5a:	f7ff fe55 	bl	8006c08 <__multadd>
 8006f5e:	4607      	mov	r7, r0
 8006f60:	10ad      	asrs	r5, r5, #2
 8006f62:	d03d      	beq.n	8006fe0 <__pow5mult+0xa0>
 8006f64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f66:	b97c      	cbnz	r4, 8006f88 <__pow5mult+0x48>
 8006f68:	2010      	movs	r0, #16
 8006f6a:	f7ff fdb5 	bl	8006ad8 <malloc>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6270      	str	r0, [r6, #36]	; 0x24
 8006f72:	b928      	cbnz	r0, 8006f80 <__pow5mult+0x40>
 8006f74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f78:	4b1c      	ldr	r3, [pc, #112]	; (8006fec <__pow5mult+0xac>)
 8006f7a:	481d      	ldr	r0, [pc, #116]	; (8006ff0 <__pow5mult+0xb0>)
 8006f7c:	f000 fce0 	bl	8007940 <__assert_func>
 8006f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f84:	6004      	str	r4, [r0, #0]
 8006f86:	60c4      	str	r4, [r0, #12]
 8006f88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f90:	b94c      	cbnz	r4, 8006fa6 <__pow5mult+0x66>
 8006f92:	f240 2171 	movw	r1, #625	; 0x271
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ff18 	bl	8006dcc <__i2b>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fa4:	6003      	str	r3, [r0, #0]
 8006fa6:	f04f 0900 	mov.w	r9, #0
 8006faa:	07eb      	lsls	r3, r5, #31
 8006fac:	d50a      	bpl.n	8006fc4 <__pow5mult+0x84>
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f7ff ff20 	bl	8006df8 <__multiply>
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4639      	mov	r1, r7
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff fe01 	bl	8006bc4 <_Bfree>
 8006fc2:	4647      	mov	r7, r8
 8006fc4:	106d      	asrs	r5, r5, #1
 8006fc6:	d00b      	beq.n	8006fe0 <__pow5mult+0xa0>
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	b938      	cbnz	r0, 8006fdc <__pow5mult+0x9c>
 8006fcc:	4622      	mov	r2, r4
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7ff ff11 	bl	8006df8 <__multiply>
 8006fd6:	6020      	str	r0, [r4, #0]
 8006fd8:	f8c0 9000 	str.w	r9, [r0]
 8006fdc:	4604      	mov	r4, r0
 8006fde:	e7e4      	b.n	8006faa <__pow5mult+0x6a>
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe6:	bf00      	nop
 8006fe8:	08008910 	.word	0x08008910
 8006fec:	080086b6 	.word	0x080086b6
 8006ff0:	080087bc 	.word	0x080087bc

08006ff4 <__lshift>:
 8006ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	4691      	mov	r9, r2
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	6849      	ldr	r1, [r1, #4]
 8007002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800700c:	f108 0601 	add.w	r6, r8, #1
 8007010:	42b3      	cmp	r3, r6
 8007012:	db0b      	blt.n	800702c <__lshift+0x38>
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff fd95 	bl	8006b44 <_Balloc>
 800701a:	4605      	mov	r5, r0
 800701c:	b948      	cbnz	r0, 8007032 <__lshift+0x3e>
 800701e:	4602      	mov	r2, r0
 8007020:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007024:	4b27      	ldr	r3, [pc, #156]	; (80070c4 <__lshift+0xd0>)
 8007026:	4828      	ldr	r0, [pc, #160]	; (80070c8 <__lshift+0xd4>)
 8007028:	f000 fc8a 	bl	8007940 <__assert_func>
 800702c:	3101      	adds	r1, #1
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	e7ee      	b.n	8007010 <__lshift+0x1c>
 8007032:	2300      	movs	r3, #0
 8007034:	f100 0114 	add.w	r1, r0, #20
 8007038:	f100 0210 	add.w	r2, r0, #16
 800703c:	4618      	mov	r0, r3
 800703e:	4553      	cmp	r3, sl
 8007040:	db33      	blt.n	80070aa <__lshift+0xb6>
 8007042:	6920      	ldr	r0, [r4, #16]
 8007044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007048:	f104 0314 	add.w	r3, r4, #20
 800704c:	f019 091f 	ands.w	r9, r9, #31
 8007050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007058:	d02b      	beq.n	80070b2 <__lshift+0xbe>
 800705a:	468a      	mov	sl, r1
 800705c:	2200      	movs	r2, #0
 800705e:	f1c9 0e20 	rsb	lr, r9, #32
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	fa00 f009 	lsl.w	r0, r0, r9
 8007068:	4302      	orrs	r2, r0
 800706a:	f84a 2b04 	str.w	r2, [sl], #4
 800706e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007072:	459c      	cmp	ip, r3
 8007074:	fa22 f20e 	lsr.w	r2, r2, lr
 8007078:	d8f3      	bhi.n	8007062 <__lshift+0x6e>
 800707a:	ebac 0304 	sub.w	r3, ip, r4
 800707e:	3b15      	subs	r3, #21
 8007080:	f023 0303 	bic.w	r3, r3, #3
 8007084:	3304      	adds	r3, #4
 8007086:	f104 0015 	add.w	r0, r4, #21
 800708a:	4584      	cmp	ip, r0
 800708c:	bf38      	it	cc
 800708e:	2304      	movcc	r3, #4
 8007090:	50ca      	str	r2, [r1, r3]
 8007092:	b10a      	cbz	r2, 8007098 <__lshift+0xa4>
 8007094:	f108 0602 	add.w	r6, r8, #2
 8007098:	3e01      	subs	r6, #1
 800709a:	4638      	mov	r0, r7
 800709c:	4621      	mov	r1, r4
 800709e:	612e      	str	r6, [r5, #16]
 80070a0:	f7ff fd90 	bl	8006bc4 <_Bfree>
 80070a4:	4628      	mov	r0, r5
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80070ae:	3301      	adds	r3, #1
 80070b0:	e7c5      	b.n	800703e <__lshift+0x4a>
 80070b2:	3904      	subs	r1, #4
 80070b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b8:	459c      	cmp	ip, r3
 80070ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80070be:	d8f9      	bhi.n	80070b4 <__lshift+0xc0>
 80070c0:	e7ea      	b.n	8007098 <__lshift+0xa4>
 80070c2:	bf00      	nop
 80070c4:	0800872c 	.word	0x0800872c
 80070c8:	080087bc 	.word	0x080087bc

080070cc <__mcmp>:
 80070cc:	4603      	mov	r3, r0
 80070ce:	690a      	ldr	r2, [r1, #16]
 80070d0:	6900      	ldr	r0, [r0, #16]
 80070d2:	b530      	push	{r4, r5, lr}
 80070d4:	1a80      	subs	r0, r0, r2
 80070d6:	d10d      	bne.n	80070f4 <__mcmp+0x28>
 80070d8:	3314      	adds	r3, #20
 80070da:	3114      	adds	r1, #20
 80070dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070ec:	4295      	cmp	r5, r2
 80070ee:	d002      	beq.n	80070f6 <__mcmp+0x2a>
 80070f0:	d304      	bcc.n	80070fc <__mcmp+0x30>
 80070f2:	2001      	movs	r0, #1
 80070f4:	bd30      	pop	{r4, r5, pc}
 80070f6:	42a3      	cmp	r3, r4
 80070f8:	d3f4      	bcc.n	80070e4 <__mcmp+0x18>
 80070fa:	e7fb      	b.n	80070f4 <__mcmp+0x28>
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	e7f8      	b.n	80070f4 <__mcmp+0x28>
	...

08007104 <__mdiff>:
 8007104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	4606      	mov	r6, r0
 800710c:	4611      	mov	r1, r2
 800710e:	4620      	mov	r0, r4
 8007110:	4692      	mov	sl, r2
 8007112:	f7ff ffdb 	bl	80070cc <__mcmp>
 8007116:	1e05      	subs	r5, r0, #0
 8007118:	d111      	bne.n	800713e <__mdiff+0x3a>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff fd11 	bl	8006b44 <_Balloc>
 8007122:	4602      	mov	r2, r0
 8007124:	b928      	cbnz	r0, 8007132 <__mdiff+0x2e>
 8007126:	f240 2132 	movw	r1, #562	; 0x232
 800712a:	4b3c      	ldr	r3, [pc, #240]	; (800721c <__mdiff+0x118>)
 800712c:	483c      	ldr	r0, [pc, #240]	; (8007220 <__mdiff+0x11c>)
 800712e:	f000 fc07 	bl	8007940 <__assert_func>
 8007132:	2301      	movs	r3, #1
 8007134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007138:	4610      	mov	r0, r2
 800713a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713e:	bfa4      	itt	ge
 8007140:	4653      	movge	r3, sl
 8007142:	46a2      	movge	sl, r4
 8007144:	4630      	mov	r0, r6
 8007146:	f8da 1004 	ldr.w	r1, [sl, #4]
 800714a:	bfa6      	itte	ge
 800714c:	461c      	movge	r4, r3
 800714e:	2500      	movge	r5, #0
 8007150:	2501      	movlt	r5, #1
 8007152:	f7ff fcf7 	bl	8006b44 <_Balloc>
 8007156:	4602      	mov	r2, r0
 8007158:	b918      	cbnz	r0, 8007162 <__mdiff+0x5e>
 800715a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800715e:	4b2f      	ldr	r3, [pc, #188]	; (800721c <__mdiff+0x118>)
 8007160:	e7e4      	b.n	800712c <__mdiff+0x28>
 8007162:	f100 0814 	add.w	r8, r0, #20
 8007166:	f8da 7010 	ldr.w	r7, [sl, #16]
 800716a:	60c5      	str	r5, [r0, #12]
 800716c:	f04f 0c00 	mov.w	ip, #0
 8007170:	f10a 0514 	add.w	r5, sl, #20
 8007174:	f10a 0010 	add.w	r0, sl, #16
 8007178:	46c2      	mov	sl, r8
 800717a:	6926      	ldr	r6, [r4, #16]
 800717c:	f104 0914 	add.w	r9, r4, #20
 8007180:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007184:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007188:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800718c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007190:	fa1f f18b 	uxth.w	r1, fp
 8007194:	4461      	add	r1, ip
 8007196:	fa1f fc83 	uxth.w	ip, r3
 800719a:	0c1b      	lsrs	r3, r3, #16
 800719c:	eba1 010c 	sub.w	r1, r1, ip
 80071a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80071a8:	b289      	uxth	r1, r1
 80071aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80071ae:	454e      	cmp	r6, r9
 80071b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80071b4:	f84a 3b04 	str.w	r3, [sl], #4
 80071b8:	d8e6      	bhi.n	8007188 <__mdiff+0x84>
 80071ba:	1b33      	subs	r3, r6, r4
 80071bc:	3b15      	subs	r3, #21
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	3415      	adds	r4, #21
 80071c4:	3304      	adds	r3, #4
 80071c6:	42a6      	cmp	r6, r4
 80071c8:	bf38      	it	cc
 80071ca:	2304      	movcc	r3, #4
 80071cc:	441d      	add	r5, r3
 80071ce:	4443      	add	r3, r8
 80071d0:	461e      	mov	r6, r3
 80071d2:	462c      	mov	r4, r5
 80071d4:	4574      	cmp	r4, lr
 80071d6:	d30e      	bcc.n	80071f6 <__mdiff+0xf2>
 80071d8:	f10e 0103 	add.w	r1, lr, #3
 80071dc:	1b49      	subs	r1, r1, r5
 80071de:	f021 0103 	bic.w	r1, r1, #3
 80071e2:	3d03      	subs	r5, #3
 80071e4:	45ae      	cmp	lr, r5
 80071e6:	bf38      	it	cc
 80071e8:	2100      	movcc	r1, #0
 80071ea:	4419      	add	r1, r3
 80071ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80071f0:	b18b      	cbz	r3, 8007216 <__mdiff+0x112>
 80071f2:	6117      	str	r7, [r2, #16]
 80071f4:	e7a0      	b.n	8007138 <__mdiff+0x34>
 80071f6:	f854 8b04 	ldr.w	r8, [r4], #4
 80071fa:	fa1f f188 	uxth.w	r1, r8
 80071fe:	4461      	add	r1, ip
 8007200:	1408      	asrs	r0, r1, #16
 8007202:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007206:	b289      	uxth	r1, r1
 8007208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800720c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007210:	f846 1b04 	str.w	r1, [r6], #4
 8007214:	e7de      	b.n	80071d4 <__mdiff+0xd0>
 8007216:	3f01      	subs	r7, #1
 8007218:	e7e8      	b.n	80071ec <__mdiff+0xe8>
 800721a:	bf00      	nop
 800721c:	0800872c 	.word	0x0800872c
 8007220:	080087bc 	.word	0x080087bc

08007224 <__ulp>:
 8007224:	4b11      	ldr	r3, [pc, #68]	; (800726c <__ulp+0x48>)
 8007226:	400b      	ands	r3, r1
 8007228:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800722c:	2b00      	cmp	r3, #0
 800722e:	dd02      	ble.n	8007236 <__ulp+0x12>
 8007230:	2000      	movs	r0, #0
 8007232:	4619      	mov	r1, r3
 8007234:	4770      	bx	lr
 8007236:	425b      	negs	r3, r3
 8007238:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800723c:	f04f 0000 	mov.w	r0, #0
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007248:	da04      	bge.n	8007254 <__ulp+0x30>
 800724a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800724e:	fa43 f102 	asr.w	r1, r3, r2
 8007252:	4770      	bx	lr
 8007254:	f1a2 0314 	sub.w	r3, r2, #20
 8007258:	2b1e      	cmp	r3, #30
 800725a:	bfd6      	itet	le
 800725c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007260:	2301      	movgt	r3, #1
 8007262:	fa22 f303 	lsrle.w	r3, r2, r3
 8007266:	4618      	mov	r0, r3
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	7ff00000 	.word	0x7ff00000

08007270 <__b2d>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	6907      	ldr	r7, [r0, #16]
 8007276:	f100 0914 	add.w	r9, r0, #20
 800727a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800727e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007282:	f1a7 0804 	sub.w	r8, r7, #4
 8007286:	4630      	mov	r0, r6
 8007288:	f7ff fd52 	bl	8006d30 <__hi0bits>
 800728c:	f1c0 0320 	rsb	r3, r0, #32
 8007290:	280a      	cmp	r0, #10
 8007292:	600b      	str	r3, [r1, #0]
 8007294:	491f      	ldr	r1, [pc, #124]	; (8007314 <__b2d+0xa4>)
 8007296:	dc17      	bgt.n	80072c8 <__b2d+0x58>
 8007298:	45c1      	cmp	r9, r8
 800729a:	bf28      	it	cs
 800729c:	2200      	movcs	r2, #0
 800729e:	f1c0 0c0b 	rsb	ip, r0, #11
 80072a2:	fa26 f30c 	lsr.w	r3, r6, ip
 80072a6:	bf38      	it	cc
 80072a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80072ac:	ea43 0501 	orr.w	r5, r3, r1
 80072b0:	f100 0315 	add.w	r3, r0, #21
 80072b4:	fa06 f303 	lsl.w	r3, r6, r3
 80072b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80072bc:	ea43 0402 	orr.w	r4, r3, r2
 80072c0:	4620      	mov	r0, r4
 80072c2:	4629      	mov	r1, r5
 80072c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c8:	45c1      	cmp	r9, r8
 80072ca:	bf2e      	itee	cs
 80072cc:	2200      	movcs	r2, #0
 80072ce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80072d2:	f1a7 0808 	subcc.w	r8, r7, #8
 80072d6:	f1b0 030b 	subs.w	r3, r0, #11
 80072da:	d016      	beq.n	800730a <__b2d+0x9a>
 80072dc:	f1c3 0720 	rsb	r7, r3, #32
 80072e0:	fa22 f107 	lsr.w	r1, r2, r7
 80072e4:	45c8      	cmp	r8, r9
 80072e6:	fa06 f603 	lsl.w	r6, r6, r3
 80072ea:	ea46 0601 	orr.w	r6, r6, r1
 80072ee:	bf94      	ite	ls
 80072f0:	2100      	movls	r1, #0
 80072f2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80072f6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80072fa:	fa02 f003 	lsl.w	r0, r2, r3
 80072fe:	40f9      	lsrs	r1, r7
 8007300:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007304:	ea40 0401 	orr.w	r4, r0, r1
 8007308:	e7da      	b.n	80072c0 <__b2d+0x50>
 800730a:	4614      	mov	r4, r2
 800730c:	ea46 0501 	orr.w	r5, r6, r1
 8007310:	e7d6      	b.n	80072c0 <__b2d+0x50>
 8007312:	bf00      	nop
 8007314:	3ff00000 	.word	0x3ff00000

08007318 <__d2b>:
 8007318:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800731c:	2101      	movs	r1, #1
 800731e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007322:	4690      	mov	r8, r2
 8007324:	461d      	mov	r5, r3
 8007326:	f7ff fc0d 	bl	8006b44 <_Balloc>
 800732a:	4604      	mov	r4, r0
 800732c:	b930      	cbnz	r0, 800733c <__d2b+0x24>
 800732e:	4602      	mov	r2, r0
 8007330:	f240 310a 	movw	r1, #778	; 0x30a
 8007334:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <__d2b+0xb0>)
 8007336:	4825      	ldr	r0, [pc, #148]	; (80073cc <__d2b+0xb4>)
 8007338:	f000 fb02 	bl	8007940 <__assert_func>
 800733c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007340:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007344:	bb2d      	cbnz	r5, 8007392 <__d2b+0x7a>
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	f1b8 0300 	subs.w	r3, r8, #0
 800734c:	d026      	beq.n	800739c <__d2b+0x84>
 800734e:	4668      	mov	r0, sp
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	f7ff fd0d 	bl	8006d70 <__lo0bits>
 8007356:	9900      	ldr	r1, [sp, #0]
 8007358:	b1f0      	cbz	r0, 8007398 <__d2b+0x80>
 800735a:	9a01      	ldr	r2, [sp, #4]
 800735c:	f1c0 0320 	rsb	r3, r0, #32
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	430b      	orrs	r3, r1
 8007366:	40c2      	lsrs	r2, r0
 8007368:	6163      	str	r3, [r4, #20]
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	bf14      	ite	ne
 8007372:	2102      	movne	r1, #2
 8007374:	2101      	moveq	r1, #1
 8007376:	61a3      	str	r3, [r4, #24]
 8007378:	6121      	str	r1, [r4, #16]
 800737a:	b1c5      	cbz	r5, 80073ae <__d2b+0x96>
 800737c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007380:	4405      	add	r5, r0
 8007382:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007386:	603d      	str	r5, [r7, #0]
 8007388:	6030      	str	r0, [r6, #0]
 800738a:	4620      	mov	r0, r4
 800738c:	b002      	add	sp, #8
 800738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007396:	e7d6      	b.n	8007346 <__d2b+0x2e>
 8007398:	6161      	str	r1, [r4, #20]
 800739a:	e7e7      	b.n	800736c <__d2b+0x54>
 800739c:	a801      	add	r0, sp, #4
 800739e:	f7ff fce7 	bl	8006d70 <__lo0bits>
 80073a2:	2101      	movs	r1, #1
 80073a4:	9b01      	ldr	r3, [sp, #4]
 80073a6:	6121      	str	r1, [r4, #16]
 80073a8:	6163      	str	r3, [r4, #20]
 80073aa:	3020      	adds	r0, #32
 80073ac:	e7e5      	b.n	800737a <__d2b+0x62>
 80073ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80073b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073b6:	6038      	str	r0, [r7, #0]
 80073b8:	6918      	ldr	r0, [r3, #16]
 80073ba:	f7ff fcb9 	bl	8006d30 <__hi0bits>
 80073be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80073c2:	6031      	str	r1, [r6, #0]
 80073c4:	e7e1      	b.n	800738a <__d2b+0x72>
 80073c6:	bf00      	nop
 80073c8:	0800872c 	.word	0x0800872c
 80073cc:	080087bc 	.word	0x080087bc

080073d0 <__ratio>:
 80073d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4688      	mov	r8, r1
 80073d6:	4669      	mov	r1, sp
 80073d8:	4681      	mov	r9, r0
 80073da:	f7ff ff49 	bl	8007270 <__b2d>
 80073de:	460f      	mov	r7, r1
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	4640      	mov	r0, r8
 80073e6:	a901      	add	r1, sp, #4
 80073e8:	f7ff ff42 	bl	8007270 <__b2d>
 80073ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073f4:	468b      	mov	fp, r1
 80073f6:	eba3 0c02 	sub.w	ip, r3, r2
 80073fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073fe:	1a9b      	subs	r3, r3, r2
 8007400:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfd5      	itete	le
 8007408:	460a      	movle	r2, r1
 800740a:	462a      	movgt	r2, r5
 800740c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007410:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007414:	bfd8      	it	le
 8007416:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800741a:	465b      	mov	r3, fp
 800741c:	4602      	mov	r2, r0
 800741e:	4639      	mov	r1, r7
 8007420:	4620      	mov	r0, r4
 8007422:	f7f9 f983 	bl	800072c <__aeabi_ddiv>
 8007426:	b003      	add	sp, #12
 8007428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800742c <__copybits>:
 800742c:	3901      	subs	r1, #1
 800742e:	b570      	push	{r4, r5, r6, lr}
 8007430:	1149      	asrs	r1, r1, #5
 8007432:	6914      	ldr	r4, [r2, #16]
 8007434:	3101      	adds	r1, #1
 8007436:	f102 0314 	add.w	r3, r2, #20
 800743a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800743e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007442:	1f05      	subs	r5, r0, #4
 8007444:	42a3      	cmp	r3, r4
 8007446:	d30c      	bcc.n	8007462 <__copybits+0x36>
 8007448:	1aa3      	subs	r3, r4, r2
 800744a:	3b11      	subs	r3, #17
 800744c:	f023 0303 	bic.w	r3, r3, #3
 8007450:	3211      	adds	r2, #17
 8007452:	42a2      	cmp	r2, r4
 8007454:	bf88      	it	hi
 8007456:	2300      	movhi	r3, #0
 8007458:	4418      	add	r0, r3
 800745a:	2300      	movs	r3, #0
 800745c:	4288      	cmp	r0, r1
 800745e:	d305      	bcc.n	800746c <__copybits+0x40>
 8007460:	bd70      	pop	{r4, r5, r6, pc}
 8007462:	f853 6b04 	ldr.w	r6, [r3], #4
 8007466:	f845 6f04 	str.w	r6, [r5, #4]!
 800746a:	e7eb      	b.n	8007444 <__copybits+0x18>
 800746c:	f840 3b04 	str.w	r3, [r0], #4
 8007470:	e7f4      	b.n	800745c <__copybits+0x30>

08007472 <__any_on>:
 8007472:	f100 0214 	add.w	r2, r0, #20
 8007476:	6900      	ldr	r0, [r0, #16]
 8007478:	114b      	asrs	r3, r1, #5
 800747a:	4298      	cmp	r0, r3
 800747c:	b510      	push	{r4, lr}
 800747e:	db11      	blt.n	80074a4 <__any_on+0x32>
 8007480:	dd0a      	ble.n	8007498 <__any_on+0x26>
 8007482:	f011 011f 	ands.w	r1, r1, #31
 8007486:	d007      	beq.n	8007498 <__any_on+0x26>
 8007488:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800748c:	fa24 f001 	lsr.w	r0, r4, r1
 8007490:	fa00 f101 	lsl.w	r1, r0, r1
 8007494:	428c      	cmp	r4, r1
 8007496:	d10b      	bne.n	80074b0 <__any_on+0x3e>
 8007498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800749c:	4293      	cmp	r3, r2
 800749e:	d803      	bhi.n	80074a8 <__any_on+0x36>
 80074a0:	2000      	movs	r0, #0
 80074a2:	bd10      	pop	{r4, pc}
 80074a4:	4603      	mov	r3, r0
 80074a6:	e7f7      	b.n	8007498 <__any_on+0x26>
 80074a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d0f5      	beq.n	800749c <__any_on+0x2a>
 80074b0:	2001      	movs	r0, #1
 80074b2:	e7f6      	b.n	80074a2 <__any_on+0x30>

080074b4 <_calloc_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	fb02 f501 	mul.w	r5, r2, r1
 80074ba:	4629      	mov	r1, r5
 80074bc:	f000 f854 	bl	8007568 <_malloc_r>
 80074c0:	4604      	mov	r4, r0
 80074c2:	b118      	cbz	r0, 80074cc <_calloc_r+0x18>
 80074c4:	462a      	mov	r2, r5
 80074c6:	2100      	movs	r1, #0
 80074c8:	f7fc fbdc 	bl	8003c84 <memset>
 80074cc:	4620      	mov	r0, r4
 80074ce:	bd38      	pop	{r3, r4, r5, pc}

080074d0 <_free_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4605      	mov	r5, r0
 80074d4:	2900      	cmp	r1, #0
 80074d6:	d043      	beq.n	8007560 <_free_r+0x90>
 80074d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074dc:	1f0c      	subs	r4, r1, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfb8      	it	lt
 80074e2:	18e4      	addlt	r4, r4, r3
 80074e4:	f000 fa76 	bl	80079d4 <__malloc_lock>
 80074e8:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <_free_r+0x94>)
 80074ea:	6813      	ldr	r3, [r2, #0]
 80074ec:	4610      	mov	r0, r2
 80074ee:	b933      	cbnz	r3, 80074fe <_free_r+0x2e>
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	6014      	str	r4, [r2, #0]
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074fa:	f000 ba71 	b.w	80079e0 <__malloc_unlock>
 80074fe:	42a3      	cmp	r3, r4
 8007500:	d90a      	bls.n	8007518 <_free_r+0x48>
 8007502:	6821      	ldr	r1, [r4, #0]
 8007504:	1862      	adds	r2, r4, r1
 8007506:	4293      	cmp	r3, r2
 8007508:	bf01      	itttt	eq
 800750a:	681a      	ldreq	r2, [r3, #0]
 800750c:	685b      	ldreq	r3, [r3, #4]
 800750e:	1852      	addeq	r2, r2, r1
 8007510:	6022      	streq	r2, [r4, #0]
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	6004      	str	r4, [r0, #0]
 8007516:	e7ed      	b.n	80074f4 <_free_r+0x24>
 8007518:	461a      	mov	r2, r3
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	b10b      	cbz	r3, 8007522 <_free_r+0x52>
 800751e:	42a3      	cmp	r3, r4
 8007520:	d9fa      	bls.n	8007518 <_free_r+0x48>
 8007522:	6811      	ldr	r1, [r2, #0]
 8007524:	1850      	adds	r0, r2, r1
 8007526:	42a0      	cmp	r0, r4
 8007528:	d10b      	bne.n	8007542 <_free_r+0x72>
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	4401      	add	r1, r0
 800752e:	1850      	adds	r0, r2, r1
 8007530:	4283      	cmp	r3, r0
 8007532:	6011      	str	r1, [r2, #0]
 8007534:	d1de      	bne.n	80074f4 <_free_r+0x24>
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4401      	add	r1, r0
 800753c:	6011      	str	r1, [r2, #0]
 800753e:	6053      	str	r3, [r2, #4]
 8007540:	e7d8      	b.n	80074f4 <_free_r+0x24>
 8007542:	d902      	bls.n	800754a <_free_r+0x7a>
 8007544:	230c      	movs	r3, #12
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	e7d4      	b.n	80074f4 <_free_r+0x24>
 800754a:	6820      	ldr	r0, [r4, #0]
 800754c:	1821      	adds	r1, r4, r0
 800754e:	428b      	cmp	r3, r1
 8007550:	bf01      	itttt	eq
 8007552:	6819      	ldreq	r1, [r3, #0]
 8007554:	685b      	ldreq	r3, [r3, #4]
 8007556:	1809      	addeq	r1, r1, r0
 8007558:	6021      	streq	r1, [r4, #0]
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	6054      	str	r4, [r2, #4]
 800755e:	e7c9      	b.n	80074f4 <_free_r+0x24>
 8007560:	bd38      	pop	{r3, r4, r5, pc}
 8007562:	bf00      	nop
 8007564:	20000208 	.word	0x20000208

08007568 <_malloc_r>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	1ccd      	adds	r5, r1, #3
 800756c:	f025 0503 	bic.w	r5, r5, #3
 8007570:	3508      	adds	r5, #8
 8007572:	2d0c      	cmp	r5, #12
 8007574:	bf38      	it	cc
 8007576:	250c      	movcc	r5, #12
 8007578:	2d00      	cmp	r5, #0
 800757a:	4606      	mov	r6, r0
 800757c:	db01      	blt.n	8007582 <_malloc_r+0x1a>
 800757e:	42a9      	cmp	r1, r5
 8007580:	d903      	bls.n	800758a <_malloc_r+0x22>
 8007582:	230c      	movs	r3, #12
 8007584:	6033      	str	r3, [r6, #0]
 8007586:	2000      	movs	r0, #0
 8007588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800758a:	f000 fa23 	bl	80079d4 <__malloc_lock>
 800758e:	4921      	ldr	r1, [pc, #132]	; (8007614 <_malloc_r+0xac>)
 8007590:	680a      	ldr	r2, [r1, #0]
 8007592:	4614      	mov	r4, r2
 8007594:	b99c      	cbnz	r4, 80075be <_malloc_r+0x56>
 8007596:	4f20      	ldr	r7, [pc, #128]	; (8007618 <_malloc_r+0xb0>)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	b923      	cbnz	r3, 80075a6 <_malloc_r+0x3e>
 800759c:	4621      	mov	r1, r4
 800759e:	4630      	mov	r0, r6
 80075a0:	f000 f99e 	bl	80078e0 <_sbrk_r>
 80075a4:	6038      	str	r0, [r7, #0]
 80075a6:	4629      	mov	r1, r5
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 f999 	bl	80078e0 <_sbrk_r>
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d123      	bne.n	80075fa <_malloc_r+0x92>
 80075b2:	230c      	movs	r3, #12
 80075b4:	4630      	mov	r0, r6
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	f000 fa12 	bl	80079e0 <__malloc_unlock>
 80075bc:	e7e3      	b.n	8007586 <_malloc_r+0x1e>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	1b5b      	subs	r3, r3, r5
 80075c2:	d417      	bmi.n	80075f4 <_malloc_r+0x8c>
 80075c4:	2b0b      	cmp	r3, #11
 80075c6:	d903      	bls.n	80075d0 <_malloc_r+0x68>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	441c      	add	r4, r3
 80075cc:	6025      	str	r5, [r4, #0]
 80075ce:	e004      	b.n	80075da <_malloc_r+0x72>
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	42a2      	cmp	r2, r4
 80075d4:	bf0c      	ite	eq
 80075d6:	600b      	streq	r3, [r1, #0]
 80075d8:	6053      	strne	r3, [r2, #4]
 80075da:	4630      	mov	r0, r6
 80075dc:	f000 fa00 	bl	80079e0 <__malloc_unlock>
 80075e0:	f104 000b 	add.w	r0, r4, #11
 80075e4:	1d23      	adds	r3, r4, #4
 80075e6:	f020 0007 	bic.w	r0, r0, #7
 80075ea:	1ac2      	subs	r2, r0, r3
 80075ec:	d0cc      	beq.n	8007588 <_malloc_r+0x20>
 80075ee:	1a1b      	subs	r3, r3, r0
 80075f0:	50a3      	str	r3, [r4, r2]
 80075f2:	e7c9      	b.n	8007588 <_malloc_r+0x20>
 80075f4:	4622      	mov	r2, r4
 80075f6:	6864      	ldr	r4, [r4, #4]
 80075f8:	e7cc      	b.n	8007594 <_malloc_r+0x2c>
 80075fa:	1cc4      	adds	r4, r0, #3
 80075fc:	f024 0403 	bic.w	r4, r4, #3
 8007600:	42a0      	cmp	r0, r4
 8007602:	d0e3      	beq.n	80075cc <_malloc_r+0x64>
 8007604:	1a21      	subs	r1, r4, r0
 8007606:	4630      	mov	r0, r6
 8007608:	f000 f96a 	bl	80078e0 <_sbrk_r>
 800760c:	3001      	adds	r0, #1
 800760e:	d1dd      	bne.n	80075cc <_malloc_r+0x64>
 8007610:	e7cf      	b.n	80075b2 <_malloc_r+0x4a>
 8007612:	bf00      	nop
 8007614:	20000208 	.word	0x20000208
 8007618:	2000020c 	.word	0x2000020c

0800761c <__ssputs_r>:
 800761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	688e      	ldr	r6, [r1, #8]
 8007622:	4682      	mov	sl, r0
 8007624:	429e      	cmp	r6, r3
 8007626:	460c      	mov	r4, r1
 8007628:	4690      	mov	r8, r2
 800762a:	461f      	mov	r7, r3
 800762c:	d838      	bhi.n	80076a0 <__ssputs_r+0x84>
 800762e:	898a      	ldrh	r2, [r1, #12]
 8007630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007634:	d032      	beq.n	800769c <__ssputs_r+0x80>
 8007636:	6825      	ldr	r5, [r4, #0]
 8007638:	6909      	ldr	r1, [r1, #16]
 800763a:	3301      	adds	r3, #1
 800763c:	eba5 0901 	sub.w	r9, r5, r1
 8007640:	6965      	ldr	r5, [r4, #20]
 8007642:	444b      	add	r3, r9
 8007644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800764c:	106d      	asrs	r5, r5, #1
 800764e:	429d      	cmp	r5, r3
 8007650:	bf38      	it	cc
 8007652:	461d      	movcc	r5, r3
 8007654:	0553      	lsls	r3, r2, #21
 8007656:	d531      	bpl.n	80076bc <__ssputs_r+0xa0>
 8007658:	4629      	mov	r1, r5
 800765a:	f7ff ff85 	bl	8007568 <_malloc_r>
 800765e:	4606      	mov	r6, r0
 8007660:	b950      	cbnz	r0, 8007678 <__ssputs_r+0x5c>
 8007662:	230c      	movs	r3, #12
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	f8ca 3000 	str.w	r3, [sl]
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007672:	81a3      	strh	r3, [r4, #12]
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	464a      	mov	r2, r9
 800767a:	6921      	ldr	r1, [r4, #16]
 800767c:	f7ff fa54 	bl	8006b28 <memcpy>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	6126      	str	r6, [r4, #16]
 800768e:	444e      	add	r6, r9
 8007690:	6026      	str	r6, [r4, #0]
 8007692:	463e      	mov	r6, r7
 8007694:	6165      	str	r5, [r4, #20]
 8007696:	eba5 0509 	sub.w	r5, r5, r9
 800769a:	60a5      	str	r5, [r4, #8]
 800769c:	42be      	cmp	r6, r7
 800769e:	d900      	bls.n	80076a2 <__ssputs_r+0x86>
 80076a0:	463e      	mov	r6, r7
 80076a2:	4632      	mov	r2, r6
 80076a4:	4641      	mov	r1, r8
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	f000 f97a 	bl	80079a0 <memmove>
 80076ac:	68a3      	ldr	r3, [r4, #8]
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	1b9b      	subs	r3, r3, r6
 80076b2:	4432      	add	r2, r6
 80076b4:	2000      	movs	r0, #0
 80076b6:	60a3      	str	r3, [r4, #8]
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	e7db      	b.n	8007674 <__ssputs_r+0x58>
 80076bc:	462a      	mov	r2, r5
 80076be:	f000 f995 	bl	80079ec <_realloc_r>
 80076c2:	4606      	mov	r6, r0
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d1e1      	bne.n	800768c <__ssputs_r+0x70>
 80076c8:	4650      	mov	r0, sl
 80076ca:	6921      	ldr	r1, [r4, #16]
 80076cc:	f7ff ff00 	bl	80074d0 <_free_r>
 80076d0:	e7c7      	b.n	8007662 <__ssputs_r+0x46>
	...

080076d4 <_svfiprintf_r>:
 80076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	4698      	mov	r8, r3
 80076da:	898b      	ldrh	r3, [r1, #12]
 80076dc:	4607      	mov	r7, r0
 80076de:	061b      	lsls	r3, r3, #24
 80076e0:	460d      	mov	r5, r1
 80076e2:	4614      	mov	r4, r2
 80076e4:	b09d      	sub	sp, #116	; 0x74
 80076e6:	d50e      	bpl.n	8007706 <_svfiprintf_r+0x32>
 80076e8:	690b      	ldr	r3, [r1, #16]
 80076ea:	b963      	cbnz	r3, 8007706 <_svfiprintf_r+0x32>
 80076ec:	2140      	movs	r1, #64	; 0x40
 80076ee:	f7ff ff3b 	bl	8007568 <_malloc_r>
 80076f2:	6028      	str	r0, [r5, #0]
 80076f4:	6128      	str	r0, [r5, #16]
 80076f6:	b920      	cbnz	r0, 8007702 <_svfiprintf_r+0x2e>
 80076f8:	230c      	movs	r3, #12
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	e0d1      	b.n	80078a6 <_svfiprintf_r+0x1d2>
 8007702:	2340      	movs	r3, #64	; 0x40
 8007704:	616b      	str	r3, [r5, #20]
 8007706:	2300      	movs	r3, #0
 8007708:	9309      	str	r3, [sp, #36]	; 0x24
 800770a:	2320      	movs	r3, #32
 800770c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007710:	2330      	movs	r3, #48	; 0x30
 8007712:	f04f 0901 	mov.w	r9, #1
 8007716:	f8cd 800c 	str.w	r8, [sp, #12]
 800771a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078c0 <_svfiprintf_r+0x1ec>
 800771e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007722:	4623      	mov	r3, r4
 8007724:	469a      	mov	sl, r3
 8007726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800772a:	b10a      	cbz	r2, 8007730 <_svfiprintf_r+0x5c>
 800772c:	2a25      	cmp	r2, #37	; 0x25
 800772e:	d1f9      	bne.n	8007724 <_svfiprintf_r+0x50>
 8007730:	ebba 0b04 	subs.w	fp, sl, r4
 8007734:	d00b      	beq.n	800774e <_svfiprintf_r+0x7a>
 8007736:	465b      	mov	r3, fp
 8007738:	4622      	mov	r2, r4
 800773a:	4629      	mov	r1, r5
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ff6d 	bl	800761c <__ssputs_r>
 8007742:	3001      	adds	r0, #1
 8007744:	f000 80aa 	beq.w	800789c <_svfiprintf_r+0x1c8>
 8007748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800774a:	445a      	add	r2, fp
 800774c:	9209      	str	r2, [sp, #36]	; 0x24
 800774e:	f89a 3000 	ldrb.w	r3, [sl]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80a2 	beq.w	800789c <_svfiprintf_r+0x1c8>
 8007758:	2300      	movs	r3, #0
 800775a:	f04f 32ff 	mov.w	r2, #4294967295
 800775e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007762:	f10a 0a01 	add.w	sl, sl, #1
 8007766:	9304      	str	r3, [sp, #16]
 8007768:	9307      	str	r3, [sp, #28]
 800776a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800776e:	931a      	str	r3, [sp, #104]	; 0x68
 8007770:	4654      	mov	r4, sl
 8007772:	2205      	movs	r2, #5
 8007774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007778:	4851      	ldr	r0, [pc, #324]	; (80078c0 <_svfiprintf_r+0x1ec>)
 800777a:	f7ff f9c7 	bl	8006b0c <memchr>
 800777e:	9a04      	ldr	r2, [sp, #16]
 8007780:	b9d8      	cbnz	r0, 80077ba <_svfiprintf_r+0xe6>
 8007782:	06d0      	lsls	r0, r2, #27
 8007784:	bf44      	itt	mi
 8007786:	2320      	movmi	r3, #32
 8007788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778c:	0711      	lsls	r1, r2, #28
 800778e:	bf44      	itt	mi
 8007790:	232b      	movmi	r3, #43	; 0x2b
 8007792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007796:	f89a 3000 	ldrb.w	r3, [sl]
 800779a:	2b2a      	cmp	r3, #42	; 0x2a
 800779c:	d015      	beq.n	80077ca <_svfiprintf_r+0xf6>
 800779e:	4654      	mov	r4, sl
 80077a0:	2000      	movs	r0, #0
 80077a2:	f04f 0c0a 	mov.w	ip, #10
 80077a6:	9a07      	ldr	r2, [sp, #28]
 80077a8:	4621      	mov	r1, r4
 80077aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ae:	3b30      	subs	r3, #48	; 0x30
 80077b0:	2b09      	cmp	r3, #9
 80077b2:	d94e      	bls.n	8007852 <_svfiprintf_r+0x17e>
 80077b4:	b1b0      	cbz	r0, 80077e4 <_svfiprintf_r+0x110>
 80077b6:	9207      	str	r2, [sp, #28]
 80077b8:	e014      	b.n	80077e4 <_svfiprintf_r+0x110>
 80077ba:	eba0 0308 	sub.w	r3, r0, r8
 80077be:	fa09 f303 	lsl.w	r3, r9, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	46a2      	mov	sl, r4
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	e7d2      	b.n	8007770 <_svfiprintf_r+0x9c>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	1d19      	adds	r1, r3, #4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	9103      	str	r1, [sp, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfbb      	ittet	lt
 80077d6:	425b      	neglt	r3, r3
 80077d8:	f042 0202 	orrlt.w	r2, r2, #2
 80077dc:	9307      	strge	r3, [sp, #28]
 80077de:	9307      	strlt	r3, [sp, #28]
 80077e0:	bfb8      	it	lt
 80077e2:	9204      	strlt	r2, [sp, #16]
 80077e4:	7823      	ldrb	r3, [r4, #0]
 80077e6:	2b2e      	cmp	r3, #46	; 0x2e
 80077e8:	d10c      	bne.n	8007804 <_svfiprintf_r+0x130>
 80077ea:	7863      	ldrb	r3, [r4, #1]
 80077ec:	2b2a      	cmp	r3, #42	; 0x2a
 80077ee:	d135      	bne.n	800785c <_svfiprintf_r+0x188>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	3402      	adds	r4, #2
 80077f4:	1d1a      	adds	r2, r3, #4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	9203      	str	r2, [sp, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfb8      	it	lt
 80077fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078d0 <_svfiprintf_r+0x1fc>
 8007808:	2203      	movs	r2, #3
 800780a:	4650      	mov	r0, sl
 800780c:	7821      	ldrb	r1, [r4, #0]
 800780e:	f7ff f97d 	bl	8006b0c <memchr>
 8007812:	b140      	cbz	r0, 8007826 <_svfiprintf_r+0x152>
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	eba0 000a 	sub.w	r0, r0, sl
 800781a:	fa03 f000 	lsl.w	r0, r3, r0
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	3401      	adds	r4, #1
 8007822:	4303      	orrs	r3, r0
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782a:	2206      	movs	r2, #6
 800782c:	4825      	ldr	r0, [pc, #148]	; (80078c4 <_svfiprintf_r+0x1f0>)
 800782e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007832:	f7ff f96b 	bl	8006b0c <memchr>
 8007836:	2800      	cmp	r0, #0
 8007838:	d038      	beq.n	80078ac <_svfiprintf_r+0x1d8>
 800783a:	4b23      	ldr	r3, [pc, #140]	; (80078c8 <_svfiprintf_r+0x1f4>)
 800783c:	bb1b      	cbnz	r3, 8007886 <_svfiprintf_r+0x1b2>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	3307      	adds	r3, #7
 8007842:	f023 0307 	bic.w	r3, r3, #7
 8007846:	3308      	adds	r3, #8
 8007848:	9303      	str	r3, [sp, #12]
 800784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784c:	4433      	add	r3, r6
 800784e:	9309      	str	r3, [sp, #36]	; 0x24
 8007850:	e767      	b.n	8007722 <_svfiprintf_r+0x4e>
 8007852:	460c      	mov	r4, r1
 8007854:	2001      	movs	r0, #1
 8007856:	fb0c 3202 	mla	r2, ip, r2, r3
 800785a:	e7a5      	b.n	80077a8 <_svfiprintf_r+0xd4>
 800785c:	2300      	movs	r3, #0
 800785e:	f04f 0c0a 	mov.w	ip, #10
 8007862:	4619      	mov	r1, r3
 8007864:	3401      	adds	r4, #1
 8007866:	9305      	str	r3, [sp, #20]
 8007868:	4620      	mov	r0, r4
 800786a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800786e:	3a30      	subs	r2, #48	; 0x30
 8007870:	2a09      	cmp	r2, #9
 8007872:	d903      	bls.n	800787c <_svfiprintf_r+0x1a8>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0c5      	beq.n	8007804 <_svfiprintf_r+0x130>
 8007878:	9105      	str	r1, [sp, #20]
 800787a:	e7c3      	b.n	8007804 <_svfiprintf_r+0x130>
 800787c:	4604      	mov	r4, r0
 800787e:	2301      	movs	r3, #1
 8007880:	fb0c 2101 	mla	r1, ip, r1, r2
 8007884:	e7f0      	b.n	8007868 <_svfiprintf_r+0x194>
 8007886:	ab03      	add	r3, sp, #12
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	462a      	mov	r2, r5
 800788c:	4638      	mov	r0, r7
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <_svfiprintf_r+0x1f8>)
 8007890:	a904      	add	r1, sp, #16
 8007892:	f7fc fa9d 	bl	8003dd0 <_printf_float>
 8007896:	1c42      	adds	r2, r0, #1
 8007898:	4606      	mov	r6, r0
 800789a:	d1d6      	bne.n	800784a <_svfiprintf_r+0x176>
 800789c:	89ab      	ldrh	r3, [r5, #12]
 800789e:	065b      	lsls	r3, r3, #25
 80078a0:	f53f af2c 	bmi.w	80076fc <_svfiprintf_r+0x28>
 80078a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078a6:	b01d      	add	sp, #116	; 0x74
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	ab03      	add	r3, sp, #12
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	462a      	mov	r2, r5
 80078b2:	4638      	mov	r0, r7
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_svfiprintf_r+0x1f8>)
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	f7fc fd26 	bl	8004308 <_printf_i>
 80078bc:	e7eb      	b.n	8007896 <_svfiprintf_r+0x1c2>
 80078be:	bf00      	nop
 80078c0:	0800891c 	.word	0x0800891c
 80078c4:	08008926 	.word	0x08008926
 80078c8:	08003dd1 	.word	0x08003dd1
 80078cc:	0800761d 	.word	0x0800761d
 80078d0:	08008922 	.word	0x08008922

080078d4 <nan>:
 80078d4:	2000      	movs	r0, #0
 80078d6:	4901      	ldr	r1, [pc, #4]	; (80078dc <nan+0x8>)
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	7ff80000 	.word	0x7ff80000

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	2300      	movs	r3, #0
 80078e4:	4d05      	ldr	r5, [pc, #20]	; (80078fc <_sbrk_r+0x1c>)
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa f8e8 	bl	8001ac0 <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	2000041c 	.word	0x2000041c

08007900 <strncmp>:
 8007900:	b510      	push	{r4, lr}
 8007902:	b16a      	cbz	r2, 8007920 <strncmp+0x20>
 8007904:	3901      	subs	r1, #1
 8007906:	1884      	adds	r4, r0, r2
 8007908:	f810 3b01 	ldrb.w	r3, [r0], #1
 800790c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007910:	4293      	cmp	r3, r2
 8007912:	d103      	bne.n	800791c <strncmp+0x1c>
 8007914:	42a0      	cmp	r0, r4
 8007916:	d001      	beq.n	800791c <strncmp+0x1c>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f5      	bne.n	8007908 <strncmp+0x8>
 800791c:	1a98      	subs	r0, r3, r2
 800791e:	bd10      	pop	{r4, pc}
 8007920:	4610      	mov	r0, r2
 8007922:	e7fc      	b.n	800791e <strncmp+0x1e>

08007924 <__ascii_wctomb>:
 8007924:	4603      	mov	r3, r0
 8007926:	4608      	mov	r0, r1
 8007928:	b141      	cbz	r1, 800793c <__ascii_wctomb+0x18>
 800792a:	2aff      	cmp	r2, #255	; 0xff
 800792c:	d904      	bls.n	8007938 <__ascii_wctomb+0x14>
 800792e:	228a      	movs	r2, #138	; 0x8a
 8007930:	f04f 30ff 	mov.w	r0, #4294967295
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	4770      	bx	lr
 8007938:	2001      	movs	r0, #1
 800793a:	700a      	strb	r2, [r1, #0]
 800793c:	4770      	bx	lr
	...

08007940 <__assert_func>:
 8007940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007942:	4614      	mov	r4, r2
 8007944:	461a      	mov	r2, r3
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <__assert_func+0x2c>)
 8007948:	4605      	mov	r5, r0
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68d8      	ldr	r0, [r3, #12]
 800794e:	b14c      	cbz	r4, 8007964 <__assert_func+0x24>
 8007950:	4b07      	ldr	r3, [pc, #28]	; (8007970 <__assert_func+0x30>)
 8007952:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007956:	9100      	str	r1, [sp, #0]
 8007958:	462b      	mov	r3, r5
 800795a:	4906      	ldr	r1, [pc, #24]	; (8007974 <__assert_func+0x34>)
 800795c:	f000 f80e 	bl	800797c <fiprintf>
 8007960:	f000 fa82 	bl	8007e68 <abort>
 8007964:	4b04      	ldr	r3, [pc, #16]	; (8007978 <__assert_func+0x38>)
 8007966:	461c      	mov	r4, r3
 8007968:	e7f3      	b.n	8007952 <__assert_func+0x12>
 800796a:	bf00      	nop
 800796c:	2000000c 	.word	0x2000000c
 8007970:	0800892d 	.word	0x0800892d
 8007974:	0800893a 	.word	0x0800893a
 8007978:	08008968 	.word	0x08008968

0800797c <fiprintf>:
 800797c:	b40e      	push	{r1, r2, r3}
 800797e:	b503      	push	{r0, r1, lr}
 8007980:	4601      	mov	r1, r0
 8007982:	ab03      	add	r3, sp, #12
 8007984:	4805      	ldr	r0, [pc, #20]	; (800799c <fiprintf+0x20>)
 8007986:	f853 2b04 	ldr.w	r2, [r3], #4
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	f000 f87b 	bl	8007a88 <_vfiprintf_r>
 8007992:	b002      	add	sp, #8
 8007994:	f85d eb04 	ldr.w	lr, [sp], #4
 8007998:	b003      	add	sp, #12
 800799a:	4770      	bx	lr
 800799c:	2000000c 	.word	0x2000000c

080079a0 <memmove>:
 80079a0:	4288      	cmp	r0, r1
 80079a2:	b510      	push	{r4, lr}
 80079a4:	eb01 0402 	add.w	r4, r1, r2
 80079a8:	d902      	bls.n	80079b0 <memmove+0x10>
 80079aa:	4284      	cmp	r4, r0
 80079ac:	4623      	mov	r3, r4
 80079ae:	d807      	bhi.n	80079c0 <memmove+0x20>
 80079b0:	1e43      	subs	r3, r0, #1
 80079b2:	42a1      	cmp	r1, r4
 80079b4:	d008      	beq.n	80079c8 <memmove+0x28>
 80079b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079be:	e7f8      	b.n	80079b2 <memmove+0x12>
 80079c0:	4601      	mov	r1, r0
 80079c2:	4402      	add	r2, r0
 80079c4:	428a      	cmp	r2, r1
 80079c6:	d100      	bne.n	80079ca <memmove+0x2a>
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079d2:	e7f7      	b.n	80079c4 <memmove+0x24>

080079d4 <__malloc_lock>:
 80079d4:	4801      	ldr	r0, [pc, #4]	; (80079dc <__malloc_lock+0x8>)
 80079d6:	f000 bc07 	b.w	80081e8 <__retarget_lock_acquire_recursive>
 80079da:	bf00      	nop
 80079dc:	20000424 	.word	0x20000424

080079e0 <__malloc_unlock>:
 80079e0:	4801      	ldr	r0, [pc, #4]	; (80079e8 <__malloc_unlock+0x8>)
 80079e2:	f000 bc02 	b.w	80081ea <__retarget_lock_release_recursive>
 80079e6:	bf00      	nop
 80079e8:	20000424 	.word	0x20000424

080079ec <_realloc_r>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	4607      	mov	r7, r0
 80079f0:	4614      	mov	r4, r2
 80079f2:	460e      	mov	r6, r1
 80079f4:	b921      	cbnz	r1, 8007a00 <_realloc_r+0x14>
 80079f6:	4611      	mov	r1, r2
 80079f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079fc:	f7ff bdb4 	b.w	8007568 <_malloc_r>
 8007a00:	b922      	cbnz	r2, 8007a0c <_realloc_r+0x20>
 8007a02:	f7ff fd65 	bl	80074d0 <_free_r>
 8007a06:	4625      	mov	r5, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a0c:	f000 fc52 	bl	80082b4 <_malloc_usable_size_r>
 8007a10:	42a0      	cmp	r0, r4
 8007a12:	d20f      	bcs.n	8007a34 <_realloc_r+0x48>
 8007a14:	4621      	mov	r1, r4
 8007a16:	4638      	mov	r0, r7
 8007a18:	f7ff fda6 	bl	8007568 <_malloc_r>
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d0f2      	beq.n	8007a08 <_realloc_r+0x1c>
 8007a22:	4631      	mov	r1, r6
 8007a24:	4622      	mov	r2, r4
 8007a26:	f7ff f87f 	bl	8006b28 <memcpy>
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f7ff fd4f 	bl	80074d0 <_free_r>
 8007a32:	e7e9      	b.n	8007a08 <_realloc_r+0x1c>
 8007a34:	4635      	mov	r5, r6
 8007a36:	e7e7      	b.n	8007a08 <_realloc_r+0x1c>

08007a38 <__sfputc_r>:
 8007a38:	6893      	ldr	r3, [r2, #8]
 8007a3a:	b410      	push	{r4}
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	6093      	str	r3, [r2, #8]
 8007a42:	da07      	bge.n	8007a54 <__sfputc_r+0x1c>
 8007a44:	6994      	ldr	r4, [r2, #24]
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	db01      	blt.n	8007a4e <__sfputc_r+0x16>
 8007a4a:	290a      	cmp	r1, #10
 8007a4c:	d102      	bne.n	8007a54 <__sfputc_r+0x1c>
 8007a4e:	bc10      	pop	{r4}
 8007a50:	f000 b94a 	b.w	8007ce8 <__swbuf_r>
 8007a54:	6813      	ldr	r3, [r2, #0]
 8007a56:	1c58      	adds	r0, r3, #1
 8007a58:	6010      	str	r0, [r2, #0]
 8007a5a:	7019      	strb	r1, [r3, #0]
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	bc10      	pop	{r4}
 8007a60:	4770      	bx	lr

08007a62 <__sfputs_r>:
 8007a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	18d5      	adds	r5, r2, r3
 8007a6c:	42ac      	cmp	r4, r5
 8007a6e:	d101      	bne.n	8007a74 <__sfputs_r+0x12>
 8007a70:	2000      	movs	r0, #0
 8007a72:	e007      	b.n	8007a84 <__sfputs_r+0x22>
 8007a74:	463a      	mov	r2, r7
 8007a76:	4630      	mov	r0, r6
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	f7ff ffdc 	bl	8007a38 <__sfputc_r>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d1f3      	bne.n	8007a6c <__sfputs_r+0xa>
 8007a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a88 <_vfiprintf_r>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	460d      	mov	r5, r1
 8007a8e:	4614      	mov	r4, r2
 8007a90:	4698      	mov	r8, r3
 8007a92:	4606      	mov	r6, r0
 8007a94:	b09d      	sub	sp, #116	; 0x74
 8007a96:	b118      	cbz	r0, 8007aa0 <_vfiprintf_r+0x18>
 8007a98:	6983      	ldr	r3, [r0, #24]
 8007a9a:	b90b      	cbnz	r3, 8007aa0 <_vfiprintf_r+0x18>
 8007a9c:	f000 fb06 	bl	80080ac <__sinit>
 8007aa0:	4b89      	ldr	r3, [pc, #548]	; (8007cc8 <_vfiprintf_r+0x240>)
 8007aa2:	429d      	cmp	r5, r3
 8007aa4:	d11b      	bne.n	8007ade <_vfiprintf_r+0x56>
 8007aa6:	6875      	ldr	r5, [r6, #4]
 8007aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aaa:	07d9      	lsls	r1, r3, #31
 8007aac:	d405      	bmi.n	8007aba <_vfiprintf_r+0x32>
 8007aae:	89ab      	ldrh	r3, [r5, #12]
 8007ab0:	059a      	lsls	r2, r3, #22
 8007ab2:	d402      	bmi.n	8007aba <_vfiprintf_r+0x32>
 8007ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ab6:	f000 fb97 	bl	80081e8 <__retarget_lock_acquire_recursive>
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	071b      	lsls	r3, r3, #28
 8007abe:	d501      	bpl.n	8007ac4 <_vfiprintf_r+0x3c>
 8007ac0:	692b      	ldr	r3, [r5, #16]
 8007ac2:	b9eb      	cbnz	r3, 8007b00 <_vfiprintf_r+0x78>
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f000 f960 	bl	8007d8c <__swsetup_r>
 8007acc:	b1c0      	cbz	r0, 8007b00 <_vfiprintf_r+0x78>
 8007ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ad0:	07dc      	lsls	r4, r3, #31
 8007ad2:	d50e      	bpl.n	8007af2 <_vfiprintf_r+0x6a>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	b01d      	add	sp, #116	; 0x74
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	4b7b      	ldr	r3, [pc, #492]	; (8007ccc <_vfiprintf_r+0x244>)
 8007ae0:	429d      	cmp	r5, r3
 8007ae2:	d101      	bne.n	8007ae8 <_vfiprintf_r+0x60>
 8007ae4:	68b5      	ldr	r5, [r6, #8]
 8007ae6:	e7df      	b.n	8007aa8 <_vfiprintf_r+0x20>
 8007ae8:	4b79      	ldr	r3, [pc, #484]	; (8007cd0 <_vfiprintf_r+0x248>)
 8007aea:	429d      	cmp	r5, r3
 8007aec:	bf08      	it	eq
 8007aee:	68f5      	ldreq	r5, [r6, #12]
 8007af0:	e7da      	b.n	8007aa8 <_vfiprintf_r+0x20>
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	0598      	lsls	r0, r3, #22
 8007af6:	d4ed      	bmi.n	8007ad4 <_vfiprintf_r+0x4c>
 8007af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007afa:	f000 fb76 	bl	80081ea <__retarget_lock_release_recursive>
 8007afe:	e7e9      	b.n	8007ad4 <_vfiprintf_r+0x4c>
 8007b00:	2300      	movs	r3, #0
 8007b02:	9309      	str	r3, [sp, #36]	; 0x24
 8007b04:	2320      	movs	r3, #32
 8007b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b0a:	2330      	movs	r3, #48	; 0x30
 8007b0c:	f04f 0901 	mov.w	r9, #1
 8007b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007cd4 <_vfiprintf_r+0x24c>
 8007b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	469a      	mov	sl, r3
 8007b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b24:	b10a      	cbz	r2, 8007b2a <_vfiprintf_r+0xa2>
 8007b26:	2a25      	cmp	r2, #37	; 0x25
 8007b28:	d1f9      	bne.n	8007b1e <_vfiprintf_r+0x96>
 8007b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b2e:	d00b      	beq.n	8007b48 <_vfiprintf_r+0xc0>
 8007b30:	465b      	mov	r3, fp
 8007b32:	4622      	mov	r2, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ff93 	bl	8007a62 <__sfputs_r>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	f000 80aa 	beq.w	8007c96 <_vfiprintf_r+0x20e>
 8007b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b44:	445a      	add	r2, fp
 8007b46:	9209      	str	r2, [sp, #36]	; 0x24
 8007b48:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80a2 	beq.w	8007c96 <_vfiprintf_r+0x20e>
 8007b52:	2300      	movs	r3, #0
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295
 8007b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b5c:	f10a 0a01 	add.w	sl, sl, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	9307      	str	r3, [sp, #28]
 8007b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b68:	931a      	str	r3, [sp, #104]	; 0x68
 8007b6a:	4654      	mov	r4, sl
 8007b6c:	2205      	movs	r2, #5
 8007b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b72:	4858      	ldr	r0, [pc, #352]	; (8007cd4 <_vfiprintf_r+0x24c>)
 8007b74:	f7fe ffca 	bl	8006b0c <memchr>
 8007b78:	9a04      	ldr	r2, [sp, #16]
 8007b7a:	b9d8      	cbnz	r0, 8007bb4 <_vfiprintf_r+0x12c>
 8007b7c:	06d1      	lsls	r1, r2, #27
 8007b7e:	bf44      	itt	mi
 8007b80:	2320      	movmi	r3, #32
 8007b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b86:	0713      	lsls	r3, r2, #28
 8007b88:	bf44      	itt	mi
 8007b8a:	232b      	movmi	r3, #43	; 0x2b
 8007b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b90:	f89a 3000 	ldrb.w	r3, [sl]
 8007b94:	2b2a      	cmp	r3, #42	; 0x2a
 8007b96:	d015      	beq.n	8007bc4 <_vfiprintf_r+0x13c>
 8007b98:	4654      	mov	r4, sl
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	f04f 0c0a 	mov.w	ip, #10
 8007ba0:	9a07      	ldr	r2, [sp, #28]
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ba8:	3b30      	subs	r3, #48	; 0x30
 8007baa:	2b09      	cmp	r3, #9
 8007bac:	d94e      	bls.n	8007c4c <_vfiprintf_r+0x1c4>
 8007bae:	b1b0      	cbz	r0, 8007bde <_vfiprintf_r+0x156>
 8007bb0:	9207      	str	r2, [sp, #28]
 8007bb2:	e014      	b.n	8007bde <_vfiprintf_r+0x156>
 8007bb4:	eba0 0308 	sub.w	r3, r0, r8
 8007bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	46a2      	mov	sl, r4
 8007bc0:	9304      	str	r3, [sp, #16]
 8007bc2:	e7d2      	b.n	8007b6a <_vfiprintf_r+0xe2>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	1d19      	adds	r1, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	9103      	str	r1, [sp, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfbb      	ittet	lt
 8007bd0:	425b      	neglt	r3, r3
 8007bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8007bd6:	9307      	strge	r3, [sp, #28]
 8007bd8:	9307      	strlt	r3, [sp, #28]
 8007bda:	bfb8      	it	lt
 8007bdc:	9204      	strlt	r2, [sp, #16]
 8007bde:	7823      	ldrb	r3, [r4, #0]
 8007be0:	2b2e      	cmp	r3, #46	; 0x2e
 8007be2:	d10c      	bne.n	8007bfe <_vfiprintf_r+0x176>
 8007be4:	7863      	ldrb	r3, [r4, #1]
 8007be6:	2b2a      	cmp	r3, #42	; 0x2a
 8007be8:	d135      	bne.n	8007c56 <_vfiprintf_r+0x1ce>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	3402      	adds	r4, #2
 8007bee:	1d1a      	adds	r2, r3, #4
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	9203      	str	r2, [sp, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bfb8      	it	lt
 8007bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ce4 <_vfiprintf_r+0x25c>
 8007c02:	2203      	movs	r2, #3
 8007c04:	4650      	mov	r0, sl
 8007c06:	7821      	ldrb	r1, [r4, #0]
 8007c08:	f7fe ff80 	bl	8006b0c <memchr>
 8007c0c:	b140      	cbz	r0, 8007c20 <_vfiprintf_r+0x198>
 8007c0e:	2340      	movs	r3, #64	; 0x40
 8007c10:	eba0 000a 	sub.w	r0, r0, sl
 8007c14:	fa03 f000 	lsl.w	r0, r3, r0
 8007c18:	9b04      	ldr	r3, [sp, #16]
 8007c1a:	3401      	adds	r4, #1
 8007c1c:	4303      	orrs	r3, r0
 8007c1e:	9304      	str	r3, [sp, #16]
 8007c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c24:	2206      	movs	r2, #6
 8007c26:	482c      	ldr	r0, [pc, #176]	; (8007cd8 <_vfiprintf_r+0x250>)
 8007c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c2c:	f7fe ff6e 	bl	8006b0c <memchr>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d03f      	beq.n	8007cb4 <_vfiprintf_r+0x22c>
 8007c34:	4b29      	ldr	r3, [pc, #164]	; (8007cdc <_vfiprintf_r+0x254>)
 8007c36:	bb1b      	cbnz	r3, 8007c80 <_vfiprintf_r+0x1f8>
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	3307      	adds	r3, #7
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	3308      	adds	r3, #8
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c46:	443b      	add	r3, r7
 8007c48:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4a:	e767      	b.n	8007b1c <_vfiprintf_r+0x94>
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	2001      	movs	r0, #1
 8007c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c54:	e7a5      	b.n	8007ba2 <_vfiprintf_r+0x11a>
 8007c56:	2300      	movs	r3, #0
 8007c58:	f04f 0c0a 	mov.w	ip, #10
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	4620      	mov	r0, r4
 8007c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c68:	3a30      	subs	r2, #48	; 0x30
 8007c6a:	2a09      	cmp	r2, #9
 8007c6c:	d903      	bls.n	8007c76 <_vfiprintf_r+0x1ee>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0c5      	beq.n	8007bfe <_vfiprintf_r+0x176>
 8007c72:	9105      	str	r1, [sp, #20]
 8007c74:	e7c3      	b.n	8007bfe <_vfiprintf_r+0x176>
 8007c76:	4604      	mov	r4, r0
 8007c78:	2301      	movs	r3, #1
 8007c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c7e:	e7f0      	b.n	8007c62 <_vfiprintf_r+0x1da>
 8007c80:	ab03      	add	r3, sp, #12
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	462a      	mov	r2, r5
 8007c86:	4630      	mov	r0, r6
 8007c88:	4b15      	ldr	r3, [pc, #84]	; (8007ce0 <_vfiprintf_r+0x258>)
 8007c8a:	a904      	add	r1, sp, #16
 8007c8c:	f7fc f8a0 	bl	8003dd0 <_printf_float>
 8007c90:	4607      	mov	r7, r0
 8007c92:	1c78      	adds	r0, r7, #1
 8007c94:	d1d6      	bne.n	8007c44 <_vfiprintf_r+0x1bc>
 8007c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c98:	07d9      	lsls	r1, r3, #31
 8007c9a:	d405      	bmi.n	8007ca8 <_vfiprintf_r+0x220>
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	059a      	lsls	r2, r3, #22
 8007ca0:	d402      	bmi.n	8007ca8 <_vfiprintf_r+0x220>
 8007ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca4:	f000 faa1 	bl	80081ea <__retarget_lock_release_recursive>
 8007ca8:	89ab      	ldrh	r3, [r5, #12]
 8007caa:	065b      	lsls	r3, r3, #25
 8007cac:	f53f af12 	bmi.w	8007ad4 <_vfiprintf_r+0x4c>
 8007cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cb2:	e711      	b.n	8007ad8 <_vfiprintf_r+0x50>
 8007cb4:	ab03      	add	r3, sp, #12
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4630      	mov	r0, r6
 8007cbc:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <_vfiprintf_r+0x258>)
 8007cbe:	a904      	add	r1, sp, #16
 8007cc0:	f7fc fb22 	bl	8004308 <_printf_i>
 8007cc4:	e7e4      	b.n	8007c90 <_vfiprintf_r+0x208>
 8007cc6:	bf00      	nop
 8007cc8:	0800898c 	.word	0x0800898c
 8007ccc:	080089ac 	.word	0x080089ac
 8007cd0:	0800896c 	.word	0x0800896c
 8007cd4:	0800891c 	.word	0x0800891c
 8007cd8:	08008926 	.word	0x08008926
 8007cdc:	08003dd1 	.word	0x08003dd1
 8007ce0:	08007a63 	.word	0x08007a63
 8007ce4:	08008922 	.word	0x08008922

08007ce8 <__swbuf_r>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	460e      	mov	r6, r1
 8007cec:	4614      	mov	r4, r2
 8007cee:	4605      	mov	r5, r0
 8007cf0:	b118      	cbz	r0, 8007cfa <__swbuf_r+0x12>
 8007cf2:	6983      	ldr	r3, [r0, #24]
 8007cf4:	b90b      	cbnz	r3, 8007cfa <__swbuf_r+0x12>
 8007cf6:	f000 f9d9 	bl	80080ac <__sinit>
 8007cfa:	4b21      	ldr	r3, [pc, #132]	; (8007d80 <__swbuf_r+0x98>)
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	d12b      	bne.n	8007d58 <__swbuf_r+0x70>
 8007d00:	686c      	ldr	r4, [r5, #4]
 8007d02:	69a3      	ldr	r3, [r4, #24]
 8007d04:	60a3      	str	r3, [r4, #8]
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	071a      	lsls	r2, r3, #28
 8007d0a:	d52f      	bpl.n	8007d6c <__swbuf_r+0x84>
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	b36b      	cbz	r3, 8007d6c <__swbuf_r+0x84>
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	6820      	ldr	r0, [r4, #0]
 8007d14:	b2f6      	uxtb	r6, r6
 8007d16:	1ac0      	subs	r0, r0, r3
 8007d18:	6963      	ldr	r3, [r4, #20]
 8007d1a:	4637      	mov	r7, r6
 8007d1c:	4283      	cmp	r3, r0
 8007d1e:	dc04      	bgt.n	8007d2a <__swbuf_r+0x42>
 8007d20:	4621      	mov	r1, r4
 8007d22:	4628      	mov	r0, r5
 8007d24:	f000 f92e 	bl	8007f84 <_fflush_r>
 8007d28:	bb30      	cbnz	r0, 8007d78 <__swbuf_r+0x90>
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	60a3      	str	r3, [r4, #8]
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	6022      	str	r2, [r4, #0]
 8007d38:	701e      	strb	r6, [r3, #0]
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	4283      	cmp	r3, r0
 8007d3e:	d004      	beq.n	8007d4a <__swbuf_r+0x62>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	07db      	lsls	r3, r3, #31
 8007d44:	d506      	bpl.n	8007d54 <__swbuf_r+0x6c>
 8007d46:	2e0a      	cmp	r6, #10
 8007d48:	d104      	bne.n	8007d54 <__swbuf_r+0x6c>
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f000 f919 	bl	8007f84 <_fflush_r>
 8007d52:	b988      	cbnz	r0, 8007d78 <__swbuf_r+0x90>
 8007d54:	4638      	mov	r0, r7
 8007d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d58:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <__swbuf_r+0x9c>)
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	d101      	bne.n	8007d62 <__swbuf_r+0x7a>
 8007d5e:	68ac      	ldr	r4, [r5, #8]
 8007d60:	e7cf      	b.n	8007d02 <__swbuf_r+0x1a>
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <__swbuf_r+0xa0>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	bf08      	it	eq
 8007d68:	68ec      	ldreq	r4, [r5, #12]
 8007d6a:	e7ca      	b.n	8007d02 <__swbuf_r+0x1a>
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f80c 	bl	8007d8c <__swsetup_r>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d0cb      	beq.n	8007d10 <__swbuf_r+0x28>
 8007d78:	f04f 37ff 	mov.w	r7, #4294967295
 8007d7c:	e7ea      	b.n	8007d54 <__swbuf_r+0x6c>
 8007d7e:	bf00      	nop
 8007d80:	0800898c 	.word	0x0800898c
 8007d84:	080089ac 	.word	0x080089ac
 8007d88:	0800896c 	.word	0x0800896c

08007d8c <__swsetup_r>:
 8007d8c:	4b32      	ldr	r3, [pc, #200]	; (8007e58 <__swsetup_r+0xcc>)
 8007d8e:	b570      	push	{r4, r5, r6, lr}
 8007d90:	681d      	ldr	r5, [r3, #0]
 8007d92:	4606      	mov	r6, r0
 8007d94:	460c      	mov	r4, r1
 8007d96:	b125      	cbz	r5, 8007da2 <__swsetup_r+0x16>
 8007d98:	69ab      	ldr	r3, [r5, #24]
 8007d9a:	b913      	cbnz	r3, 8007da2 <__swsetup_r+0x16>
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 f985 	bl	80080ac <__sinit>
 8007da2:	4b2e      	ldr	r3, [pc, #184]	; (8007e5c <__swsetup_r+0xd0>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	d10f      	bne.n	8007dc8 <__swsetup_r+0x3c>
 8007da8:	686c      	ldr	r4, [r5, #4]
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007db0:	0719      	lsls	r1, r3, #28
 8007db2:	d42c      	bmi.n	8007e0e <__swsetup_r+0x82>
 8007db4:	06dd      	lsls	r5, r3, #27
 8007db6:	d411      	bmi.n	8007ddc <__swsetup_r+0x50>
 8007db8:	2309      	movs	r3, #9
 8007dba:	6033      	str	r3, [r6, #0]
 8007dbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	e03e      	b.n	8007e46 <__swsetup_r+0xba>
 8007dc8:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <__swsetup_r+0xd4>)
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	d101      	bne.n	8007dd2 <__swsetup_r+0x46>
 8007dce:	68ac      	ldr	r4, [r5, #8]
 8007dd0:	e7eb      	b.n	8007daa <__swsetup_r+0x1e>
 8007dd2:	4b24      	ldr	r3, [pc, #144]	; (8007e64 <__swsetup_r+0xd8>)
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	bf08      	it	eq
 8007dd8:	68ec      	ldreq	r4, [r5, #12]
 8007dda:	e7e6      	b.n	8007daa <__swsetup_r+0x1e>
 8007ddc:	0758      	lsls	r0, r3, #29
 8007dde:	d512      	bpl.n	8007e06 <__swsetup_r+0x7a>
 8007de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007de2:	b141      	cbz	r1, 8007df6 <__swsetup_r+0x6a>
 8007de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de8:	4299      	cmp	r1, r3
 8007dea:	d002      	beq.n	8007df2 <__swsetup_r+0x66>
 8007dec:	4630      	mov	r0, r6
 8007dee:	f7ff fb6f 	bl	80074d0 <_free_r>
 8007df2:	2300      	movs	r3, #0
 8007df4:	6363      	str	r3, [r4, #52]	; 0x34
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dfc:	81a3      	strh	r3, [r4, #12]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f043 0308 	orr.w	r3, r3, #8
 8007e0c:	81a3      	strh	r3, [r4, #12]
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	b94b      	cbnz	r3, 8007e26 <__swsetup_r+0x9a>
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e1c:	d003      	beq.n	8007e26 <__swsetup_r+0x9a>
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 fa07 	bl	8008234 <__smakebuf_r>
 8007e26:	89a0      	ldrh	r0, [r4, #12]
 8007e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e2c:	f010 0301 	ands.w	r3, r0, #1
 8007e30:	d00a      	beq.n	8007e48 <__swsetup_r+0xbc>
 8007e32:	2300      	movs	r3, #0
 8007e34:	60a3      	str	r3, [r4, #8]
 8007e36:	6963      	ldr	r3, [r4, #20]
 8007e38:	425b      	negs	r3, r3
 8007e3a:	61a3      	str	r3, [r4, #24]
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	b943      	cbnz	r3, 8007e52 <__swsetup_r+0xc6>
 8007e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e44:	d1ba      	bne.n	8007dbc <__swsetup_r+0x30>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	0781      	lsls	r1, r0, #30
 8007e4a:	bf58      	it	pl
 8007e4c:	6963      	ldrpl	r3, [r4, #20]
 8007e4e:	60a3      	str	r3, [r4, #8]
 8007e50:	e7f4      	b.n	8007e3c <__swsetup_r+0xb0>
 8007e52:	2000      	movs	r0, #0
 8007e54:	e7f7      	b.n	8007e46 <__swsetup_r+0xba>
 8007e56:	bf00      	nop
 8007e58:	2000000c 	.word	0x2000000c
 8007e5c:	0800898c 	.word	0x0800898c
 8007e60:	080089ac 	.word	0x080089ac
 8007e64:	0800896c 	.word	0x0800896c

08007e68 <abort>:
 8007e68:	2006      	movs	r0, #6
 8007e6a:	b508      	push	{r3, lr}
 8007e6c:	f000 fa52 	bl	8008314 <raise>
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7f9 fdb1 	bl	80019d8 <_exit>
	...

08007e78 <__sflush_r>:
 8007e78:	898a      	ldrh	r2, [r1, #12]
 8007e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	4605      	mov	r5, r0
 8007e80:	0710      	lsls	r0, r2, #28
 8007e82:	460c      	mov	r4, r1
 8007e84:	d458      	bmi.n	8007f38 <__sflush_r+0xc0>
 8007e86:	684b      	ldr	r3, [r1, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc05      	bgt.n	8007e98 <__sflush_r+0x20>
 8007e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dc02      	bgt.n	8007e98 <__sflush_r+0x20>
 8007e92:	2000      	movs	r0, #0
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	d0f9      	beq.n	8007e92 <__sflush_r+0x1a>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ea4:	682f      	ldr	r7, [r5, #0]
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	d032      	beq.n	8007f10 <__sflush_r+0x98>
 8007eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	075a      	lsls	r2, r3, #29
 8007eb0:	d505      	bpl.n	8007ebe <__sflush_r+0x46>
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	1ac0      	subs	r0, r0, r3
 8007eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eb8:	b10b      	cbz	r3, 8007ebe <__sflush_r+0x46>
 8007eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ebc:	1ac0      	subs	r0, r0, r3
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	6a21      	ldr	r1, [r4, #32]
 8007ec8:	47b0      	blx	r6
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	d106      	bne.n	8007ede <__sflush_r+0x66>
 8007ed0:	6829      	ldr	r1, [r5, #0]
 8007ed2:	291d      	cmp	r1, #29
 8007ed4:	d82c      	bhi.n	8007f30 <__sflush_r+0xb8>
 8007ed6:	4a2a      	ldr	r2, [pc, #168]	; (8007f80 <__sflush_r+0x108>)
 8007ed8:	40ca      	lsrs	r2, r1
 8007eda:	07d6      	lsls	r6, r2, #31
 8007edc:	d528      	bpl.n	8007f30 <__sflush_r+0xb8>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6062      	str	r2, [r4, #4]
 8007ee2:	6922      	ldr	r2, [r4, #16]
 8007ee4:	04d9      	lsls	r1, r3, #19
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	d504      	bpl.n	8007ef4 <__sflush_r+0x7c>
 8007eea:	1c42      	adds	r2, r0, #1
 8007eec:	d101      	bne.n	8007ef2 <__sflush_r+0x7a>
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	b903      	cbnz	r3, 8007ef4 <__sflush_r+0x7c>
 8007ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef6:	602f      	str	r7, [r5, #0]
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	d0ca      	beq.n	8007e92 <__sflush_r+0x1a>
 8007efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f00:	4299      	cmp	r1, r3
 8007f02:	d002      	beq.n	8007f0a <__sflush_r+0x92>
 8007f04:	4628      	mov	r0, r5
 8007f06:	f7ff fae3 	bl	80074d0 <_free_r>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f0e:	e7c1      	b.n	8007e94 <__sflush_r+0x1c>
 8007f10:	6a21      	ldr	r1, [r4, #32]
 8007f12:	2301      	movs	r3, #1
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b0      	blx	r6
 8007f18:	1c41      	adds	r1, r0, #1
 8007f1a:	d1c7      	bne.n	8007eac <__sflush_r+0x34>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0c4      	beq.n	8007eac <__sflush_r+0x34>
 8007f22:	2b1d      	cmp	r3, #29
 8007f24:	d001      	beq.n	8007f2a <__sflush_r+0xb2>
 8007f26:	2b16      	cmp	r3, #22
 8007f28:	d101      	bne.n	8007f2e <__sflush_r+0xb6>
 8007f2a:	602f      	str	r7, [r5, #0]
 8007f2c:	e7b1      	b.n	8007e92 <__sflush_r+0x1a>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	e7ad      	b.n	8007e94 <__sflush_r+0x1c>
 8007f38:	690f      	ldr	r7, [r1, #16]
 8007f3a:	2f00      	cmp	r7, #0
 8007f3c:	d0a9      	beq.n	8007e92 <__sflush_r+0x1a>
 8007f3e:	0793      	lsls	r3, r2, #30
 8007f40:	bf18      	it	ne
 8007f42:	2300      	movne	r3, #0
 8007f44:	680e      	ldr	r6, [r1, #0]
 8007f46:	bf08      	it	eq
 8007f48:	694b      	ldreq	r3, [r1, #20]
 8007f4a:	eba6 0807 	sub.w	r8, r6, r7
 8007f4e:	600f      	str	r7, [r1, #0]
 8007f50:	608b      	str	r3, [r1, #8]
 8007f52:	f1b8 0f00 	cmp.w	r8, #0
 8007f56:	dd9c      	ble.n	8007e92 <__sflush_r+0x1a>
 8007f58:	4643      	mov	r3, r8
 8007f5a:	463a      	mov	r2, r7
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	6a21      	ldr	r1, [r4, #32]
 8007f60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f62:	47b0      	blx	r6
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dc06      	bgt.n	8007f76 <__sflush_r+0xfe>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	e78e      	b.n	8007e94 <__sflush_r+0x1c>
 8007f76:	4407      	add	r7, r0
 8007f78:	eba8 0800 	sub.w	r8, r8, r0
 8007f7c:	e7e9      	b.n	8007f52 <__sflush_r+0xda>
 8007f7e:	bf00      	nop
 8007f80:	20400001 	.word	0x20400001

08007f84 <_fflush_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	4605      	mov	r5, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	b913      	cbnz	r3, 8007f94 <_fflush_r+0x10>
 8007f8e:	2500      	movs	r5, #0
 8007f90:	4628      	mov	r0, r5
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	b118      	cbz	r0, 8007f9e <_fflush_r+0x1a>
 8007f96:	6983      	ldr	r3, [r0, #24]
 8007f98:	b90b      	cbnz	r3, 8007f9e <_fflush_r+0x1a>
 8007f9a:	f000 f887 	bl	80080ac <__sinit>
 8007f9e:	4b14      	ldr	r3, [pc, #80]	; (8007ff0 <_fflush_r+0x6c>)
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	d11b      	bne.n	8007fdc <_fflush_r+0x58>
 8007fa4:	686c      	ldr	r4, [r5, #4]
 8007fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0ef      	beq.n	8007f8e <_fflush_r+0xa>
 8007fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fb0:	07d0      	lsls	r0, r2, #31
 8007fb2:	d404      	bmi.n	8007fbe <_fflush_r+0x3a>
 8007fb4:	0599      	lsls	r1, r3, #22
 8007fb6:	d402      	bmi.n	8007fbe <_fflush_r+0x3a>
 8007fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fba:	f000 f915 	bl	80081e8 <__retarget_lock_acquire_recursive>
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	f7ff ff59 	bl	8007e78 <__sflush_r>
 8007fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc8:	4605      	mov	r5, r0
 8007fca:	07da      	lsls	r2, r3, #31
 8007fcc:	d4e0      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	059b      	lsls	r3, r3, #22
 8007fd2:	d4dd      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd6:	f000 f908 	bl	80081ea <__retarget_lock_release_recursive>
 8007fda:	e7d9      	b.n	8007f90 <_fflush_r+0xc>
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <_fflush_r+0x70>)
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d101      	bne.n	8007fe6 <_fflush_r+0x62>
 8007fe2:	68ac      	ldr	r4, [r5, #8]
 8007fe4:	e7df      	b.n	8007fa6 <_fflush_r+0x22>
 8007fe6:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <_fflush_r+0x74>)
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	bf08      	it	eq
 8007fec:	68ec      	ldreq	r4, [r5, #12]
 8007fee:	e7da      	b.n	8007fa6 <_fflush_r+0x22>
 8007ff0:	0800898c 	.word	0x0800898c
 8007ff4:	080089ac 	.word	0x080089ac
 8007ff8:	0800896c 	.word	0x0800896c

08007ffc <std>:
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	b510      	push	{r4, lr}
 8008000:	4604      	mov	r4, r0
 8008002:	e9c0 3300 	strd	r3, r3, [r0]
 8008006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800800a:	6083      	str	r3, [r0, #8]
 800800c:	8181      	strh	r1, [r0, #12]
 800800e:	6643      	str	r3, [r0, #100]	; 0x64
 8008010:	81c2      	strh	r2, [r0, #14]
 8008012:	6183      	str	r3, [r0, #24]
 8008014:	4619      	mov	r1, r3
 8008016:	2208      	movs	r2, #8
 8008018:	305c      	adds	r0, #92	; 0x5c
 800801a:	f7fb fe33 	bl	8003c84 <memset>
 800801e:	4b05      	ldr	r3, [pc, #20]	; (8008034 <std+0x38>)
 8008020:	6224      	str	r4, [r4, #32]
 8008022:	6263      	str	r3, [r4, #36]	; 0x24
 8008024:	4b04      	ldr	r3, [pc, #16]	; (8008038 <std+0x3c>)
 8008026:	62a3      	str	r3, [r4, #40]	; 0x28
 8008028:	4b04      	ldr	r3, [pc, #16]	; (800803c <std+0x40>)
 800802a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <std+0x44>)
 800802e:	6323      	str	r3, [r4, #48]	; 0x30
 8008030:	bd10      	pop	{r4, pc}
 8008032:	bf00      	nop
 8008034:	0800834d 	.word	0x0800834d
 8008038:	0800836f 	.word	0x0800836f
 800803c:	080083a7 	.word	0x080083a7
 8008040:	080083cb 	.word	0x080083cb

08008044 <_cleanup_r>:
 8008044:	4901      	ldr	r1, [pc, #4]	; (800804c <_cleanup_r+0x8>)
 8008046:	f000 b8af 	b.w	80081a8 <_fwalk_reent>
 800804a:	bf00      	nop
 800804c:	08007f85 	.word	0x08007f85

08008050 <__sfmoreglue>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	2568      	movs	r5, #104	; 0x68
 8008054:	1e4a      	subs	r2, r1, #1
 8008056:	4355      	muls	r5, r2
 8008058:	460e      	mov	r6, r1
 800805a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800805e:	f7ff fa83 	bl	8007568 <_malloc_r>
 8008062:	4604      	mov	r4, r0
 8008064:	b140      	cbz	r0, 8008078 <__sfmoreglue+0x28>
 8008066:	2100      	movs	r1, #0
 8008068:	e9c0 1600 	strd	r1, r6, [r0]
 800806c:	300c      	adds	r0, #12
 800806e:	60a0      	str	r0, [r4, #8]
 8008070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008074:	f7fb fe06 	bl	8003c84 <memset>
 8008078:	4620      	mov	r0, r4
 800807a:	bd70      	pop	{r4, r5, r6, pc}

0800807c <__sfp_lock_acquire>:
 800807c:	4801      	ldr	r0, [pc, #4]	; (8008084 <__sfp_lock_acquire+0x8>)
 800807e:	f000 b8b3 	b.w	80081e8 <__retarget_lock_acquire_recursive>
 8008082:	bf00      	nop
 8008084:	20000428 	.word	0x20000428

08008088 <__sfp_lock_release>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__sfp_lock_release+0x8>)
 800808a:	f000 b8ae 	b.w	80081ea <__retarget_lock_release_recursive>
 800808e:	bf00      	nop
 8008090:	20000428 	.word	0x20000428

08008094 <__sinit_lock_acquire>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__sinit_lock_acquire+0x8>)
 8008096:	f000 b8a7 	b.w	80081e8 <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20000423 	.word	0x20000423

080080a0 <__sinit_lock_release>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__sinit_lock_release+0x8>)
 80080a2:	f000 b8a2 	b.w	80081ea <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20000423 	.word	0x20000423

080080ac <__sinit>:
 80080ac:	b510      	push	{r4, lr}
 80080ae:	4604      	mov	r4, r0
 80080b0:	f7ff fff0 	bl	8008094 <__sinit_lock_acquire>
 80080b4:	69a3      	ldr	r3, [r4, #24]
 80080b6:	b11b      	cbz	r3, 80080c0 <__sinit+0x14>
 80080b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080bc:	f7ff bff0 	b.w	80080a0 <__sinit_lock_release>
 80080c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080c4:	6523      	str	r3, [r4, #80]	; 0x50
 80080c6:	4b13      	ldr	r3, [pc, #76]	; (8008114 <__sinit+0x68>)
 80080c8:	4a13      	ldr	r2, [pc, #76]	; (8008118 <__sinit+0x6c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	bf08      	it	eq
 80080d2:	2301      	moveq	r3, #1
 80080d4:	4620      	mov	r0, r4
 80080d6:	bf08      	it	eq
 80080d8:	61a3      	streq	r3, [r4, #24]
 80080da:	f000 f81f 	bl	800811c <__sfp>
 80080de:	6060      	str	r0, [r4, #4]
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f81b 	bl	800811c <__sfp>
 80080e6:	60a0      	str	r0, [r4, #8]
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f817 	bl	800811c <__sfp>
 80080ee:	2200      	movs	r2, #0
 80080f0:	2104      	movs	r1, #4
 80080f2:	60e0      	str	r0, [r4, #12]
 80080f4:	6860      	ldr	r0, [r4, #4]
 80080f6:	f7ff ff81 	bl	8007ffc <std>
 80080fa:	2201      	movs	r2, #1
 80080fc:	2109      	movs	r1, #9
 80080fe:	68a0      	ldr	r0, [r4, #8]
 8008100:	f7ff ff7c 	bl	8007ffc <std>
 8008104:	2202      	movs	r2, #2
 8008106:	2112      	movs	r1, #18
 8008108:	68e0      	ldr	r0, [r4, #12]
 800810a:	f7ff ff77 	bl	8007ffc <std>
 800810e:	2301      	movs	r3, #1
 8008110:	61a3      	str	r3, [r4, #24]
 8008112:	e7d1      	b.n	80080b8 <__sinit+0xc>
 8008114:	08008518 	.word	0x08008518
 8008118:	08008045 	.word	0x08008045

0800811c <__sfp>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	4607      	mov	r7, r0
 8008120:	f7ff ffac 	bl	800807c <__sfp_lock_acquire>
 8008124:	4b1e      	ldr	r3, [pc, #120]	; (80081a0 <__sfp+0x84>)
 8008126:	681e      	ldr	r6, [r3, #0]
 8008128:	69b3      	ldr	r3, [r6, #24]
 800812a:	b913      	cbnz	r3, 8008132 <__sfp+0x16>
 800812c:	4630      	mov	r0, r6
 800812e:	f7ff ffbd 	bl	80080ac <__sinit>
 8008132:	3648      	adds	r6, #72	; 0x48
 8008134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008138:	3b01      	subs	r3, #1
 800813a:	d503      	bpl.n	8008144 <__sfp+0x28>
 800813c:	6833      	ldr	r3, [r6, #0]
 800813e:	b30b      	cbz	r3, 8008184 <__sfp+0x68>
 8008140:	6836      	ldr	r6, [r6, #0]
 8008142:	e7f7      	b.n	8008134 <__sfp+0x18>
 8008144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008148:	b9d5      	cbnz	r5, 8008180 <__sfp+0x64>
 800814a:	4b16      	ldr	r3, [pc, #88]	; (80081a4 <__sfp+0x88>)
 800814c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008150:	60e3      	str	r3, [r4, #12]
 8008152:	6665      	str	r5, [r4, #100]	; 0x64
 8008154:	f000 f847 	bl	80081e6 <__retarget_lock_init_recursive>
 8008158:	f7ff ff96 	bl	8008088 <__sfp_lock_release>
 800815c:	2208      	movs	r2, #8
 800815e:	4629      	mov	r1, r5
 8008160:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008168:	6025      	str	r5, [r4, #0]
 800816a:	61a5      	str	r5, [r4, #24]
 800816c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008170:	f7fb fd88 	bl	8003c84 <memset>
 8008174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800817c:	4620      	mov	r0, r4
 800817e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008180:	3468      	adds	r4, #104	; 0x68
 8008182:	e7d9      	b.n	8008138 <__sfp+0x1c>
 8008184:	2104      	movs	r1, #4
 8008186:	4638      	mov	r0, r7
 8008188:	f7ff ff62 	bl	8008050 <__sfmoreglue>
 800818c:	4604      	mov	r4, r0
 800818e:	6030      	str	r0, [r6, #0]
 8008190:	2800      	cmp	r0, #0
 8008192:	d1d5      	bne.n	8008140 <__sfp+0x24>
 8008194:	f7ff ff78 	bl	8008088 <__sfp_lock_release>
 8008198:	230c      	movs	r3, #12
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	e7ee      	b.n	800817c <__sfp+0x60>
 800819e:	bf00      	nop
 80081a0:	08008518 	.word	0x08008518
 80081a4:	ffff0001 	.word	0xffff0001

080081a8 <_fwalk_reent>:
 80081a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ac:	4606      	mov	r6, r0
 80081ae:	4688      	mov	r8, r1
 80081b0:	2700      	movs	r7, #0
 80081b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ba:	f1b9 0901 	subs.w	r9, r9, #1
 80081be:	d505      	bpl.n	80081cc <_fwalk_reent+0x24>
 80081c0:	6824      	ldr	r4, [r4, #0]
 80081c2:	2c00      	cmp	r4, #0
 80081c4:	d1f7      	bne.n	80081b6 <_fwalk_reent+0xe>
 80081c6:	4638      	mov	r0, r7
 80081c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081cc:	89ab      	ldrh	r3, [r5, #12]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d907      	bls.n	80081e2 <_fwalk_reent+0x3a>
 80081d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081d6:	3301      	adds	r3, #1
 80081d8:	d003      	beq.n	80081e2 <_fwalk_reent+0x3a>
 80081da:	4629      	mov	r1, r5
 80081dc:	4630      	mov	r0, r6
 80081de:	47c0      	blx	r8
 80081e0:	4307      	orrs	r7, r0
 80081e2:	3568      	adds	r5, #104	; 0x68
 80081e4:	e7e9      	b.n	80081ba <_fwalk_reent+0x12>

080081e6 <__retarget_lock_init_recursive>:
 80081e6:	4770      	bx	lr

080081e8 <__retarget_lock_acquire_recursive>:
 80081e8:	4770      	bx	lr

080081ea <__retarget_lock_release_recursive>:
 80081ea:	4770      	bx	lr

080081ec <__swhatbuf_r>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	460e      	mov	r6, r1
 80081f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f4:	4614      	mov	r4, r2
 80081f6:	2900      	cmp	r1, #0
 80081f8:	461d      	mov	r5, r3
 80081fa:	b096      	sub	sp, #88	; 0x58
 80081fc:	da07      	bge.n	800820e <__swhatbuf_r+0x22>
 80081fe:	2300      	movs	r3, #0
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	89b3      	ldrh	r3, [r6, #12]
 8008204:	061a      	lsls	r2, r3, #24
 8008206:	d410      	bmi.n	800822a <__swhatbuf_r+0x3e>
 8008208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800820c:	e00e      	b.n	800822c <__swhatbuf_r+0x40>
 800820e:	466a      	mov	r2, sp
 8008210:	f000 f902 	bl	8008418 <_fstat_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	dbf2      	blt.n	80081fe <__swhatbuf_r+0x12>
 8008218:	9a01      	ldr	r2, [sp, #4]
 800821a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800821e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008222:	425a      	negs	r2, r3
 8008224:	415a      	adcs	r2, r3
 8008226:	602a      	str	r2, [r5, #0]
 8008228:	e7ee      	b.n	8008208 <__swhatbuf_r+0x1c>
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	2000      	movs	r0, #0
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	b016      	add	sp, #88	; 0x58
 8008232:	bd70      	pop	{r4, r5, r6, pc}

08008234 <__smakebuf_r>:
 8008234:	898b      	ldrh	r3, [r1, #12]
 8008236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008238:	079d      	lsls	r5, r3, #30
 800823a:	4606      	mov	r6, r0
 800823c:	460c      	mov	r4, r1
 800823e:	d507      	bpl.n	8008250 <__smakebuf_r+0x1c>
 8008240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	2301      	movs	r3, #1
 800824a:	6163      	str	r3, [r4, #20]
 800824c:	b002      	add	sp, #8
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	466a      	mov	r2, sp
 8008252:	ab01      	add	r3, sp, #4
 8008254:	f7ff ffca 	bl	80081ec <__swhatbuf_r>
 8008258:	9900      	ldr	r1, [sp, #0]
 800825a:	4605      	mov	r5, r0
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff f983 	bl	8007568 <_malloc_r>
 8008262:	b948      	cbnz	r0, 8008278 <__smakebuf_r+0x44>
 8008264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008268:	059a      	lsls	r2, r3, #22
 800826a:	d4ef      	bmi.n	800824c <__smakebuf_r+0x18>
 800826c:	f023 0303 	bic.w	r3, r3, #3
 8008270:	f043 0302 	orr.w	r3, r3, #2
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	e7e3      	b.n	8008240 <__smakebuf_r+0xc>
 8008278:	4b0d      	ldr	r3, [pc, #52]	; (80082b0 <__smakebuf_r+0x7c>)
 800827a:	62b3      	str	r3, [r6, #40]	; 0x28
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	6020      	str	r0, [r4, #0]
 8008280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	9b00      	ldr	r3, [sp, #0]
 8008288:	6120      	str	r0, [r4, #16]
 800828a:	6163      	str	r3, [r4, #20]
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	b15b      	cbz	r3, 80082a8 <__smakebuf_r+0x74>
 8008290:	4630      	mov	r0, r6
 8008292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008296:	f000 f8d1 	bl	800843c <_isatty_r>
 800829a:	b128      	cbz	r0, 80082a8 <__smakebuf_r+0x74>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	89a0      	ldrh	r0, [r4, #12]
 80082aa:	4305      	orrs	r5, r0
 80082ac:	81a5      	strh	r5, [r4, #12]
 80082ae:	e7cd      	b.n	800824c <__smakebuf_r+0x18>
 80082b0:	08008045 	.word	0x08008045

080082b4 <_malloc_usable_size_r>:
 80082b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082b8:	1f18      	subs	r0, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bfbc      	itt	lt
 80082be:	580b      	ldrlt	r3, [r1, r0]
 80082c0:	18c0      	addlt	r0, r0, r3
 80082c2:	4770      	bx	lr

080082c4 <_raise_r>:
 80082c4:	291f      	cmp	r1, #31
 80082c6:	b538      	push	{r3, r4, r5, lr}
 80082c8:	4604      	mov	r4, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	d904      	bls.n	80082d8 <_raise_r+0x14>
 80082ce:	2316      	movs	r3, #22
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082da:	b112      	cbz	r2, 80082e2 <_raise_r+0x1e>
 80082dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e0:	b94b      	cbnz	r3, 80082f6 <_raise_r+0x32>
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f830 	bl	8008348 <_getpid_r>
 80082e8:	462a      	mov	r2, r5
 80082ea:	4601      	mov	r1, r0
 80082ec:	4620      	mov	r0, r4
 80082ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f2:	f000 b817 	b.w	8008324 <_kill_r>
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d00a      	beq.n	8008310 <_raise_r+0x4c>
 80082fa:	1c59      	adds	r1, r3, #1
 80082fc:	d103      	bne.n	8008306 <_raise_r+0x42>
 80082fe:	2316      	movs	r3, #22
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	2001      	movs	r0, #1
 8008304:	e7e7      	b.n	80082d6 <_raise_r+0x12>
 8008306:	2400      	movs	r4, #0
 8008308:	4628      	mov	r0, r5
 800830a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800830e:	4798      	blx	r3
 8008310:	2000      	movs	r0, #0
 8008312:	e7e0      	b.n	80082d6 <_raise_r+0x12>

08008314 <raise>:
 8008314:	4b02      	ldr	r3, [pc, #8]	; (8008320 <raise+0xc>)
 8008316:	4601      	mov	r1, r0
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	f7ff bfd3 	b.w	80082c4 <_raise_r>
 800831e:	bf00      	nop
 8008320:	2000000c 	.word	0x2000000c

08008324 <_kill_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	2300      	movs	r3, #0
 8008328:	4d06      	ldr	r5, [pc, #24]	; (8008344 <_kill_r+0x20>)
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	4611      	mov	r1, r2
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	f7f9 fb41 	bl	80019b8 <_kill>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d102      	bne.n	8008340 <_kill_r+0x1c>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	b103      	cbz	r3, 8008340 <_kill_r+0x1c>
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	2000041c 	.word	0x2000041c

08008348 <_getpid_r>:
 8008348:	f7f9 bb2f 	b.w	80019aa <_getpid>

0800834c <__sread>:
 800834c:	b510      	push	{r4, lr}
 800834e:	460c      	mov	r4, r1
 8008350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008354:	f000 f894 	bl	8008480 <_read_r>
 8008358:	2800      	cmp	r0, #0
 800835a:	bfab      	itete	ge
 800835c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800835e:	89a3      	ldrhlt	r3, [r4, #12]
 8008360:	181b      	addge	r3, r3, r0
 8008362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008366:	bfac      	ite	ge
 8008368:	6563      	strge	r3, [r4, #84]	; 0x54
 800836a:	81a3      	strhlt	r3, [r4, #12]
 800836c:	bd10      	pop	{r4, pc}

0800836e <__swrite>:
 800836e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008372:	461f      	mov	r7, r3
 8008374:	898b      	ldrh	r3, [r1, #12]
 8008376:	4605      	mov	r5, r0
 8008378:	05db      	lsls	r3, r3, #23
 800837a:	460c      	mov	r4, r1
 800837c:	4616      	mov	r6, r2
 800837e:	d505      	bpl.n	800838c <__swrite+0x1e>
 8008380:	2302      	movs	r3, #2
 8008382:	2200      	movs	r2, #0
 8008384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008388:	f000 f868 	bl	800845c <_lseek_r>
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	4632      	mov	r2, r6
 8008390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008394:	81a3      	strh	r3, [r4, #12]
 8008396:	4628      	mov	r0, r5
 8008398:	463b      	mov	r3, r7
 800839a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800839e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a2:	f000 b817 	b.w	80083d4 <_write_r>

080083a6 <__sseek>:
 80083a6:	b510      	push	{r4, lr}
 80083a8:	460c      	mov	r4, r1
 80083aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ae:	f000 f855 	bl	800845c <_lseek_r>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	bf15      	itete	ne
 80083b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083c2:	81a3      	strheq	r3, [r4, #12]
 80083c4:	bf18      	it	ne
 80083c6:	81a3      	strhne	r3, [r4, #12]
 80083c8:	bd10      	pop	{r4, pc}

080083ca <__sclose>:
 80083ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ce:	f000 b813 	b.w	80083f8 <_close_r>
	...

080083d4 <_write_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	2200      	movs	r2, #0
 80083de:	4d05      	ldr	r5, [pc, #20]	; (80083f4 <_write_r+0x20>)
 80083e0:	602a      	str	r2, [r5, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f7f9 fb1f 	bl	8001a26 <_write>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_write_r+0x1e>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_write_r+0x1e>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	2000041c 	.word	0x2000041c

080083f8 <_close_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	2300      	movs	r3, #0
 80083fc:	4d05      	ldr	r5, [pc, #20]	; (8008414 <_close_r+0x1c>)
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7f9 fb2b 	bl	8001a5e <_close>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_close_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_close_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	2000041c 	.word	0x2000041c

08008418 <_fstat_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	2300      	movs	r3, #0
 800841c:	4d06      	ldr	r5, [pc, #24]	; (8008438 <_fstat_r+0x20>)
 800841e:	4604      	mov	r4, r0
 8008420:	4608      	mov	r0, r1
 8008422:	4611      	mov	r1, r2
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	f7f9 fb25 	bl	8001a74 <_fstat>
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d102      	bne.n	8008434 <_fstat_r+0x1c>
 800842e:	682b      	ldr	r3, [r5, #0]
 8008430:	b103      	cbz	r3, 8008434 <_fstat_r+0x1c>
 8008432:	6023      	str	r3, [r4, #0]
 8008434:	bd38      	pop	{r3, r4, r5, pc}
 8008436:	bf00      	nop
 8008438:	2000041c 	.word	0x2000041c

0800843c <_isatty_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	2300      	movs	r3, #0
 8008440:	4d05      	ldr	r5, [pc, #20]	; (8008458 <_isatty_r+0x1c>)
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	f7f9 fb23 	bl	8001a92 <_isatty>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_isatty_r+0x1a>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_isatty_r+0x1a>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	2000041c 	.word	0x2000041c

0800845c <_lseek_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4604      	mov	r4, r0
 8008460:	4608      	mov	r0, r1
 8008462:	4611      	mov	r1, r2
 8008464:	2200      	movs	r2, #0
 8008466:	4d05      	ldr	r5, [pc, #20]	; (800847c <_lseek_r+0x20>)
 8008468:	602a      	str	r2, [r5, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	f7f9 fb1b 	bl	8001aa6 <_lseek>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_lseek_r+0x1e>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	b103      	cbz	r3, 800847a <_lseek_r+0x1e>
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	2000041c 	.word	0x2000041c

08008480 <_read_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	2200      	movs	r2, #0
 800848a:	4d05      	ldr	r5, [pc, #20]	; (80084a0 <_read_r+0x20>)
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f7f9 faac 	bl	80019ec <_read>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_read_r+0x1e>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_read_r+0x1e>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	2000041c 	.word	0x2000041c

080084a4 <_init>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr

080084b0 <_fini>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr
